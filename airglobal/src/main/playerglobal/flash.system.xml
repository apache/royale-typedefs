<?xml version="1.0" encoding="UTF-8"?><apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.system" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.system</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.system:ImageDecodingPolicy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ImageDecodingPolicy</apiName><shortdesc class="- topic/shortdesc ">
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
 The ImageDecodingPolicy class defines values for the imageDecodingPolicy property 
 of the LoaderContext class.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The ImageDecodingPolicy class defines values for the imageDecodingPolicy property 
 of the LoaderContext class.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The ImageDecodingPolicy class defines values for the <codeph class="+ topic/ph pr-d/codeph ">imageDecodingPolicy</codeph> property 
 of the LoaderContext class.
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.system.xml#LoaderContext/imageDecodingPolicy" class="- topic/link "><linktext class="- topic/linktext ">LoaderContext.imageDecodingPolicy</linktext></link></related-links><apiValue id="flash.system:ImageDecodingPolicy:ON_DEMAND" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ON_DEMAND</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies that the image being loaded will not be decoded until needed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">onDemand</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies that the image being loaded will not be decoded until needed.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ImageDecodingPolicy:ON_LOAD" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ON_LOAD</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies that the image will be decoded when it is loaded, before the 
	 complete event is sent.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">onLoad</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies that the image will be decoded when it is loaded, before the 
	 complete event is sent. 
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:SystemUpdaterType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SystemUpdaterType</apiName><shortdesc class="- topic/shortdesc ">
	 The SystemUpdaterType class provides constants for a system update.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The SystemUpdaterType class provides constants for a system update. These constants
	 are used in the <codeph class="+ topic/ph pr-d/codeph ">SystemUpdater.update()</codeph> function.
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: The SystemUpdater API is supported on desktop platforms.</p>
	 </apiDesc></apiClassifierDetail><apiValue id="flash.system:SystemUpdaterType:DRM" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DRM</apiName><shortdesc class="- topic/shortdesc ">
		Updates the DRM module.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">drm</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Updates the DRM module.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:SystemUpdaterType:SYSTEM" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SYSTEM</apiName><shortdesc class="- topic/shortdesc ">
		Updates the player runtime itself.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">system</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Updates the player runtime itself.
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:IMEConversionMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IMEConversionMode</apiName><shortdesc class="- topic/shortdesc ">
 This class contains constants for use with the IME.conversionMode
 property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 This class contains constants for use with the <codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph>
 property. Setting <codeph class="+ topic/ph pr-d/codeph ">conversionMode</codeph> to either 
 <codeph class="+ topic/ph pr-d/codeph ">ALPHANUMERIC_FULL</codeph> or <codeph class="+ topic/ph pr-d/codeph ">JAPANESE_KATAKANA_FULL</codeph> causes the
 player to use a full width font, whereas using <codeph class="+ topic/ph pr-d/codeph ">ALPHANUMERIC_HALF</codeph> or
 <codeph class="+ topic/ph pr-d/codeph ">JAPANESE_KATAKANA_HALF</codeph> uses a half width font.
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links><apiValue id="flash.system:IMEConversionMode:ALPHANUMERIC_FULL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ALPHANUMERIC_FULL</apiName><shortdesc class="- topic/shortdesc ">
	 The string "ALPHANUMERIC_FULL", for use with the  
	 IME.conversionMode property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">ALPHANUMERIC_FULL</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The string <codeph class="+ topic/ph pr-d/codeph ">"ALPHANUMERIC_FULL"</codeph>, for use with the  
	 <codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> property.
	 This constant is used with all IMEs.
	 Use the syntax <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.ALPHANUMERIC_FULL</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:ALPHANUMERIC_HALF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ALPHANUMERIC_HALF</apiName><shortdesc class="- topic/shortdesc ">
	 The string "ALPHANUMERIC_HALF", for use with the 
	 IME.conversionMode property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">ALPHANUMERIC_HALF</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The string <codeph class="+ topic/ph pr-d/codeph ">"ALPHANUMERIC_HALF"</codeph>, for use with the 
	 <codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> property.
	 This constant is used with all IMEs.
	 Use the syntax <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.ALPHANUMERIC_HALF</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:CHINESE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CHINESE</apiName><shortdesc class="- topic/shortdesc ">
	 The string "CHINESE", for use with the 
	 IME.conversionMode property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">CHINESE</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The string <codeph class="+ topic/ph pr-d/codeph ">"CHINESE"</codeph>, for use with the 
	 <codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> property.
	 This constant is used with simplified and traditional Chinese IMEs.
	 Use the syntax <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.CHINESE</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:JAPANESE_HIRAGANA" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">JAPANESE_HIRAGANA</apiName><shortdesc class="- topic/shortdesc ">
	 The string "JAPANESE_HIRAGANA", for use with the
	 IME.conversionMode property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">JAPANESE_HIRAGANA</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The string <codeph class="+ topic/ph pr-d/codeph ">"JAPANESE_HIRAGANA"</codeph>, for use with the
	 <codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> property. 
	 This constant is used with Japanese IMEs.
	 Use the syntax <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.JAPANESE_HIRAGANA</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:JAPANESE_KATAKANA_FULL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">JAPANESE_KATAKANA_FULL</apiName><shortdesc class="- topic/shortdesc ">
	 The string "JAPANESE_KATAKANA_FULL", for use with the 
	 IME.conversionMode property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">JAPANESE_KATAKANA_FULL</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The string <codeph class="+ topic/ph pr-d/codeph ">"JAPANESE_KATAKANA_FULL"</codeph>, for use with the 
	 <codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> property.
	 This constant is used with Japanese IMEs.
	 Use the syntax <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.JAPANESE_KATAKANA_FULL</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:JAPANESE_KATAKANA_HALF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">JAPANESE_KATAKANA_HALF</apiName><shortdesc class="- topic/shortdesc ">
	 The string "JAPANESE_KATAKANA_HALF", for use with the 
	 IME.conversionMode property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">JAPANESE_KATAKANA_HALF</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The string <codeph class="+ topic/ph pr-d/codeph ">"JAPANESE_KATAKANA_HALF"</codeph>, for use with the 
	 <codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> property. 
	 This constant is used with Japanese IMEs.
	 Use the syntax <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.JAPANESE_KATAKANA_HALF</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:KOREAN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">KOREAN</apiName><shortdesc class="- topic/shortdesc ">
	 The string "KOREAN", for use with the 
	 IME.conversionMode property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">KOREAN</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The string <codeph class="+ topic/ph pr-d/codeph ">"KOREAN"</codeph>, for use with the 
	 <codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> property.
	 This constant is used with Korean IMEs.
	 Use the syntax <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.KOREAN</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:UNKNOWN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UNKNOWN</apiName><shortdesc class="- topic/shortdesc ">
	 The string "UNKNOWN", which can be returned by a call to
	 the IME.conversionMode property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">UNKNOWN</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The string <codeph class="+ topic/ph pr-d/codeph ">"UNKNOWN"</codeph>, which can be returned by a call to
	 the <codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph> property. This value cannot be set, 
	 and is returned only if the player is unable to identify the currently 
	 active IME.
	 Use the syntax <codeph class="+ topic/ph pr-d/codeph ">IMEConversionMode.UNKNOWN</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/conversionMode" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.conversionMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:SecurityPanel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SecurityPanel</apiName><shortdesc class="- topic/shortdesc ">
 The SecurityPanel class provides values for specifying
 which Security Settings panel you want to display.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The SecurityPanel class provides values for specifying
 which Security Settings panel you want to display.
 
 <p class="- topic/p ">This class contains static constants that are used with the 
 <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph> method. You cannot create new instances
 of the SecurityPanel class.</p>
 
 </apiDesc><example conref="examples\SecurityExample.as" class="- topic/example "> The following example shows how a <codeph class="+ topic/ph pr-d/codeph ">click</codeph> event on a Sprite object can be
 used to show the Local Storage Settings panel of the Flash Player Settings.  An orange box is added to the 
 stage using <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph>.  In <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph>, a <codeph class="+ topic/ph pr-d/codeph ">click</codeph> event listener is 
 added named <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>, which responds to <codeph class="+ topic/ph pr-d/codeph ">click</codeph> events by directing
 Flash Player to open its Local Storage Settings panel.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.*;
    import flash.system.Security;
    import flash.system.SecurityPanel;

    public class SecurityExample extends Sprite {
        private var bgColor:uint = 0xFFCC00;
        private var size:uint = 100;

        public function SecurityExample() {
            draw();
        }

        private function draw():void {
            var child:Sprite = new Sprite();
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            child.buttonMode = true;

            var label:TextField = new TextField();
            label.text = "settings";
            label.selectable = false;
            label.mouseEnabled = false;
            child.addChild(label);

            child.addEventListener(MouseEvent.CLICK, clickHandler);
            addChild(child);
        }

        private function clickHandler(event:MouseEvent):void {
            Security.showSettings(SecurityPanel.LOCAL_STORAGE);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiValue id="flash.system:SecurityPanel:CAMERA" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CAMERA</apiName><shortdesc class="- topic/shortdesc ">
	 When passed to Security.showSettings(), displays the
	 Camera panel in Flash Player Settings.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.CAMERA, CAMERA
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">camera</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 When passed to <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph>, displays the
	 Camera panel in Flash Player Settings.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:DEFAULT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEFAULT</apiName><shortdesc class="- topic/shortdesc ">
	 When passed to Security.showSettings(), displays the panel
	 that was open the last time the user closed the Flash Player Settings.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.DEFAULT, DEFAULT
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">default</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 When passed to <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph>, displays the panel
	 that was open the last time the user closed the Flash Player Settings.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:DISPLAY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DISPLAY</apiName><shortdesc class="- topic/shortdesc ">
	 When passed to Security.showSettings(), displays the
	 Display panel in Flash Player Settings.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.DISPLAY, DISPLAY
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">display</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 When passed to <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph>, displays the
	 Display panel in Flash Player Settings.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:LOCAL_STORAGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOCAL_STORAGE</apiName><shortdesc class="- topic/shortdesc ">
	 When passed to Security.showSettings(), displays the
	 Local Storage Settings panel in Flash Player Settings.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.LOCAL_STORAGE, LOCAL_STORAGE
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">localStorage</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 When passed to <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph>, displays the
	 Local Storage Settings panel in Flash Player Settings.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:MICROPHONE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MICROPHONE</apiName><shortdesc class="- topic/shortdesc ">
	 When passed to Security.showSettings(), displays the
	 Microphone panel in Flash Player Settings.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.MICROPHONE, MICROPHONE
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">microphone</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 When passed to <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph>, displays the
	 Microphone panel in Flash Player Settings.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:PRIVACY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">PRIVACY</apiName><shortdesc class="- topic/shortdesc ">
	 When passed to Security.showSettings(), displays the
	 Privacy Settings panel in Flash Player Settings.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.PRIVACY, PRIVACY
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">privacy</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 When passed to <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph>, displays the
	 Privacy Settings panel in Flash Player Settings.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:SETTINGS_MANAGER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SETTINGS_MANAGER</apiName><shortdesc class="- topic/shortdesc ">
	 When passed to Security.showSettings(), displays the
	 Settings Manager (in a separate browser window).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.SETTINGS_MANAGER, SETTINGS_MANAGER
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">settingsManager</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 When passed to <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph>, displays the
	 Settings Manager (in a separate browser window).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:TouchscreenType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">TouchscreenType</apiName><shortdesc class="- topic/shortdesc ">
 The TouchscreenType class is an enumeration class that provides values for the different types of touch screens.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The TouchscreenType class is an enumeration class that provides values for the different types of touch screens.
 
 <p class="- topic/p ">Use the values defined by the TouchscreenType class with the <codeph class="+ topic/ph pr-d/codeph ">Capabilities.touchscreenType</codeph>
 property.</p>
 
 </apiDesc><example conref="examples\KeyboardType.as" class="- topic/example "> The following example is a simple test that indicates the current state of the "Num Lock" and "Caps Lock" keys
 as well as the type of keybaord and touch screen type in the running environment. When testing this example, click the
 text field to see the property values:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.events.~~;
import flash.display.~~;
import flash.ui.Keyboard;
import flash.system.Capabilities;
import flash.text.TextField;


var keyboardInfoTxt:TextField = new TextField();
keyboardInfoTxt.x = 30;
keyboardInfoTxt.y = 50;
keyboardInfoTxt.width = 300;
keyboardInfoTxt.height = 100;
keyboardInfoTxt.border = true;

addChild(keyboardInfoTxt);

addEventListener (MouseEvent.CLICK, getScreenKeyboardType);

function getScreenKeyboardType(e:MouseEvent):void{
    keyboardInfoTxt.text= "Caps Lock is : " + String(flash.ui.Keyboard.capsLock)+ "\n" + 
    "Num Lock is : " + String(flash.ui.Keyboard.numLock) +"\n" + 
    "Has Virtual Keyboard : " + String(flash.ui.Keyboard.hasVirtualKeyboard) + "\n" + 
    "Physical Keyboard Type : " + flash.ui.Keyboard.physicalKeyboardType + "\n" + 
    "flash.system.Capabilities.touchscreenType is : " + flash.system.Capabilities.touchscreenType;
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Capabilities/touchscreenType" class="- topic/link "><linktext class="- topic/linktext ">Capabilities.touchscreenType</linktext></link><link href="flash.ui.xml#Mouse/supportsCursor" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.Mouse.supportsCursor</linktext></link></related-links><apiValue id="flash.system:TouchscreenType:FINGER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">FINGER</apiName><shortdesc class="- topic/shortdesc ">
	 A touchscreen designed to respond to finger touches.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">finger</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 A touchscreen designed to respond to finger touches.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:TouchscreenType:NONE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NONE</apiName><shortdesc class="- topic/shortdesc ">
	 The computer or device does not have a supported touchscreen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">none</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The computer or device does not have a supported touchscreen.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:TouchscreenType:STYLUS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STYLUS</apiName><shortdesc class="- topic/shortdesc ">
	 A touchscreen designed for use with a stylus.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">stylus</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 A touchscreen designed for use with a stylus.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:ApplicationDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ApplicationDomain</apiName><shortdesc class="- topic/shortdesc ">
 The ApplicationDomain class is a container for discrete groups of class definitions.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Security considerations for application domains are discussed in the 
 applicationDomain property entries of URLRequest and LoaderInfo. 
 
 </internal></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The ApplicationDomain class is a container for discrete groups of class definitions.
 Application domains are used to partition classes that are in the same security domain. 
 They allow multiple definitions of the same class to exist and allow children to reuse parent
 definitions.
 
 <p class="- topic/p ">Application domains are used when an external SWF file is loaded through the Loader class.
 All ActionScript 3.0 definitions in the loaded SWF file are stored in the application
 domain, which is specified by the <codeph class="+ topic/ph pr-d/codeph ">applicationDomain</codeph> property of the LoaderContext 
 object that you pass as a <codeph class="+ topic/ph pr-d/codeph ">context</codeph> parameter of the Loader object's <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> or 
 <codeph class="+ topic/ph pr-d/codeph ">loadBytes()</codeph> method. The LoaderInfo object also contains an
 <codeph class="+ topic/ph pr-d/codeph ">applicationDomain</codeph> property, which is read-only.</p>
 
 <p class="- topic/p ">All code in a SWF file is defined to exist in an application domain. The current application 
 domain is where your main application runs. The system domain contains all application domains,
 including the current domain, which means that it contains all Flash Player classes.</p>
 
 <p class="- topic/p ">Every application domain, except the system domain, has an associated parent domain. 
 The parent domain of your main application's application domain is the system domain. 
 Loaded classes are defined only when their parent doesn't already define them. 
 You cannot override a loaded class definition with a newer definition.</p>
 
 <p class="- topic/p ">For usage examples of application domains, see the <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</p>
 
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain()</codeph> constructor function allows you to create an ApplicationDomain object.</p>
 
 </apiDesc><example conref="examples\ApplicationDomainExample.as" class="- topic/example "> The following example demonstrates runtime class loading as well as how to call public methods of a class that reside in another SWF.
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Notes:</b></p>
 <ul class="- topic/ul "><li class="- topic/li ">Since the ClassLoader class loads a SWF file, local security needs to be at the file system level.</li><li class="- topic/li ">To run this example, you must have a swf file called RuntimeClasses.swf existing in the same folder 
        as the ApplicationDomainExample.swf file.</li></ul>
 
 <p class="- topic/p ">Begin by creating the RuntimeClasses.swf file from the following code:</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
   import flash.display.Sprite;
   public class RuntimeClasses extends Sprite
   {
     public function RuntimeClasses()
     {}
      
     public function greet():String {
       return("Hello World");
     }
   }
 }
 </codeblock>
 
 <p class="- topic/p ">Then implement the following code:</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;
    import flash.errors.IllegalOperationError;
    import flash.events.Event;
    import flash.text.TextField;

    public class ApplicationDomainExample extends Sprite {
        private var loader:ClassLoader;
        private var tf:TextField = new TextField();

        public function ApplicationDomainExample() {
            addChild(tf);

            loader = new ClassLoader();
            loader.addEventListener(ClassLoader.LOAD_ERROR,loadErrorHandler);
            loader.addEventListener(ClassLoader.CLASS_LOADED,classLoadedHandler);
            loader.load("RuntimeClasses.swf");
        }

        private function loadErrorHandler(e:Event):void {
            tf.text = "Load failed";
            throw new IllegalOperationError("Cannot load the specified file.");
        }

        private function classLoadedHandler(e:Event):void {
            var runtimeClassRef:Class = loader.getClass("RuntimeClasses");
            var greeter:Object = new runtimeClassRef();

            tf.text = greeter.greet();
        }
    }
}

import flash.display.Loader;
import flash.errors.IllegalOperationError;
import flash.events.Event;
import flash.events.EventDispatcher;
import flash.events.IOErrorEvent;
import flash.events.SecurityErrorEvent;
import flash.net.URLRequest;
import flash.system.ApplicationDomain;
import flash.system.LoaderContext;

class ClassLoader extends EventDispatcher {
    public static var CLASS_LOADED:String = "classLoaded";
    public static var LOAD_ERROR:String = "loadError";
    private var loader:Loader;
    private var swfLib:String;
    private var request:URLRequest;
    private var loadedClass:Class;

    public function ClassLoader() {

        loader = new Loader();
        loader.contentLoaderInfo.addEventListener(Event.COMPLETE,completeHandler);
        loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
        loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR,securityErrorHandler);
    }

    public function load(lib:String):void {
        swfLib = lib;
        request = new URLRequest(swfLib);
        var context:LoaderContext = new LoaderContext();
        context.applicationDomain=ApplicationDomain.currentDomain;
        loader.load(request,context);
    }

    public function getClass(className:String):Class {
        try {
            return loader.contentLoaderInfo.applicationDomain.getDefinition(className)  as  Class;
        } catch (e:Error) {
            throw new IllegalOperationError(className + " definition not found in " + swfLib);
        }
        return null;
    }

    private function completeHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.CLASS_LOADED));
    }

    private function ioErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }

    private function securityErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }
}
</codeblock></example><example conref="examples\ApplicationDomainExample.2.as" class="- topic/example "> If multiple SWF files contain compiled classes with the same name but provide different implementation, you can partition the classes of externally loaded SWF files separate from the classes of each other following this example.
 Previously, the child SWF was instructed to use <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.currentDomain</codeph>. In this case, a new <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain</codeph> is created,
 so that then the properties and methods of the <codeph class="+ topic/ph pr-d/codeph ">Greeter</codeph> class of whichever SWF loads second will not replace the properties and methods of the first <codeph class="+ topic/ph pr-d/codeph ">Greeter</codeph> class.
 You can test this by modifying the <codeph class="+ topic/ph pr-d/codeph ">context.applicationDomain</codeph> property in the <codeph class="+ topic/ph pr-d/codeph ">load</codeph> method of <codeph class="+ topic/ph pr-d/codeph ">ClassLoader</codeph>.
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Notes:</b></p>
 <ul class="- topic/ul "><li class="- topic/li ">Since the ClassLoader class loads a SWF file, local security needs to be at the file system level.</li><li class="- topic/li ">To run this example, you must have two SWF files called Greeter.swf existing in an "en" and "es" folder respectively.</li></ul>
 
 <p class="- topic/p ">Create a Greeter.as file in the "en" directory with the following code:</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
    import flash.display.Sprite;
    public class Greeter extends Sprite
    {
        public function Greeter()
        {
        }
        
        public function greet():String {
            return("Good Morning");
        }
    }
 }
 </codeblock>
 <p class="- topic/p ">Then create a very similar Greeter.as file in the "es" directory:</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
    import flash.display.Sprite;
    public class Greeter extends Sprite
    {
        public function Greeter()
        {
        }
        
        public function greet():String {
            return("Buenos Dias");
        }
    }
}
 </codeblock>
 
 <p class="- topic/p ">Compile SWF files for both and then implement the following code:</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;
    import flash.errors.IllegalOperationError;
    import flash.events.Event;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class ApplicationDomainExample2 extends Sprite {
        private var spanishGreeterLoader:ClassLoader;
        private var englishGreeterLoader:ClassLoader;
        private var tf:TextField = new TextField();
        private var greetersLoaded:uint = 0;

        public function ApplicationDomainExample2() {
            tf.autoSize = TextFieldAutoSize.LEFT;
            addChild(tf);

            spanishGreeterLoader = new ClassLoader();
            spanishGreeterLoader.addEventListener(ClassLoader.LOAD_ERROR,loadErrorHandler);
            spanishGreeterLoader.addEventListener(ClassLoader.CLASS_LOADED,classLoadedHandler);
            spanishGreeterLoader.load("es/Greeter.swf");
            
            englishGreeterLoader = new ClassLoader();
            englishGreeterLoader.addEventListener(ClassLoader.LOAD_ERROR,loadErrorHandler);
            englishGreeterLoader.addEventListener(ClassLoader.CLASS_LOADED,classLoadedHandler);
            englishGreeterLoader.load("en/Greeter.swf");
        }

        private function loadErrorHandler(e:Event):void {
            tf.text = "Load failed";
            throw new IllegalOperationError("Cannot load the specified file.");
        }

        private function classLoadedHandler(e:Event):void {
            greetersLoaded++;
            if(greetersLoaded == 2) {
                greet();    
            }
        }
        
        private function greet():void {
            var spanishGreeter:Class = spanishGreeterLoader.getClass("Greeter");
            var englishGreeter:Class = englishGreeterLoader.getClass("Greeter");
            var greeter1 = new spanishGreeter();
            var greeter2 = new englishGreeter();
            
            tf.text = greeter1.greet() + "\n" + greeter2.greet();
        }
    }
}

import flash.display.Loader;
import flash.errors.IllegalOperationError;
import flash.events.Event;
import flash.events.EventDispatcher;
import flash.events.IOErrorEvent;
import flash.events.SecurityErrorEvent;
import flash.net.URLRequest;
import flash.system.ApplicationDomain;
import flash.system.LoaderContext;

class ClassLoader extends EventDispatcher {
    public static var CLASS_LOADED:String = "classLoaded";
    public static var LOAD_ERROR:String = "loadError";
    private var loader:Loader;
    private var swfLib:String;
    private var request:URLRequest;
    private var loadedClass:Class;

    public function ClassLoader() {

        loader = new Loader();
        loader.contentLoaderInfo.addEventListener(Event.COMPLETE,completeHandler);
        loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
        loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR,securityErrorHandler);
    }

    public function load(lib:String):void {
        swfLib = lib;
        request = new URLRequest(swfLib);
        var context:LoaderContext = new LoaderContext();
//        context.applicationDomain = ApplicationDomain.currentDomain;
        context.applicationDomain = new ApplicationDomain();
        loader.load(request,context);
    }

    public function getClass(className:String):Class {
        try {
            return loader.contentLoaderInfo.applicationDomain.getDefinition(className)  as  Class;
        } catch (e:Error) {
            throw new IllegalOperationError(className + " definition not found in " + swfLib);
        }
        return null;
    }

    private function completeHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.CLASS_LOADED));
    }

    private function ioErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }

    private function securityErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.display.xml#LoaderInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo</linktext></link><link href="flash.net.xml#URLRequest" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequest</linktext></link><link href="flash.system.xml#LoaderContext" class="- topic/link "><linktext class="- topic/linktext ">flash.system.LoaderContext</linktext></link></related-links><apiConstructor id="flash.system:ApplicationDomain:ApplicationDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ApplicationDomain</apiName><shortdesc class="- topic/shortdesc ">
     Creates a new application domain.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">parentDomain</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.system:ApplicationDomain</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If no parent domain is passed in, this application domain takes the system domain as its parent.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a new application domain.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.system:ApplicationDomain:getDefinition" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDefinition</apiName><shortdesc class="- topic/shortdesc ">
     Gets a public definition from the specified application domain.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>throws SecurityError The definition belongs to a domain to which
     the calling code does not have access.
     
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">No public definition exists with the
     specified name.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ReferenceError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ReferenceError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object associated with the definition.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the definition.
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gets a public definition from the specified application domain.
     The definition can be that of a class, a namespace, or a function.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:ApplicationDomain:hasDefinition" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasDefinition</apiName><shortdesc class="- topic/shortdesc ">
     Checks to see if a public definition exists within the specified application domain.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value of <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the specified definition exists; otherwise, <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the definition.
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Checks to see if a public definition exists within the specified application domain.
     The definition can be that of a class, a namespace, or a function.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.system:ApplicationDomain:MIN_DOMAIN_MEMORY_LENGTH:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIN_DOMAIN_MEMORY_LENGTH</apiName><shortdesc class="- topic/shortdesc ">
     Gets the minimum memory object length required to be used as
     ApplicationDomain.domainMemory.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gets the minimum memory object length required to be used as
     ApplicationDomain.domainMemory.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ApplicationDomain:currentDomain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">currentDomain</apiName><shortdesc class="- topic/shortdesc ">
     Gets the current application domain in which your code is executing.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Question: Do you call System.currentDomain? or Loader.currentDomain or request.currentDomain?
     
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.system:ApplicationDomain</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gets the current application domain in which your code is executing.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ApplicationDomain:domainMemory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">domainMemory</apiName><shortdesc class="- topic/shortdesc ">
     Gets and sets the object on which domain-global memory operations
     will operate within this ApplicationDomain.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.utils:ByteArray</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gets and sets the object on which domain-global memory operations
     will operate within this ApplicationDomain.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ApplicationDomain:parentDomain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">parentDomain</apiName><shortdesc class="- topic/shortdesc ">
     Gets the parent domain of this application domain.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.system:ApplicationDomain</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gets the parent domain of this application domain.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:Security" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Security</apiName><shortdesc class="- topic/shortdesc ">
 The Security class lets you specify how content in different domains can communicate with 
 each other.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, XMLNode object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The Security class lets you specify how content in different domains can communicate with 
 each other.
 
 </apiDesc><example conref="examples\SecurityExample.as" class="- topic/example "> The following example shows how a <codeph class="+ topic/ph pr-d/codeph ">click</codeph> event on a Sprite object can be
 used to show the Local Storage Settings panel of the Flash Player Settings.  An orange box is added to the 
 stage using <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph>.  In <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph>, a <codeph class="+ topic/ph pr-d/codeph ">click</codeph> event listener is 
 added named <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>, which responds to <codeph class="+ topic/ph pr-d/codeph ">click</codeph> events by directing
 Flash Player to open its Local Storage Settings panel.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.*;
    import flash.system.Security;
    import flash.system.SecurityPanel;

    public class SecurityExample extends Sprite {
        private var bgColor:uint = 0xFFCC00;
        private var size:uint = 100;

        public function SecurityExample() {
            draw();
        }

        private function draw():void {
            var child:Sprite = new Sprite();
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            child.buttonMode = true;

            var label:TextField = new TextField();
            label.text = "settings";
            label.selectable = false;
            label.mouseEnabled = false;
            child.addChild(label);

            child.addEventListener(MouseEvent.CLICK, clickHandler);
            addChild(child);
        }

        private function clickHandler(event:MouseEvent):void {
            Security.showSettings(SecurityPanel.LOCAL_STORAGE);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="flash.system:Security:allowDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">allowDomain</apiName><shortdesc class="- topic/shortdesc ">
     Lets SWF files in the identified domains access objects and variables 
     in the SWF file that contains the allowDomain() call.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.allowDomain, allowDomain
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Calling this method from code in the AIR application security sandbox
     throws a SecurityError exception. Content outside of the application security sandbox cannot cross-script
     content in the application security sandbox. 
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">domains</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">One or more strings or URLRequest objects that name the domains from which
     you want to allow access.  You can specify the special domain "~~" to
     allow access from all domains.  
     
     <p class="- topic/p ">In Flash Professional, specifying "~~" is the only
     way to allow access to nonlocal SWF files from local SWF files that have been
     published using Access Network Only for the Local Playback
     Security option in the Flash authoring tool.</p>
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> 
     The wildcard value does not work for subdomains. For example, you cannot use <codeph class="+ topic/ph pr-d/codeph ">~~.foo.com</codeph> for
     the <codeph class="+ topic/ph pr-d/codeph ">domains</codeph> parameter. While you can specify a subdomain with a wild card value for a cross domain policy file
     (as in <codeph class="+ topic/ph pr-d/codeph ">~~.foo.com</codeph>), you can't use a wildcard value that way for the <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> method.</p>
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Lets SWF files and HTML files access objects and variables in the calling SWF file.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <ph class="- topic/ph ">Lets SWF files in the identified domains access objects and variables 
     in the SWF file that contains the <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> call. </ph>
     
     
     
     <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> Calling this method from code in the AIR application sandbox 
     throws a SecurityError exception. Content outside of the application security domain cannot directly
     cross-script content in the application sandbox. However, content outside of the application sandbox can 
     communicate with content in the application security sandbox using a sandbox bridge.</p>
     
     <p class="- topic/p ">If two SWF files are served from the same domain — for example, http://mysite.com/swfA.swf and
     http://mysite.com/swfB.swf — then swfA.swf can examine and modify variables, objects, properties,
     methods, and so on in swfB.swf, and swfB.swf can do the same for swfA.swf. This is called <i class="+ topic/ph hi-d/i ">cross-movie
     scripting</i> or <i class="+ topic/ph hi-d/i ">cross-scripting</i>.</p>
     
     <p class="- topic/p ">If two SWF files are served from different domains — for example, http://siteA.com/swfA.swf and
     http://siteB.com/siteB.swf — then, by default, Flash Player does not allow swfA.swf to script
     swfB.swf, nor swfB.swf to script swfA.swf. A SWF file gives permission to SWF files from other domains
     by calling <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph>. This is 
     called <i class="+ topic/ph hi-d/i ">cross-domain scripting</i>. By calling <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain("siteA.com")</codeph>, siteB.swf 
     gives siteA.swf permission to script it.</p>
     
     <p class="- topic/p ">In any cross-domain situation, it is important to be clear about the two parties involved.
     For the purposes of this discussion, the side performing the cross-scripting
     is called the <i class="+ topic/ph hi-d/i ">accessing party</i> (usually the accessing SWF), and the other side is called <i class="+ topic/ph hi-d/i ">the party being accessed</i>  
     (usually the SWF file being accessed). When siteA.swf scripts siteB.swf, 
     siteA.swf is the accessing party, and siteB.swf is the party being accessed.</p>
     
     <p class="- topic/p "><adobeimage alt="Cross-domain diagram" href="../../images/crossScript_load.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
     
     <p class="- topic/p ">Cross-domain permissions that are established with <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> are asymmetrical.
     In the previous example, siteA.swf can script siteB.swf, but siteB.swf cannot script siteA.swf, 
     because siteA.swf has not called <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> to give SWF files at siteB.com permission 
     to script it. You can set up symmetrical permissions by having both SWF files call 
     <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph>.</p>
     
     <p class="- topic/p ">In addition to protecting SWF files from cross-domain scripting originated by other SWF files, Flash Player
     protects SWF files from cross-domain scripting originated by HTML files. HTML-to-SWF scripting can
     occur with older browser functions such as <codeph class="+ topic/ph pr-d/codeph ">SetVariable</codeph> or callbacks
     established through <codeph class="+ topic/ph pr-d/codeph ">ExternalInterface.addCallback()</codeph>. When HTML-to-SWF scripting crosses
     domains, the SWF file being accessed must call <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph>, 
     just as when the accessing party is a SWF file, or the operation will fail.</p>
     
     <p class="- topic/p ">Specifying an IP address as a parameter to <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph>
     does not permit access by all parties that originate at the specified IP address. 
     Instead, it permits access only by a party that contains the specified IP address it its URL, 
     rather than a domain name that maps to that IP address.</p> 
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Version-specific differences</b></p>
     <p class="- topic/p ">Flash Player's cross-domain security rules have evolved from version to version. 
     The following table summarizes the differences.</p>
     
     <adobetable class="innertable"><tgroup cols="5" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Latest SWF version involved in cross-scripting</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> needed?</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> needed?</entry><entry class="- topic/entry ">Which SWF file must call <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph>?</entry><entry class="- topic/entry ">What can be specified in <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph>?</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry align="center" class="- topic/entry ">5 or earlier</entry><entry class="- topic/entry ">No</entry><entry align="center" class="- topic/entry ">No</entry><entry align="center" class="- topic/entry ">N/A</entry><entry align="center" class="- topic/entry ">N/A</entry></row><row class="- topic/row "><entry align="center" class="- topic/entry ">6</entry><entry class="- topic/entry ">Yes, if superdomains don't match</entry><entry align="center" class="- topic/entry ">No</entry><entry class="- topic/entry ">The SWF file being accessed, or any SWF file with the same superdomain as the SWF file being accessed</entry><entry class="- topic/entry "><ul class="- topic/ul "><li class="- topic/li ">Text-based domain (mysite.com)</li><li class="- topic/li ">IP address (192.168.1.1)</li></ul></entry></row><row class="- topic/row "><entry align="center" class="- topic/entry ">7</entry><entry class="- topic/entry ">Yes, if domains don't match exactly</entry><entry class="- topic/entry ">Yes, if performing HTTP-to-HTTPS access (even if domains match exactly)</entry><entry class="- topic/entry ">The SWF file being accessed, or any SWF file with exactly the same domain as the SWF file being accessed</entry><entry class="- topic/entry "><ul class="- topic/ul "><li class="- topic/li ">Text-based domain (mysite.com)</li><li class="- topic/li ">IP address (192.168.1.1)</li></ul></entry></row><row class="- topic/row "><entry align="center" class="- topic/entry ">8 or later</entry><entry class="- topic/entry ">Yes, if domains don't match exactly</entry><entry class="- topic/entry ">Yes, if performing HTTP-to-HTTPS access (even if domains match exactly)</entry><entry class="- topic/entry ">SWF file being accessed</entry><entry class="- topic/entry "><ul class="- topic/ul "><li class="- topic/li ">Text-based domain (mysite.com)</li><li class="- topic/li ">IP address (192.168.1.1)</li><li class="- topic/li ">Wildcard (~~)</li></ul></entry></row></tbody></tgroup></adobetable>
      
     <p class="- topic/p ">The versions that control the behavior of Flash Player are <i class="+ topic/ph hi-d/i ">SWF versions</i> 
     (the published version of a SWF file), not the version of Flash Player itself. 
     For example, when Flash Player 8 is playing a SWF file published for version 7, it  
     applies behavior that is consistent with version 7. This practice ensures that player upgrades do not
     change the behavior of <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> in deployed SWF files.</p>
     
     <p class="- topic/p ">The version column in the previous table shows the latest SWF version involved in a cross-scripting
     operation. Flash Player determines its behavior according to either the accessing SWF file's
     version or the version of the SWF file that is being accessed, whichever is later.</p>
     
     <p class="- topic/p ">The following paragraphs provide more detail about Flash Player security changes involving
     <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph>.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Version 5</b>. There are no cross-domain scripting restrictions.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Version 6</b>. Cross-domain scripting security is introduced. By default, Flash Player forbids
     cross-domain scripting; <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> can permit it. To determine whether two files are
     in the same domain, Flash Player uses each file's superdomain, which is the exact host name from the
     file's URL, minus the first segment, down to a minimum of two segments. For example, the superdomain of
     www.mysite.com is mysite.com. SWF files from www.mysite.com and
     store.mysite.com to script each other without a call to <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph>.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Version 7</b>. Superdomain matching is changed to exact domain matching. Two files are 
     permitted to script each other only if the host names in their URLs are identical; otherwise, a call to
     <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> is required. By default, files loaded from non-HTTPS URLs are no longer
     permitted to script files loaded from HTTPS URLs, even if the files are loaded from exactly the same 
     domain. This restriction helps protect HTTPS files, because a non-HTTPS file is vulnerable to
     modification during download, and a maliciously modified non-HTTPS file could corrupt an HTTPS file,
     which is otherwise immune to such tampering. <codeph class="+ topic/ph pr-d/codeph ">Security.allowInsecureDomain()</codeph> is introduced to
     allow HTTPS SWF files that are being accessed to voluntarily disable this restriction, but the use of
     <codeph class="+ topic/ph pr-d/codeph ">Security.allowInsecureDomain()</codeph> is discouraged.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Version 8</b>. There are two major areas of change:</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">Calling <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> now permits cross-scripting operations
     only if the SWF file being accessed is the SWF file that called <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph>. 
     In other words, a SWF file that calls <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> now permits access only to itself. 
     In previous versions, calling <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> permitted cross-scripting operations 
     where the SWF file being accessed could be any SWF file in the same domain as the SWF file that called
     <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph>. Calling <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> previously opened up
     the entire domain of the calling SWF file.</li><li class="- topic/li ">Support has been added for wildcard values with <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain("~~")</codeph> and 
     <codeph class="+ topic/ph pr-d/codeph ">Security.allowInsecureDomain("~~")</codeph>. 
     The wildcard (~~) value permits cross-scripting operations where the accessing file is any file at all,
     loaded from anywhere. Think of the wildcard as a global permission. Wildcard permissions 
     are required to enable certain kinds of operations
     under the local file security rules. Specifically, 
     for a local SWF file with network-access permissions to script a SWF file on the
     Internet, the Internet SWF file being accessed must call <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain("~~")</codeph>, 
     reflecting that the origin of a local SWF file is unknown. (If the Internet SWF file is loaded from an 
     HTTPS URL, the Internet SWF file must instead call <codeph class="+ topic/ph pr-d/codeph ">Security.allowInsecureDomain("~~")</codeph>.)</li></ul>
       
     <p class="- topic/p ">Occasionally, you may encounter the following situation: You load a child SWF file
     from a different domain and want to allow the child SWF file to script the parent SWF file,
     but you don't know the final domain of the child SWF file. This can happen, for
     example, when you use load-balancing redirects or third-party servers.</p>
     
     <p class="- topic/p ">In this situation, you can use the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property of the URLRequest object
     that you pass to <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph>. For example, if you load a child SWF file 
     into a parent SWF, you can access the <codeph class="+ topic/ph pr-d/codeph ">contentLoaderInfo</codeph> property of the Loader
     object for the parent SWF: </p>
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">Security.allowDomain(loader.contentLoaderInfo.url)</codeblock>
     
     <p class="- topic/p ">Make sure that you wait until the child SWF file begins loading to get the correct
     value of the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property. To determine when the child SWF has begun loading,
     use the <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> event.</p>
     
     <p class="- topic/p ">The opposite situation can also occur; that is, you might create a child SWF file
     that wants to allow its parent to script it, but doesn't know what the domain of its parent
     will be. In this situation, you can access the <codeph class="+ topic/ph pr-d/codeph ">loaderInfo</codeph> property 
     of the display object that is the SWF's root object. In the child SWF, call <codeph class="+ topic/ph pr-d/codeph ">
     Security.allowDomain( this.root.loaderInfo.loaderURL)</codeph>.
     You don't have to wait for the parent SWF file to load; the parent will already be 
     loaded by the time the child loads.</p>
     
     <p class="- topic/p ">If you are publishing for Flash Player 8 or later, you can also handle these situations by calling
     <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain("~~")</codeph>. However, this can sometimes be a dangerous shortcut, 
     because it allows the calling SWF file to be accessed by any other SWF file from any domain. 
     It is usually safer to use the <codeph class="+ topic/ph pr-d/codeph ">_url</codeph> property.</p> 
     
     <p class="- topic/p "> For more information related to security, see the Flash Player Developer Center Topic: 
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.external.xml#ExternalInterface/addCallback()" class="- topic/link "><linktext class="- topic/linktext ">ExternalInterface.addCallback()</linktext></link><link href="flash.events.xml#Event/COMPLETE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.Event.COMPLETE</linktext></link><link href="flash.display.xml#DisplayObject/parent" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.parent</linktext></link><link href="flash.net.xml#URLRequest/url" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequest.url</linktext></link><link href="flash.system.xml#Security/allowInsecureDomain()" class="- topic/link "><linktext class="- topic/linktext ">allowInsecureDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:Security:allowInsecureDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">allowInsecureDomain</apiName><shortdesc class="- topic/shortdesc ">
     Lets SWF files and HTML files in the identified domains access objects 
     and variables in the calling SWF file, which is hosted by means of the HTTPS protocol.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.allowInsecureDomain, allowInsecureDomain
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Calling this method from code in the AIR application security sandbox causes a 
     SecurityError exception to be thrown. Content outside of the application security sandbox cannot cross-script
     content in the application security sandbox. 
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">domains</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">One or more strings or URLRequest objects that name the domains from which
     you want to allow access.  You can specify the special domain "~~" to
     allow access from all domains.  
     
     <p class="flashonly">Specifying "~~" is the only
     way to allow access to nonlocal SWF files from local SWF files that have been
     published using the Access Network Only option for the Local Playback
     Security setting (File &gt; Publish Settings &gt; Flash tab) in the Flash authoring tool.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> 
     The wildcard value does not work for subdomains. For example, you cannot use <codeph class="+ topic/ph pr-d/codeph ">~~.foo.com</codeph> for
     the <codeph class="+ topic/ph pr-d/codeph ">domains</codeph> parameter. While you can specify a subdomain with a wild card value for a cross domain policy file
     (as in <codeph class="+ topic/ph pr-d/codeph ">~~.foo.com</codeph>), you can't use a wildcard value that way for the <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> method.</p>
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Lets SWF and HTML files hosted using the HTTPS protocol, access objects and variables in 
     the calling SWF file.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <ph class="- topic/ph ">Lets SWF files and HTML files in the identified domains access objects 
     and variables in the calling SWF file, which is hosted by means of the HTTPS protocol. </ph>
     
     
     
     
     <p class="- topic/p ">Flash Player provides <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> to maximize flexibility, 
     but calling this method is not recommended. Serving a file over HTTPS provides several protections
     for you and your users, and calling <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain</codeph> weakens one of those
     protections.</p>
     
     <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> Calling this method from code in the AIR application sandbox 
     throws a SecurityError exception. Content outside of the application security domain cannot directly
     cross-script content in the application sandbox. However, content outside of the application sandbox can 
     communicate with content in the application security sandbox using a sandbox bridge.</p>
     
     <p class="- topic/p ">This method works in the same way as <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph>, but it also 
     permits operations in which the accessing party is loaded with a non-HTTPS protocol, and the
     party being accessed is loaded with HTTPS. In Flash Player 7 and later, 
     non-HTTPS files are not allowed to script HTTPS files. The <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> method lifts this
     restriction when the HTTPS SWF file being accessed uses it.</p>
     
     <p class="- topic/p ">Use <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> only to enable scripting from non-HTTPS files
     to HTTPS files. Use it to enable scripting when the accessing non-HTTPS file and 
     the HTTPS file being accessed are served from the same domain, for example, if a SWF file at
     http://mysite.com wants to script a SWF file at https://mysite.com. Do not use this method to enable
     scripting between non-HTTPS files, between HTTPS files, or from HTTPS files to non-HTTPS
     files. For those situations, use <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> instead.</p>
     
     The following scenario illustrates how <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> can compromise security, if it is not used 
     with careful consideration.
     
     <p class="- topic/p ">Note that the following information is only one possible scenario, designed to
     help you understand <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> through a real-world example 
     of cross-scripting.
     It does not cover all issues with security architecture and should be used for background
     information only. The Flash Player Developer Center contains extensive information on Flash Player
     and security. For more information, see 
     the Flash Player Developer Center Topic <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     <p class="- topic/p ">Suppose you are building an e-commerce site that consists of two components:
     a catalog, which does not need to be secure, because it contains only public information;
     and a shopping cart/checkout component, which must be secure to protect users' financial and
     personal information. Suppose you are considering serving the catalog from 
     http://mysite.com/catalog.swf and the cart from https://mysite.com/cart.swf. One 
     requirement for your site is that a third party should not be able to steal your
     users' credit card numbers by taking advantage of a weakness in your security architecture.</p>
     
     <p class="- topic/p ">Suppose that a middle-party attacker intervenes between your server and your users, attempting
     to steal the credit card numbers that your users enter into your shopping cart application. 
     A middle party might, for example, be an unscrupulous ISP used by some of your users, or a 
     malicious administrator at a user's workplace — anyone who has the ability to view or alter 
     network packets transmitted over the public Internet between your users and your servers. 
     This situation is not uncommon.</p> 
     
     <p class="- topic/p ">If cart.swf uses HTTPS to transmit credit card information to your servers, then the 
     middle-party attacker can't directly steal this information from network packets, because the
     HTTPS transmission is encrypted. However, the attacker can use a different technique: altering the
     contents of one of your SWF files as it is delivered to the user, replacing your SWF file with an 
     altered version that transmits the user's information to a different server, owned by the attacker.</p>
     
     <p class="- topic/p ">The HTTPS protocol, among other things, prevents this "modification" attack from working, 
     because, in addition to being encrypted, HTTPS transmissions are tamper-resistant. 
     If a middle-party attacker alters a packet, the receiving side detects the alteration 
     and discards the packet. So the attacker in this situation can't alter cart.swf, because it 
     is delivered over HTTPS.</p>
     
     <p class="- topic/p ">However, suppose that you want to allow buttons in catalog.swf, served over HTTP, 
     to add items to the shopping cart in cart.swf, served over HTTPS. To accomplish this,
     cart.swf calls <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph>, which allows catalog.swf to script cart.swf. 
     This action has an unintended consequence: Now the attacker can alter  
     catalog.swf as it is initially being downloaded by
     the user, because catalog.swf is delivered with HTTP and is not tamper-resistant. 
     The attacker's altered catalog.swf can now script cart.swf, because cart.swf contains
     a call to <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph>. The altered catalog.swf file can use ActionScript to access 
     the variables in cart.swf, thus reading the user's credit card information and other
     sensitive data. The altered catalog.swf can then send this data to an attacker's server.</p>
     
     <p class="- topic/p ">Obviously, this implementation is not desired, but you still want to allow
     cross-scripting between the two SWF files on your site. Here are two possible ways to redesign
     this hypothetical e-commerce site to avoid <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph>:</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">Serve all SWF files in the application over HTTPS. This is by far the simplest and most
     reliable solution. In the scenario described, you would serve both catalog.swf and cart.swf  
     over HTTPS. You might experience slightly higher bandwidth consumption and server CPU load
     when switching a file such as catalog.swf from HTTP to HTTPS, and your users might experience
     slightly longer application load times. You need to experiment with real servers to
     determine the severity of these effects; usually they are no worse than 10-20% each, and
     sometimes they are not present at all. You can usually improve results by using HTTPS-accelerating
     hardware or software on your servers. A major benefit of serving all 
     cooperating SWF files over HTTPS is that you can use an HTTPS URL as the main URL
     in the user's browser without generating any mixed-content warnings from the browser. 
     Also, the browser's padlock icon becomes visible, providing your users with
     a common and trusted indicator of security.</li><li class="- topic/li ">Use HTTPS-to-HTTP scripting, rather than HTTP-to-HTTPS scripting. In the scenario described, you
     could store the contents of the user's shopping cart in catalog.swf, and have cart.swf manage
     only the checkout process. At checkout time, cart.swf could retrieve the cart contents from 
     ActionScript variables in catalog.swf. The restriction on HTTP-to-HTTPS scripting is asymmetrical;
     although an HTTP-delivered catalog.swf file cannot safely be allowed to script an HTTPS-delivered cart.swf file,
     an HTTPS cart.swf file can script the HTTP catalog.swf file. 
     This approach is more delicate than the all-HTTPS approach; you must be careful not to trust any
     SWF file delivered over HTTP, because of its vulnerability to tampering. For example, when cart.swf 
     retrieves the ActionScript variable that describes the cart contents, the ActionScript code 
     in cart.swf cannot trust that the value of this variable is in the format that you expect. 
     You must verify that the cart contents do not contain invalid data that might 
     lead cart.swf to take an undesired action. You must also accept the risk that a middle party,
     by altering catalog.swf, could supply valid but inaccurate data to cart.swf; for example, by placing
     items in the user's cart. The usual checkout process mitigates
     this risk somewhat by displaying the cart contents and total cost for final approval by the user,
     but the risk remains present.</li></ul>
     
     <p class="- topic/p ">Web browsers have enforced separation between HTTPS and non-HTTPS files for years, 
     and the scenario described illustrates one good reason for this restriction. 
     Flash Player gives you the ability to work around this security restriction when you 
     absolutely must, but be sure to consider the consequences carefully before doing so.</p>
     
     <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic: 
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:Security:loadPolicyFile" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">loadPolicyFile</apiName><shortdesc class="- topic/shortdesc ">  
     Looks for a policy file at the location specified by the url 
     parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">url</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The URL location of the policy file to be loaded.
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Looks for a policy file at the location specified by the url parameter.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">  
     Looks for a policy file at the location specified by the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> 
     parameter. Adobe AIR and Flash Player use policy files to determine
      whether to permit applications to load data from servers other than their own.
     Note that even though the method name is <codeph class="+ topic/ph pr-d/codeph "> loadPolicyFile()</codeph>,
     the file isn't actually loaded until a network request that requires a policy file is made.
     
	 <p class="- topic/p ">With <codeph class="+ topic/ph pr-d/codeph ">Security.loadPolicyFile()</codeph>, Flash Player or AIR can 
     load policy files from arbitrary locations, as shown in the following example:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     Security.loadPolicyFile("http://www.example.com/sub/dir/pf.xml");
     </codeblock>
     
     
     
     <p class="- topic/p ">This causes Flash Player or AIR to attempt to retrieve a policy file from the specified URL. Any permissions 
     granted by the policy file at that location will apply to all content at the same level or lower in 
     the virtual directory hierarchy of the server. </p>
     
     <p class="- topic/p ">For example, following the previous code, these lines do not throw an exception:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> import flash.net.~~;
     var request:URLRequest = new URLRequest("http://www.example.com/sub/dir/vars.txt");
     var loader:URLLoader = new URLLoader();
     loader.load(request);
     
     var loader2:URLLoader = new URLLoader();
     var request2:URLRequest = new URLRequest("http://www.example.com/sub/dir/deep/vars2.txt");
     loader2.load(request2);
     </codeblock>
     
     <p class="- topic/p ">However, the following code does throw a security exception:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> import flash.net.~~;
     var request3:URLRequest = new URLRequest("http://www.example.com/elsewhere/vars3.txt");
     var loader3:URLLoader = new URLLoader();
     loader3.load(request3);
     </codeblock>
     
     <p class="- topic/p ">You can use <codeph class="+ topic/ph pr-d/codeph ">loadPolicyFile()</codeph> to load any number of policy files. When considering a 
     request that requires a policy file, Flash Player or AIR always waits for the completion of any policy 
     file downloads before denying a request. As a final fallback, if no policy file specified with 
     <codeph class="+ topic/ph pr-d/codeph ">loadPolicyFile()</codeph> authorizes a request, Flash Player or AIR consults the original default 
     locations.</p>
     
     <p class="- topic/p ">When checking for a master policy file, Flash Player waits three seconds for a server response.
     If a response isn't received, Flash Player assumes that no master policy file exists.
     However, there is no default timeout value for calls to <codeph class="+ topic/ph pr-d/codeph ">loadPolicyFile()</codeph>;
     Flash Player assumes that the file being called exists, and waits as long as necessary to load it.
     Therefore, if you want to make sure that a master policy file is loaded, use <codeph class="+ topic/ph pr-d/codeph ">loadPolicyFile()</codeph>
     to call it explicitly.</p>
     
     <p class="- topic/p ">You cannot connect to commonly reserved ports. 
     For a complete list of blocked ports, see "Restricting Networking APIs" in the 
     <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</p>
     
     <p class="- topic/p ">Using the <codeph class="+ topic/ph pr-d/codeph ">xmlsocket</codeph> protocol along with a specific port number lets you retrieve 
      policy files directly from an XMLSocket server, as shown in the following example. Socket 
      connections are not subject to the reserved port restriction described above.</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     Security.loadPolicyFile("xmlsocket://foo.com:414");
     </codeblock>
     
     
     
     <p class="- topic/p ">This causes Flash Player or AIR to attempt to retrieve a policy file from the specified host and port. 
     Upon establishing a connection with the 
     specified port, Flash Player or AIR transmits <codeph class="+ topic/ph pr-d/codeph ">&lt;policy-file-request /&gt;</codeph>, terminated by a 
     <codeph class="+ topic/ph pr-d/codeph ">null</codeph> byte.  The server must send a null byte to terminate a policy file, and may thereafter close the connection; 
     if the server does not close the connection, Flash Player or AIR does so upon receiving the terminating 
     <codeph class="+ topic/ph pr-d/codeph ">null</codeph> byte.</p>
     
     <p class="- topic/p ">You can prevent a SWF file from using this method by setting the 
     <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> parameter of the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> 
     tags in the HTML page that contains the SWF content.</p>
     
     <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic: 
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:Security:showSettings" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">showSettings</apiName><shortdesc class="- topic/shortdesc ">
     Displays the Security Settings panel in Flash Player.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.showSettings(), showSettings()
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">panel</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">default</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value from the SecurityPanel class that specifies which Security Settings
     panel you want to display. If you omit this parameter, <codeph class="+ topic/ph pr-d/codeph ">SecurityPanel.DEFAULT</codeph> is used. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Displays the Security Settings panel in Flash Player. This method does not apply to content in
     Adobe AIR; calling it in an AIR application has no effect.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.system.xml#SecurityPanel" class="- topic/link "><linktext class="- topic/linktext ">SecurityPanel</linktext></link></related-links></apiOperation><apiValue id="flash.system:Security:APPLICATION" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">APPLICATION</apiName><shortdesc class="- topic/shortdesc ">
	 The file is running in an AIR application, and it was installed with the package (the AIR file) for that 
	 application.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">application</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The file is running in an AIR application, and it was installed with the package (the AIR file) for that 
	 application. This content is included in the AIR application resource directory (where the application
	 content is installed).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/sandboxType" class="- topic/link "><linktext class="- topic/linktext ">sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE" class="- topic/link "><linktext class="- topic/linktext ">REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_TRUSTED</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:LOCAL_TRUSTED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOCAL_TRUSTED</apiName><shortdesc class="- topic/shortdesc ">
     The file is a local file and has been trusted by the user, 
     using either the Flash Player Settings Manager or a FlashPlayerTrust configuration
     file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
      </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">localTrusted</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The file is a local file and has been trusted by the user, 
     using either the Flash Player Settings Manager or a FlashPlayerTrust configuration
     file. The file can read from local data sources and communicate 
     with the Internet.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/sandboxType" class="- topic/link "><linktext class="- topic/linktext ">sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE" class="- topic/link "><linktext class="- topic/linktext ">REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/APPLICATION" class="- topic/link "><linktext class="- topic/linktext ">APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:LOCAL_WITH_FILE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOCAL_WITH_FILE</apiName><shortdesc class="- topic/shortdesc ">
     The file is a local file, has not been trusted by the user, 
	 and it is not a SWF file that was published with a networking designation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
      </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">localWithFile</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The file is a local file, has not been trusted by the user, 
	 and it is not a SWF file that was published with a networking designation. In Adobe AIR,
	 the local file is <i class="+ topic/ph hi-d/i ">not</i> in the application resource directory; such files are 
	 put in the application security sandbox. The file may 
     read from local data sources but may not communicate with the Internet.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/sandboxType" class="- topic/link "><linktext class="- topic/linktext ">sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE" class="- topic/link "><linktext class="- topic/linktext ">REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION" class="- topic/link "><linktext class="- topic/linktext ">APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:LOCAL_WITH_NETWORK" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOCAL_WITH_NETWORK</apiName><shortdesc class="- topic/shortdesc ">
	 The file is a local file, has not been trusted by the user, and it is a SWF
	 file that was published with a networking designation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
      </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">localWithNetwork</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The file is a local file, has not been trusted by the user, and it is a SWF
	 file that was published with a networking designation. The file can 
     communicate with the Internet but cannot read from local data sources.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/sandboxType" class="- topic/link "><linktext class="- topic/linktext ">sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE" class="- topic/link "><linktext class="- topic/linktext ">REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION" class="- topic/link "><linktext class="- topic/linktext ">APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:REMOTE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">REMOTE</apiName><shortdesc class="- topic/shortdesc ">
     The file is from an Internet URL and operates under domain-based sandbox rules.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
      </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">remote</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The file is from an Internet URL and operates under domain-based sandbox rules.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/sandboxType" class="- topic/link "><linktext class="- topic/linktext ">sandboxType</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION" class="- topic/link "><linktext class="- topic/linktext ">APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:exactSettings:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">exactSettings</apiName><shortdesc class="- topic/shortdesc ">
     Determines how Flash Player or AIR chooses the domain to use for certain 
     content settings, including settings for camera and microphone 
     permissions, storage quotas, and storage of persistent shared objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Security, Security.exactSettings, exactSettings
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A Flash Player or AIR application already used the value of <codeph class="+ topic/ph pr-d/codeph ">exactSettings</codeph> 
     at least once in a decision about player settings.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Determines how Flash Player or AIR chooses the domain to use for certain 
     content settings, including settings for camera and microphone 
     permissions, storage quotas, and storage of persistent shared objects.
	 To have the SWF file use the same settings that were used in Flash Player 6,
     set <codeph class="+ topic/ph pr-d/codeph ">exactSettings</codeph> to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     
     
     <p class="- topic/p ">In Flash Player 6, the domain used for these player settings was based on
     the trailing portion of the domain of the SWF file. If the domain of a SWF file
     includes more than two segments, such as www.example.com, the first segment
     of the domain ("www") is removed, and the remaining portion of the domain is used: 
     example.com. So, in Flash Player 6, www.example.com and store.example.com both 
     use example.com as the domain for these settings. Similarly, www.example.co.uk and 
     store.example.co.uk both use example.co.uk as the domain for these settings.
     In Flash Player 7 and later, player settings are chosen by default
     according to a SWF file's exact domain; for example, a SWF file from www.example.com
     would use the player settings for www.example.com, and a SWF file from
     store.example.com would use the separate player settings for
     store.example.com.</p>
     
     <p class="- topic/p ">When <codeph class="+ topic/ph pr-d/codeph ">Security.exactSettings</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, Flash Player 
     or AIR uses exact domains for player settings.  The default value for <codeph class="+ topic/ph pr-d/codeph ">exactSettings</codeph> is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. 
     If you change <codeph class="+ topic/ph pr-d/codeph ">exactSettings</codeph> from its default value, do so before any events
     occur that require Flash Player or AIR to choose player settings — for example, 
     using a camera or microphone, or retrieving a persistent shared object.</p>
     
     <p class="- topic/p ">If you previously published a version 6 SWF file and
     created persistent shared objects from it, and you now need to
     retrieve those persistent shared objects from that SWF file
     after porting it to version 7 or later, or from a different SWF file of
     version 7 or later, set <codeph class="+ topic/ph pr-d/codeph ">Security.exactSettings</codeph> to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>
     before calling <codeph class="+ topic/ph pr-d/codeph ">SharedObject.getLocal()</codeph>.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Security:pageDomain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">pageDomain</apiName><shortdesc class="- topic/shortdesc ">
     Get the page domain containing the swf.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Get the page domain containing the swf. For security reasons, the method does not return the full URL, only the page 
     domain, such as http://www.example.com. 
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Security:sandboxType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sandboxType</apiName><shortdesc class="- topic/shortdesc ">
     Indicates the type of security sandbox in which the calling file is operating.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates the type of security sandbox in which the calling file is operating.
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Security.sandboxType</codeph> has one of the following values:</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">remote</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Security.REMOTE</codeph>)—This file is from an Internet URL and operates under domain-based sandbox
       rules.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">localWithFile</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Security.LOCAL_WITH_FILE</codeph>)—This file is a local file, has not been trusted by the user, and
       it is not a SWF file that was published with a networking designation. The file may read from local data sources but may
       not communicate with the Internet.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">localWithNetwork</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Security.LOCAL_WITH_NETWORK</codeph>)—This SWF file is a local file, has not been trusted by the user, and
       was published with a networking designation. The SWF file can communicate with the Internet but cannot
       read from local data sources.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">localTrusted</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Security.LOCAL_TRUSTED</codeph>)—This file is a local file and has been trusted by 
       the user, using either the Flash Player Settings Manager or a FlashPlayerTrust configuration file. The file can read from local data
       sources and communicate with the Internet.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">application</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Security.APPLICATION</codeph>)—This file is 
     running in an AIR application, and it was installed with the package (AIR file) for that 
     application. By default, files in the AIR application sandbox can cross-script any file from any domain
     (although files outside the AIR application sandbox may not be permitted to cross-script the AIR file).
     By default, files in the AIR application sandbox can load content and data from any domain. </li></ul>
     
     <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic: 
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/REMOTE" class="- topic/link "><linktext class="- topic/linktext ">REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED" class="- topic/link "><linktext class="- topic/linktext ">LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION" class="- topic/link "><linktext class="- topic/linktext ">APPLICATION</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:LoaderContext" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">LoaderContext</apiName><shortdesc class="- topic/shortdesc ">
 The LoaderContext class provides options for loading SWF files and other media by using the Loader class.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The LoaderContext class provides options for loading SWF files and other media by using the Loader class.
 The LoaderContext class is used as the <codeph class="+ topic/ph pr-d/codeph ">context</codeph> parameter in the <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> and 
 <codeph class="+ topic/ph pr-d/codeph ">loadBytes()</codeph> methods of the Loader class.
 
 <p class="- topic/p ">When loading SWF files with the <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> method, you have two decisions to make:
 into which security domain the loaded SWF file should be placed, and into which application domain
 within that security domain? For more details on these choices, see the
 <codeph class="+ topic/ph pr-d/codeph ">applicationDomain</codeph> and <codeph class="+ topic/ph pr-d/codeph ">securityDomain</codeph> properties.</p>
 
 <p class="- topic/p ">When loading a SWF file with the <codeph class="+ topic/ph pr-d/codeph ">Loader.loadBytes()</codeph> method, you have the same
 application domain choice to make as for <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph>, but it's not
 necessary to specify a security domain, because <codeph class="+ topic/ph pr-d/codeph ">Loader.loadBytes()</codeph> always
 places its loaded SWF file into the security domain of the loading SWF file.</p>
 
 <p class="- topic/p ">When loading images (JPEG, GIF, or PNG) instead of SWF files, there is no need to
 specify a SecurityDomain or an application domain, because those concepts are 
 meaningful only for SWF files.  Instead, you have only one decision to make: do you need
 programmatic access to the pixels of the loaded image?  If so, see the
 <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> property. If you want to apply deblocking when loading
 an image, use the JPEGLoaderContext class instead of the LoaderContext class.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.ApplicationDomain</linktext></link><link href="flash.system.xml#JPEGLoaderContext" class="- topic/link "><linktext class="- topic/linktext ">flash.system.JPEGLoaderContext</linktext></link><link href="flash.system.xml#LoaderContext/applicationDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.LoaderContext.applicationDomain</linktext></link><link href="flash.system.xml#LoaderContext/checkPolicyFile" class="- topic/link "><linktext class="- topic/linktext ">flash.system.LoaderContext.checkPolicyFile</linktext></link><link href="flash.system.xml#LoaderContext/securityDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.LoaderContext.securityDomain</linktext></link><link href="flash.system.xml#SecurityDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.SecurityDomain</linktext></link><link href="flash.system.xml#ImageDecodingPolicy" class="- topic/link "><linktext class="- topic/linktext ">flash.system.ImageDecodingPolicy</linktext></link></related-links><apiConstructor id="flash.system:LoaderContext:LoaderContext" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">LoaderContext</apiName><shortdesc class="- topic/shortdesc ">
     Creates a new LoaderContext object, with the specified settings.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">checkPolicyFile</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies whether a check should be made for the existence 
     of a URL policy file before loading the object.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">applicationDomain</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.system:ApplicationDomain</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies the ApplicationDomain object to use for a Loader object.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">securityDomain</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.system:SecurityDomain</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies the SecurityDomain object to use for a Loader object.
     
     <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> Content in the air application security sandbox cannot load content from
     other sandboxes into its SecurityDomain.</p>
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a new LoaderContext object, with the specified settings. For complete
     details on these settings, see the descriptions of the properties of this class.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.ApplicationDomain</linktext></link><link href="flash.system.xml#SecurityDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.SecurityDomain</linktext></link></related-links></apiConstructor><apiValue id="flash.system:LoaderContext:allowCodeImport" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">allowCodeImport</apiName><shortdesc class="- topic/shortdesc ">
     Specifies whether you can use a Loader object to import content with executable code,
     such as a SWF file, into the caller's security sandbox.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies whether you can use a <codeph class="+ topic/ph pr-d/codeph ">Loader</codeph> object to import content with executable code,
     such as a SWF file, into the caller's security sandbox.  There are two affected importing operations: 
     the <codeph class="+ topic/ph pr-d/codeph ">Loader.loadBytes()</codeph> method, and the <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> method with
     <codeph class="+ topic/ph pr-d/codeph ">LoaderContext.securityDomain = SecurityDomain.currentDomain</codeph>.  (The latter operation is not
     supported in the AIR application sandbox.)  With the <codeph class="+ topic/ph pr-d/codeph ">allowCodeImport</codeph> property set to
     <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, these importing operations are restricted to safe operations, such as loading
     images.  Normal, non-importing SWF file loading with the <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> method is not
     affected by the value of this property.
     
     <p class="- topic/p ">This property is useful when you want to import image content into your sandbox - for example, when you
     want to replicate or process an image from a different domain - but you don't want to take the security risk
     of receiving a SWF file when you expected only an image file.  Since SWF files may contain ActionScript code,
     importing a SWF file is a much riskier operation than importing an image file.</p>
     
     <p class="- topic/p ">In AIR content in the application sandbox, the default value is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.  In non-application
     content (which includes all content in Flash Player), the default value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</p>
     
     <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">allowCodeImport</codeph> property was added in Flash Player 10.1 and AIR 2.0.
     However, this property is made available to SWF files and AIR applications of all versions when the
     Flash Runtime supports it.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.system.xml#LoaderContext/securityDomain" class="- topic/link "><linktext class="- topic/linktext ">securityDomain</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:applicationDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">applicationDomain</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the application domain to use for the Loader.load() or
     Loader.loadBytes() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.system:ApplicationDomain</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the application domain to use for the <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> or
     <codeph class="+ topic/ph pr-d/codeph ">Loader.loadBytes()</codeph> method.  Use this property only when loading a SWF file
     written in ActionScript 3.0 (not an image or a SWF file written in ActionScript 1.0 or ActionScript 2.0).
     
     <p class="- topic/p ">Every security domain is divided into one or more application domains, represented
     by ApplicationDomain objects.  Application domains are not for security
     purposes; they are for managing cooperating units of ActionScript code.  If you are
     loading a SWF file from another domain, and allowing it to be placed in a separate
     security domain, then you cannot control the choice of application domain into which the
     loaded SWF file is placed; and if you have specified a choice of application domain, it
     will be ignored.  However, if you are loading a SWF file into your own security domain —
     either because the SWF file comes from your own domain, or because you are importing it into
     your security domain — then you can control the choice of application domain for the
     loaded SWF file.</p>
     
     <p class="- topic/p ">You can pass an application domain only from your own security domain in
     <codeph class="+ topic/ph pr-d/codeph ">LoaderContext.applicationDomain</codeph>.  Attempting to pass an application domain
     from any other security domain results in a <codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> exception.</p>
     
     <p class="- topic/p ">You have four choices for what kind of <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain</codeph> property to use:</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Child of loader's ApplicationDomain.</b> The default. You can
     explicitly represent this choice with the syntax
     <codeph class="+ topic/ph pr-d/codeph ">new ApplicationDomain(ApplicationDomain.currentDomain)</codeph>. This allows the
     loaded SWF file to use the parent's classes directly, for example by writing
     <codeph class="+ topic/ph pr-d/codeph ">new MyClassDefinedInParent()</codeph>.  The parent, however, cannot use this syntax;
     if the parent wishes to use the child's classes, it must call
     <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.getDefinition()</codeph> to retrieve them.  The advantage of
     this choice is that, if the child defines a class with the same name as a class already
     defined by the parent, no error results; the child simply inherits the parent's
     definition of that class, and the child's conflicting definition goes unused unless
     either child or parent calls the <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.getDefinition()</codeph> method to retrieve
     it.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Loader's own ApplicationDomain.</b> You use this application domain when using
     <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.currentDomain</codeph>. When the load is complete, parent and
     child can use each other's classes directly. If the child attempts to define a class with the same name
     as a class already defined by the parent, the parent class is used and the child class is ignored.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Child of the system ApplicationDomain.</b>  You use this application domain when using
     <codeph class="+ topic/ph pr-d/codeph ">new ApplicationDomain(null)</codeph>.  This separates loader and loadee entirely,
     allowing them to define separate versions of classes with the same name without conflict
     or overshadowing.  The only way either side sees the other's classes is by calling the 
     <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.getDefinition()</codeph> method.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Child of some other ApplicationDomain.</b>  Occasionally you may have
     a more complex ApplicationDomain hierarchy.  You can load a SWF file into any
     ApplicationDomain from your own SecurityDomain.  For example,
     <codeph class="+ topic/ph pr-d/codeph ">new ApplicationDomain(ApplicationDomain.currentDomain.parentDomain.parentDomain)</codeph>
     loads a SWF file into a new child of the current domain's parent's parent.</li></ul>
     
     <p class="- topic/p ">When a load is complete, either side (loading or loaded) may need to find its own
     ApplicationDomain, or the other side's ApplicationDomain, for the purpose of calling
     <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.getDefinition()</codeph>.  Either side can retrieve a reference to
     its own application domain by using <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.currentDomain</codeph>.  The loading
     SWF file can retrieve a reference to the loaded SWF file's ApplicationDomain via
     <codeph class="+ topic/ph pr-d/codeph ">Loader.contentLoaderInfo.applicationDomain</codeph>.  If the loaded SWF file knows how it
     was loaded, it can find its way to the loading SWF file's ApplicationDomain object.  For example, if
     the child was loaded in the default way, it can find the loading SWF file's application domain
     by using <codeph class="+ topic/ph pr-d/codeph ">ApplicationDomain.currentDomain.parentDomain</codeph>.</p>
     
     <p class="- topic/p ">For more information, see the "ApplicationDomain class" section of the "Client System
     Environment" chapter of the <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.ApplicationDomain</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:checkPolicyFile" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">checkPolicyFile</apiName><shortdesc class="- topic/shortdesc ">
     Specifies whether the application should attempt to download a URL policy file from the
     loaded object's server before beginning to load the object itself.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies whether the application should attempt to download a URL policy file from the
     loaded object's server before beginning to load the object itself.  This flag is applicable to
     the <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> method, but not to the <codeph class="+ topic/ph pr-d/codeph ">Loader.loadBytes()</codeph> method.
     
     <p class="- topic/p ">Set this flag to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> when you are loading an image (JPEG, GIF, or PNG) from outside the calling
     SWF file's own domain, and you expect to need access to the content of that image from ActionScript.
     Examples of accessing image content include referencing the <codeph class="+ topic/ph pr-d/codeph ">Loader.content</codeph> property
     to obtain a Bitmap object, and calling the <codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph> method to obtain a
     copy of the loaded image's pixels.  If you attempt one of these operations without having
     specified <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> at loading time, you may get a <codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph>
     exception because the needed policy file has not been downloaded yet.</p>
     
     <p class="- topic/p ">When you call the <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> method with <codeph class="+ topic/ph pr-d/codeph ">LoaderContext.checkPolicyFile</codeph> set to
     <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the application does not begin downloading the specified object in <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph>
     until it has either successfully downloaded a relevant URL policy file or discovered
     that no such policy file exists. Flash Player or AIR first considers policy files that have already
     been downloaded, then attempts to download any pending policy files specified in calls to
     the <codeph class="+ topic/ph pr-d/codeph ">Security.loadPolicyFile()</codeph> method, then attempts to download a policy file from the default
     location that corresponds to <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph>, which is <codeph class="+ topic/ph pr-d/codeph ">/crossdomain.xml</codeph>
     on the same server as <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph>. In all cases, the given policy file is required to exist 
     at <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph> by virtue of the policy file's location, and the file must permit access
     by virtue of one or more <codeph class="+ topic/ph pr-d/codeph ">&lt;allow-access-from&gt;</codeph>
     tags.</p>
     
     <p class="- topic/p ">If you set <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the main download that specified in the 
     <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> method does not load until the policy file has been completely processed.
     Therefore, as long as the
     policy file that you need exists, as soon as you have received any <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.PROGRESS</codeph> or
     <codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE</codeph> events from the <codeph class="+ topic/ph pr-d/codeph ">contentLoaderInfo</codeph> property of your Loader object,
     the policy file download is complete, and you can safely begin performing operations that require
     the policy file.</p>
     
     <p class="- topic/p ">If you set <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, and no relevant policy file is found, 
     you will not receive any error indication until you attempt an operation that throws a
     <codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> exception.  However, once the LoaderInfo object dispatches a 
     <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.PROGRESS</codeph> or <codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE</codeph> event, you can test whether a relevant 
     policy file was found by checking the value of the <codeph class="+ topic/ph pr-d/codeph ">LoaderInfo.childAllowsParent</codeph> property.</p>
     
     <p class="- topic/p ">If you will not need pixel-level access to the image that you are loading, you should not set the 
     <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> property to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.  Checking for a policy file in this case is 
     wasteful, because it may delay the start of your download, and it may consume network bandwidth unnecessarily.</p>
     
     <p class="- topic/p ">Also try to avoid setting <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if you are using the 
     <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> method to download a SWF file.  This is because SWF-to-SWF permissions are not
     controlled by policy files, but rather by the <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph> method, and thus
     <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> has no effect when you load a SWF file.  Checking for a policy file in
     this case is wasteful, because it may delay the download of the SWF file, and it may consume
     network bandwidth unnecessarily. (Flash Player or AIR cannot tell whether your main download will be a
     SWF file or an image, because the policy file download occurs before the main download.)</p>
     
     <p class="- topic/p ">Be careful with <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> if you are downloading an object from a URL that
     may use server-side HTTP redirects. Policy files are always retrieved from the corresponding initial 
     URL that you specify in <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph>. If the final
     object comes from a different URL because of HTTP redirects, then the initially downloaded policy
     files might not be applicable to the object's final URL, which is the URL that matters in
     security decisions.  If you find yourself in this situation, you can examine the value of 
     <codeph class="+ topic/ph pr-d/codeph ">LoaderInfo.url</codeph> after you have received a <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.PROGRESS</codeph>
     or <codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE</codeph> event, which tells you the object's final URL. Then call the
     <codeph class="+ topic/ph pr-d/codeph ">Security.loadPolicyFile()</codeph> method with a policy file URL based on the object's final 
     URL. Then poll the value of <codeph class="+ topic/ph pr-d/codeph ">LoaderInfo.childAllowsParent</codeph> until it becomes <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</p>
     
         <p class="- topic/p ">You do not need to set this property for AIR content running in the application sandbox. Content
         in the AIR application sandbox can call the <codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph> method using any loaded image 
         content as the source. </p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#BitmapData/draw()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.BitmapData.draw()</linktext></link><link href="flash.display.xml#Loader/content" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.content</linktext></link><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#LoaderInfo/childAllowsParent" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.childAllowsParent</linktext></link><link href="flash.display.xml#LoaderInfo/url" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.url</linktext></link><link href="flash.system.xml#Security/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Security.allowDomain()</linktext></link><link href="flash.system.xml#Security/loadPolicyFile()" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Security.loadPolicyFile()</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:imageDecodingPolicy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">imageDecodingPolicy</apiName><shortdesc class="- topic/shortdesc ">
     Specifies whether to decode image data when it is used or when it is loaded.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies whether to decode image data when it is used or when it is loaded.
     
     <p class="- topic/p ">Under the default policy, <codeph class="+ topic/ph pr-d/codeph ">ImageDecodingPolicy.ON_DEMAND</codeph>, the runtime decodes the image data 
     when the data is needed for display or other purpose. This policy maintains the decoding behavior used
     by previous versions of the runtime.</p>
	 
	 <p class="- topic/p ">Under the <codeph class="+ topic/ph pr-d/codeph ">ImageDecodingPolicy.ON_LOAD</codeph> policy, the runtime decodes the image immediately after 
	 it is loaded and before dispatching the complete event. Decoding images on load rather than on demand can 
	 improve animation and UI performance when several loaded images are displayed in quick succession, such as in a 
	 scrolling list or a cover flow control. On the other hand, using the onLoad policy indiscriminately can increase
	 the peak memory usage of your application since more decoded image data might be in memory at one time than would
	 be the case under the onDemand policy.</p>
	 
     <p class="- topic/p ">Under both policies, the runtime uses the same cache and flush behavior after the image is decoded. 
     The runtime can flush the decoded data at any time and re-decode the image the next time
     it is required.</p>
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#ImageDecodingPolicy" class="- topic/link "><linktext class="- topic/linktext ">flash.system.ImageDecodingPolicy</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:parameters" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">parameters</apiName><shortdesc class="- topic/shortdesc ">
     An Object containing the parameters to pass to the LoaderInfo object of the content.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     An Object containing the parameters to pass to the LoaderInfo object of the content.
     
     <p class="- topic/p ">Normally, the value of the <codeph class="+ topic/ph pr-d/codeph ">contentLoaderInfo.parameters</codeph> property is obtained by parsing the requesting URL. 
     If the <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> var is set, the <codeph class="+ topic/ph pr-d/codeph ">contentLoaderInfo.parameters</codeph> gets its value from the LoaderContext object, instead of from 
     the requesting URL. The <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> var accepts only objects containing name-value string pairs, similar to URL parameters. If the object does
     not contain name-value string pairs, an <codeph class="+ topic/ph pr-d/codeph ">IllegalOperationError</codeph> is thrown.</p>
     <p class="- topic/p ">The intent of this API is to enable the loading SWF file to forward its parameters to a loaded SWF file. 
     This functionality is especially helpful when you use the <codeph class="+ topic/ph pr-d/codeph ">loadBytes()</codeph> method, since <codeph class="+ topic/ph pr-d/codeph ">LoadBytes</codeph> does not provide a 
     means of passing parameters through the URL. Parameters can be forwarded successfully only to another AS3 SWF file; an AS1 or AS2 SWF file cannot receive the parameters in an 
     accessible form, although the AVM1Movie's AS3 loaderInfo.parameters object will be the forwarded object. </p>
     
     
     <p class="- topic/p ">For example, consider the following URL: </p>
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">http://yourdomain/users/jdoe/test01/child.swf?foo=bar;</codeph></p>
     <p class="- topic/p ">The following code uses the LoaderContext.parameters property to replicate a parameter passed to this URL: </p>
     
     <pre xml:space="preserve" class="- topic/pre ">
      import flash.system.LoaderContext; 
      import flash.display.Loader; 
      var l:Loader = new Loader(); 
      var lc:LoaderContext = new LoaderContext; 
      lc.parameters = { "foo": "bar" }; 
      l.load(new URLRequest("child.swf"), lc);
     </pre>
     
     <p class="- topic/p ">To verify that the parameter passed properly, use the following trace statement after you run this code:</p>
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">trace(loaderInfo.parameters.foo);</codeph></p>
     <p class="- topic/p ">If the content loaded successfully, this trace prints "bar".</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:LoaderContext:requestedContentParent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">requestedContentParent</apiName><shortdesc class="- topic/shortdesc ">
     The parent to which the Loader will attempt to add the loaded content.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:DisplayObjectContainer</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The parent to which the Loader will attempt to add the loaded content. 
     
     <p class="- topic/p ">When content is completely loaded, the Loader object normally becomes the parent of the content. 
     If <codeph class="+ topic/ph pr-d/codeph ">requestedContentParent</codeph> is set, the object that it specifies becomes the parent, unless a runtime error prevents the assignment.
     This reparenting can also be done after the <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event without use of this property. However, specifying the
     parent with <codeph class="+ topic/ph pr-d/codeph ">LoaderContext.requestedContentParent</codeph> eliminates extra events. </p>
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">LoaderContext.requestedContentParent</codeph> sets the desired parent before frame one scripts in 
     the loaded content execute, but after the constructor has run. If <codeph class="+ topic/ph pr-d/codeph ">requestedContentParent</codeph> is null (the default),
     the Loader object becomes the content's parent.</p>
     <p class="- topic/p ">If the loaded content is an AVM1Movie object, or if an
     error is thrown when <codeph class="+ topic/ph pr-d/codeph ">addChild()</codeph> is called on the <codeph class="+ topic/ph pr-d/codeph ">requestedContentParent</codeph> object, then the following actions occur:
     <ul class="- topic/ul "><li class="- topic/li ">The Loader object becomes the parent of the loaded content.</li><li class="- topic/li ">The runtime dispatches an <codeph class="+ topic/ph pr-d/codeph ">AsyncErrorEvent</codeph>.</li></ul></p>
     <p class="- topic/p ">If the requested parent and the loaded content are in different security sandboxes, and if the requested parent does not have access 
     to the loaded content, then the following actions occur:
     <ul class="- topic/ul "><li class="- topic/li ">The Loader becomes the parent of the loaded content.</li><li class="- topic/li ">The runtime dispatches a <codeph class="+ topic/ph pr-d/codeph ">SecurityErrorEvent</codeph>.</li></ul></p>
     
     <p class="- topic/p ">The following code uses <codeph class="+ topic/ph pr-d/codeph ">requestedContentParent</codeph> to place the loaded content into a Sprite object:</p>
     <pre xml:space="preserve" class="- topic/pre ">
      import flash.system.LoaderContext; 
      import flash.display.Loader; 
      import flash.display.Sprite; 
     
      var lc:LoaderContext = new LoaderContext(); 
      var l:Loader = new Loader(); 
      var s:Sprite = new Sprite(); 
      lc.requestedContentParent = s; 
      addChild(s); 
      l.load(new URLRequest("child.swf"), lc);
     </pre>
     
     <p class="- topic/p ">When this code runs, the child SWF file appears on stage. This fact confirms that the Sprite object you added to the stage is the
     parent of the loaded child.swf file.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:LoaderContext:securityDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">securityDomain</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the security domain to use for a Loader.load() operation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.system:SecurityDomain</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the security domain to use for a <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> operation. Use this property
     only when loading a SWF file (not an image).
     
     <p class="- topic/p ">The choice of security domain is meaningful only if you are loading a SWF file that might
     come from a different domain (a different server) than the loading SWF file.  When you load a
     SWF file from your own domain, it is always placed into your security domain.  But when you
     load a SWF file from a different domain, you have two options.  You can allow the loaded SWF file to
     be placed in its "natural" security domain, which is different from that of the
     loading SWF file; this is the default.  The other option is to specify that you want to place the
     loaded SWF file placed into the same security domain as the loading SWF file, by setting
     <codeph class="+ topic/ph pr-d/codeph ">myLoaderContext.securityDomain</codeph> to be equal to <codeph class="+ topic/ph pr-d/codeph ">SecurityDomain.currentDomain</codeph>.  This is
     called <i class="+ topic/ph hi-d/i ">import loading</i>, and it is equivalent, for security purposes, to copying the
     loaded SWF file to your own server and loading it from there.  In order for import loading to
     succeed, the loaded SWF file's server must have a policy file trusting the domain of the
     loading SWF file.</p>
     
     <p class="- topic/p ">You can pass your own security domain only in <codeph class="+ topic/ph pr-d/codeph ">LoaderContext.securityDomain</codeph>.
     Attempting to pass any other security domain results in a <codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> exception.</p>
     
     <p class="- topic/p ">Content in the AIR application security sandbox cannot load content from
     other sandboxes into its SecurityDomain.</p>
     
     <p class="- topic/p ">For more information, see the "Security" chapter in the <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.system.xml#SecurityDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.SecurityDomain</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:allowLoadBytesCodeExecution:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">allowLoadBytesCodeExecution</apiName><shortdesc class="- topic/shortdesc ">
     Legacy property, replaced by allowCodeImport, but still supported for compatibility.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Legacy property, replaced by <codeph class="+ topic/ph pr-d/codeph ">allowCodeImport</codeph>, but still supported for compatibility.
     Previously, the only operation affected by <codeph class="+ topic/ph pr-d/codeph ">allowLoadBytesCodeExecution</codeph> was the
     <codeph class="+ topic/ph pr-d/codeph ">Loader.loadBytes()</codeph> method, but as of Flash Player 10.1 and AIR 2.0, the import-loading
     operation of <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph> with <codeph class="+ topic/ph pr-d/codeph ">LoaderContext.securityDomain = SecurityDomain.currentDomain</codeph>
     is affected as well.  (The latter operation is not supported in the AIR application sandbox.)
     This dual effect made the property name <codeph class="+ topic/ph pr-d/codeph ">allowLoadBytesCodeExecution</codeph> overly specific,
     so now <codeph class="+ topic/ph pr-d/codeph ">allowCodeImport</codeph> is the preferred property name.  Setting either of
     <codeph class="+ topic/ph pr-d/codeph ">allowCodeImport</codeph> or <codeph class="+ topic/ph pr-d/codeph ">allowLoadBytesCodeExecution</codeph> will affect the value of both.
     
     <p class="- topic/p ">Specifies whether you can use a <codeph class="+ topic/ph pr-d/codeph ">Loader</codeph> object to import content with executable code,
     such as a SWF file, into the caller's security sandbox.  With this property set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>,
     these importing operations are restricted to safe operations, such as loading images.</p>
     
     <p class="- topic/p ">In AIR content in the application sandbox, the default value is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. In non-application content, the
     default value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:JPEGLoaderContext" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">JPEGLoaderContext</apiName><shortdesc class="- topic/shortdesc ">
 The JPEGLoaderContext class includes a property for enabling a deblocking filter when loading a JPEG image.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.system:LoaderContext</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The JPEGLoaderContext class includes a property for enabling a deblocking filter when loading a JPEG image. 
 The deblocking filter improves an image's quality at higher compression settings by smoothing neighboring pixels.
 To apply deblocking when loading a JPEG image, create a JPEGLoaderContext object, and set its 
 <codeph class="+ topic/ph pr-d/codeph ">deblockingFilter</codeph> property. Then use the JPEGLoaderContext object name as the value of the 
 <codeph class="+ topic/ph pr-d/codeph ">context</codeph> parameter of the <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> method of the Loader object used to load the image.
 
 <p class="- topic/p ">The JPEGLoaderContext class extends the LoaderContext class. Set the <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph>
 property to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if you need programmatic access to the pixels of the loaded image 
 (for example, if you're using the <codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph> method). Setting the <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> 
 property is not necessary for AIR content running in the application sandbox.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#BitmapData/draw()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.BitmapData.draw()</linktext></link></related-links><apiConstructor id="flash.system:JPEGLoaderContext:JPEGLoaderContext" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">JPEGLoaderContext</apiName><shortdesc class="- topic/shortdesc ">
     Creates a new JPEGLoaderContext object with the specified settings.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deblockingFilter</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies the strength of the deblocking filter. A value of 1.0 
     applies a full strength deblocking filter, a value of 0.0 disables the deblocking filter.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">checkPolicyFile</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies whether Flash Player should check for the existence 
     of a URL policy file before loading the object. Does not apply for AIR content running in the application sandbox.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">applicationDomain</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.system:ApplicationDomain</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies the ApplicationDomain object to use for a Loader object.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">securityDomain</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.system:SecurityDomain</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies the SecurityDomain object to use for a Loader object.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a new JPEGLoaderContext object with the specified settings. 
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.system.xml#LoaderContext" class="- topic/link "><linktext class="- topic/linktext ">flash.system.LoaderContext</linktext></link><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.ApplicationDomain</linktext></link><link href="flash.system.xml#SecurityDomain" class="- topic/link "><linktext class="- topic/linktext ">flash.system.SecurityDomain</linktext></link></related-links></apiConstructor><apiValue id="flash.system:JPEGLoaderContext:deblockingFilter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">deblockingFilter</apiName><shortdesc class="- topic/shortdesc "> 
	 Specifies the strength of the deblocking filter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0.0</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 Specifies the strength of the deblocking filter. A value of 1.0 
	 applies a full strength deblocking filter, a value of 0.0 disables the deblocking filter.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:Capabilities" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Capabilities</apiName><shortdesc class="- topic/shortdesc ">
 The Capabilities class provides properties that 
 describe the system and runtime that are hosting the application.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 <ph class="- topic/ph ">The Capabilities class provides properties that 
 describe the system and runtime that are hosting the application.
 For example, a mobile phone's screen might be 100 square 
 pixels, black and white, whereas a PC screen might be 1000 square pixels, color. 
 By using the Capabilities class to determine what capabilities the client has, 
 you can provide appropriate content to as many users as possible. When you know 
 the device's capabilities, you can tell the server to send the appropriate SWF 
 files or tell the SWF file to alter its presentation.</ph>
 
 
 
 <p class="- topic/p ">However, some capabilities of Adobe AIR are not listed as properties in the
 Capabilities class. They are properties of other classes:</p>
 
 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Property</entry><entry class="- topic/entry ">Description</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsDockIcon</codeph></entry><entry class="- topic/entry ">Whether the operating system supports application doc icons.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsMenu</codeph></entry><entry class="- topic/entry ">Whether the operating system supports a global application menu bar.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NativeApplication.supportsSystemTrayIcon</codeph></entry><entry class="- topic/entry ">Whether the operating system supports system tray icons.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NativeWindow.supportsMenu</codeph></entry><entry class="- topic/entry ">Whether the operating system supports window menus.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NativeWindow.supportsTransparency</codeph></entry><entry class="- topic/entry ">Whether the operating system supports transparent windows.</entry></row></tbody></tgroup></adobetable>
 
 <p class="- topic/p ">Do <i class="+ topic/ph hi-d/i ">not</i> use <codeph class="+ topic/ph pr-d/codeph ">Capabilities.os</codeph> or <codeph class="+ topic/ph pr-d/codeph ">Capabilities.manufacturer</codeph> to 
 determine a capability based on the operating system. Basing a capability on the operating system 
 is a bad idea, since it can lead to problems if an application does not consider all potential 
 target operating systems. Instead, use the property corresponding to the capability for which you 
 are testing.</p>
 
 <p class="- topic/p ">You can send capabilities information, which is stored in the 
 <codeph class="+ topic/ph pr-d/codeph ">Capabilities.serverString</codeph> property as a URL-encoded string, using the 
 <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> or <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> HTTP method. The following example shows a server 
 string for a computer that has MP3 support and 1600 x 1200 pixel resolution and that is 
 running Windows XP with an input method editor (IME) installed:</p>
 
 <pre xml:space="preserve" class="- topic/pre ">A=t&amp;SA=t&amp;SV=t&amp;EV=t&amp;MP3=t&amp;AE=t&amp;VE=t&amp;ACC=f&amp;PR=t&amp;SP=t&amp;
     SB=f&amp;DEB=t&amp;V=WIN%209%2C0%2C0%2C0&amp;M=Adobe%20Windows&amp;
     R=1600x1200&amp;DP=72&amp;COL=color&amp;AR=1.0&amp;OS=Windows%20XP&amp;
     L=en&amp;PT=External&amp;AVD=f&amp;LFD=f&amp;WD=f&amp;IME=t</pre>
 
 <p class="- topic/p ">The following table lists the properties of the Capabilities class and corresponding server strings:
 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry align="left" class="- topic/entry ">Capabilities class property</entry><entry align="left" class="- topic/entry ">Server string</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">avHardwareDisable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">AVD</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasAccessibility</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ACC</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasAudio</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">A</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasAudioEncoder</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">AE</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasEmbeddedVideo</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">EV</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasIME</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">IME</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasMP3</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">MP3</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasPrinting</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">PR</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasScreenBroadcast</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SB</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasScreenPlayback</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SP</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasStreamingAudio</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SA</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasStreamingVideo</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SV</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasTLS</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">TLS</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hasVideoEncoder</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">VE</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isDebugger</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">DEB</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">language</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">L</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localFileReadDisable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">LFD</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">manufacturer</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">M</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">maxLevelIDC</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ML</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">os</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">OS</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pixelAspectRatio</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">AR</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">playerType</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">PT</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenColor</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">COL</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenDPI</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">DP</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenResolutionX</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">R</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenResolutionY</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">R</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">version</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">V</codeph></entry></row></tbody></tgroup></adobetable>
 </p>
  
 <p class="- topic/p ">There is also a <codeph class="+ topic/ph pr-d/codeph ">WD</codeph> server string that specifies whether windowless mode is disabled. Windowless mode
 can be disabled in Flash Player due to incompatibility with the web browser or to a user setting in the mms.cfg file. 
 There is no corresponding Capabilities property.</p>
  
 <p class="- topic/p ">All properties of the Capabilities class are read-only.</p>
 
 </apiDesc><example conref="examples\CapabilitiesExample.as" class="- topic/example "> The following example outputs the values found in the
 flash.system.Capabilities object. First, it outputs the values into a text field.
 Then, it outputs the values using several calls to <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.system.Capabilities;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class CapabilitiesExample extends Sprite {
        
        public function CapabilitiesExample() {
            showCapabilities();
        }
        
        private function showCapabilities():void {
            var tf:TextField = new TextField();
            tf.height = 600;
            tf.width = 400;
            tf.autoSize = TextFieldAutoSize.LEFT;
            tf.wordWrap = true;
            
            tf.text = "avHardwareDisable: " + Capabilities.avHardwareDisable +
                
                "\nhasAccessibility: " + Capabilities.hasAccessibility +
                "\nhasAudio: " + Capabilities.hasAudio +
                "\nhasAudioEncoder: " + Capabilities.hasAudioEncoder +
                "\nhasEmbeddedVideo: " + Capabilities.hasEmbeddedVideo +
                "\nhasIME: " + Capabilities.hasIME +
                "\nhasMP3: " + Capabilities.hasMP3 +
                "\nhasPrinting: " + Capabilities.hasPrinting +
                "\nhasScreenBroadcast: " + Capabilities.hasScreenBroadcast +
                "\nhasScreenPlayback: " + Capabilities.hasScreenPlayback +
                "\nhasStreamingAudio: " + Capabilities.hasStreamingAudio +
                "\nhasStreamingVideo: " + Capabilities.hasStreamingVideo +
                "\nhasTLS: " + Capabilities.hasTLS +
                "\nhasVideoEncoder: " + Capabilities.hasVideoEncoder +
                "\nisDebugger: " + Capabilities.isDebugger +
                "\nisEmbeddedInAcrobat: " + Capabilities.isEmbeddedInAcrobat +
                "\nlanguage: " + Capabilities.language +
                "\nlocalFileReadDisable: " + Capabilities.localFileReadDisable +
                "\nmanufacturer: " + Capabilities.manufacturer +
                "\nmaxLevelIDC: " + Capabilities.maxLevelIDC +
                "\nos: " + Capabilities.os +
                "\npixelAspectRatio: " + Capabilities.pixelAspectRatio +
                "\nplayerType: " + Capabilities.playerType +
                "\nscreenColor: " + Capabilities.screenColor +
                "\nscreenDPI: " + Capabilities.screenDPI +
                "\nscreenResolutionX: " + Capabilities.screenResolutionX +
                "\nscreenResolutionY: " + Capabilities.screenResolutionY +
                "\nserverString: " + Capabilities.serverString +
                "\ntouchscreenType: " + Capabilities.touchscreenType +
                
                // The following capabilities are supported only when publishing for AIR.
                // If you are publishing for AIR, uncomment the following lines.
                //"\nlanguages: " + Capabilities.languages +
                //"\ncpuArchitecture: " + Capabilities.cpuArchitecture +
                //"\nsupports32BitProcesses: " + Capabilities.supports32BitProcesses +
                //"\nsupports64BitProcesses: " + Capabilities.supports64BitProcesses +    
                                
                "\nversion: " + Capabilities.version;
                
            addChild(tf);   
                
            trace("avHardwareDisable: " + Capabilities.avHardwareDisable);
            trace("hasAccessibility: " + Capabilities.hasAccessibility);
            trace("hasAudio: " + Capabilities.hasAudio);
            trace("hasAudioEncoder: " + Capabilities.hasAudioEncoder);
            trace("hasEmbeddedVideo: " + Capabilities.hasEmbeddedVideo);
            trace("hasIME: " + Capabilities.hasIME);
            trace("hasMP3: " + Capabilities.hasMP3);
            trace("hasPrinting: " + Capabilities.hasPrinting);
            trace("hasScreenBroadcast: " + Capabilities.hasScreenBroadcast);
            trace("hasScreenPlayback: " + Capabilities.hasScreenPlayback);
            trace("hasStreamingAudio: " + Capabilities.hasStreamingAudio);
            trace("hasStreamingVideo: " + Capabilities.hasStreamingVideo);
            trace("hasTLS: " + Capabilities.hasTLS);
            trace("hasVideoEncoder: " + Capabilities.hasVideoEncoder);
            trace("isDebugger: " + Capabilities.isDebugger);
            trace("isEmbeddedInAcrobat: " + Capabilities.isEmbeddedInAcrobat);
            trace("language: " + Capabilities.language);
            trace("localFileReadDisable: " + Capabilities.localFileReadDisable);
            trace("manufacturer: " + Capabilities.manufacturer);
            trace("maxLevelIDC: " + Capabilities.maxLevelIDC);
            trace("os: " + Capabilities.os);
            trace("pixelAspectRatio: " + Capabilities.pixelAspectRatio);
            trace("playerType: " + Capabilities.playerType);
            trace("screenColor: " + Capabilities.screenColor);
            trace("screenDPI: " + Capabilities.screenDPI);
            trace("screenResolutionX: " + Capabilities.screenResolutionX);
            trace("screenResolutionY: " + Capabilities.screenResolutionY);
            trace("serverString: " + Capabilities.serverString);
            trace("touchscreenType: " + Capabilities.touchscreenType);
            
            // The following capabilities are supported only when publishing for AIR.
            // If you are publishing for AIR, uncomment the following lines.       
            //trace("cpuArchitecture: " + Capabilities.cpuArchitecture);
            //trace("languages: " + Capabilities.languages);
            //trace("supports32BitProcesses: " + Capabilities.supports32BitProcesses);
            //trace("supports64BitProcesses: " + Capabilities.supports64BitProcesses);        
                        
            trace("version: " + Capabilities.version);
       
        }
    }
}

</codeblock></example></apiClassifierDetail><apiValue id="flash.system:Capabilities:avHardwareDisable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">avHardwareDisable</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether access to the user's camera and microphone has
	 been administratively prohibited (true) or allowed (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.avHardwareDisable, avHardwareDisable
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether access to the user's camera and microphone has
	 been administratively prohibited (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or allowed (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">AVD</codeph>.
	 
	 <p class="- topic/p ">For content in Adobe AIR™, this property applies only to content in security  
	 sandboxes other than the application security sandbox. Content in the application 
	 security sandbox can always access the user's camera and microphone.</p>
 	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/getCamera()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera.getCamera()</linktext></link><link href="flash.media.xml#Microphone/getMicrophone()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.getMicrophone()</linktext></link><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:cpuArchitecture:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">cpuArchitecture</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies the current CPU architecture.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.0.32" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>The following example traces the value of this read-only property:
	 <pre xml:space="preserve" class="- topic/pre ">
	 trace(Capabilities.cpuArchitecture);
	 </pre>
	  
	 </oldexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies the current CPU architecture. The <codeph class="+ topic/ph pr-d/codeph ">cpuArchitecture</codeph> property
	 can return the following strings: "<codeph class="+ topic/ph pr-d/codeph ">PowerPC</codeph>", "<codeph class="+ topic/ph pr-d/codeph ">x86</codeph>", 
	 "<codeph class="+ topic/ph pr-d/codeph ">SPARC</codeph>", and "<codeph class="+ topic/ph pr-d/codeph ">ARM</codeph>". 
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">ARCH</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasAccessibility:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasAccessibility</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the system supports 
	 (true) or does not support (false) communication 
	 with accessibility aids.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasAccessibility, hasAccessibility,
	 accessibility
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the system supports 
	 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or does not support (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>) communication 
	 with accessibility aids.
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">ACC</codeph>. 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#Accessibility/active" class="- topic/link "><linktext class="- topic/linktext ">flash.accessibility.Accessibility.active</linktext></link><link href="flash.accessibility.xml#Accessibility/updateProperties()" class="- topic/link "><linktext class="- topic/linktext ">flash.accessibility.Accessibility.updateProperties()</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:hasAudioEncoder:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasAudioEncoder</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the system can (true) or cannot (false)
	 encode an audio stream, such as that coming from a microphone.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasAudioEncoder, hasAudioEncoder 
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the system can (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or cannot (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)
	 encode an audio stream, such as that coming from a microphone.
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">AE</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasAudio:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasAudio</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the system has audio 
	 capabilities.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasAudio, hasAudio
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the system has audio 
	 capabilities. This property is always <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.  The server 
	 string is <codeph class="+ topic/ph pr-d/codeph ">A</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasEmbeddedVideo:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasEmbeddedVideo</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the system supports 
	 (true) or does not support (false) 
	 embedded video.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasEmbeddedVideo, hasEmbeddedVideo, video
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the system supports 
	 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or does not support (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>) 
	 embedded video. The server string is <codeph class="+ topic/ph pr-d/codeph ">EV</codeph>. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasIME:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasIME</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the system does (true) 
	 or does not (false) have an input method editor (IME) installed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasIME, hasIME, IME 
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the system does (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 
	 or does not (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>) have an input method editor (IME) installed.
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">IME</codeph>. 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME</linktext></link><link href="flash.system.xml#System/ime" class="- topic/link "><linktext class="- topic/linktext ">flash.system.System.ime</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:hasMP3:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasMP3</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the system does (true) 
	 or does not (false) have an MP3 decoder.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasMP3, hasMP3, MP3, audio
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the system does (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 
	 or does not (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>) have an MP3 decoder.
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">MP3</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasPrinting:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasPrinting</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the system does (true)
	 or does not (false) support printing.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasPrinting, hasPrinting, printing 
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the system does (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>)
	 or does not (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>) support printing.
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">PR</codeph>. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasScreenBroadcast:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasScreenBroadcast</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the system does (true) or does not (false)
	 support the development of screen broadcast applications to be run through Flash Media 
	 Server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasScreenBroadcast, hasScreenBroadcast
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the system does (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or does not (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)
	 support the development of screen broadcast applications to be run through Flash Media 
	 Server.
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">SB</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasScreenPlayback:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasScreenPlayback</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the system does (true) or does not 
	 (false) support the playback of screen broadcast applications 
	 that are being run through Flash Media Server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasScreenPlayback, hasScreenPlayback
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the system does (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or does not 
	 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>) support the playback of screen broadcast applications 
	 that are being run through Flash Media Server.
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">SP</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasStreamingAudio:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasStreamingAudio</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the system can (true) or cannot (false) 
	 play streaming audio.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasStreamingAudio, hasStreamingAudio, audio
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the system can (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or cannot (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>) 
	 play streaming audio.
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">SA</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasStreamingVideo:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasStreamingVideo</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the system can (true) or cannot 
	 (false) play streaming video.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasStreamingVideo, hasStreamingVideo, video
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the system can (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or cannot 
	 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>) play streaming video.
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">SV</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasTLS:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasTLS</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the system supports native SSL sockets through NetConnection 
	 (true) or does not (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasTLS, hasTLS, TLS 
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the system supports native SSL sockets through NetConnection 
	 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or does not (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">TLS</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/connectedProxyType" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.connectedProxyType</linktext></link><link href="flash.net.xml#NetConnection/proxyType" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.proxyType</linktext></link><link href="flash.net.xml#NetConnection/usingTLS" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.usingTLS</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:hasVideoEncoder:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hasVideoEncoder</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the system can (true) or cannot 
	 (false) encode a video stream, such as that coming 
	 from a web camera.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.hasVideoEncoder, hasVideoEncoder
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the system can (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or cannot 
	 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>) encode a video stream, such as that coming 
	 from a web camera.
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">VE</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:isDebugger:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isDebugger</apiName><shortdesc class="- topic/shortdesc "> 
	 Specifies whether the system is a special debugging version 
	 (true) or an officially released version (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.isDebugger, isDebugger, debugging 
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 Specifies whether the system is a special debugging version 
	 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or an officially released version (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>). 
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">DEB</codeph>. This property is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>
	 when running in <ph class="- topic/ph ">the debug version of Flash Player or</ph>
	 the AIR Debug Launcher (ADL).
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:isEmbeddedInAcrobat:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isEmbeddedInAcrobat</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether the Flash runtime is embedded in a PDF file that is open in Acrobat 9.0 or higher
	 (true) or not (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.127.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.isEmbeddedInAcrobat, isEmbeddedInAcrobat, Acrobat
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether the Flash runtime is embedded in a PDF file that is open in Acrobat 9.0 or higher
	 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or not (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:languages:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">languages</apiName><shortdesc class="- topic/shortdesc ">
		 An array of strings that contain information about the user's preferred user interface languages, as set 
		 through the operating system.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 An array of strings that contain information about the user's preferred user interface languages, as set 
		 through the operating system. The strings will contain language tags (and script and region information,
		 where applicable) defined by RFC4646 
		 (<xref href="http://www.ietf.org/rfc/rfc4646.txt" scope="external" class="- topic/xref ">http://www.ietf.org/rfc/rfc4646.txt</xref>)
		 and will use dashes as a delimiter (for example, <codeph class="+ topic/ph pr-d/codeph ">"en-US"</codeph> or <codeph class="+ topic/ph pr-d/codeph ">"ja-JP"</codeph>). 
		 Languages are listed in the array in the order of preference, as determined by the operating system 
		 settings. 
		 
		 <p class="- topic/p ">Operating systems differ in region information returned in locale strings. One operating system
		 may return <codeph class="+ topic/ph pr-d/codeph ">"en-us"</codeph>, whereas another may return <codeph class="+ topic/ph pr-d/codeph ">"en"</codeph>.</p>
		 
		 <p class="- topic/p ">The first entry in the returned array generally has the same primary language ID
		 as the <codeph class="+ topic/ph pr-d/codeph ">Capabilities.language</codeph> property. For example, if <codeph class="+ topic/ph pr-d/codeph ">Capabilities.languages[0]</codeph> 
		 is set to <codeph class="+ topic/ph pr-d/codeph ">"en-US"</codeph>, then the <codeph class="+ topic/ph pr-d/codeph ">language</codeph> property is set to <codeph class="+ topic/ph pr-d/codeph ">"en"</codeph>.
		 However, if the <codeph class="+ topic/ph pr-d/codeph ">Capabilities.language</codeph> property is set to <codeph class="+ topic/ph pr-d/codeph ">"xu"</codeph> (specifying 
		 an unknown language), the first element in this array will be different. For this reason, 
		 <codeph class="+ topic/ph pr-d/codeph ">Capabilities.languages[0]</codeph> can be more accurate than <codeph class="+ topic/ph pr-d/codeph ">Capabilities.language</codeph>.</p>
		 
		 <p class="- topic/p ">The server string is <codeph class="+ topic/ph pr-d/codeph ">LS</codeph>.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:language:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">language</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies the language code of the system on which the content is running.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.language, language
	 
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies the language code of the system on which the content is running. The language is
	 specified as a lowercase two-letter language code from ISO 639-1. For Chinese, an additional
	 uppercase two-letter country code from ISO 3166 distinguishes between Simplified and
	 Traditional Chinese. The languages codes are based on the English names of the language: for example, 
	 <codeph class="+ topic/ph pr-d/codeph ">hu</codeph> specifies Hungarian.
	 
	 <p class="- topic/p ">On English systems, this property returns only the language code (<codeph class="+ topic/ph pr-d/codeph ">en</codeph>), not 
	 the country code. On Microsoft Windows systems, this property returns the user interface (UI) 
	 language, which refers to the language used for all menus, dialog boxes, error messages, and help 
	 files. The following table lists the possible values:
	 
     <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry align="left" class="- topic/entry ">Language</entry><entry align="left" class="- topic/entry ">Value</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">Czech</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cs</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Danish</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">da</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Dutch</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">nl</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">English</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">en</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Finnish</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">fi</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">French</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">fr</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">German</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">de</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Hungarian</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">hu</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Italian</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">it</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Japanese</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ja</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Korean</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ko</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Norwegian</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">no</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Other/unknown</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">xu</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Polish</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pl</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Portuguese</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pt</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Russian</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ru</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Simplified Chinese</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">zh-CN</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Spanish</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">es</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Swedish</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sv</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Traditional Chinese</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">zh-TW</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Turkish</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">tr</codeph></entry></row></tbody></tgroup></adobetable>
	 </p>
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> The value of <codeph class="+ topic/ph pr-d/codeph ">Capabilities.language</codeph> property is limited 
	 to the possible values on this list. Because of this limitation, Adobe AIR applications 
	 should use the first element in the <codeph class="+ topic/ph pr-d/codeph ">Capabilities.languages</codeph> 
	 array to determine the primary user interface language for the system. </p>
	 
	 <p class="- topic/p ">The server string is <codeph class="+ topic/ph pr-d/codeph ">L</codeph>.</p>
	 
	 </apiDesc><example conref="examples\Capabilities_languageExample.as" class="- topic/example "> In the following example, the content that is displayed depends on the language of the user's operating
 system.
 
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">Capabilities.language</codeph> property returns the ISO 639-1 language code 
 (for example, "en" for English). The <codeph class="+ topic/ph pr-d/codeph ">switch</codeph> statement checks for the language code and sets  
 the content of the <codeph class="+ topic/ph pr-d/codeph ">myTextField</codeph> text field to a greeting specific to the 
 language. If the language code is not supported by the example, the default error string 
 is returned.</p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.system.Capabilities;

    public class Capabilities_languageExample extends Sprite {

        public function Capabilities_languageExample()  {
            var myTextField:TextField = new TextField();         
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.background = true;
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            
            var greetingEnglish:String = "Hello World";
            var greetingGerman:String = "Hallo Welt";
            var greetingFrench:String = "Bonjour Monde";
            var greetingSpanish:String = "Hola Mundo";

            var lang:String = Capabilities.language;
                         
            switch (lang) {
                case "en":
                    myTextField.text = greetingEnglish;
                    break;
                case "de":
                    myTextField.text = greetingGerman;
                    break;
                case "fr":
                    myTextField.text = greetingFrench;
                    break;
                case "es":
                    myTextField.text = greetingSpanish;
                    break;
                default:
                    myTextField.text = "Sorry your system's language is not supported at this time.";               
            }
             
            this.addChild(myTextField);
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Capabilities/languages" class="- topic/link "><linktext class="- topic/linktext ">languages</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:localFileReadDisable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localFileReadDisable</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies whether read access to the user's hard disk has been 
	 administratively prohibited (true) or allowed 
	 (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.localFileReadDisable, localFileReadDisable
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies whether read access to the user's hard disk has been 
	 administratively prohibited (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or allowed 
	 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>). For content in Adobe AIR, this property 
	 applies only to content in security sandboxes other 
	 than the application security sandbox. (Content in the application 
	 security sandbox can always read from the file system.) 
	 <ph class="- topic/ph ">If this property is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, 
	 Flash Player cannot read files (including the first file that
	 Flash Player launches with) from the user's hard disk.</ph> 
	 If this property is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, AIR content outside of the 
	 application security sandbox cannot read files from the user's 
	 hard disk. For example, attempts to read a file on the user's 
	 hard disk using load methods will fail if this property 
	 is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
	 
	 <p class="- topic/p ">Reading runtime shared libraries is also blocked  
	 if this property is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, but reading local shared objects 
	 is allowed without regard to the value of this property.</p>
	 
	 <p class="- topic/p ">The server string is <codeph class="+ topic/ph pr-d/codeph ">LFD</codeph>.</p>
	 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:manufacturer:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">manufacturer</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies the manufacturer of the running version of 
	 Flash Player or  the AIR runtime, in the format "Adobe 
	 OSName".</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.manufacturer, manufacturer
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies the manufacturer of <ph class="- topic/ph ">the running version of 
	 Flash Player or </ph> the AIR runtime, in the format <codeph class="+ topic/ph pr-d/codeph ">"Adobe</codeph> 
	 <codeph class="+ topic/ph pr-d/codeph "><i class="+ topic/ph hi-d/i ">OSName</i>"</codeph>. The value for <codeph class="+ topic/ph pr-d/codeph "><i class="+ topic/ph hi-d/i ">OSName</i></codeph> 
	 could be <codeph class="+ topic/ph pr-d/codeph ">"Windows"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"Macintosh"</codeph>,
	 <codeph class="+ topic/ph pr-d/codeph ">"Linux"</codeph>, or another operating system name. The server string is <codeph class="+ topic/ph pr-d/codeph ">M</codeph>.
	 
	 <p class="- topic/p ">Do <i class="+ topic/ph hi-d/i ">not</i> use <codeph class="+ topic/ph pr-d/codeph ">Capabilities.manufacturer</codeph> to determine a capability based on 
	 the operating system if a more specific capability property exists. Basing a capability on the operating 
	 system is a bad idea, since it can lead to problems if an application does not consider all potential 
	 target operating systems. Instead, use the property corresponding to the capability for which you 
	 are testing. For more information, see the Capabilities class description.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:maxLevelIDC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">maxLevelIDC</apiName><shortdesc class="- topic/shortdesc ">
     Retrieves the highest H.264 Level IDC that the client hardware supports.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.maxLevelIDC, maxLevelIDC
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Retrieves the highest H.264 Level IDC that the client hardware supports.
     Media run at this level are guaranteed to run; however, media run at  
     the highest level might not run with the highest quality. 
     This property is useful for servers trying to target a client's capabilities.
     Using this property, a server can determine the level of video to send to the client.
     
     <p class="- topic/p ">The server string is <codeph class="+ topic/ph pr-d/codeph ">ML</codeph>.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:os:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">os</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies the current operating system.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.os, os
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies the current operating system. The <codeph class="+ topic/ph pr-d/codeph ">os</codeph> property
	 can return the following strings:
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Operating system</entry><entry class="- topic/entry ">Value</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">Windows 7</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows 7"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Vista</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Vista"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Server 2008 R2</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Server 2008 R2"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Server 2008</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Server 2008"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Home Server</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Home Server"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Server 2003 R2</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Server 2003 R2"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Server 2003</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Server 2003"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows XP 64</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Server XP 64"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows XP</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows XP"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows 98</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows 98"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows 95</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows 95"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows NT</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows NT"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows 2000</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows 2000"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows ME</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows ME"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows CE</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows CE"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows SmartPhone</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows SmartPhone"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows PocketPC</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows PocketPC"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows CEPC</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows CEPC"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Windows Mobile</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Windows Mobile"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Mac OS</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Mac OS X.Y.Z"</codeph> (where X.Y.Z is the version number, for example:
		<codeph class="+ topic/ph pr-d/codeph ">"Mac OS 10.5.2"</codeph>)</entry></row><row class="- topic/row "><entry class="- topic/entry ">Linux</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"Linux"</codeph> (Flash Player attaches the Linux version, such as <codeph class="+ topic/ph pr-d/codeph ">"Linux 2.6.15-1.2054_FC5smp"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">iPhone OS 4.1</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"iPhone3,1"</codeph></entry></row></tbody></tgroup></adobetable>
	
	 <p class="- topic/p ">The server string is <codeph class="+ topic/ph pr-d/codeph ">OS</codeph>.</p>
	 
	 <p class="- topic/p ">Do <i class="+ topic/ph hi-d/i ">not</i> use <codeph class="+ topic/ph pr-d/codeph ">Capabilities.os</codeph> to determine a capability based on 
	 the operating system if a more specific capability property exists. Basing a capability on the operating 
	 system is a bad idea, since it can lead to problems if an application does not consider all potential 
	 target operating systems. Instead, use the property corresponding to the capability for which you 
	 are testing. For more information, see the Capabilities class description.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:pixelAspectRatio:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">pixelAspectRatio</apiName><shortdesc class="- topic/shortdesc "> 
	 Specifies the pixel aspect ratio of the screen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.pixelAspectRatio, pixelAspectRatio
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 Specifies the pixel aspect ratio of the screen. The server string
	 is <codeph class="+ topic/ph pr-d/codeph ">AR</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:playerType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">playerType</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies the type of runtime environment.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.playerType, playerType
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies the type of runtime environment. This property can have one of the following
	 values:
	 
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"ActiveX"</codeph> for the Flash Player ActiveX control used by Microsoft Internet Explorer</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"Desktop"</codeph> for the Adobe AIR runtime (except for SWF content loaded by an HTML page, which
	 					has <codeph class="+ topic/ph pr-d/codeph ">Capabilities.playerType</codeph> set to <codeph class="+ topic/ph pr-d/codeph ">"PlugIn"</codeph>)</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"External"</codeph> for the external Flash Player<ph outputclass="flashonly" class="- topic/ph "> or in test mode</ph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"PlugIn"</codeph> for the Flash Player browser plug-in (and for SWF content loaded by
	 					an HTML page in an AIR application)</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"StandAlone"</codeph> for the stand-alone Flash Player</li></ul>
	 <p class="- topic/p ">The server string is <codeph class="+ topic/ph pr-d/codeph ">PT</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenColor:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">screenColor</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies the screen color.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.screenColor, screenColor
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies the screen color. This property can have the value 
	 <codeph class="+ topic/ph pr-d/codeph ">"color"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"gray"</codeph> (for grayscale), or 
	 <codeph class="+ topic/ph pr-d/codeph ">"bw"</codeph> (for black and white). 
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">COL</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenDPI:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">screenDPI</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies the dots-per-inch (dpi) resolution of the screen, in pixels.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.screenDPI, screenDPI
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies the dots-per-inch (dpi) resolution of the screen, in pixels.
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">DP</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenResolutionX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">screenResolutionX</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies the maximum horizontal resolution of the screen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.screenResolutionX, screenResolutionY
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies the maximum horizontal resolution of the screen. 
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">R</codeph> (which returns both the width and height of the screen).
	 This property does not update with a user's screen resolution and instead only indicates the resolution 
	 at the time <ph class="- topic/ph ">Flash Player or </ph> an Adobe AIR application started. 
	 Also, the value only specifies the primary screen.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenResolutionY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">screenResolutionY</apiName><shortdesc class="- topic/shortdesc "> 
	 Specifies the maximum vertical resolution of the screen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.screenResolutionY, screenResolutionY
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 Specifies the maximum vertical resolution of the screen. 
	 The server string is <codeph class="+ topic/ph pr-d/codeph ">R</codeph> (which returns both the width and height of the screen).
	 This property does not update with a user's screen resolution and instead only indicates the resolution 
	 at the time <ph class="- topic/ph ">Flash Player or </ph> an Adobe AIR application started. 
	 Also, the value only specifies the primary screen.
	 
	 </apiDesc><example conref="examples\Capabilities_ScreenRes.as" class="- topic/example "> The following example is a simple test that indicates the current screen resolution and operating system version. 
 When testing this example, click the text field to see the property values:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.events.~;
import flash.display.~;
import flash.system.Capabilities;
import flash.text.TextField;

var screenInfoTxt:TextField = new TextField();
var screenInfoTxt.x = 30;
var screenInfoTxt.y = 50;
var screenInfoTxt.width = 300;
var screenInfoTxt.height = 100;
var screenInfoTxt.border = true;

addChild(screenInfoTxt);

addEventListener(MouseEvent.CLICK, getScreenNVersion);

function getScreenNVersion(e:MouseEvent):void{
    screenInfoTxt.text= "flash.system.Capabilities.screenResolutionX is : " + String(flash.system.Capabilities.screenResolutionX) + "\n" +
    "flash.system.Capabilities.screenResolutionY is : " + String(flash.system.Capabilities.screenResolutionY) + "\n" +
    "flash.system.Capabilities.version is : " + flash.system.Capabilities.version;
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:serverString:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">serverString</apiName><shortdesc class="- topic/shortdesc "> 
	 A URL-encoded string that specifies values for each Capabilities
	 property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.serverString, serverString
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 A URL-encoded string that specifies values for each Capabilities
	 property.
	 
	 <p class="- topic/p ">The following example shows a URL-encoded string:
	 <pre xml:space="preserve" class="- topic/pre ">A=t&amp;SA=t&amp;SV=t&amp;EV=t&amp;MP3=t&amp;AE=t&amp;VE=t&amp;ACC=f&amp;PR=t&amp;SP=t&amp;
	 SB=f&amp;DEB=t&amp;V=WIN%208%2C5%2C0%2C208&amp;M=Adobe%20Windows&amp;
	 R=1600x1200&amp;DP=72&amp;COL=color&amp;AR=1.0&amp;OS=Windows%20XP&amp;
	 L=en&amp;PT=External&amp;AVD=f&amp;LFD=f&amp;WD=f</pre></p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:supports32BitProcesses:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">supports32BitProcesses</apiName><shortdesc class="- topic/shortdesc ">
	Specifies whether the system supports running 32-bit processes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.0.32" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>The following example traces the value of this read-only property:
	<pre xml:space="preserve" class="- topic/pre ">
	trace(Capabilities.supports32BitProcesses);
	</pre>
	 
	</oldexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Specifies whether the system supports running 32-bit processes.
	The server string is <codeph class="+ topic/ph pr-d/codeph ">PR32</codeph>.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:supports64BitProcesses:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">supports64BitProcesses</apiName><shortdesc class="- topic/shortdesc ">
	Specifies whether the system supports running 64-bit processes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.0.32" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>The following example traces the value of this read-only property:
	<pre xml:space="preserve" class="- topic/pre ">
	trace(Capabilities.supports64BitProcesses);
	</pre>
	 
	</oldexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Specifies whether the system supports running 64-bit processes.
	The server string is <codeph class="+ topic/ph pr-d/codeph ">PR64</codeph>.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:touchscreenType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">touchscreenType</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies the type of touchscreen supported, if any.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies the type of touchscreen supported, if any. Values are defined in the flash.system.TouchscreenType class.
	 
	 </apiDesc><example conref="examples\Capabilities_touchScreenType.as" class="- topic/example "> The following example is a simple test that indicates the current type of touch screen.
 When testing this example, click a text field to see the property values:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.events.~~;
import flash.display.~~;
import flash.system.Capabilities;
import flash.text.TextField;

var capabilitiesTouchScreenTypeTxt:TextField = new TextField();
capabilitiesTouchScreenTypeTxt.width = 300;
capabilitiesTouchScreenTypeTxt.border = true;

addChild(capabilitiesTouchScreenTypeTxt);

addEventListener(MouseEvent.CLICK, getScreenKeyboardType);

function getScreenKeyboardType(e:MouseEvent):void{
    capabilitiesTouchScreenTypeTxt.text= "flash.system.Capabilities.touchscreenType is : " + flash.system.Capabilities.touchscreenType;
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#TouchscreenType" class="- topic/link "><linktext class="- topic/linktext ">TouchscreenType class</linktext></link><link href="flash.ui.xml#Mouse/supportsCursor" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.Mouse.supportsCursor</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:version:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">version</apiName><shortdesc class="- topic/shortdesc "> 
	 Specifies the Flash Player or Adobe&amp;#xAE; AIR&amp;#xAE;
	 platform and version information.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Capabilities, Capabilities.version, version
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 Specifies the Flash Player or Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup>
	 platform and version information. The format of the version number is: 
	 <i class="+ topic/ph hi-d/i ">platform majorVersion,minorVersion,buildNumber,internalBuildNumber</i>. 
	 Possible values for <i class="+ topic/ph hi-d/i ">platform</i> are <codeph class="+ topic/ph pr-d/codeph ">"WIN"</codeph>, `
	 <codeph class="+ topic/ph pr-d/codeph ">"MAC"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"LNX"</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">"AND"</codeph>. Here are some 
	 examples of version information:
	 
	 <pre xml:space="preserve" class="- topic/pre ">
	 WIN 9,0,0,0  // Flash Player 9 for Windows
	 MAC 7,0,25,0   // Flash Player 7 for Macintosh
	 LNX 9,0,115,0  // Flash Player 9 for Linux
	 AND 10,2,150,0 // Flash Player 10 for Android
	 </pre>
	 
	 <p class="- topic/p ">Do <i class="+ topic/ph hi-d/i ">not</i> use <codeph class="+ topic/ph pr-d/codeph ">Capabilities.version</codeph> to determine a capability based on 
	 the operating system if a more specific capability property exists. Basing a capability on the operating 
	 system is a bad idea, since it can lead to problems if an application does not consider all potential 
	 target operating systems. Instead, use the property corresponding to the capability for which you 
	 are testing. For more information, see the Capabilities class description.</p>
	 
	 <p class="- topic/p ">The server string is <codeph class="+ topic/ph pr-d/codeph ">V</codeph>.</p>
	 
	 </apiDesc><example conref="examples\Capabilities_ScreenRes.as" class="- topic/example "> The following example is a simple test that indicates the current screen resolution and operating system version. 
 When testing this example, click the text field to see the property values:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.events.~;
import flash.display.~;
import flash.system.Capabilities;
import flash.text.TextField;

var screenInfoTxt:TextField = new TextField();
var screenInfoTxt.x = 30;
var screenInfoTxt.y = 50;
var screenInfoTxt.width = 300;
var screenInfoTxt.height = 100;
var screenInfoTxt.border = true;

addChild(screenInfoTxt);

addEventListener(MouseEvent.CLICK, getScreenNVersion);

function getScreenNVersion(e:MouseEvent):void{
    screenInfoTxt.text= "flash.system.Capabilities.screenResolutionX is : " + String(flash.system.Capabilities.screenResolutionX) + "\n" +
    "flash.system.Capabilities.screenResolutionY is : " + String(flash.system.Capabilities.screenResolutionY) + "\n" +
    "flash.system.Capabilities.version is : " + flash.system.Capabilities.version;
}
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiOperation id="globalOperation:flash.system:fscommand" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">fscommand</apiName><shortdesc class="- topic/shortdesc ">
 Lets the SWF file communicate with either Flash Player or the program hosting Flash Player, 
 such as a web browser.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample><p class="- topic/p ">In the following example, the <code>fscommand()</code> function sets Flash Player to 
 scale the SWF file to the full monitor screen size when the <code>fullscreen_btn</code> button or 
 <code>unfullscreen_btn</code> is released:</p>
 
 <pre xml:space="preserve" class="- topic/pre ">this.fullscreen_btn.onRelease = function() {
   fscommand("fullscreen", true);
 };
 this.unfullscreen_btn.onRelease = function() {
   fscommand("fullscreen", false);
 };
 </pre>
 
 <p class="- topic/p ">The following example uses the <code>fscommand()</code> function applied to a button in Flash to 
 open a JavaScript message box in an HTML page. The message itself is sent to JavaScript as the 
 <code>fscommand</code> parameter. </p>
 
 <p class="- topic/p ">You must add a function to the HTML page that contains the SWF file. This function, 
 <code><i class="+ topic/ph hi-d/i ">myDocument</i></code><code>_DoFSCommand</code>, sits in the HTML page and waits for an 
 <code>fscommand()</code> function in Flash. When an <code>fscommand</code> is triggered in Flash 
 (for example, when a user presses the button), the <code>command</code> and <code>args</code> strings 
 are passed to the <code><i class="+ topic/ph hi-d/i ">myDocument</i></code><code>_DoFSCommand </code>function. You can use the 
 passed strings in your JavaScript or VBScript code in any way you like. In this example, the function 
 contains a conditional <code>if</code> statement that checks to see if the command string is 
 "<code>messagebox</code>". If it is, a JavaScript alert box (or "message box") opens 
 and displays the contents of the <code>args</code> string.</p>
 
 <pre xml:space="preserve" class="- topic/pre ">function myDocument_DoFSCommand(command, args) {
   if (command == "messagebox") {
      alert(args);
   }
 
 </pre>
 
 <p class="- topic/p ">In the Flash document, add the <code>fscommand()</code> function to a button:</p>
 
 <pre xml:space="preserve" class="- topic/pre ">fscommand("messagebox", "This is a message box called from within Flash.")
 </pre>
 
 <p class="- topic/p ">You can also use expressions for the <code>fscommand()</code> function and parameters, as in the 
 following example:</p>
 
 <pre xml:space="preserve" class="- topic/pre ">fscommand("messagebox", "Hello, " + name + ", welcome to our website!")
 </pre>
 
 <p class="- topic/p ">To test the SWF file, select File &gt; Publish Preview &gt; HTML.</p>
 
 <p class="- topic/p "><strong>Note: </strong>If you publish your SWF file using the Flash with FSCommand template in the 
 HTML 
 tab of the Publish Settings dialog box, the <code>myDocument_DoFSCommand</code> function is inserted 
 automatically. The SWF file's <code>NAME</code> and <code>ID</code> attributes will be the filename. 
 For example, for the file myDocument.fla, the attributes would be set to <code>myDocument</code>.</p>
 </oldexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the function is not called in response to a user action, such as a mouse
 event or keypress event.
 
 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">command</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string passed to the host application for any use, or a command passed to Flash Player.
 
 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string passed to the host application for any use, or a value passed to Flash Player.
 
 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Lets the SWF file communicate with either Flash Player or the program hosting Flash Player, 
 such as a web browser. You can also use the <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> function to pass messages to 
 Director or to Visual Basic, Visual C++, and other programs that can host ActiveX controls.
 
  
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> function lets a SWF file communicate with a script in a web page. 
  However, script access is controlled by the web page's <codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess</codeph> setting. 
  (You set this attribute in the HTML code that embeds the SWF file—for
  example, in the <codeph class="+ topic/ph pr-d/codeph ">PARAM</codeph> tag for Internet Explorer or the <codeph class="+ topic/ph pr-d/codeph ">EMBED</codeph> tag for Netscape.) </p>
  <ul class="- topic/ul "><li class="- topic/li "> When <codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">"sameDomain"</codeph> (the default), 
  scripting is allowed only from SWF files that are in the same domain as the web page. </li><li class="- topic/li "> When <codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">"always"</codeph>, 
  the SWF file can communicate with the HTML page in which it is embedded 
  even when the SWF file is from a different domain than the HTML page. </li><li class="- topic/li ">When <codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">"never"</codeph>, 
  the SWF file cannot communicate with any HTML page. Note that using this value is deprecated and not recommended, 
  and shouldn't be necessary if you don't serve untrusted SWF files from your own domain. 
  If you do need to serve untrusted SWF files, Adobe recommends that you create a distinct subdomain 
  and place all untrusted content there. </li></ul>
 
 <p class="- topic/p ">You can prevent a SWF file from using this method by setting the 
 <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> parameter of the the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> 
 tags in the HTML page that contains the SWF content. </p>
 
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> function is not allowed if the calling SWF file is in 
  the local-with-file-system or local-with-network sandbox and the containing HTML page is in 
  an untrusted sandbox.</p>
 
 <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic: 
 <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
 
 <p class="- topic/p ">Usage 1: To use <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> to send a message to Flash Player, you must use predefined commands and parameters. The 
 following table shows the values that you can specify for the <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> function's <codeph class="+ topic/ph pr-d/codeph ">command</codeph> and 
 <codeph class="+ topic/ph pr-d/codeph ">args</codeph> parameters. These values control SWF files that are playing in Flash Player, including projectors. (A 
 <i class="+ topic/ph hi-d/i ">projector</i> is a SWF file saved in a format that can run as a stand-alone application—that is, without Flash Player.)</p>
 
              <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Command</entry><entry class="- topic/entry ">Parameter (args)</entry><entry class="- topic/entry ">Purpose</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">quit</codeph></entry><entry class="- topic/entry ">None</entry><entry class="- topic/entry ">Closes the projector.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">fullscreen</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> or <codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry ">Specifying <codeph class="+ topic/ph pr-d/codeph ">true</codeph> sets Flash Player to full-screen mode. Specifying 
                      <codeph class="+ topic/ph pr-d/codeph ">false</codeph> returns the player to normal menu view.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowscale</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> or <codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry ">Specifying <codeph class="+ topic/ph pr-d/codeph ">false</codeph> sets the player so that the SWF file is always drawn 
                      at its original size and never scaled. Specifying <codeph class="+ topic/ph pr-d/codeph ">true</codeph> forces the SWF file to scale to 100% of the 
                      player.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">showmenu</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> or <codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry ">Specifying <codeph class="+ topic/ph pr-d/codeph ">true</codeph> enables the full set of context menu items. Specifying 
                      <codeph class="+ topic/ph pr-d/codeph ">false</codeph> hides all of the context menu items except About Flash Player and Settings.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">exec</codeph></entry><entry class="- topic/entry ">Path to application </entry><entry class="- topic/entry ">Executes an application from within the projector.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">trapallkeys</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> or <codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry ">Specifying <codeph class="+ topic/ph pr-d/codeph ">true</codeph> sends all key events, including accelerator keys, to 
                      the <codeph class="+ topic/ph pr-d/codeph ">onClipEvent(keyDown/keyUp)</codeph> handler in Flash Player. </entry></row></tbody></tgroup></adobetable>
 <p class="- topic/p ">Not all of the commands listed in the table are available in all applications: 
 <ul class="- topic/ul "><li class="- topic/li ">None of the commands are available in web players.</li><li class="- topic/li ">All of the commands are available in stand-alone projector applications.</li><li class="- topic/li ">AIR applications should use the flash.desktop.NativeApplication class for similar functions, such as
 <codeph class="+ topic/ph pr-d/codeph ">NativeApplication.nativeApplication.exit()</codeph> instead of <codeph class="+ topic/ph pr-d/codeph ">fscommand("quit")</codeph>.</li><li class="- topic/li ">Only <codeph class="+ topic/ph pr-d/codeph ">allowscale</codeph> and <codeph class="+ topic/ph pr-d/codeph ">exec</codeph> are available in test-movie players.</li></ul>
 </p>
 
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">exec</codeph> command can contain only the characters A-Z, a-z, 0-9, period (.), and underscore (_). The <codeph class="+ topic/ph pr-d/codeph ">exec</codeph>
 command runs in the subdirectory fscommand only. In other words, if you use the <codeph class="+ topic/ph pr-d/codeph ">exec</codeph> command to call an application, the
 application must reside in a subdirectory named fscommand. The <codeph class="+ topic/ph pr-d/codeph ">exec</codeph> command works only from within a Flash projector  
 file.</p>
 
 <p class="- topic/p ">Usage 2: To use <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> to send a message to a scripting language such as JavaScript in a web browser, you can 
 pass any two parameters in the <codeph class="+ topic/ph pr-d/codeph ">command</codeph> and <codeph class="+ topic/ph pr-d/codeph ">args</codeph> parameters. These parameters can be strings or  
 expressions, and they are used in a JavaScript function that handles, or <i class="+ topic/ph hi-d/i ">catches</i>, the <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> function. </p>
 
 <p class="- topic/p ">In a web browser, <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> calls the JavaScript function <codeph class="+ topic/ph pr-d/codeph ">moviename_DoFScommand</codeph>, which resides in the  
 web page that contains the SWF file. For <codeph class="+ topic/ph pr-d/codeph ">moviename</codeph>, supply the name of the Flash object that you used for the 
 <codeph class="+ topic/ph pr-d/codeph ">NAME</codeph> attribute of the <codeph class="+ topic/ph pr-d/codeph ">EMBED</codeph> tag or the ID property of the <codeph class="+ topic/ph pr-d/codeph ">OBJECT</codeph> tag. If you assign the SWF file
 the name "myMovie", the JavaScript function <codeph class="+ topic/ph pr-d/codeph ">myMovie_DoFScommand</codeph> is called. </p>
 
 <p class="- topic/p ">In the web page that contains the SWF file, set the <codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess</codeph> attribute to allow or deny the SWF file's 
 ability to access the web page, as described above. (You set this attribute in the HTML code that embeds the SWF file—for example, in the 
 <codeph class="+ topic/ph pr-d/codeph ">PARAM</codeph> tag for Internet Explorer or the <codeph class="+ topic/ph pr-d/codeph ">EMBED</codeph> tag for Netscape.) </p>
 
 <p class="- topic/p ">In Flash Player 10 and later running in a browser, using this method programmatically to
 open a pop-up window may not be successful.  Various browsers (and browser configurations) may block pop-up windows 
 at any time; it is not possible to guarantee any pop-up window will appear.  
 However, for the best chance of success, use this method to open a pop-up window only in code that executes 
 as a direct result of a user action (for example, in an event handler for a mouse click or key-press event.)</p>
 
 <p class="- topic/p ">Usage 3: The <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> function can send messages to Director (Macromedia Director from Adobe). 
 These messages are interpreted by Lingo (the Director scripting language) as strings, events, or executable Lingo 
 code. If a message is a string or an event, you must write the Lingo code to receive the message from the 
 <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> function and carry out an action in Director. For more information, see the Director Support 
 Center at <xref href="http://www.adobe.com/support/director/" scope="external" class="- topic/xref ">www.adobe.com/support/director/</xref>.</p>
 
 <p class="- topic/p ">Usage 4: In VisualBasic, Visual C++, and other programs that can host ActiveX controls, <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> sends a VB event 
 with two strings that can be handled in the environment's programming language. For more information, use the keywords "Flash method" 
 to search the Flash Support Center at <xref href="http://www.adobe.com/support/flash/" scope="external" class="- topic/xref ">www.adobe.com/support/flash/</xref>.</p>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> The ExternalInterface class provides better functionality
 for communication between JavaScript and ActionScript (Usage 2) and between ActionScript and VisualBasic, Visual C++, or other 
 programs that can host ActiveX controls (Usage 4). You should continue to use <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> for sending messages to Flash 
 Player (Usage 1) and Director (Usage 3).</p>
 
 </apiDesc><example conref="examples\FSCommandExample.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph> can be used to direct
 Flash Player to go into full screen mode and not allow scaling.  An orange box is then
 added to the stage using <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph>.  In <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph>, a <codeph class="+ topic/ph pr-d/codeph ">click</codeph>
 event listener is added named <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>, which responds to <codeph class="+ topic/ph pr-d/codeph ">click</codeph> 
 events by directing Flash Player to exit using another call to <codeph class="+ topic/ph pr-d/codeph ">fscommand().</codeph>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note: </b> this example should be executed in the standalone Flash Player and
 not within a web browser.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.system.fscommand;
    import flash.events.MouseEvent;

    public class FSCommandExample extends Sprite {
        private var bgColor:uint = 0xFFCC00;
        private var size:uint = 100;

        public function FSCommandExample() {
            fscommand("fullscreen", "true");
            fscommand("allowscale", "false");
            draw();
        }

        private function clickHandler(event:MouseEvent):void {
            fscommand("quit");
            trace("clickHandler");
        }

        private function draw():void {
            var child:Sprite = new Sprite();
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            child.buttonMode = true;
            addEventListener(MouseEvent.CLICK, clickHandler);

            var label:TextField = new TextField();
            label.text = "quit";
            label.selectable = false;
            label.mouseEnabled = false;
            child.addChild(label);

            addChild(child);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication</linktext></link></related-links></apiOperation><apiClassifier languages="" id="flash.system:IME" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IME</apiName><shortdesc class="- topic/shortdesc ">
 The IME class lets you directly manipulate the operating system's input method 
 editor (IME) in the Flash runtime application that is running on a client computer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Lets you directly manipulate the operating system's input method editor (IME).
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The IME class lets you directly manipulate the operating system's input method 
 editor (IME) in the Flash runtime application that is running on a client computer. You can 
 determine whether an IME is installed, whether or not the IME is currently enabled, and which IME is
 enabled. You can disable or enable the IME in the application, and you can perform other limited
 functions, depending on the operating system.
 
 
 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">AIR profile support:</i> This feature is supported 
 on desktop operating systems, but it is not supported on all mobile devices. It is also not supported on
 AIR for TV devices. You can test for support at run time using the <codeph class="+ topic/ph pr-d/codeph ">IME.isSupported</codeph> property. See 
 <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">
 AIR Profile Support</xref> for more information regarding API support across multiple profiles.</p>
 
 <p class="- topic/p ">IMEs let users type non-ASCII text characters in multibyte languages
 such as Chinese, Japanese, and Korean. For more information on working with IMEs, see the 
 documentation for the operating system for which you are developing applications.
 For additional resources, see the following websites:
 <ul class="- topic/ul "><li class="- topic/li "><xref href="http://www.microsoft.com/globaldev/default.mspx" scope="external" class="- topic/xref ">http://www.microsoft.com/globaldev/default.mspx</xref></li><li class="- topic/li "><xref href="http://developer.apple.com/documentation/" scope="external" class="- topic/xref ">http://developer.apple.com/documentation/</xref></li><li class="- topic/li "><xref href="http://java.sun.com" scope="external" class="- topic/xref ">http://java.sun.com</xref></li></ul>
  </p>
 
 <p class="- topic/p ">If an IME is not active on the user's computer, calls to IME methods or properties, 
 other than <codeph class="+ topic/ph pr-d/codeph ">Capabilities.hasIME</codeph>, will fail. Once you manually activate an IME, subsequent ActionScript 
 calls to IME methods and properties will work as expected. For example, if you are using a
 Japanese IME, it must be activated before any IME method or property is called.</p>
 
 <p class="- topic/p ">The following table shows the platform coverage of this class:</p>
 
 
 <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Capability</entry><entry class="- topic/entry ">Windows</entry><entry class="- topic/entry ">Mac OSX</entry><entry class="- topic/entry ">Linux</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">Determine whether the IME is installed: <codeph class="+ topic/ph pr-d/codeph ">Capabilities.hasIME</codeph></entry><entry class="- topic/entry ">Yes</entry><entry class="- topic/entry ">Yes</entry><entry class="- topic/entry ">Yes</entry></row><row class="- topic/row "><entry class="- topic/entry ">Set IME on or off: <codeph class="+ topic/ph pr-d/codeph ">IME.enabled</codeph></entry><entry class="- topic/entry ">Yes</entry><entry class="- topic/entry ">Yes</entry><entry class="- topic/entry ">Yes</entry></row><row class="- topic/row "><entry class="- topic/entry ">Find out whether IME is on or off: <codeph class="+ topic/ph pr-d/codeph ">IME.enabled</codeph></entry><entry class="- topic/entry ">Yes</entry><entry class="- topic/entry ">Yes</entry><entry class="- topic/entry ">Yes</entry></row><row class="- topic/row "><entry class="- topic/entry ">Get or set IME conversion mode: <codeph class="+ topic/ph pr-d/codeph ">IME.conversionMode</codeph></entry><entry class="- topic/entry ">Yes</entry><entry class="- topic/entry ">Yes ~~~~</entry><entry class="- topic/entry ">No</entry></row><row class="- topic/row "><entry class="- topic/entry ">Send IME the string to be converted: <codeph class="+ topic/ph pr-d/codeph ">IME.setCompositionString()</codeph></entry><entry class="- topic/entry ">Yes ~~</entry><entry class="- topic/entry ">No</entry><entry class="- topic/entry ">No</entry></row><row class="- topic/row "><entry class="- topic/entry ">Get from IME the original string before conversion: <codeph class="+ topic/ph pr-d/codeph ">System.ime.addEventListener()</codeph></entry><entry class="- topic/entry ">Yes ~~</entry><entry class="- topic/entry ">No</entry><entry class="- topic/entry ">No</entry></row><row class="- topic/row "><entry class="- topic/entry ">Send request to convert to IME: <codeph class="+ topic/ph pr-d/codeph ">IME.doConversion()</codeph></entry><entry class="- topic/entry ">Yes ~~</entry><entry class="- topic/entry ">No</entry><entry class="- topic/entry ">No</entry></row></tbody></tgroup></adobetable>
 
 <p class="- topic/p ">~~ Not all Windows IMEs support all of these operations. The only IME
 that supports them all is the Japanese IME.</p>
 
 <p class="- topic/p ">~~~~ On the Macintosh, only the Japanese IME supports these methods, and third-party IMEs do not support them.</p>
 <p class="- topic/p ">The ActionScript 3.0 version of this class does not support Macintosh Classic.</p>
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="flash.system:IME_flash.events.IMEEvent.IME_COMPOSITION_imeComposition" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">imeComposition</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a user has completed an 
 input method editor (IME) composition 
 and the reading string is available.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IMEEvent.IME_COMPOSITION</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IMEEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a user has completed an 
 input method editor (IME) composition 
 and the reading string is available. 
 IMEs are generally used to enter text from languages that have ideographs instead 
 of letters, such as Japanese, Chinese and Korean.
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.system:IME:compositionAbandoned" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">compositionAbandoned</apiName><shortdesc class="- topic/shortdesc ">
	  Causes the runtime to abandon any composition that is in progress.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	  Causes the runtime to abandon any composition that is in progress. Call this method when the user clicks 
	  outside of the composition area or when the interactive object that has focus is being destroyed or reset. 
	  The runtime confirms the composition by calling <codeph class="+ topic/ph pr-d/codeph ">confirmComposition()</codeph> in the client. The
	  runtime also resets the IME to inform the operating system that the composition has been abandoned. 
	   
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:IME:compositionSelectionChanged" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">compositionSelectionChanged</apiName><shortdesc class="- topic/shortdesc ">
	  Call this method when the selection within the composition has been updated, either interactively or 
	  programmatically.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">start</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies the offset in bytes of the start of the selection.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">end</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies the offset in bytes of the end of the selection.
	   
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	  Call this method when the selection within the composition has been updated, either interactively or 
	  programmatically.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:IME:doConversion" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">doConversion</apiName><shortdesc class="- topic/shortdesc ">
	 Instructs the IME to select the first candidate for the current composition string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The call was not successful.
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Instructs the IME to select the first candidate for the current composition string.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:IME:setCompositionString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setCompositionString</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the IME composition string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Need some examples of valid values for the param composition.
	 </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The call is not successful.
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">composition</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string to send to the IME.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the IME composition string. When this string is set, the user 
	 can select IME candidates before committing the result to the text 
	 field that currently has focus.
	 <p class="- topic/p ">If no text field has focus, this method fails and throws an error.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.system:IME:conversionMode:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">conversionMode</apiName><shortdesc class="- topic/shortdesc ">
	 The conversion mode of the current IME.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A set attempt was not successful.
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The conversion mode of the current IME.
	 Possible values are IME mode string constants that indicate the conversion mode:
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ALPHANUMERIC_FULL</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ALPHANUMERIC_HALF</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">CHINESE</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">JAPANESE_HIRAGANA</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">JAPANESE_KATAKANA_FULL</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">JAPANESE_KATAKANA_HALF</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">KOREAN</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">UNKNOWN</codeph> (read-only value; this value cannot be set)</li></ul>
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IMEConversionMode/ALPHANUMERIC_FULL" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.ALPHANUMERIC_FULL</linktext></link><link href="flash.system.xml#IMEConversionMode/ALPHANUMERIC_HALF" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.ALPHANUMERIC_HALF</linktext></link><link href="flash.system.xml#IMEConversionMode/CHINESE" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.CHINESE</linktext></link><link href="flash.system.xml#IMEConversionMode/JAPANESE_HIRAGANA" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.JAPANESE_HIRAGANA</linktext></link><link href="flash.system.xml#IMEConversionMode/JAPANESE_KATAKANA_FULL" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.JAPANESE_KATAKANA_FULL</linktext></link><link href="flash.system.xml#IMEConversionMode/JAPANESE_KATAKANA_HALF" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.JAPANESE_KATAKANA_HALF</linktext></link><link href="flash.system.xml#IMEConversionMode/KOREAN" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.KOREAN</linktext></link><link href="flash.system.xml#IMEConversionMode/UNKNOWN" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IMEConversionMode.UNKNOWN</linktext></link></related-links></apiValue><apiValue id="flash.system:IME:enabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">enabled</apiName><shortdesc class="- topic/shortdesc ">
	 Indicates whether the system IME is enabled (true) or disabled (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A set attempt was not successful.
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indicates whether the system IME is enabled (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or disabled (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>). 
	 An enabled IME performs multibyte input; a disabled IME performs alphanumeric input. 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:IME:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
    The isSupported property is set to true if the IME class is 
    available on the current platform, otherwise it is set to false.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    The <codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph> property is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the IME class is 
    available on the current platform, otherwise it is set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
    
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:System" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">System</apiName><shortdesc class="- topic/shortdesc ">
 The System class contains properties related to local settings and operations.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">System, System object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The System class contains properties related to local settings and operations. Among these are <ph class="- topic/ph ">
 settings for camers and microphones, operations with shared objects and</ph> the use of the Clipboard.
 
 <p class="- topic/p ">Additional properties and methods are in other classes within the flash.system package:
 the Capabilities class, <ph class="- topic/ph ">the IME class,</ph> and the 
 Security class.</p>
 
 <p class="- topic/p ">This class contains only static methods and properties. You cannot 
 create new instances of the System class.</p>
 
 </apiDesc><example conref="examples\SystemExample.as" class="- topic/example "> The following example shows how to copy information about your system's total memory to the
 system Clipboard using a call to <codeph class="+ topic/ph pr-d/codeph ">System.totalMemory</codeph> within a call to the
 <codeph class="+ topic/ph pr-d/codeph ">System.setClipboard()</codeph> method.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.system.System;

    public class SystemExample extends Sprite {
        public function SystemExample() {
            System.setClipboard("System.totalMemory: " + System.totalMemory);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Security</linktext></link><link href="flash.events.xml#IMEEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.IMEEvent</linktext></link></related-links><apiOperation id="flash.system:System:disposeXML" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">disposeXML</apiName><shortdesc class="- topic/shortdesc ">
	 Makes the specified XML object immediately available for garbage collection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">node</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">XML reference that should be made available for garbage collection.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Makes the specified XML object immediately available for garbage collection. 
	 This method will remove parent and child connections between all the nodes
	 for the specified XML node.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:System:exit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">exit</apiName><shortdesc class="- topic/shortdesc "> 
     Closes Flash Player.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">System, System.exit(), exit()             
	 
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">code</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value to pass to the operating system. Typically, if
     the process exits normally, the value is 0.
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
     Closes Flash Player.
	 
     <p class="- topic/p "><i class="+ topic/ph hi-d/i ">For the standalone Flash Player debugger version only.</i></p> 
	 
     <p class="- topic/p ">AIR applications should call the <codeph class="+ topic/ph pr-d/codeph ">NativeApplication.exit()</codeph> method to exit the application.</p> 
	 
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/exit()" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.exit()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:System:gc" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">gc</apiName><shortdesc class="- topic/shortdesc ">
     Forces the garbage collection process.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Forces the garbage collection process.
	 
     <p class="- topic/p "><ph class="- topic/ph "><i class="+ topic/ph hi-d/i ">For the Flash Player debugger version and AIR applications only.</i></ph>
	 In an AIR application, the <codeph class="+ topic/ph pr-d/codeph ">System.gc()</codeph> method is only enabled in content running in the AIR Debug Launcher
	 (ADL) or, in an installed applcation, in content in the application security sandbox.</p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:System:pause" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pause</apiName><shortdesc class="- topic/shortdesc "> 
     Pauses Flash Player or the AIR Debug Launcher (ADL).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">System, System.pause(), pause()   
	 
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
     Pauses <ph class="- topic/ph ">Flash Player or</ph> the AIR Debug Launcher (ADL). 
	 After calling this method, nothing in the application continues except the delivery of Socket events.
	 
     <p class="- topic/p "><i class="+ topic/ph hi-d/i ">For the Flash Player debugger version or the AIR Debug Launcher (ADL) only.</i></p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/resume()" class="- topic/link "><linktext class="- topic/linktext ">resume()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:System:resume" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">resume</apiName><shortdesc class="- topic/shortdesc "> 
     Resumes the application after calling System.pause().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">System, System.resume(), resume()        
	 
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
     Resumes the application after calling <codeph class="+ topic/ph pr-d/codeph ">System.pause()</codeph>.
	 
     <p class="- topic/p "><i class="+ topic/ph hi-d/i ">For the Flash Player debugger version or the AIR Debug Launcher (ADL) only.</i></p>  
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/pause()" class="- topic/link "><linktext class="- topic/linktext ">pause()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:System:setClipboard" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setClipboard</apiName><shortdesc class="- topic/shortdesc ">
	 Replaces the contents of the Clipboard with a specified text string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">System.setClipboard, setClipboard
	  
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">string</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A plain-text string of characters to put on the system Clipboard, replacing its current contents (if any).
	 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Replaces the contents of the Clipboard with a specified text string.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Replaces the contents of the Clipboard with a specified text string. This method works from any security
	 context when called as a result of a user event (such as a keyboard or input device event handler).
	 
	 <p class="- topic/p ">This method is provided for SWF content running in Flash Player 9. It allows only adding 
	 String content to the Clipboard.</p> 
	 
	 <p class="- topic/p ">Flash Player 10 content and content in the application security sandbox in an AIR application can call 
	 the <codeph class="+ topic/ph pr-d/codeph ">Clipboard.setData()</codeph> method.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#Clipboard" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.Clipboard</linktext></link></related-links></apiOperation><apiValue id="flash.system:System:freeMemory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">freeMemory</apiName><shortdesc class="- topic/shortdesc ">
	 The amount of memory (in bytes) that is allocated to 
	 Adobe&amp;#xAE; Flash&amp;#xAE; Player or 
	 Adobe&amp;#xAE; AIR&amp;#xAE; and that is not in use.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The amount of memory (in bytes) that is allocated to 
	 <ph class="- topic/ph ">Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player or</ph> 
	 Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup> and that is not in use. This unused portion of 
	 allocated memory (<codeph class="+ topic/ph pr-d/codeph ">System.totalMemory</codeph>) fluctuates as garbage collection takes place.
	 Use this property to monitor garbage collection.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/privateMemory" class="- topic/link "><linktext class="- topic/linktext ">privateMemory</linktext></link><link href="flash.system.xml#System/totalMemory" class="- topic/link "><linktext class="- topic/linktext ">totalMemory</linktext></link><link href="flash.system.xml#System/totalMemoryNumber" class="- topic/link "><linktext class="- topic/linktext ">totalMemoryNumber</linktext></link></related-links></apiValue><apiValue id="flash.system:System:ime:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ime</apiName><shortdesc class="- topic/shortdesc ">
	 The currently installed system IME.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.system:IME</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The currently installed system IME. 
	 To register for imeComposition events, call 
	 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> on this instance.
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IMEConversionMode" class="- topic/link "><linktext class="- topic/linktext ">IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:System:privateMemory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">privateMemory</apiName><shortdesc class="- topic/shortdesc ">
	 The entire amount of memory (in bytes) used by an application.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The entire amount of memory (in bytes) used by an application. This is the amount of resident private memory for the entire process.
	 
	 <p class="- topic/p ">AIR developers should use this property to determine the entire memory consumption of an application.</p>
	 
	 <p class="- topic/p ">For Flash Player, this includes the memory used by the container application, 
	 such as the web browser.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/freeMemory" class="- topic/link "><linktext class="- topic/linktext ">freeMemory</linktext></link><link href="flash.system.xml#System/totalMemory" class="- topic/link "><linktext class="- topic/linktext ">totalMemory</linktext></link><link href="flash.system.xml#System/totalMemoryNumber" class="- topic/link "><linktext class="- topic/linktext ">totalMemoryNumber</linktext></link></related-links></apiValue><apiValue id="flash.system:System:totalMemoryNumber:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">totalMemoryNumber</apiName><shortdesc class="- topic/shortdesc ">
	The amount of memory (in bytes) currently in use that has been directly allocated by 
	Flash Player or AIR.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The amount of memory (in bytes) currently in use that has been directly allocated by 
	<ph class="- topic/ph ">Flash Player or</ph> AIR.  
	
	<p class="- topic/p ">This property is expressed as a Number, which allows higher values than the 
	<codeph class="+ topic/ph pr-d/codeph ">System.totalMemory</codeph> property, which is of type int.</p>
	
	<p class="- topic/p ">This property does not return <i class="+ topic/ph hi-d/i ">all</i> memory used by an Adobe AIR application <ph class="- topic/ph ">or by 
	the application (such as a browser) containing Flash Player content</ph>. The <ph class="- topic/ph ">browser or</ph> 
	operating system may consume other memory. The <codeph class="+ topic/ph pr-d/codeph ">System.privateMemory</codeph> property reflects <i class="+ topic/ph hi-d/i ">all</i> memory used by 
	an application.</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/freeMemory" class="- topic/link "><linktext class="- topic/linktext ">freeMemory</linktext></link><link href="flash.system.xml#System/privateMemory" class="- topic/link "><linktext class="- topic/linktext ">privateMemory</linktext></link><link href="flash.system.xml#System/totalMemory" class="- topic/link "><linktext class="- topic/linktext ">totalMemory</linktext></link></related-links></apiValue><apiValue id="flash.system:System:totalMemory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">totalMemory</apiName><shortdesc class="- topic/shortdesc ">
	The amount of memory (in bytes) currently in use that has been directly allocated by 
	Flash Player or AIR.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The amount of memory (in bytes) currently in use that has been directly allocated by 
	<ph class="- topic/ph ">Flash Player or</ph> AIR.  
	
	<p class="- topic/p ">This property does not return <i class="+ topic/ph hi-d/i ">all</i> memory used by an Adobe AIR application <ph class="- topic/ph ">or by 
	the application (such as a browser) containing Flash Player content</ph>. The <ph class="- topic/ph ">browser or</ph> 
	operating system may consume other memory. The <codeph class="+ topic/ph pr-d/codeph ">System.privateMemory</codeph> property reflects <i class="+ topic/ph hi-d/i ">all</i> memory used by 
	an application.</p>
	
	<p class="- topic/p ">If the amount of memory allocated is greater than the maximum value for a uint object (<codeph class="+ topic/ph pr-d/codeph ">uint.MAX_VALUE</codeph>,
	or 4,294,967,295), then this property is set to 0. The <codeph class="+ topic/ph pr-d/codeph ">System.totalMemoryNumber</codeph> property allows
	larger values.</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/freeMemory" class="- topic/link "><linktext class="- topic/linktext ">freeMemory</linktext></link><link href="flash.system.xml#System/privateMemory" class="- topic/link "><linktext class="- topic/linktext ">privateMemory</linktext></link><link href="flash.system.xml#System/totalMemoryNumber" class="- topic/link "><linktext class="- topic/linktext ">totalMemoryNumber</linktext></link></related-links></apiValue><apiValue id="flash.system:System:useCodePage:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">useCodePage</apiName><shortdesc class="- topic/shortdesc ">
	 A Boolean value that determines which code page to use to interpret external text files.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">System.useCodepage, useCodepage, Unicode, code page
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 A Boolean value that determines which code page to use to interpret external text files. 
	 When the property is set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, external text files are interpretted as Unicode. 
	 (These files must be encoded as Unicode when you save them.) When the property is set to 
	 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, external text files are interpretted using the traditional code page of the 
	 operating system running the application. The default value of <codeph class="+ topic/ph pr-d/codeph ">useCodePage</codeph> is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	 
	 <p class="- topic/p ">Text that you load as an external file (using <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph>, the URLLoader class or
	 URLStream) must have been saved as Unicode in order for the application to recognize it 
	 as Unicode. To encode external files as Unicode, save the files in an application that 
	 supports Unicode, such as Notepad on Windows.</p>
	 
	 <p class="- topic/p ">If you load external text files that are not Unicode-encoded, set <codeph class="+ topic/ph pr-d/codeph ">useCodePage</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. 
	 Add the following as the first line of code of the file that 
	 is loading the data (for Flash Professional, add it to the first frame):</p>
	 
	 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">System.useCodePage = true;</codeph></pre>
	 
	 <p class="- topic/p ">When this code is present, the application interprets external text 
	 using the traditional code page of the operating system. 
	 For example, this is generally CP1252 for an English Windows operating 
	 system and Shift-JIS for a Japanese operating system.</p> 
	 
	 <p class="- topic/p "><ph class="- topic/ph ">If you set <codeph class="+ topic/ph pr-d/codeph ">useCodePage</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, 
	 Flash Player 6 and later treat text as Flash Player 5 does. (Flash Player 5 
	 treated all text as if it were in the traditional code page of the operating 
	 system running the player.)</ph></p>
	 
	 <p class="- topic/p ">If you set <codeph class="+ topic/ph pr-d/codeph ">useCodePage</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, remember that the 
	 traditional code page of the operating system running the application must include 
	 the characters used in your external text file in order to display your text. 
	 For example, if you load an external text file that contains Chinese characters, 
	 those characters cannot display on a system that uses the CP1252 code page because 
	 that code page does not include Chinese characters.</p>
	 
	 <p class="- topic/p ">To ensure that users on all platforms can view external text files used in your 
	 application, you should encode all external text files as Unicode and leave 
	 <codeph class="+ topic/ph pr-d/codeph ">useCodePage</codeph> set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. This way, the application
	 <ph class="- topic/ph ">(Flash Player 6 and later, or AIR)</ph> interprets the text as Unicode.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:SecurityDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SecurityDomain</apiName><shortdesc class="- topic/shortdesc ">
	The SecurityDomain class represents the current security "sandbox," also known as a security domain.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The SecurityDomain class represents the current security "sandbox," also known as a security domain.
	By passing an instance of this class to <codeph class="+ topic/ph pr-d/codeph ">Loader.load()</codeph>, you can request that loaded media be placed in
	a particular sandbox.
	</apiDesc></apiClassifierDetail><apiValue id="flash.system:SecurityDomain:currentDomain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">currentDomain</apiName><shortdesc class="- topic/shortdesc ">
		Gets the current security domain.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.system:SecurityDomain</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Gets the current security domain. 
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#LoaderContext" class="- topic/link "><linktext class="- topic/linktext ">flash.system.LoaderContext</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.system:SystemUpdater" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SystemUpdater</apiName><shortdesc class="- topic/shortdesc ">
	 
	 The SystemUpdater class allows you to update modules of the Flash Player,
	 such as the DRM module for Flash Access, as well as the Flash Player itself.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 
	 The SystemUpdater class allows you to update modules of the Flash Player,
	 such as the DRM module for Flash Access, as well as the Flash Player itself. 
	 Available modules are listed in the SystemUpdaterType class.
	 
	 <p class="- topic/p ">Flash Player identifies the need for a Flash-Access-module update by dispatching a NetStatusEvent event.
	 The event has a <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property with a value of <codeph class="+ topic/ph pr-d/codeph ">"DRM.UpdateNeeded"</codeph>. For updates to the Flash Access
	 module, user consent is not required. Listen for the event and initiate the update by calling 
	 <codeph class="+ topic/ph pr-d/codeph ">update("DRM")</codeph>.</p>
	 
	 <p class="- topic/p ">Flash Player identifies the need for a player update by dispatching a StatusEvent event, with several 
	 possible <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property values (see the <codeph class="+ topic/ph pr-d/codeph ">status</codeph> event). For updates to the player, 
	 user consent is required. Listen for the event and present the user with the option to update. The user must agree to the actual 
	 update and initiate the update by, for example, clicking a button in the user interface. You can then 
	 initiate the player update directly in ActionScript by calling <codeph class="+ topic/ph pr-d/codeph ">update("SYSTEM")</codeph>.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: The SystemUpdater API is supported on all desktop platforms.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.system.xml#SystemUpdaterType" class="- topic/link "><linktext class="- topic/linktext ">flash.system.SystemUpdaterType</linktext></link></related-links><adobeApiEvent id="flash.system:SystemUpdater_flash.events.Event.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
	 Dispatched when an update of the player itself is cancelled by the user.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Dispatched when an update of the player itself is cancelled by the user.  
	 This event is dispatched only when an update of type <codeph class="+ topic/ph pr-d/codeph ">SystemUpdaterType.SYSTEM</codeph>
	 is requested and the user cancels the update.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.system:SystemUpdater_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
	 Dispatched when the update completes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Dispatched when the update completes.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.system:SystemUpdater_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
	 Dispatched upon encountering a security error.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Dispatched upon encountering a security error.
	 For example, a security error that can cause this event is if the player
	 tries to perform an update when an update is not permitted by security policy.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.system:SystemUpdater_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
	 Dispatched when an I/O error occurs.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Dispatched when an I/O error occurs.
	 For example, one error that can cause this event is a loss of Internet connectivity.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.system:SystemUpdater_flash.events.ProgressEvent.PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><shortdesc class="- topic/shortdesc ">
	 Dispatched to indicate download progress.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Dispatched to indicate download progress. This event is like the 
	 <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> event in the Loader and URLLoader classes.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.system:SystemUpdater_flash.events.StatusEvent.STATUS_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><shortdesc class="- topic/shortdesc ">
	  Dispatched when the update fails.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StatusEvent.STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	  Dispatched when the update fails. An update can fail for one of the following reasons:
	  <p class="- topic/p "><ul class="- topic/ul "><li class="- topic/li ">The caller is running on an unsupported platform or architecture. In this case, 
	  the value of the <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property is "DRM.UpdateFailedNotSupported" and the value of the
	  <codeph class="+ topic/ph pr-d/codeph ">level</codeph> property is "error".</li><li class="- topic/li ">The requested update package cannot be located on the server. In this case,
	  the value of the <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property is "DRM.UpdateFailedNotCurrentlyAvailable" and the
	  value of the <codeph class="+ topic/ph pr-d/codeph ">level</codeph> property is "error".</li><li class="- topic/li ">The Flash Access module is not installed. This error is similar to the "DRM.UpdateNeeded" code, 
	  which is dispatched by NetStatusEvent.
	  However, in this case, a more recent version of Flash Player must be downloaded first. In this case, 
	  the value of the <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property is "DRM.UpdateNeededButIncompatible" and the value of the
	  <codeph class="+ topic/ph pr-d/codeph ">level</codeph> property is "error". To perform an update 
	  of Flash Player, call <codeph class="+ topic/ph pr-d/codeph ">SystemUpdater.update(SystemUpdaterType.SYSTEM)</codeph>.</li><li class="- topic/li ">The new DRM module could not be downloaded. In this case, 
	  the value of the <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property is "DRM.UpdateFailed" and the value of the
	  <codeph class="+ topic/ph pr-d/codeph ">level</codeph> property is "error".</li></ul></p>
	  
	  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.system:SystemUpdater_flash.events.Event.OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
	 Dispatched when an update begins.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Dispatched when an update begins. The update is complete when a 'complete' event is sent,
 	 or when an IOErrorEvent, SecurityErrorEvent, or StatusEvent is sent.
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.system:SystemUpdater:SystemUpdater" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SystemUpdater</apiName><shortdesc class="- topic/shortdesc ">
		 Constructor.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Constructor.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.system:SystemUpdater:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
		Cancels an active update.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Cancels an active update.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:SystemUpdater:update" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">update</apiName><shortdesc class="- topic/shortdesc ">
		Begins an update of a given type.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Begins an update of a given type. Update types are one of the string constants defined
		in the SystemUpdaterType class. 
		Only one update is allowed at a time across all browsers.
		<p class="- topic/p ">After the update begins, listen for the events defined in this class. The following events
		events indicate the end of an update and allow a new update or update attempt to proceed, 
		as does calling the <codeph class="+ topic/ph pr-d/codeph ">update()</codeph> function:</p>
		<p class="- topic/p "><ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">complete</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">cancel</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">securityError</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ioError</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">status</codeph></li></ul></p>
		
		</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.system.xml#SystemUpdaterType" class="- topic/link "><linktext class="- topic/linktext ">flash.system.SystemUpdaterType</linktext></link></related-links></apiOperation></apiClassifier></apiPackage>