<?xml version="1.0" encoding="UTF-8"?><apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.filesystem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.filesystem</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.filesystem:FileStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FileStream</apiName><shortdesc class="- topic/shortdesc ">
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
 A FileStream object is used to read and write files.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseInterface>flash.utils:IDataInput</apiBaseInterface><apiBaseInterface>flash.utils:IDataOutput</apiBaseInterface><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A FileStream object is used to read and write files. Files can be opened synchronously by calling the
 <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method or asynchronously by calling the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method.
 
 <p class="- topic/p ">The advantage of opening files asynchronously is that other code can execute while Adobe AIR
 runs read and write processes in the background. When opened asynchronously, <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> events 
 are dispatched as operations proceed.</p>
 
 <p class="- topic/p ">A File object that is opened synchronously behaves much like a ByteArray object; a file opened asynchronously behaves 
 much like a Socket or URLStream object. When a File object is opened synchronously, the caller pauses while 
 the requested data is read from or written to the underlying file. When opened asynchronously, any data 
 written to the stream is immediately buffered and later written to the file.</p>
 
 <p class="- topic/p ">Whether reading from a file synchronously or asynchronously, the actual read methods are synchronous. 
 In both cases they read from data that is currently "available." The difference is that when reading 
 synchronously all of the data is available at all times, and when reading asynchronously data becomes 
 available gradually as the data streams into a read buffer. Either way, the data that can be synchronously 
 read at the current moment is represented by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property.</p>
 
 <p class="- topic/p ">An application that is processing asynchronous input typically registers for <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> events 
 and consumes the data as it becomes available by calling read methods. Alternatively, an application can 
 simply wait until all of the data is available by registering for the <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event and 
 processing the entire data set when the <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event is dispatched. </p>
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="flash.filesystem:FileStream_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 Signals that the end of the stream has been reached.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Signals that the end of the stream has been reached.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/position" class="- topic/link "><linktext class="- topic/linktext ">position</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.OutputProgressEvent.OUTPUT_PROGRESS_outputProgress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">outputProgress</apiName><shortdesc class="- topic/shortdesc ">
 Signals that buffered data has been written to the file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.OutputProgressEvent.OUTPUT_PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.OutputProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Signals that buffered data has been written to the file.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.ProgressEvent.PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><shortdesc class="- topic/shortdesc ">
 Signals the availability of new data on the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Signals the availability of new data on the stream.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Indicates that an error occurred during an asynchronous file I/O operation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Indicates that an error occurred during an asynchronous file I/O operation.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 Indicates that the stream has been
 closed by an explicit call to the close() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Indicates that the stream has been
 closed by an explicit call to the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.filesystem:FileStream:FileStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">FileStream</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a FileStream object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a FileStream object. 
	 Use the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method to open a file.
	 
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.filesystem.xml#FileStream/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiConstructor><apiOperation id="flash.filesystem:FileStream:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
	 Closes the FileStream object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Closes the FileStream object. 
	 
	 <p class="- topic/p ">You cannot read or write any data after you call the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method.  If the file 
	 was opened asynchronously (the FileStream object used the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method to open the file), 
	 calling the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method causes the object to dispatch the <codeph class="+ topic/ph pr-d/codeph ">close</codeph> event. </p>
	 
	 <p class="- topic/p ">Closing the application automatically closes all files associated with FileStream objects in the application.
	 However, it is best to register for a <codeph class="+ topic/ph pr-d/codeph ">closed</codeph> event on all FileStream objects opened asynchronously 
	 that have pending data to write, before closing the application (to ensure that data is written).</p>
	 
	 <p class="- topic/p ">You can reuse the FileStream object by calling the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> or the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> 
	 method.  This closes any file associated with the FileStream object, but the object does not dispatch the 
	 <codeph class="+ topic/ph pr-d/codeph ">close</codeph> event.</p>
	 
	 <p class="- topic/p ">For a FileStream object opened asynchronously (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method), 
	 even if you call the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> event for a FileStream object and delete properties and variables that
	 reference the object, the FileStream object is not garbage collected as long as there are pending operations and 
	 event handlers are registered for their completion. In particular, an otherwise unreferenced FileStream object 
	 persists as long as any of the following are still possible: </p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">For file reading operations, the end of the file has not been reached (and the <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>
	 event has not been dispatched). </li><li class="- topic/li ">Output data is still available to written, and output-related events (such as the <codeph class="+ topic/ph pr-d/codeph ">outputProgress</codeph>
	 event or the <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> event) have registered event listeners. </li></ul>
	 
	 </apiDesc><example conref="examples\FileStream.close.1.as" class="- topic/example ">     The following code opens a FileStream object <i class="+ topic/ph hi-d/i ">asynchronously</i> and writes a text file named 
 test.txt to the Apollo Test subdirectory of the user's documents directory. A call to the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph>  
 method of the FileStream object closes the file when the data is written. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.Event;
            
var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.openAsync(file, FileMode.WRITE);
fileStream.writeUTFBytes("Hello");
fileStream.addEventListener(Event.CLOSE, fileClosed);
fileStream.close();

function fileClosed(event:Event):void {
    trace("closed");
}            
</codeblock></example><example conref="examples\FileStream.close.2.as" class="- topic/example ">     The following code opens a FileStream object <i class="+ topic/ph hi-d/i ">synchronously</i> and writes a text file named 
 test.txt to the Apollo Test subdirectory of the user's documents directory. A call to the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> 
 method of the FileStream object closes the file when the data is written.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
            
var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.WRITE);
fileStream.writeUTF("Hello");
fileStream.close();
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.filesystem.xml#FileStream/event:close" class="- topic/link "><linktext class="- topic/linktext ">close event</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:close_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file, which was opened asynchronously, is closed.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file, which was opened asynchronously, is closed.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:openAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">openAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Opens the FileStream object asynchronously, pointing to the file specified by the file parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file location is in the application directory, and the <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> parameter 
	 is set to "append", "update", or "write" mode. 
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">file</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The File object specifying the file to open.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fileMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string from the FileMode class that defines the capabilities of the FileStream, such as
	 the ability to read from or write to the file.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Opens the FileStream object asynchronously, pointing to the file specified by the <codeph class="+ topic/ph pr-d/codeph ">file</codeph> parameter. 
	 
	 <p class="- topic/p ">If the FileStream object is already open, calling the method closes the file before opening
	 and no further events (including <codeph class="+ topic/ph pr-d/codeph ">close</codeph>) are delivered for the previously opened file.</p>
	 
	 <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> parameter is set to <codeph class="+ topic/ph pr-d/codeph ">FileMode.READ</codeph> or 
	 <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>, AIR reads data into the input buffer as soon as the file is opened,
	 and <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> and <codeph class="+ topic/ph pr-d/codeph ">open</codeph> events are dispatched as the data is read to
	 the input buffer.</p>
	 
	 <p class="- topic/p ">On systems that support file locking, a file opened in "write" or "update" mode (<codeph class="+ topic/ph pr-d/codeph ">FileMode.WRITE</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>) is not readable until it is closed.</p>
	 
	 <p class="- topic/p ">Once you are done performing operations on the file, call the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method of the FileStream
	 object. Some operating systems limit the number of concurrently open files.</p>
	 
`	 </apiDesc><example conref="examples\FileStream.openAsync.1.as" class="- topic/example "> The following code shows how to asynchronously open a test.txt file in the
 Apollo Test subdirectory of the user's documents directory and then read the file into a string, 
 using the system character set as the text encoding.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.Event;

var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.addEventListener(Event.COMPLETE, fileCompleteHandler)
fileStream.openAsync(file, FileMode.READ);

function fileCompleteHandler(event:Event):void {
    var str:String = fileStream.readMultiByte(fileStream.bytesAvailable, File.systemCharset);
    trace(str);
    fileStream.close();
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.filesystem.xml#FileStream/event:complete" class="- topic/link "><linktext class="- topic/linktext ">complete event</linktext></link><link href="flash.filesystem.xml#FileStream/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">ioError event</linktext></link><link href="flash.filesystem.xml#FileStream/event:progress" class="- topic/link "><linktext class="- topic/linktext ">progress event</linktext></link><link href="flash.filesystem.xml#FileMode" class="- topic/link "><linktext class="- topic/linktext ">FileMode</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:openAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file does not exist; you do not have adequate permissions to 
	 open the file; you are opening a file for read access, and you do not have read permissions;
	 or you are opening a file for write access, and you do not have write permissions. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file does not exist; you do not have adequate permissions to 
	 open the file; you are opening a file for read access, and you do not have read permissions;
	 or you are opening a file for write access, and you do not have write permissions.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream:openAsync_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched as data is read to the input buffer. (The file must be opened  
	 with the <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> parameter set to <codeph class="+ topic/ph pr-d/codeph ">FileMode.READ</codeph> or 
	 <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>.)
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched as data is read to the input buffer.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream:openAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file data has been read to the input buffer. (The file must be opened with 
	 the <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> parameter set to <codeph class="+ topic/ph pr-d/codeph ">FileMode.READ</codeph> or 
	 <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>.)
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file data has been read to the input buffer.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
	 Opens the FileStream object synchronously, pointing to the file specified by the file parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file does not exist; you do not have adequate permissions to 
	 open the file; you are opening a file for read access, and you do not have read permissions;
	 or you are opening a file for write access, and you do not have write permissions. 
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file location is in the application directory, and the <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph>
	 parameter is set to "append", "update", or "write" mode. 
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">file</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The File object specifying the file to open.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fileMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string from the FileMode class that defines the capabilities of the FileStream, such as
	 the ability to read from or write to the file.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Opens the FileStream object synchronously, pointing to the file specified by the <codeph class="+ topic/ph pr-d/codeph ">file</codeph> parameter. 
	 
	 <p class="- topic/p ">If the FileStream object is already open, calling the method closes the file before opening
	 and no further events (including <codeph class="+ topic/ph pr-d/codeph ">close</codeph>) are delivered for the previously opened file.</p>
	 
	 <p class="- topic/p ">On systems that support file locking, a file opened in "write" or "update" mode (<codeph class="+ topic/ph pr-d/codeph ">FileMode.WRITE</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>) is not readable until it is closed.</p>
	 
	 <p class="- topic/p ">Once you are done performing operations on the file, call the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method of the FileStream
	 object. Some operating systems limit the number of concurrently open files.</p>
	 
	 </apiDesc><example conref="examples\FileStream.open.1.as" class="- topic/example "> The following code shows how to synchronously open a test.txt file in the
 Apollo Test subdirectory of the user's documents directory and then read the file into a string, 
 using the system character set as the text encoding.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.READ);
var str:String = fileStream.readMultiByte(file.size, File.systemCharset);
trace(str);
fileStream.close();
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.filesystem.xml#File" class="- topic/link "><linktext class="- topic/linktext ">File</linktext></link><link href="flash.filesystem.xml#FileMode" class="- topic/link "><linktext class="- topic/linktext ">FileMode</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:FileStream:readBoolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBoolean</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads a Boolean value from the file stream, byte stream, or byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A Boolean value, <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the byte is nonzero,
     <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads a Boolean value from the file stream, byte stream, or byte array. A single byte is read
     and <codeph class="+ topic/ph pr-d/codeph ">true</codeph> is returned if the byte is nonzero,
     <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readBoolean_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads a signed byte from the file stream, byte stream, or byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The returned value is in the range -128 to 127.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads a signed byte from the file stream, byte stream, or byte array.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBytes</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads the number of data bytes, specified by the length parameter, 
     from the file stream, byte stream, or byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The <codeph class="+ topic/ph pr-d/codeph ">ByteArray</codeph> object to read
                  data into.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The offset into the <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> parameter at which data
                   read should begin.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of bytes to read.  The default value
                   of 0 causes all available data to be read.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads the number of data bytes, specified by the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> parameter, 
     from the file stream, byte stream, or byte array. The bytes are read into the 
     ByteArray objected specified by the <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> parameter, starting at 
     the position specified by <codeph class="+ topic/ph pr-d/codeph ">offset</codeph>.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readBytes_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readDouble" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readDouble</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads an IEEE 754 double-precision floating point number from the file stream, byte stream, or byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An IEEE 754 double-precision floating point number.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads an IEEE 754 double-precision floating point number from the file stream, byte stream, or byte array.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readDouble_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readFloat</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads an IEEE 754 single-precision floating point number from the file stream, byte stream, or byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An IEEE 754 single-precision floating point number.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads an IEEE 754 single-precision floating point number from the file stream, byte stream, or byte array.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readFloat_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readInt</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads a signed 32-bit integer from the file stream, byte stream, or byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The returned value is in the range -2147483648 to 2147483647.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads a signed 32-bit integer from the file stream, byte stream, or byte array.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readInt_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readMultiByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readMultiByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads a multibyte string of specified length from the file stream, byte stream, or byte array using the
     specified character set.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">UTF-8 encoded string.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of bytes from the byte stream to read.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charSet</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string denoting the character set to use to interpret the bytes. 
     Possible character set strings include <codeph class="+ topic/ph pr-d/codeph ">"shift-jis"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"cn-gb"</codeph>,
     <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph>, and others.
     For a complete list, see <xref href="../../charset-codes.html" class="- topic/xref ">Supported Character Sets</xref>. 
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> If the value for the <codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> parameter is not recognized by the current 
     system, then <ph class="- topic/ph ">Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player or</ph> 
     Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup> uses the system's default 
     code page as the character set. For example, a value for the <codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> parameter, as in 
     <codeph class="+ topic/ph pr-d/codeph ">myTest.readMultiByte(22, "iso-8859-01")</codeph>, that uses  <codeph class="+ topic/ph pr-d/codeph ">01</codeph> instead of
     <codeph class="+ topic/ph pr-d/codeph ">1</codeph> might work on your development system, but not on another system. On the other
     system, <ph class="- topic/ph ">Flash Player or</ph> the AIR runtime will use the system's 
     default code page.</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads a multibyte string of specified length from the file stream, byte stream, or byte array using the
     specified character set.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/systemCharset" class="- topic/link "><linktext class="- topic/linktext ">File.systemCharset</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:readMultiByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readObject</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads an object from the file stream, byte stream, or byte array, encoded in AMF
     serialized format.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The deserialized object
     
     </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads an object from the file stream, byte stream, or byte array, encoded in AMF
     serialized format.
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="../../flash/net/package.html#registerClassAlias()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.registerClassAlias()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:readObject_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readShort</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads a signed 16-bit integer from the file stream, byte stream, or byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The returned value is in the range -32768 to 32767.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads a signed 16-bit integer from the file stream, byte stream, or byte array.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readShort_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUTFBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTFBytes</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads a sequence of UTF-8 bytes from the byte stream or byte array and returns a string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A UTF-8 string produced by the byte representation of characters of the specified length.     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of bytes to read.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads a sequence of UTF-8 bytes from the byte stream or byte array and returns a string.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUTFBytes_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUTF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTF</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads a UTF-8 string from the file stream, byte stream, or byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A UTF-8 string produced by the byte representation of characters.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads a UTF-8 string from the file stream, byte stream, or byte array.  The string
     is assumed to be prefixed with an unsigned short indicating
     the length in bytes.
     
     <p class="- topic/p ">This method is similar to the <codeph class="+ topic/ph pr-d/codeph ">readUTF()</codeph>
     method in the Java<sup class="+ topic/ph hi-d/sup ">®</sup> IDataInput interface.</p>
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUTF_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUnsignedByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads an unsigned byte from the file stream, byte stream, or byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The returned value is in the range 0 to 255.        
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads an unsigned byte from the file stream, byte stream, or byte array.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUnsignedByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUnsignedInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedInt</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads an unsigned 32-bit integer from the file stream, byte stream, or byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The returned value is in the range 0 to 4294967295.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads an unsigned 32-bit integer from the file stream, byte stream, or byte array.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUnsignedInt_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUnsignedShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedShort</apiName><shortdesc class="- topic/shortdesc ">
	
     Reads an unsigned 16-bit integer from the file stream, byte stream, or byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	read capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be read (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position specfied for reading data exceeds the number of bytes available 
	(specified by the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The returned value is in the range 0 to 65535. 
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Reads an unsigned 16-bit integer from the file stream, byte stream, or byte array.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUnsignedShort_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file cannot be read or the file is not open. This event is dispatched 
	only for files opened for asynchronous operations (by using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file cannot be read or the file is not open.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:truncate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">truncate</apiName><shortdesc class="- topic/shortdesc ">
	 Truncates the file at the position specified by the position property of the FileStream
	 object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file is not open for writing.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Truncates the file at the position specified by the <codeph class="+ topic/ph pr-d/codeph ">position</codeph> property of the FileStream
	 object. 
	 
	 <p class="- topic/p ">Bytes from the position specified by the <codeph class="+ topic/ph pr-d/codeph ">position</codeph> property to the end of the file 
	 are deleted. The file must be open for writing.</p>
	 
	 </apiDesc><example conref="examples\FileStream.truncate.1.as" class="- topic/example "> The following code synchronously opens a test.txt file in the Apollo Test subdirectory of 
 the user's documents directory and then trims the file to 100 characters in length if it is longer than
 100 characters.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.UPDATE);
if (file.size &gt; 100) {
    fileStream.position = 100;
    fileStream.truncate();
}
fileStream.close();
</codeblock></example><example conref="examples\FileStream.truncate.2.as" class="- topic/example "> The following code <i class="+ topic/ph hi-d/i ">asynchronously</i> opens a test.txt file in the Apollo Test subdirectory 
 of the user's documents directory, and then trims the file to 100 characters in length if it is longer than 100
 characters.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.openAsync(file, FileMode.UPDATE);
trace("start", file.size)
if (file.size &gt; 100) {
    fileStream.position = 100;
    fileStream.truncate();
}
fileStream.addEventListener(Event.CLOSE, fileClosed);
fileStream.close();
function fileClosed(event:Event):void {
    trace("closed", file.size); 
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/position" class="- topic/link "><linktext class="- topic/linktext ">position</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:FileStream:writeBoolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeBoolean</apiName><shortdesc class="- topic/shortdesc ">
	
     Writes a Boolean value.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	write capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be written (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A Boolean value determining which byte is written. If the parameter is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, 
     1 is written; if <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, 0 is written.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Writes a Boolean value. A single byte is written according to the <codeph class="+ topic/ph pr-d/codeph ">value</codeph> parameter,
     either 1 if <codeph class="+ topic/ph pr-d/codeph ">true</codeph> or 0 if <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeBoolean_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot write to the file (for example, because the file is missing). 
	This event is dispatched only for files that have been opened for asynchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">You cannot write to the file (for example, because the file is missing).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Writes a byte.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	write capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be written (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A byte value as an integer.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Writes a byte.
     The low 8 bits of the
     parameter are used; the high 24 bits are ignored.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot write to the file (for example, because the file is missing). 
	This event is dispatched only for files that have been opened for asynchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">You cannot write to the file (for example, because the file is missing).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeBytes</apiName><shortdesc class="- topic/shortdesc ">
	
     Writes a sequence of bytes from the
     specified byte array, bytes,
     starting at the byte specified by offset 
     (using a zero-based index)
     with a length specified by length,
     into the file stream, byte stream, or byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	write capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be written (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The byte array to write.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A zero-based index specifying the position into the array to begin writing.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An unsigned integer specifying how far into the buffer to write.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Writes a sequence of bytes from the
     specified byte array, <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph>,
     starting at the byte specified by <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> 
     (using a zero-based index)
     with a length specified by <codeph class="+ topic/ph pr-d/codeph ">length</codeph>,
     into the file stream, byte stream, or byte array.
     
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> parameter is omitted, the default
     length of 0 is used and the entire buffer starting at
     <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> is written.
     If the <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> parameter is also omitted, the entire buffer is
     written. </p>
     
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> or <codeph class="+ topic/ph pr-d/codeph ">length</codeph> parameter
     is out of range, they are clamped to the beginning and end
     of the <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> array.</p>
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeBytes_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot write to the file (for example, because the file is missing). 
	This event is dispatched only for files that have been opened for asynchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">You cannot write to the file (for example, because the file is missing).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeDouble" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeDouble</apiName><shortdesc class="- topic/shortdesc ">
	
     Writes an IEEE 754 double-precision (64-bit) floating point number.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	write capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be written (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A double-precision (64-bit) floating point number.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Writes an IEEE 754 double-precision (64-bit) floating point number.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeDouble_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot write to the file (for example, because the file is missing). 
	This event is dispatched only for files that have been opened for asynchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">You cannot write to the file (for example, because the file is missing).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeFloat</apiName><shortdesc class="- topic/shortdesc ">
	
     Writes an IEEE 754 single-precision (32-bit) floating point number.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	write capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be written (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A single-precision (32-bit) floating point number.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Writes an IEEE 754 single-precision (32-bit) floating point number.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeFloat_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot write to the file (for example, because the file is missing). 
	This event is dispatched only for files that have been opened for asynchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">You cannot write to the file (for example, because the file is missing).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeInt</apiName><shortdesc class="- topic/shortdesc ">
	
     Writes a 32-bit signed integer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	write capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be written (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A byte value as a signed integer.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Writes a 32-bit signed integer.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeInt_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot write to the file (for example, because the file is missing). 
	This event is dispatched only for files that have been opened for asynchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">You cannot write to the file (for example, because the file is missing).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeMultiByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeMultiByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Writes a multibyte string to the file stream, byte stream, or byte array, using the specified character set.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	write capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be written (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string value to be written.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charSet</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string denoting the character set to use. Possible character set strings
     include <codeph class="+ topic/ph pr-d/codeph ">"shift-jis"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"cn-gb"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph>, and others.
     For a complete list, see <xref href="../../charset-codes.html" class="- topic/xref ">Supported Character Sets</xref>. 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Writes a multibyte string to the file stream, byte stream, or byte array, using the specified character set. 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/systemCharset" class="- topic/link "><linktext class="- topic/linktext ">File.systemCharset</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:writeMultiByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot write to the file (for example, because the file is missing). 
	This event is dispatched only for files that have been opened for asynchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">You cannot write to the file (for example, because the file is missing).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeObject</apiName><shortdesc class="- topic/shortdesc ">
	
     Writes an object to the file stream, byte stream, or byte array, in AMF serialized
     format.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	write capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be written (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">object</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object to be serialized.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Writes an object to the file stream, byte stream, or byte array, in AMF serialized
     format.
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="../../flash/net/package.html#registerClassAlias()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.registerClassAlias()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:writeObject_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot write to the file (for example, because the file is missing). 
	This event is dispatched only for files that have been opened for asynchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">You cannot write to the file (for example, because the file is missing).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeShort</apiName><shortdesc class="- topic/shortdesc ">
	
     Writes a 16-bit integer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	write capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be written (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A byte value as an integer.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Writes a 16-bit integer. The low 16 bits of the parameter are used; 
     the high 16 bits are ignored.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeShort_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot write to the file (for example, because the file is missing). 
	This event is dispatched only for files that have been opened for asynchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">You cannot write to the file (for example, because the file is missing).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeUTFBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUTFBytes</apiName><shortdesc class="- topic/shortdesc ">
	
     Writes a UTF-8 string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	write capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be written (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string value to be written.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Writes a UTF-8 string. Similar to <codeph class="+ topic/ph pr-d/codeph ">writeUTF()</codeph>,
     but does not prefix the string with a 16-bit length word.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeUTFBytes_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot write to the file (for example, because the file is missing). 
	This event is dispatched only for files that have been opened for asynchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">You cannot write to the file (for example, because the file is missing).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeUTF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUTF</apiName><shortdesc class="- topic/shortdesc ">
	
     Writes a UTF-8 string to the file stream, byte stream, or byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the length of the string is larger than
	65535.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	write capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be written (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string value to be written.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Writes a UTF-8 string to the file stream, byte stream, or byte array. The length of the UTF-8 string in bytes 
     is written first, as a 16-bit integer, followed by the bytes representing the 
     characters of the string.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeUTF_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot write to the file (for example, because the file is missing). 
	This event is dispatched only for files that have been opened for asynchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">You cannot write to the file (for example, because the file is missing).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeUnsignedInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUnsignedInt</apiName><shortdesc class="- topic/shortdesc ">
	
     Writes a 32-bit unsigned integer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file has not been opened; the file has been opened, but it was not opened with
	write capabilities; or for a file that has been opened for synchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method), the file cannot be written (for example, because the file is missing).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A byte value as an unsigned integer.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Writes a 32-bit unsigned integer.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeUnsignedInt_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot write to the file (for example, because the file is missing). 
	This event is dispatched only for files that have been opened for asynchronous operations (by using the 
	<codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">You cannot write to the file (for example, because the file is missing).</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.filesystem:FileStream:bytesAvailable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesAvailable</apiName><shortdesc class="- topic/shortdesc ">
	
     Returns the number of bytes of data available for reading
     in the input buffer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Returns the number of bytes of data available for reading
     in the input buffer.
     User code must call <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> to ensure
     that sufficient data is available before trying to read
     it with one of the read methods.
     </apiDesc><example conref="examples\FileStream.bytesAvailable.1.as" class="- topic/example "/></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileStream:endian:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">endian</apiName><shortdesc class="- topic/shortdesc ">
	
     The byte order for the data, either the BIG_ENDIAN or LITTLE_ENDIAN constant 
     from the Endian class.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     The byte order for the data, either the <codeph class="+ topic/ph pr-d/codeph ">BIG_ENDIAN</codeph> or <codeph class="+ topic/ph pr-d/codeph ">LITTLE_ENDIAN</codeph> constant 
     from the Endian class.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileStream:objectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     Specifies whether the AMF3 or AMF0 format is used when writing or reading binary data by using the 
	 readObject() or writeObject() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies whether the AMF3 or AMF0 format is used when writing or reading binary data by using the 
	 <codeph class="+ topic/ph pr-d/codeph ">readObject()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">writeObject()</codeph> method.
	 
	 <p class="- topic/p ">The value is a constant from the ObjectEncoding class. By default, the AMF3 format is used.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding</linktext></link><link href="flash.filesystem.xml#FileStream/readObject()" class="- topic/link "><linktext class="- topic/linktext ">readObject()</linktext></link><link href="flash.filesystem.xml#FileStream/writeObject()" class="- topic/link "><linktext class="- topic/linktext ">writeObject()</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:FileStream:position:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">position</apiName><shortdesc class="- topic/shortdesc ">
	 The current position in the file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The current position in the file. 
	 
	 <p class="- topic/p ">This value is modified in any of the following ways:</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">When you set the property explicitly</li><li class="- topic/li ">When reading from the FileStream object (by using one of the read methods)</li><li class="- topic/li ">When writing to the FileStream object</li></ul>
	 
	 <p class="- topic/p ">The position is defined as a Number (instead of uint) in order to support files larger
	 than 2<sup class="+ topic/ph hi-d/sup ">32</sup> bytes in length.  The value of this property is always
	 a whole number less than 2<sup class="+ topic/ph hi-d/sup ">53</sup>. If you set this value to a number with a 
	 fractional component, the value is rounded down to the nearest integer.</p>
	 
	 <p class="- topic/p ">When reading a file asyncronously, if you set the <codeph class="+ topic/ph pr-d/codeph ">position</codeph> property,
	 the application begins filling the read buffer with the data starting at the specified
	 position, and the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property may be set to 0. Wait for a <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>
	 event before using a read method to read data; or wait for a <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> event 
	 and check the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property before using a read method.</p>
	  
	 </apiDesc><example conref="examples\FileStream.position.1.as" class="- topic/example "> The following code shows how a <codeph class="+ topic/ph pr-d/codeph ">position</codeph> property of the FileStream object 
 is updated as the application reads data from a file.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.fileSystem.*;
import flash.utils.ByteArray;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory.resolvePath("Apollo Test/test.txt");
var stream:FileStream = new FileStream();
stream.addEventListener(Event.COMPLETE, readBytes);
stream.openAsync(sourceFile, FileMode.READ);

function readBytes(e:Event):void {
    var bytes:ByteArray = new ByteArray();
    trace("position 0:", stream.position); // 0
    bytes[0] = stream.readByte();
    trace("position 1:", stream.position); // 1
    fileStream.readBytes(bytes, stream.position, 4); 
    trace("position 2:", stream.position); // 5
    stream.close();
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileStream:readAhead:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">readAhead</apiName><shortdesc class="- topic/shortdesc ">
	 The minimum amount of data to read from disk when reading files asynchronously.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Should the readAhead value dwindle to 0 as the data is read in.
	 
	 </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The minimum amount of data to read from disk when reading files asynchronously.
	 
	 <p class="- topic/p ">This property specifies how much data an asynchronous stream attempts to read
	 beyond the current position. Data is read in blocks based on the file system page size.
	 Thus if you set <codeph class="+ topic/ph pr-d/codeph ">readAhead</codeph> to 9,000 on a computer system with an 8KB (8192 byte)
	 page size, the runtime reads ahead 2 blocks, or 16384 bytes at a time.
	 The default value of this property is infinity: by default
	 a file that is opened to read asynchronously reads as far as the end of the file.</p>
	 
	 <p class="- topic/p ">Reading data from the read buffer does not change the value of the <codeph class="+ topic/ph pr-d/codeph ">readAhead</codeph> 
	 property. When you read data from the buffer, new data is read in to refill the read buffer. 
	  </p>
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">readAhead</codeph> property has no effect on a file that is opened synchronously.</p>
	 
	 <p class="- topic/p ">As data is read in asynchronously, the FileStream object dispatches <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> events. In the
	 event handler method for the <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> event, check to see that the required number of bytes
	 is available (by checking the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property), and then read the data from the
	 read buffer by using a read method.</p>
	 
	 </apiDesc><example conref="examples\FileStream.readAhead.1.as" class="- topic/example ">     The following code shows how to use the <codeph class="+ topic/ph pr-d/codeph ">readAhead</codeph> property to limit 
 the amount of data read into a file to 100 bytes:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var file:File = File.desktopDirectory.resolvePath("test.txt");
var fileStream:FileStream = new FileStream();
fileStream.readAhead = 100;
fileStream.addEventListener(ProgressEvent.PROGRESS, readProgressHandler)
fileStream.openAsync(file, FileMode.READ);
var results:ByteArray;

function readProgressHandler(event:ProgressEvent):void {
    if (fileStream.bytesAvailable &gt;= 100) {
        fileStream.readBytes(results, 0, 100);
    }
}
</codeblock><swfblock conref="examples\FileStream.readAhead.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.filesystem:FileMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FileMode</apiName><shortdesc class="- topic/shortdesc ">
 The FileMode class defines string constants used in the fileMode parameter of 
 the open() and openAsync() methods of the FileStream class.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The FileMode class defines string constants used in the <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> parameter of 
 the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> methods of the FileStream class.
 The <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> parameter of these methods determines the capabilities available 
 to the FileStream object once the file is opened. 
 
 <p class="- topic/p ">The following capabilities are available, in various combinations, based on the <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph>
 parameter value specified in the open method:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Reading—The FileStream object can read data from the file.</li><li class="- topic/li ">Writing—The FileStream object can write data to the file.</li><li class="- topic/li ">Creating—The FileStream object creates a nonexistent file upon opening.</li><li class="- topic/li ">Truncate upon opening—Data in the file is deleted upon opening (before any data is written).</li><li class="- topic/li ">Append written data—Data is always written to the end of the file (when any write method is called).</li></ul>
 
 <p class="- topic/p ">The following table shows the capabilities that each constant in the FileMode class provides when applied 
 as the <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> parameter of an open method of a FileStream object:</p>
 
 <adobetable class="innertable"><tgroup cols="6" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">FileMode constant</entry><entry align="center" class="- topic/entry ">Reading</entry><entry align="center" class="- topic/entry ">Writing</entry><entry align="center" class="- topic/entry ">Creating</entry><entry align="center" class="- topic/entry ">Truncate upon opening</entry><entry align="center" class="- topic/entry ">Append written data</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">READ</codeph></entry><entry align="center" class="- topic/entry "> • </entry><entry class="- topic/entry "> </entry><entry class="- topic/entry "> </entry><entry class="- topic/entry "> </entry><entry class="- topic/entry "> </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">WRITE</codeph></entry><entry class="- topic/entry "> </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry class="- topic/entry "> </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">APPEND</codeph></entry><entry class="- topic/entry "> </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry class="- topic/entry "/><entry align="center" class="- topic/entry "> • </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph></entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "/><entry class="- topic/entry "> </entry></row></tbody></tgroup></adobetable>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/open()" class="- topic/link "><linktext class="- topic/linktext ">FileStream.open()</linktext></link><link href="flash.filesystem.xml#FileStream/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">FileStream.openAsync()</linktext></link></related-links><apiValue id="flash.filesystem:FileMode:APPEND" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">APPEND</apiName><shortdesc class="- topic/shortdesc "> 
	Used for a file to be opened in write mode, with all written data appended to the end of the file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">append</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Used for a file to be opened in write mode, with all written data appended to the end of the file. 
	Upon opening, any nonexistent file is created. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileMode:READ" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">READ</apiName><shortdesc class="- topic/shortdesc "> 
	Used for a file to be opened in read-only mode.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">read</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Used for a file to be opened in read-only mode. The file must exist (missing files are not created).
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileMode:UPDATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UPDATE</apiName><shortdesc class="- topic/shortdesc "> 
	Used for a file to be opened in read/write mode.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">update</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Used for a file to be opened in read/write mode. Upon opening, any nonexistent file is created. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileMode:WRITE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">WRITE</apiName><shortdesc class="- topic/shortdesc "> 
	Used for a file to be opened in write-only mode.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">write</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Used for a file to be opened in write-only mode. Upon opening, any nonexistent file is created, and any
	existing file is truncated (its data is deleted).
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.filesystem:StorageVolumeInfo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StorageVolumeInfo</apiName><shortdesc class="- topic/shortdesc ">
	The StorageVolumeInfo object dispatches a StorageVolumeChangeEvent object when a 
	storage volume is mounted or unmounted.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The StorageVolumeInfo object dispatches a StorageVolumeChangeEvent object when a 
	storage volume is mounted or unmounted. The <codeph class="+ topic/ph pr-d/codeph ">StorageVolume.storageVolume</codeph>
	static property references the singleton StorageVolumeInfo object, which dispatches
	the events. The StorageVolumeInfo class also defines a <codeph class="+ topic/ph pr-d/codeph ">getStorageVolumes</codeph>
	method for listing currently mounted storage volumes.
	
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">AIR profile support:</i> This feature is supported 
	 on all desktop operating systems, but it is not supported on all AIR for TV devices. 
	 It is also not supported on mobile devices. You can test 
	 for support at run time using the <codeph class="+ topic/ph pr-d/codeph ">StorageVolumeInfo.isSupported</codeph> property. See 
	 <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">
	 AIR Profile Support</xref> for more information regarding API support across multiple profiles.</p>
	 
	<p class="- topic/p ">On modern Linux distributions, the StorageVolumeInfo object only dispatches <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> and
	<codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> events for physical devices and network drives mounted at particular locations.</p>
	
	</apiDesc><example conref="examples\StorageVolume.as" class="- topic/example "/><example conref="examples\StorageVolumeChangeEvent.as" class="- topic/example "/></apiClassifierDetail><adobeApiEvent id="flash.filesystem:StorageVolumeInfo_flash.events.StorageVolumeChangeEvent.STORAGE_VOLUME_UNMOUNT_storageVolumeUnmount" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">storageVolumeUnmount</apiName><shortdesc class="- topic/shortdesc ">
	 Dispatched when a storage volume has been unmounted.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StorageVolumeChangeEvent.STORAGE_VOLUME_UNMOUNT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StorageVolumeChangeEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Dispatched when a storage volume has been unmounted.
	 
	 <p class="- topic/p ">On modern Linux distributions, the StorageVolumeInfo object only dispatches <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> and
	 <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> events for physical devices and network drives mounted at particular locations.</p>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:StorageVolumeInfo_flash.events.StorageVolumeChangeEvent.STORAGE_VOLUME_MOUNT_storageVolumeMount" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">storageVolumeMount</apiName><shortdesc class="- topic/shortdesc ">
	 Dispatched when a storage volume has been mounted.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StorageVolumeChangeEvent.STORAGE_VOLUME_MOUNT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StorageVolumeChangeEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Dispatched when a storage volume has been mounted.
	 
	 <p class="- topic/p ">On modern Linux distributions, the StorageVolumeInfo object only dispatches <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> and
	 <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> events for physical devices and network drives mounted at particular locations.</p>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.filesystem:StorageVolumeInfo:getStorageVolumes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getStorageVolumes</apiName><shortdesc class="- topic/shortdesc ">
		Returns vector of StorageVolume objects corresponding to the currently mounted storage volumes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="Vector$flash.filesystem:StorageVolume" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Returns vector of StorageVolume objects corresponding to the currently mounted storage volumes.
		
		<p class="- topic/p ">On modern Linux distributions, this method returns  objects corresponding to physical devices 
		and network drives mounted at particular locations.</p>
		
		</apiDesc><example conref="examples\StorageVolume.rootDirectory.1.as" class="- topic/example "> The following code lists the native path for the root directory of each mounted storage volume:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume&gt; = new Vector.&lt;StorageVolume&gt;;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
for (var i:int = 0; i &lt; volumes.length; i++)
{
    trace(volumes[i].rootDirectory.nativePath);
}
</codeblock><swfblock conref="examples\StorageVolume.rootDirectory.1.swf" xml:space="preserve"/></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#StorageVolume" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.StorageVolume</linktext></link></related-links></apiOperation><apiValue id="flash.filesystem:StorageVolumeInfo:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
        The isSupported property is set to true if the 
        StorageVolumeInfo class is supported on the current platform, otherwise it is
        set to false.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        The <codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph> property is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the 
        StorageVolumeInfo class is supported on the current platform, otherwise it is
        set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolumeInfo:storageVolumeInfo:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">storageVolumeInfo</apiName><shortdesc class="- topic/shortdesc ">
		The singleton instance of the StorageVolumeInfo object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:StorageVolumeInfo</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		The singleton instance of the StorageVolumeInfo object. Register event listeners
		on this object for the <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> and <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> 
		events.
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.filesystem:File" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">File</apiName><shortdesc class="- topic/shortdesc ">
 A File object represents a path to a file or directory.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.net:FileReference</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A File object represents a path to a file or directory. This can be an existing file or directory, or it can be
 one that does not yet exist; for instance, it can represent the path to a file or directory that you plan to create. 
 
  <p class="- topic/p ">The File class has a number of properties and methods for getting information about the file system and 
  for performing operations, such as copying files and directories.</p>
  
  <p class="- topic/p ">You can use File objects along with the FileStream class to read and write files. </p>
  
  <p class="- topic/p ">The File class extends the FileReference class. The FileReference class, which is available in Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player as
  well as Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup>, represents a pointer to a file, but the File class adds properties and methods that are not 
  exposed in Flash Player (in a SWF running in a browser), due to security considerations.</p>
  
  <p class="- topic/p ">The File class includes static properties that let you reference commonly used directory locations. These static properties include:</p>
  
  <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph>—a storage directory unique to each installed AIR application</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationDirectory</codeph>—the read-only directory where the application is installed (along with any installed assets)</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph>—the user's desktop directory</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.documentsDirectory</codeph>—the user's documents directory</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph>—the user directory</li></ul>
  
  <p class="- topic/p ">These properties have meaningful values on different operating systems. For example, Mac OS, Linux, and Windows each have
  different native paths to the user's desktop directory. However, the <codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph> property points to the
  correct desktop directory path on each of these platforms. To write applications that work well across platforms, 
  use these properties as the basis for referencing other files used by the application. Then use the <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph>
  method to refine the path. For example, this code points to the preferences.xml file in the application storage directory:</p>
  
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> var prefsFile:File = File.applicationStorageDirectory;
  prefsFile = prefsFile.resolvePath("preferences.xml");</codeblock>
  
  
  
  <p class="- topic/p ">If you use a literal native path in referencing a file, it will only work on one platform. 
  For example, the following File object would only work on Windows:</p> 
  
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">new File("C:\Documents and Settings\joe\My Documents\test.txt")</codeblock>
  
  
  <p class="- topic/p ">The application storage directory is particularly useful. It gives an application-specific storage
  directory for the AIR application. It is defined by the <codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph>
  property.</p>
  
  <p class="- topic/p ">Do not add or remove content from the application directory (where the AIR application is installed). 
  Doing so can break an AIR application and invalidate the application signature. AIR does not let you write to 
  the application directory by default, because the directory is not writable to all user accounts on all operating systems. 
  Use the application storage directory to write internal application files. Use the documents directory to write files 
  that a user expects to use outside your application, such as edited pictures or text files.</p>
  
  
  </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream" class="- topic/link "><linktext class="- topic/linktext ">FileStream</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File_flash.events.FileListEvent.DIRECTORY_LISTING_directoryListing" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">directoryListing</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a directory list is available as a result of a call to the getDirectoryListingAsync()
 method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.FileListEvent.DIRECTORY_LISTING</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.FileListEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a directory list is available as a result of a call to the <codeph class="+ topic/ph pr-d/codeph ">getDirectoryListingAsync()</codeph>
 method.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/getDirectoryListingAsync()" class="- topic/link "><linktext class="- topic/linktext ">File.getDirectoryListingAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.FileListEvent.SELECT_MULTIPLE_selectMultiple" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">selectMultiple</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when the user selects files from the dialog box opened by a call to the 
 browseForOpenMultiple() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.FileListEvent.SELECT_MULTIPLE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.FileListEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when the user selects files from the dialog box opened by a call to the 
 <codeph class="+ topic/ph pr-d/codeph ">browseForOpenMultiple()</codeph> method. 
 
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForOpenMultiple()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpenMultiple()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.Event.SELECT_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when the user selects a file or directory from a file- or directory-browsing dialog box.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.SELECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when the user selects a file or directory from a file- or directory-browsing dialog box. 
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an operation violates a security constraint.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an operation violates a security constraint.
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an error occurs during an asynchronous file operation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an error occurs during an asynchronous file operation.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an asynchronous operation is complete.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an asynchronous operation is complete.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.Event.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a pending asynchronous operation is canceled.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a pending asynchronous operation is canceled.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.filesystem:File:File" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">File</apiName><shortdesc class="- topic/shortdesc ">
	The constructor function for the File class.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The syntax of the <codeph class="+ topic/ph pr-d/codeph ">path</codeph> parameter is invalid.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">path</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The path to the file. You can specify the path by using either a URL or 
	native path (platform-specific) notation. 
	
	<p class="- topic/p ">If you specify a URL, you can use any of the following
	URL schemes: <codeph class="+ topic/ph pr-d/codeph ">file</codeph>, <codeph class="+ topic/ph pr-d/codeph ">app</codeph>, or 
	<codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph>. The following are valid values for the <codeph class="+ topic/ph pr-d/codeph ">path</codeph>
	parameter using URL notation: </p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"app:/DesktopPathTest.xml"</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"app-storage:/preferences.xml"</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"file:///C:/Documents%20and%20Settings/bob/Desktop"</codeph> (the desktop on Bob's Windows computer)</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"file:///Users/bob/Desktop"</codeph> (the desktop on Bob's Mac computer)</li></ul>
	
	<p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">app</codeph> and <codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph> URL schemes 
	are useful because they can point to a valid file on all file systems. However, 
	in the other two examples, which use the <codeph class="+ topic/ph pr-d/codeph ">file</codeph> URL scheme to point to the 
	user's desktop directory, it would be better to pass <i class="+ topic/ph hi-d/i ">no</i> <codeph class="+ topic/ph pr-d/codeph ">path</codeph> argument  
	to the <codeph class="+ topic/ph pr-d/codeph ">File()</codeph> constructor and then assign <codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph>
	to the File object, as a way to access the desktop directory that is both platform- and
	user-independent.</p>
	
	<p class="- topic/p ">If you specify a native path, on Windows you can use either the backslash character or 
	the forward slash character as the path separator in this argument; on Mac OS and Linux, use the    
	forward slash. The following are valid values for the <codeph class="+ topic/ph pr-d/codeph ">path</codeph> parameter using 
	native path notation:</p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"C:/Documents and Settings/bob/Desktop"</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"/Users/bob/Desktop"</codeph></li></ul>
	
	<p class="- topic/p ">However, for these two examples, you should pass <i class="+ topic/ph hi-d/i ">no</i> <codeph class="+ topic/ph pr-d/codeph ">path</codeph> argument  
	to the <codeph class="+ topic/ph pr-d/codeph ">File()</codeph> constructor and then assign <codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph>
	to the File object, as a way to access the desktop directory that is both platform- and
	user-independent.</p>
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The constructor function for the File class. 
	
	<p class="- topic/p ">If you pass a <codeph class="+ topic/ph pr-d/codeph ">path</codeph> argument, the
	File object points to the specified path, and the <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> property and 
	and <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property are set to reflect that path.</p>
	
	
	<p class="- topic/p ">Although you can pass a <codeph class="+ topic/ph pr-d/codeph ">path</codeph> argument to specify a file path, consider
	whether doing so may result in platform-specific code. For example, a native path such as
	<codeph class="+ topic/ph pr-d/codeph ">"C:\\Documents and Settings\\bob\\Desktop"</codeph> or a URL such as 
	<codeph class="+ topic/ph pr-d/codeph ">"file:///C:/Documents%20and%20Settings/bob/Desktop"</codeph> is only valid on Windows.
	It is far better to use the following static properties, which represent commonly used directories,
	and which are valid on all platforms:</p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.documentsDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph></li></ul>
	
	<p class="- topic/p ">You can then use the <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph> method to get a path relative to these directories.
	For example, the following code sets up a File object to point to the settings.xml file in the application
	storage directory:</p>
	
	<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var file:File = File.applicationStorageDirectory.resolvePath("settings.xml");</codeblock>
	
	
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">Important:</b> If you pass a URL string in the <codeph class="+ topic/ph pr-d/codeph ">path</codeph> parameter, the URL is decoded to resolve the file path.
	 For example, the statement, <codeph class="+ topic/ph pr-d/codeph ">new File("file:///c:/test/demo%20file%201%2e0.txt")</codeph> creates a File object
	 with the native path, "c:\test\demo file 1.0.txt". (A URL uses the file:, app:, or app-storage: scheme prefixes.) 
	 However, if the valid URL prefixes are omitted, the path string is treated like a native path and no decoding takes place. 
	 You must take this behavior into consideration when validating paths derived from potentially untrusted sources.
	 If you simply validate the input string, URL decoding may allow an attacker to bypass your validation checks.
	 Always validate the final path of the instantiated File object:</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 var file:File = new File( taintedString );
	 validate( file.nativePath ); //where validate() is your path validation function
	 </codeblock> 
	  
	 
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/nativePath" class="- topic/link "><linktext class="- topic/linktext ">nativePath</linktext></link></related-links></apiConstructor><apiOperation id="flash.filesystem:File:browseForDirectory" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browseForDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Displays a directory chooser dialog box, in which the user can select a directory.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A browse operation (browseForOpen(), browseForOpenMultiple(),
	 browseForSave(), browseForDirectory()) is currently running.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">title</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string that is displayed in the title bar of the dialog box.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Displays a directory chooser dialog box, in which the user can select a directory.
	 When the user selects the directory, the <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event is dispatched.
	 The <codeph class="+ topic/ph pr-d/codeph ">target</codeph> property of the <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event is the
	 File object pointing to the selected directory.
	 
	 <p class="- topic/p ">The directory chooser dialog is not always displayed in front of windows that are
	 "owned" by another window (windows that have a non-null <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> property).
	 To avoid window ordering issues, hide owned windows before calling this method.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> On Android devices, <codeph class="+ topic/ph pr-d/codeph ">browseForDirectory()</codeph> is not supported.
	 The File object dispatches a cancel event immediately.</p>
	 
	 </apiDesc><example conref="examples\File.browseForDirectory.1.as" class="- topic/example "> The following code uses the <codeph class="+ topic/ph pr-d/codeph ">File.browseForDirectory()</codeph> method to 
 let the user select a directory. When the directory is selected, the code lists the contents of
 the selected directory in the <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> output.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.Event;

var directory:File = File.documentsDirectory;

try
{
    directory.browseForDirectory("Select Directory");
    directory.addEventListener(Event.SELECT, directorySelected);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function directorySelected(event:Event):void 
{
    directory = event.target as File;
    var files:Array = directory.getDirectoryListing();
    for(var i:uint = 0; i &lt; files.length; i++)
    {
        trace(files[i].name);
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForOpen()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpen()</linktext></link><link href="flash.filesystem.xml#File/browseForSave()" class="- topic/link "><linktext class="- topic/linktext ">browseForSave()</linktext></link><link href="flash.filesystem.xml#File/event:select" class="- topic/link "><linktext class="- topic/linktext ">select</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForDirectory_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user clicks the Cancel button in the Open File dialog box. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user clicks the Cancel button in the Open File dialog box.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForDirectory_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user selects a directory and closes the directory chooser dialog box. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user selects a directory and closes the directory chooser dialog box.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForDirectory_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The browse operation is unsupported on this platform.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The browse operation is unsupported on this platform.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:browseForOpenMultiple" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browseForOpenMultiple</apiName><shortdesc class="- topic/shortdesc ">
	 Displays the Open File dialog box, in which the user can select one or more files to open.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A browse operation (browseForOpen(), browseForOpenMultiple(),
	 browseForSave(), browseForDirectory()) is currently running.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">title</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string that is displayed in the title bar of the dialog box.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">typeFilter</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of FileFilter instances used to filter the files 
	 that are displayed in the dialog box. If you omit this parameter, all files are 
	 displayed. For more information, see the FileFilter class.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Displays the Open File dialog box, in which the user can select one or more files to open.
	 
	 <p class="- topic/p ">When the user selects the files, the <codeph class="+ topic/ph pr-d/codeph ">selectMultiple</codeph> event is dispatched.
	 The <codeph class="+ topic/ph pr-d/codeph ">target</codeph> property of the <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event is this
	 File object.  Unlike <codeph class="+ topic/ph pr-d/codeph ">browseForOpen()</codeph>, with the <codeph class="+ topic/ph pr-d/codeph ">browseForOpenMultiple()</codeph> 
	 method, this File object is not updated to reference any of the chosen files. 
	 Instead, the resulting <codeph class="+ topic/ph pr-d/codeph ">selectMultiple</codeph> event contains an array of the chosen files.</p>
	 
	 <p class="- topic/p ">The Open File dialog is not always displayed in front of windows that are
	 "owned" by another window (windows that have a non-null <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> property).
	 To avoid window ordering issues, hide owned windows before calling this method.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> On Android devices, the file dialog title cannot be set. The <codeph class="+ topic/ph pr-d/codeph ">title</codeph>
	 parameter is ignored.</p>
	 
	 </apiDesc><example conref="examples\File.browseForOpenMultiple.1.as" class="- topic/example "> The following code uses the <codeph class="+ topic/ph pr-d/codeph ">File.browseForOpenMultiple()</codeph> method to 
 let the user choose multiple files. When the files are selected, the code outputs the paths
 for the selected files.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.FileListEvent;

var docsDir:File = File.documentsDirectory;
try
{
    docsDir.browseForOpenMultiple("Select Files");
    docsDir.addEventListener(FileListEvent.SELECT_MULTIPLE, filesSelected);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function filesSelected(event:FileListEvent):void 
{
    for (var i:uint = 0; i &lt; event.files.length; i++) 
    {
        trace(event.files[i].nativePath);
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForSave()" class="- topic/link "><linktext class="- topic/linktext ">browseForSave()</linktext></link><link href="flash.filesystem.xml#File/browseForOpen()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpen()</linktext></link><link href="flash.filesystem.xml#File/browseForDirectory()" class="- topic/link "><linktext class="- topic/linktext ">browseForDirectory()</linktext></link><link href="flash.filesystem.xml#File/event:selectMultiple" class="- topic/link "><linktext class="- topic/linktext ">selectMultiple</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForOpenMultiple_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user clicks the Cancel button in the Open File dialog box. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user clicks the Cancel button in the Open File dialog box.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpenMultiple_selectMultiple" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">selectMultiple</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:FileListEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user selects files and closes the Open File dialog box. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user selects files and closes the Open File dialog box.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpenMultiple_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The browse operation is unsupported on this platform.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The browse operation is unsupported on this platform.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:browseForOpen" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browseForOpen</apiName><shortdesc class="- topic/shortdesc ">
	 Displays the Open File dialog box, in which the user can select a file to open.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A browse operation (browseForOpen(), browseForOpenMultiple(),
	 browseForSave(), browseForDirectory()) is currently running.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">title</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string that is displayed in the title bar of the dialog box.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">typeFilter</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of FileFilter instances used to filter the files 
	 that are displayed in the dialog box. If you omit this parameter, all files are 
	 displayed. For more information, see the FileFilter class.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Displays the Open File dialog box, in which the user can select a file to open.
	 
	 <p class="- topic/p ">When the user selects the file, the <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event is dispatched.
	 The <codeph class="+ topic/ph pr-d/codeph ">target</codeph> property of the <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event is the
	 File object pointing to the selected file.</p>
	 
	 <p class="- topic/p ">The Open File dialog is not always displayed in front of windows that are
	 "owned" by another window (windows that have a non-null <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> property).
	 To avoid window ordering issues, hide owned windows before calling this method.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> On Android devices, the file dialog title cannot be set. The <codeph class="+ topic/ph pr-d/codeph ">title</codeph>
	 parameter is ignored.</p>
	 
	 </apiDesc><example conref="examples\File.browseForOpen.1.as" class="- topic/example "> The following code uses the <codeph class="+ topic/ph pr-d/codeph ">File.browseForOpen()</codeph> method to 
 let the user choose a text file. When the file is selected, the code reads the file data
 into a string.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.Event;
import flash.net.FileFilter;

var fileToOpen:File = new File();
var txtFilter:FileFilter = new FileFilter("Text", "*.as;*.css;*.html;*.txt;*.xml");

try 
{
    fileToOpen.browseForOpen("Open", [txtFilter]);
    fileToOpen.addEventListener(Event.SELECT, fileSelected);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function fileSelected(event:Event):void 
{
    var stream:FileStream = new FileStream();
    stream.open(event.target, FileMode.READ);
    var fileData:String = stream.readUTFBytes(stream.bytesAvailable);
    trace(fileData);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForSave()" class="- topic/link "><linktext class="- topic/linktext ">browseForSave()</linktext></link><link href="flash.filesystem.xml#File/browseForOpenMultiple()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpenMultiple()</linktext></link><link href="flash.filesystem.xml#File/browseForDirectory()" class="- topic/link "><linktext class="- topic/linktext ">browseForDirectory()</linktext></link><link href="flash.filesystem.xml#File/event:select" class="- topic/link "><linktext class="- topic/linktext ">select</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForOpen_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user clicks the Cancel button in the Open File dialog box. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user clicks the Cancel button in the Open File dialog box.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpen_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user selects a file and closes the Open File dialog box. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user selects a file and closes the Open File dialog box.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpen_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The browse operation is unsupported on this platform.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The browse operation is unsupported on this platform.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:browseForSave" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browseForSave</apiName><shortdesc class="- topic/shortdesc ">
	 Displays the Save File dialog box, in which the user can select a file destination.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A browse operation (browseForOpen(), browseForOpenMultiple(),
	 browseForSave(), browseForDirectory()) is currently running.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">title</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string that is displayed in the title bar of the dialog box.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Displays the Save File dialog box, in which the user can select a file destination. 
	 
	 <p class="- topic/p ">When the user selects the file, the <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event is dispatched.
	 The <codeph class="+ topic/ph pr-d/codeph ">target</codeph> property of the <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event is the
	 File object pointing to the selected Save destination.</p>
	 
	 <p class="- topic/p ">The Save File dialog is not always displayed in front of windows that are
	 "owned" by another window (windows that have a non-null <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> property).
	 To avoid window ordering issues, hide owned windows before calling this method.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> On Android devices, the file dialog title cannot be set. The <codeph class="+ topic/ph pr-d/codeph ">title</codeph>
	 parameter is ignored.</p>
	 
	 </apiDesc><example conref="examples\File.browseForSave.1.as" class="- topic/example "> The following code uses the <codeph class="+ topic/ph pr-d/codeph ">File.browseForSave()</codeph> method to 
 let the user select a path for saving a file. When the files are selected, the code saves
 data to the selected file path.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.Event;

var docsDir:File = File.documentsDirectory;
try
{
    docsDir.browseForSave("Save As");
    docsDir.addEventListener(Event.SELECT, saveData);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function saveData(event:Event):void 
{
    var newFile:File = event.target as File;
    var str:String = "Hello.";
    if (!newFile.exists)
    {
        var stream:FileStream = new FileStream();
        stream.open(newFile, FileMode.WRITE);
        stream.writeUTFBytes(str);
        stream.close();
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForDirectory()" class="- topic/link "><linktext class="- topic/linktext ">browseForDirectory()</linktext></link><link href="flash.filesystem.xml#File/browseForOpen()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpen()</linktext></link><link href="flash.filesystem.xml#File/event:select" class="- topic/link "><linktext class="- topic/linktext ">select</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForSave_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user clicks the Cancel button in the Save File dialog box. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user clicks the Cancel button in the Save File dialog box.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForSave_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user selects a file and closes the Save File dialog box. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user selects a file and closes the Save File dialog box.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForSave_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The browse operation is unsupported on this platform.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The browse operation is unsupported on this platform.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
	 Cancels any pending asynchronous operation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Cancels any pending asynchronous operation.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:canonicalize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">canonicalize</apiName><shortdesc class="- topic/shortdesc ">
	 Canonicalizes the File path.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Canonicalizes the File path.
	 
	 <p class="- topic/p ">If the File object represents an existing file or directory, canonicalization 
	 adjusts the path so that it matches the case of the actual file or directory name.
	 If the File object is a symbolic link, canonicalization adjusts the path so that
	 it matches the file or directory that the link points to, regardless of whether the
	 file or directory that is pointed to exists. On case sensitive file systems
	 (such as Linux), when multiple files exist with names differing only in case, 
	 the <codeph class="+ topic/ph pr-d/codeph ">canonicalize()</codeph> method adjusts the path to
	 match the first file found (in an order determined by the file system).</p>
	 
	 <p class="- topic/p ">In addition, canonicalization converts short filenames to long filenames on Windows.</p>
	 
	 </apiDesc><example conref="examples\File.canonicalize.2.as" class="- topic/example ">     The following code shows how to use the <codeph class="+ topic/ph pr-d/codeph ">canonicalize()</codeph> method to find the 
 correct capitalization of a directory name. Before running this example, create a directory named AIR Test 
 on the desktop of your computer.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var path:File = File.desktopDirectory.resolvePath("air test");
trace(path.nativePath); 
path.canonicalize();
trace(path.nativePath); // ...\AIR Test

</codeblock></example><example conref="examples\File.canonicalize.1.as" class="- topic/example ">     The following code shows how to use the <codeph class="+ topic/ph pr-d/codeph ">canonicalize()</codeph> method to find the 
 long name of a Windows directory based on its short name. This example assumes that there is an AIR Test
 directory at the root of the C: drive, and that the system has assigned the short name AIR~1 to the directory.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var path:File = new File();
path.nativePath = "C:\\AIR~1";
path.canonicalize();
trace(path.nativePath); // C:\AIR Test
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	 Returns a copy of this File object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns a copy of this File object. Event registrations are not copied.
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> This method does <i class="+ topic/ph hi-d/i ">not</i> copy the file itself. It simply makes a 
	 copy of the instance of the <ph class="- topic/ph ">ActionScript</ph>
	  File object. To copy a file, use the 
	 <codeph class="+ topic/ph pr-d/codeph ">copyTo()</codeph> method.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:copyToAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">copyToAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Begins copying the file or directory at the location specified by this File object to 
	 the location specified by the destination parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions to write to the destination.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newLocation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The target location of the new file. Note that this File object specifies
	 the resulting (copied) file or directory, <i class="+ topic/ph hi-d/i ">not</i> the path to the containing directory.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">overwrite</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, the copy fails if the file specified by the <codeph class="+ topic/ph pr-d/codeph ">target</codeph>  
	 file already exists. If <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the operation overwrites any existing file or directory 
	 of the same name.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Begins copying the file or directory at the location specified by this File object to 
	 the location specified by the <codeph class="+ topic/ph pr-d/codeph ">destination</codeph> parameter. 
	 
	 <p class="- topic/p ">Upon completion, either a <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event (successful) or an <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> event 
	 (unsuccessful) is dispatched. The copy process creates any required parent directories (if possible).</p>
	 
	 </apiDesc><example conref="examples\File.copyToAsync.1.as" class="- topic/example "> The following code shows how to use the <codeph class="+ topic/ph pr-d/codeph ">copyToAsync()</codeph> method to copy a file.
 Before running this code, be sure to create a test1.txt file in the AIR Test subdirectory of the documents directory on your 
 computer. The resulting copied file is named test2.txt, and it is also in the AIR Test subdirectory. When you set the 
 <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> parameter to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the operation overwrites any existing test2.txt file.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/test2.txt");

sourceFile.copyToAsync(destination, true);
sourceFile.addEventListener(Event.COMPLETE, fileCopiedHandler);

function fileCopiedHandler(event:Event):void {
    trace("Done.");
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/copyTo()" class="- topic/link "><linktext class="- topic/linktext ">copyTo()</linktext></link><link href="flash.filesystem.xml#File/moveToAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:copyToAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the file or directory has been successfully copied. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the file or directory has been successfully copied.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:copyToAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The source does not exist; or the destination exists and <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> 
	 is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>; or the source could not be copied to the target; or the source and destination refer 
	 to the same file or folder and <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.  On Windows, you cannot 
	 copy a file that is open or a directory that contains a file that is open.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The source does not exist; or the destination exists and overwrite 
	 is false; or the source could not be copied to the target; or the source and destination refer 
	 to the same file or folder and overwrite is set to true.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:copyTo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">copyTo</apiName><shortdesc class="- topic/shortdesc ">
	 Copies the file or directory at the location specified by this File object to 
	 the location specified by the newLocation parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The source does not exist; or the destination exists and <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>; 
	 or the source could not be copied to the target; or the source and destination refer to the same file or folder and
	 <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. On Windows, you cannot copy a file that is open or a directory
	 that contains a file that is open.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions to write to the destination.
	  
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newLocation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The target location of the new file. Note that this File object specifies
	 the resulting (copied) file or directory, <i class="+ topic/ph hi-d/i ">not</i> the path to the containing directory.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">overwrite</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, the copy fails if the file specified by the <codeph class="+ topic/ph pr-d/codeph ">target</codeph>  
	 parameter already exists. If <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the operation overwrites existing file or directory 
	 of the same name.  
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Copies the file or directory at the location specified by this File object to 
	 the location specified by the <codeph class="+ topic/ph pr-d/codeph ">newLocation</codeph> parameter. The copy process 
	 creates any required parent directories (if possible).
	 
	 </apiDesc><example conref="examples\File.copyTo.1.as" class="- topic/example "> The following code shows how to use the <codeph class="+ topic/ph pr-d/codeph ">copyTo()</codeph> method to copy  a file. 
 Before running this code, create a test1.txt file in the AIR Test subdirectory of the documents directory on  
 your computer. The resulting copied file is named test2.txt, and it is also in the AIR Test subdirectory. When 
 you set the <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> parameter to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the operation overwrites any existing test2.txt file.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.Event;

var sourceFile:FileReference = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:FileReference = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/test2.txt");

if (sourceFile.copyTo(destination, true)) {
    trace("Done.");
}
</codeblock></example><example conref="examples\File.copyTo.2.as" class="- topic/example "> The following code shows how to use the <codeph class="+ topic/ph pr-d/codeph ">copyTo()</codeph> method to copy a file.
 Before running this code, create a test1.txt file in the AIR Test subdirectory of the home directory on your 
 computer. The resulting copied file is named test2.txt. The <codeph class="+ topic/ph pr-d/codeph ">try</codeph> and <codeph class="+ topic/ph pr-d/codeph ">catch</codeph> statements
 show how to respond to errors.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/test2.txt");

try 
{
    sourceFile.copyTo(destination, true);
}
catch (error:Error)
{
    trace("Error:", error.message);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/copyToAsync()" class="- topic/link "><linktext class="- topic/linktext ">copyToAsync()</linktext></link><link href="flash.filesystem.xml#File/moveTo()" class="- topic/link "><linktext class="- topic/linktext ">moveTo()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:createDirectory" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">createDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Creates the specified directory and any necessary parent directories.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The directory did not exist and could not be created. 
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates the specified directory and any necessary parent directories. If the 
	 directory already exists, no action is taken.
	 
	 </apiDesc><example conref="examples\File.createDirectory.1.as" class="- topic/example ">     The following code moves a file named test.txt on the desktop to the AIR Test 
 subdirectory of the documents directory. The call to the <codeph class="+ topic/ph pr-d/codeph ">createDirectory()</codeph> method 
 ensures that the AIR Test directory exists before the file is moved.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var source:File = File.desktopDirectory.resolvePath("test.txt");
var target:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");
var targetParent:File = target.parent;
targetParent.createDirectory();
source.moveTo(target, true);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:createTempDirectory" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">createTempDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Returns a reference to a new temporary directory.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A File object referencing the new temporary directory.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns a reference to a new temporary directory. This is a new directory
	 in the system's temporary directory path.
	 
	 <p class="- topic/p ">This method lets you identify a new, unique directory, without having to
	 query the system to see that the directory is new and unique.</p>
	 
	 <p class="- topic/p ">You may want to delete the temporary directory before closing the application, 
	 since on some devices it is not deleted automatically.</p>
	 
	 </apiDesc><example conref="examples\File.createTempDirectory.1.as" class="- topic/example "> The following code uses the <codeph class="+ topic/ph pr-d/codeph ">createTempFile()</codeph> method to obtain a 
 reference to a new temporary directory.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.File;

var temp:File = File.createTempDirectory();
trace(temp.nativePath);
</codeblock> Each time you run this code, a new (unique) file is created. 
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/createTempFile()" class="- topic/link "><linktext class="- topic/linktext ">createTempFile()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:createTempFile" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">createTempFile</apiName><shortdesc class="- topic/shortdesc ">
	 Returns a reference to a new temporary file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A File object referencing the new temporary file.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns a reference to a new temporary file. This is a new file
	 in the system's temporary directory path.
	 
	 <p class="- topic/p ">This method lets you identify a new, unique file, without having to
	 query the system to see that the file is new and unique.</p>
	 
	 <p class="- topic/p ">You may want to delete the temporary file before closing the application, 
	 since it is not deleted automatically.</p>
	 
	 </apiDesc><example conref="examples\File.createTempFile.1.as" class="- topic/example "> The following code uses the <codeph class="+ topic/ph pr-d/codeph ">createTempFile()</codeph> method to obtain a 
 reference to a new temporary file.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.File;

var temp:File = File.createTempFile();
trace(temp.nativePath);
</codeblock> Each time you run this code, a new (unique) file is created. 
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/createTempDirectory()" class="- topic/link "><linktext class="- topic/linktext ">createTempDirectory()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:deleteDirectoryAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deleteDirectoryAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Deletes the directory asynchronously.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions to delete the directory.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deleteDirectoryContents</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies whether or not to delete a directory that contains files or
	 subdirectories. When <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, if the directory contains files or directories, 
	 the File object dispatches an <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> event.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Deletes the directory asynchronously. If this File is actually a symbolic link to a directory,
	 then the link, and not the directory, is removed.
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/deleteDirectory()" class="- topic/link "><linktext class="- topic/linktext ">deleteDirectory()</linktext></link><link href="flash.filesystem.xml#File/deleteFileAsync()" class="- topic/link "><linktext class="- topic/linktext ">deleteFileAsync()</linktext></link><link href="flash.filesystem.xml#File/moveToTrashAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrashAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:deleteDirectoryAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the directory has been deleted successfully. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the directory has been deleted successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:deleteDirectoryAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The directory does not exist or could not be deleted. On Windows, 
	 you cannot delete a directory that contains a file that is open.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The directory does not exist or could not be deleted.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:deleteDirectory" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deleteDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Deletes the directory.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The directory does not exist, or the directory could not be deleted. On Windows, 
	 you cannot delete a directory that contains a file that is open.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions to delete the directory.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deleteDirectoryContents</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies whether or not to delete a directory that contains files or
	 subdirectories. When <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, if the directory contains files or directories, a call to
	 this method throws an exception.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Deletes the directory. If this File is actually a symbolic link to a directory,
	 then the link, and not the directory, is removed.
	 
	 </apiDesc><example conref="examples\File.deleteDirectory.1.as" class="- topic/example "> The following code creates an empty directory and then uses the 
 <codeph class="+ topic/ph pr-d/codeph ">deleteDirectory()</codeph> method to delete the directory. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var directory:File = File.documentsDirectory.resolvePath("Empty Junk Directory/");
File.createDirectory(directory);
trace(directory.exists); // true
directory.deleteDirectory();
trace(directory.exists); // false
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/deleteDirectoryAsync()" class="- topic/link "><linktext class="- topic/linktext ">deleteDirectoryAsync()</linktext></link><link href="flash.filesystem.xml#File/deleteFile()" class="- topic/link "><linktext class="- topic/linktext ">deleteFile()</linktext></link><link href="flash.filesystem.xml#File/moveToTrash()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrash()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:deleteFileAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deleteFileAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Deletes the file asynchronously.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions to delete the file.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Deletes the file asynchronously. If this File is actually a symbolic link, then the link,
	 not the target file, is removed.
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/deleteDirectoryAsync()" class="- topic/link "><linktext class="- topic/linktext ">deleteDirectoryAsync()</linktext></link><link href="flash.filesystem.xml#File/deleteFile()" class="- topic/link "><linktext class="- topic/linktext ">deleteFile()</linktext></link><link href="flash.filesystem.xml#File/moveToTrashAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrashAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:deleteFileAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the file has been deleted successfully. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the file has been deleted successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:deleteFileAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file does not exist or could not be deleted. On Windows,
	 you cannot delete a file that is currently open.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The file does not exist or could not be deleted.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:deleteFile" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deleteFile</apiName><shortdesc class="- topic/shortdesc ">
	 Deletes the file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file does not exist or could not to be deleted. On Windows, 
	 you cannot delete a file that is currently open.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions to delete the file.

	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Deletes the file. If this File is actually a symbolic link, then the link,
	 not the target file, is removed.
	 
	 </apiDesc><example conref="examples\File.deleteFile.1.as" class="- topic/example "> The following code creates a temporary file and then calls the <codeph class="+ topic/ph pr-d/codeph ">deleteFile()</codeph>
 method to delete it.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var file:File = File.createTempFile();
trace(file.exists); // true
file.deleteFile();
trace(file.exists); // false
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/deleteDirectory()" class="- topic/link "><linktext class="- topic/linktext ">deleteDirectory()</linktext></link><link href="flash.filesystem.xml#File/deleteFileAsync()" class="- topic/link "><linktext class="- topic/linktext ">deleteFileAsync()</linktext></link><link href="flash.filesystem.xml#File/moveToTrash()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrash()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:getDirectoryListingAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDirectoryListingAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Asynchronously retrieves an array of File objects corresponding to the contents of the directory represented
	 by this File object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Asynchronously retrieves an array of File objects corresponding to the contents of the directory represented
	 by this File object. 
	 
	 </apiDesc><example conref="examples\File.getDirectoryListingAsync.1.as" class="- topic/example "> The following code shows how to use the <codeph class="+ topic/ph pr-d/codeph ">getDirectoryListingAsync()</codeph> method to 
 enumerate the contents of the user directory.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.FileListEvent;

var directory:File = File.userDirectory;
directory.getDirectoryListingAsync();
directory.addEventListener(FileListEvent.DIRECTORY_LISTING, directoryListingHandler);

function directoryListingHandler(event:FileListEvent):void {
    var list:Array = event.files;
    for (var i:uint = 0; i &lt; list.length; i++) {
        trace(list[i].nativePath);
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/getDirectoryListing()" class="- topic/link "><linktext class="- topic/linktext ">getDirectoryListing()</linktext></link><link href="flash.filesystem.xml#File/getRootDirectories()" class="- topic/link "><linktext class="- topic/linktext ">getRootDirectories()</linktext></link><link href="flash.filesystem.xml#File/event:directoryListing" class="- topic/link "><linktext class="- topic/linktext ">directoryListing event</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:getDirectoryListingAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You do not have adequate permissions to read this directory, or the directory does
	 not exist.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">You do not have adequate permissions to read this directory, or the directory does
	 not exist.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:getDirectoryListingAsync_directoryListing" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">directoryListing</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:FileListEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The directory contents have been enumerated successfully. The 
	 <codeph class="+ topic/ph pr-d/codeph ">contents</codeph> event includes a <codeph class="+ topic/ph pr-d/codeph ">files</codeph> property, which is the resulting array of File objects.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The directory contents have been enumerated successfully.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:getDirectoryListing" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDirectoryListing</apiName><shortdesc class="- topic/shortdesc ">
	 Returns an array of File objects corresponding to files and directories in the directory represented by this
	 File object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of File objects.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns an array of File objects corresponding to files and directories in the directory represented by this
	 File object. This method does not explore the contents of subdirectories.
	 
	 </apiDesc><example conref="examples\File.getDirectoryListing.1.as" class="- topic/example "> The following code shows how to use the <codeph class="+ topic/ph pr-d/codeph ">getDirectoryListing()</codeph> method to 
 enumerate the contents of the user directory.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var directory:File = File.userDirectory;
var list:Array = directory.getDirectoryListing();
for (var i:uint = 0; i &lt; list.length; i++) {
    trace(list[i].nativePath);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/getDirectoryListingAsync()" class="- topic/link "><linktext class="- topic/linktext ">getDirectoryListingAsync()</linktext></link><link href="flash.filesystem.xml#File/getRootDirectories()" class="- topic/link "><linktext class="- topic/linktext ">getRootDirectories()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:getRelativePath" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getRelativePath</apiName><shortdesc class="- topic/shortdesc ">
	 Finds the relative path between two File paths.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The reference is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the application security sandbox.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The relative path between this file (or directory) and the <codeph class="+ topic/ph pr-d/codeph ">ref</codeph> file 
	 (or directory), if possible; otherwise <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ref</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> A File object against which the path is given.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useDotDot</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> Specifies whether the resulting relative path can use ".." components.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Finds the relative path between two File paths.
	 
	 <p class="- topic/p ">The relative path is the list of components that can be appended to
	 (resolved against) this reference in order to locate the second (parameter)
	 reference. The relative path is returned using the "/" separator character.</p>
	 
	 <p class="- topic/p ">Optionally, relative paths may include ".." references, but such paths
	 will not cross conspicuous volume boundaries.</p>
	 
	 </apiDesc><example conref="examples\File.getRelativePath.1.as" class="- topic/example "/></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:getRootDirectories" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getRootDirectories</apiName><shortdesc class="- topic/shortdesc ">
	 Returns an array of File objects, listing the file system root directories.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of File objects, listing the root directories. 
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns an array of File objects, listing the file system root directories. 
	 
	 <p class="- topic/p ">For example, on Windows this is a list of volumes such as the C: drive and the 
	 D: drive. An empty drive, such as a CD or DVD drive in which no disc is inserted, 
	 is not included in this array. On Mac OS and Linux, this method always returns the 
	 unique root directory for the machine (the "/" directory)</p>
	 
	 <p class="- topic/p ">On file systems for which the root is not readable, such as the Android file system,
	 the properties of the returned File object do not always reflect the true value. For
	 example, on Android, the <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> property reports 0.</p>
	 
	 </apiDesc><example conref="examples\File.getRootDirectories.1.as" class="- topic/example "> The following code outputs a list of root directories:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
var rootDirs:Array = File.getRootDirectories();

for (var i:uint = 0; i &lt; rootDirs.length; i++) {
    trace(rootDirs[i].nativePath);
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:moveToAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">moveToAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Begins moving the file or directory at the location specified by this File object to 
	 the location specified by the newLocation parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions to move the file.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newLocation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The target location for the move. This object specifies the path to the resulting
	 (moved) file or directory, <i class="+ topic/ph hi-d/i ">not</i> the path to the containing directory.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">overwrite</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, the move fails if the <codeph class="+ topic/ph pr-d/codeph ">target</codeph> file 
	 already exists. If <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the operation overwrites any existing file or directory 
	 of the same name.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Begins moving the file or directory at the location specified by this File object to 
	 the location specified by the <codeph class="+ topic/ph pr-d/codeph ">newLocation</codeph> parameter. 
	 
	 <p class="- topic/p ">To rename a file, set the <codeph class="+ topic/ph pr-d/codeph ">destination</codeph> parameter to point to a path that is 
	 in the file's directory, but with a different filename.</p>
	 
	 <p class="- topic/p ">The move process creates any required parent directories (if possible).</p>
	 
	 </apiDesc><example conref="examples\File.moveToAsync.1.as" class="- topic/example "> The following code shows how to use the <codeph class="+ topic/ph pr-d/codeph ">moveToAsync()</codeph> method to rename a 
 file. The original filename is test1.txt and the resulting name is test2.txt. Since both the source and destination File
 object point to the same directory (the Apollo Test subdirectory of the user's documents directory), the 
 <codeph class="+ topic/ph pr-d/codeph ">moveToAsync()</codeph> method renames the file, rather than moving it to a new directory.
 Before running this code, create a test1.txt file in the Apollo Test subdirectory of the documents directory on your 
 computer. When you set <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> parameter to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the operation overwrites any 
 existing test2.txt file.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("Apollo Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("Apollo Test/test2.txt");

var sourceFile.moveToAsync(destination, true);
sourceFile.addEventListener(Event.COMPLETE, fileMoveCompleteHandler);

function fileMoveCompleteHandler(event:Event):void 
{
    trace("Done.")
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/copyToAsync()" class="- topic/link "><linktext class="- topic/linktext ">copyToAsync()</linktext></link><link href="flash.filesystem.xml#File/moveTo()" class="- topic/link "><linktext class="- topic/linktext ">moveTo()</linktext></link><link href="flash.filesystem.xml#File/moveToTrashAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrashAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:moveToAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the file or directory has been successfully moved. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the file or directory has been successfully moved.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:moveToAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The source does not exist; or the destination exists and <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> 
	 is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>; or the source could not be moved to the target;  or the source and destination refer 
	 to the same file or folder and <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. On Windows, you cannot move 
	 a file that is open or a directory that contains a file that is  open.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The source does not exist; or the destination exists and overwrite 
	 is false; or the source could not be moved to the target;  or the source and destination refer 
	 to the same file or folder and overwrite is set to true.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:moveToTrashAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">moveToTrashAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Asynchronously moves a file or directory to the trash.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>TBC: what to do when Trash is not supported?  SB part of general policy about optional system facilities.
	 </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions to move the file to the trash.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Asynchronously moves a file or directory to the trash. 
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> On operating systems that do not support the concept of a recoverable trash folder, the files are removed immediately.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/moveToTrash()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrash()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:moveToTrashAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The operating system did not allow the operation; or the file
	 or directory does not exist. On Windows, you cannot move a file that is open or a directory
	 that contains a file that is currently open.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The operating system did not allow the operation; or the file
	 or directory does not exist.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:moveToTrashAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the file or directory has been successfully moved to the trash. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the file or directory has been successfully moved to the trash.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:moveToTrash" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">moveToTrash</apiName><shortdesc class="- topic/shortdesc ">
	 Moves a file or directory to the trash.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>TBC: what to do when Trash is not supported?  SB part of general policy about optional system facilities.
	 </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The operating system did not allow the operation; or the file
	 or directory does not exist. On Windows, you cannot move a file that is open or a directory
	 that contains a file that is currently open.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions to move the file to the trash.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Moves a file or directory to the trash.
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> On operating systems that do not support the concept of a recoverable trash folder, the files are removed immediately.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/moveToTrashAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrashAsync()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:moveTo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">moveTo</apiName><shortdesc class="- topic/shortdesc ">
	 Moves the file or directory at the location specified by this File object to 
	 the location specified by the destination parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The source does not exist; or the destination exists and <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> is 
	 set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>; or the source file or directory could not be moved to the target location; 
	 or the source and destination refer to the same file or folder and <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> is set to 
	 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. On Windows, you cannot move a file that is open or a directory that contains a file 
	 that is open.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The application does not have the necessary permissions to move the file.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newLocation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The target location for the move. This object specifies the path to the resulting
	 (moved) file or directory, <i class="+ topic/ph hi-d/i ">not</i> the path to the containing directory.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">overwrite</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, the move fails if the <codeph class="+ topic/ph pr-d/codeph ">target</codeph> file 
	 already exists. If <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the operation overwrites any existing file or directory 
	 of the same name. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Moves the file or directory at the location specified by this File object to 
	 the location specified by the <codeph class="+ topic/ph pr-d/codeph ">destination</codeph> parameter. 
	 
	 <p class="- topic/p ">To rename a file, set the <codeph class="+ topic/ph pr-d/codeph ">destination</codeph> parameter to point to a path that is 
	 in the file's directory, but with a different filename.</p>
	 
	 <p class="- topic/p ">The move process creates any required parent directories (if possible).</p>
	 
	 </apiDesc><example conref="examples\File.moveTo.1.as" class="- topic/example "> The following code shows how to use the <codeph class="+ topic/ph pr-d/codeph ">moveTo()</codeph> method to rename
 a file. The original filename is test1.txt and the resulting filename is test2.txt. Since both the source and destination File
 object point to the same directory (the Apollo Test subdirectory of the user's documents directory), the 
 <codeph class="+ topic/ph pr-d/codeph ">moveTo()</codeph> method renames the file, rather than moving it to a new directory. Before running 
 this code, create a test1.txt file in the AIR Test subdirectory of the documents directory on your 
 computer. When you set the <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> parameter to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the operation overwrites 
 any existing test2.txt file.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

import flash.filesystem.File;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("Apollo Test/test2.txt");

try  
{
    sourceFile.moveTo(destination, true);
}
catch (error:Error)
{
    trace("Error:" + error.message);
}
</codeblock></example><example conref="examples\File.moveTo.2.as" class="- topic/example "> The following code shows how to use the <codeph class="+ topic/ph pr-d/codeph ">moveTo()</codeph> method to move a file.
 The original file is the test1.txt file in the Apollo Test subdirectory of the user's documents directory, 
 and the method moves the file to the Results subdirectory. Before running this code, create a 
 test1.txt file in the AIR Test subdirectory of the home directory on your computer. The <codeph class="+ topic/ph pr-d/codeph ">try</codeph> 
 and <codeph class="+ topic/ph pr-d/codeph ">catch</codeph> statements show how to respond to errors.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/Results/test1.txt");

try 
{
    sourceFile.moveTo(destination, true);
}
catch (error:Error)
{
    trace("Error:" + error.message);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/copyTo()" class="- topic/link "><linktext class="- topic/linktext ">copyTo()</linktext></link><link href="flash.filesystem.xml#File/moveToAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToAsync()</linktext></link><link href="flash.filesystem.xml#File/moveToTrash()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrash()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:openWithDefaultApplication" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">openWithDefaultApplication</apiName><shortdesc class="- topic/shortdesc ">
	 Opens the file in the application registered by the operating system to open this file type.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">(Mac OS and Linux) No application was found that can open the file.
	 (On Windows, attempting to open a file that has no associated application fails silently,
	 without an exception.)
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file is in the application directory or it is of a 
	 prohibited file type. This error does not apply for AIR applications installed with a 
	 native application installer (extended desktop profile applications).
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file does not exist or no application is registered to open the file.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The file does not exist.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ReferenceError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ReferenceError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Opens the file in the application registered by the operating system to open this file type.
	 
	 <p class="- topic/p ">AIR prevents you from using the File.openWithDefaultApplication() method to open certain files. 
	 On Windows, AIR prevents you from opening files that have certain file types (files with specific extensions, listed below). 
	 On Mac OS and Linux, AIR prevents you from opening files that will launch in specific applications, 
	 specified below. Attempting to open one of these files using the <codeph class="+ topic/ph pr-d/codeph ">openWithDefaultApplication()</codeph> method
	 results in an exception. However, AIR applications installed with a native installer (extended desktop profile applications) 
	 are not restricted by these limitations; they can open files of any type.</p>
	 
	 <p class="- topic/p ">You cannot open documents from the application directory.</p>
	 
	 <p class="- topic/p ">The tables below list file extensions that are prohibited on Windows, as well as the prevented applications on Mac OS and Linux:</p>
	 
	 <p class="- topic/p ">
	 <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry "> Windows Document Extension </entry><entry class="- topic/entry "> Kind </entry><entry class="- topic/entry "> Mac OS Application Counterpart </entry><entry class="- topic/entry "> Linux Application Counterpart </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "> bat </entry><entry class="- topic/entry "> Batch file command </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> No default application </entry></row><row class="- topic/row "><entry class="- topic/entry "> cmd </entry><entry class="- topic/entry "> DOS and Windows command file </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> No default application </entry></row><row class="- topic/row "><entry class="- topic/entry "> com </entry><entry class="- topic/entry "> Command </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> No default application </entry></row><row class="- topic/row "><entry class="- topic/entry "> csh </entry><entry class="- topic/entry "> UNIX csh shell script </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> /bin/csh </entry></row><row class="- topic/row "><entry class="- topic/entry "> dash </entry><entry class="- topic/entry "> UNIX dash shell script </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> /bin/dash </entry></row><row class="- topic/row "><entry class="- topic/entry "> ksh </entry><entry class="- topic/entry "> UNIX ksh shell script </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> /bin/ksh </entry></row><row class="- topic/row "><entry class="- topic/entry "> sh </entry><entry class="- topic/entry "> UNIX shell script </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> /bin/bash </entry></row><row class="- topic/row "><entry class="- topic/entry "> tcsh </entry><entry class="- topic/entry "> UNIX tcsh shell script </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> /bin/tcsh </entry></row><row class="- topic/row "><entry class="- topic/entry "> zsh </entry><entry class="- topic/entry "> UNIX zsh shell script </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> /bin/zsh </entry></row><row class="- topic/row "><entry class="- topic/entry "> exe </entry><entry class="- topic/entry "> Executable file </entry><entry class="- topic/entry "> Executable bit, .app extension </entry><entry class="- topic/entry "> /lib/ld.so </entry></row><row class="- topic/row "><entry class="- topic/entry "> lnk </entry><entry class="- topic/entry "> Windows shortcut file </entry><entry class="- topic/entry "> Executable bit, .app extension </entry><entry class="- topic/entry "> Links in Linux, executable bit set, no default application </entry></row><row class="- topic/row "><entry class="- topic/entry "> pif </entry><entry class="- topic/entry "> Program Information File </entry><entry class="- topic/entry "> Executable bit, .app extension </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> reg </entry><entry class="- topic/entry "> Registration Information/Key for Windows 95/98, Registry Data File </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> scf </entry><entry class="- topic/entry "> Windows Explorer command </entry><entry class="- topic/entry "> ScriptEditor, AutomatorRunner </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> shb, shs </entry><entry class="- topic/entry "> Shell Scrap Object file </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> prg </entry><entry class="- topic/entry "> Program file </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> vb, vbe, vbs </entry><entry class="- topic/entry "> VBScript files </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> vsmacros </entry><entry class="- topic/entry "> Visual Studio .NET binary-based macro project </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> ws, wsc, wsf, wsh </entry><entry class="- topic/entry "> Windows script files </entry><entry class="- topic/entry "> ScriptEditor, AutomatorRunner </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> fxp </entry><entry class="- topic/entry "> Fox Pro compiled source code </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> mas </entry><entry class="- topic/entry "> Microsoft Access stored procedures </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> scr </entry><entry class="- topic/entry "> Windows screen saver </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> py, pyc </entry><entry class="- topic/entry "> Python script file </entry><entry class="- topic/entry "> Python </entry><entry class="- topic/entry "> Python </entry></row><row class="- topic/row "><entry class="- topic/entry "> pl </entry><entry class="- topic/entry "> Perl script file </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> perl </entry></row><row class="- topic/row "><entry class="- topic/entry "> cgi </entry><entry class="- topic/entry "> Common Gateway Interface script file </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> perl </entry></row><row class="- topic/row "><entry class="- topic/entry "> msi, msm, msp, mst, idt, cub, pcp </entry><entry class="- topic/entry "> Windows installer file </entry><entry class="- topic/entry "> installer </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> job </entry><entry class="- topic/entry "> Windows Task Scheduler task object </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> jar, js, jse </entry><entry class="- topic/entry "> Java archive file, JavaScript file, JScript encoded script file </entry><entry class="- topic/entry "> <ph class="- topic/ph ">JarLauncher</ph> </entry><entry class="- topic/entry "> jar </entry></row><row class="- topic/row "><entry class="- topic/entry "> url </entry><entry class="- topic/entry "> Internet shortcut </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> hta </entry><entry class="- topic/entry "> HTML application </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> N/A </entry></row></tbody></tgroup></adobetable>
	 </p>
	 
	 <p class="- topic/p ">
	 <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry "> Mac OS X Only </entry><entry class="- topic/entry "> Kind </entry><entry class="- topic/entry "> Mac OS X Application </entry><entry class="- topic/entry "> Linux Application Counterpart </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> Mac OS X Java applet </entry><entry class="- topic/entry "> AppletLauncher </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> Mac OS X AppleScript plugin </entry><entry class="- topic/entry "> systemevents </entry><entry class="- topic/entry "> N/A </entry></row><row class="- topic/row "><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> Mac OS X widget </entry><entry class="- topic/entry "> dock, dashboardlauncher </entry><entry class="- topic/entry "> N/A </entry></row></tbody></tgroup></adobetable>
	 </p>
	 
	 <p class="- topic/p ">
	 <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry "> Linux-only Document Extension </entry><entry class="- topic/entry "> Kind </entry><entry class="- topic/entry "> Mac OS X Application Counterpart </entry><entry class="- topic/entry "> Linux Application </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "> rb </entry><entry class="- topic/entry "> Ruby shell script </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> ruby </entry></row><row class="- topic/row "><entry class="- topic/entry "> desktop </entry><entry class="- topic/entry "> Desktop files and shortcuts </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> No default application </entry></row><row class="- topic/row "><entry class="- topic/entry "> directory </entry><entry class="- topic/entry "> Directory files and shortcuts </entry><entry class="- topic/entry "> N/A </entry><entry class="- topic/entry "> No default application </entry></row></tbody></tgroup></adobetable>
	 </p>
	 	 
	 	 
	 </apiDesc><example conref="examples\File.openWithDefaultApplication.1.as" class="- topic/example "> The following code lets the user navigate to an MP3 file and open it 
 in the default application for playing MP3 files. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.net.FileFilter;

var file:File = File.documentsDirectory; 
var mp3Filter:FileFilter = new FileFilter("MP3 Files", "*.mp3"); 
file.browseForOpen("Open", [mp3Filter]); 
file.addEventListener(Event.SELECT, fileSelected); 
 
function fileSelected(e:Event):void 
{ 
    file.openWithDefaultApplication(); 
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/downloaded" class="- topic/link "><linktext class="- topic/linktext ">downloaded</linktext></link><link href="flash.desktop.xml#NativeProcess" class="- topic/link "><linktext class="- topic/linktext ">NativeProcess</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:resolvePath" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">resolvePath</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new File object with a path relative to this File object's path, based on the 
	 path parameter (a string).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A new File object pointing to the resulting path.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">path</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The path to append to this File object's path (if the <codeph class="+ topic/ph pr-d/codeph ">path</codeph> parameter 
	 is a relative path); or the path to return (if the <codeph class="+ topic/ph pr-d/codeph ">path</codeph> parameter is an absolute
	 path).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new File object with a path relative to this File object's path, based on the 
	 <codeph class="+ topic/ph pr-d/codeph ">path</codeph> parameter (a string).
	 
	 <p class="- topic/p ">You can use a relative path or absolute path as the <codeph class="+ topic/ph pr-d/codeph ">path</codeph> parameter.</p>
	 
	 <p class="- topic/p ">If you specify a relative path, the given <codeph class="+ topic/ph pr-d/codeph ">path</codeph> is "appended" 
	 to the path of the File object. However, use of ".." in the <codeph class="+ topic/ph pr-d/codeph ">path</codeph>
	 can return a resulting path that is not a child of the File object. The resulting reference need not 
	 refer to an actual file system location.</p>
	 
	 <p class="- topic/p ">If you specify an absolute file reference, the method returns the File object pointing to that
	 path. The absolute file reference should use valid native path syntax for the user's operating 
	 system (such as <codeph class="+ topic/ph pr-d/codeph ">"C:\\test"</codeph> on Windows). Do <i class="+ topic/ph hi-d/i ">not</i> use a URL (such as 
	 <codeph class="+ topic/ph pr-d/codeph ">"file:///c:/test"</codeph>) as the <codeph class="+ topic/ph pr-d/codeph ">path</codeph> parameter.</p>
	 
	 <p class="- topic/p ">All resulting paths are normalized as follows: </p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">Any "." element is ignored.</li><li class="- topic/li ">Any ".." element consumes its parent entry.  </li><li class="- topic/li ">No ".." reference that reaches the file system root or the application-persistent
	 			 storage root passes that node; it is ignored.</li></ul>
	 
	 <p class="- topic/p ">You should always use the forward slash (<codeph class="+ topic/ph pr-d/codeph ">/</codeph>) character as the path separator. 
	 On Windows, you <i class="+ topic/ph hi-d/i ">can</i> also use the backslash (<codeph class="+ topic/ph pr-d/codeph ">\</codeph>) character, but you should not. 
	 Using the backslash character can lead to applications that do not work on other platforms.</p>
	 
	 <p class="- topic/p ">Filenames and directory names are case-sensitive on Linux.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.filesystem:File:applicationDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">applicationDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 The folder containing the application's installed files.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The folder containing the application's installed files.
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property for this object uses the <codeph class="+ topic/ph pr-d/codeph ">app</codeph> URL scheme 
	 (not the <codeph class="+ topic/ph pr-d/codeph ">file</codeph> URL scheme). This means that the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> string is specified starting 
	 with <codeph class="+ topic/ph pr-d/codeph ">"app:"</codeph> (not <codeph class="+ topic/ph pr-d/codeph ">"file:"</codeph>). Also, if you create a File object relative to the 
	 <codeph class="+ topic/ph pr-d/codeph ">File.applicationDirectory</codeph> directory (by using the <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph> method), 
	 the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property of the File object also uses the <codeph class="+ topic/ph pr-d/codeph ">app</codeph> URL scheme. 
	 </p>
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> You cannot write to files or directories that have paths that use the <codeph class="+ topic/ph pr-d/codeph ">app:</codeph>
	 URL scheme. Also, you cannot delete or create files or folders that have paths that use the <codeph class="+ topic/ph pr-d/codeph ">app:</codeph>
	 URL scheme. Modifying content in the application directory is a bad practice, for security reasons, and is
	 blocked by the operating system on some platforms.  
	 If you want to store application-specific data, consider using the application storage directory 
	 (<codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph>). If you want any of the content in the application storage directory
	 to have access to the application-privileged functionality (AIR APIs), you can expose that functionality
	 by using a sandbox bridge.</p>
	 
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">applicationDirectory</codeph> property provides a way to reference the 
	 application directory that works across platforms. If you set a File object to reference 
	 the application directory using the <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> or <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property, 
	 it will only work on the platform for which that path is valid.</p>
	 
	 <p class="- topic/p ">On Android, the <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> property of a File object pointing to the application directory is an empty
	 string. Use the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property to access application files.</p> 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/applicationStorageDirectory" class="- topic/link "><linktext class="- topic/linktext ">applicationStorageDirectory</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:applicationStorageDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">applicationStorageDirectory</apiName><shortdesc class="- topic/shortdesc ">
     The application's private storage directory.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The application's private storage directory. 
	 
	 <p class="- topic/p ">Each AIR application has a unique, persistent application storage directory, which
	 is created when you first access <codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph>. This directory 
	 is a convenient location to store application-specific data.</p>
	 
	 <p class="- topic/p ">When you uninstall an AIR application, whether the uninstaller deletes the application storage directory
     and its files depends on the platform.</p>
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property for this object uses the <codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph> URL scheme 
	 (not the <codeph class="+ topic/ph pr-d/codeph ">file</codeph> URL scheme). This means that the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> string is specified starting 
	 with <codeph class="+ topic/ph pr-d/codeph ">"app-storage:"</codeph> (not <codeph class="+ topic/ph pr-d/codeph ">"file:"</codeph>). Also, if you create a File object relative to the 
	 <codeph class="+ topic/ph pr-d/codeph ">File.applicationStoreDirectory</codeph> directory (by using the <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph> method), 
	 the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> of the File object also uses the <codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph> URL scheme 
	 (as in the example).</p>
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">applicationStorageDirectory</codeph> property provides a way to reference the 
	 application storage directory that works across platforms. If you set a File object to reference 
	 the application storage directory using the <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> or <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property, 
	 it will only work on the platform for which that path is valid.</p>
	 
	 
	 </apiDesc><example conref="examples\File.applicationStorageDirectory.1.as" class="- topic/example "> The following code creates a File object pointing to the "images" subdirectory of 
 the application storage directory.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var tempFiles:File = File.applicationStorageDirectory;
tempFiles = tempFiles.resolvePath("images/");
trace(tempFiles.url); // app-storage:/images
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:desktopDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">desktopDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 The user's desktop directory.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The user's desktop directory.
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">desktopDirectory</codeph> property provides a way to reference the desktop
	 directory that works across platforms. If you set a File object to reference 
	 the desktop directory using the <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> or <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property,
	 it will only work on the platform for which that path is valid.</p>
	 
	 <p class="- topic/p ">If an operating system does not support a desktop directory, a suitable directory in the 
	 file system is used instead.</p>
	 
  	 <p class="- topic/p ">AIR for TV devices have no concept of a user's desktop directory. 
     Therefore, the <codeph class="+ topic/ph pr-d/codeph ">desktopDirectory</codeph> property 
     references the same directory location as <codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph> property. 
     The user directory is unique to the application.</p>	 
	 	 
	 
	 </apiDesc><example conref="examples\File.desktopDirectory.1.as" class="- topic/example "> The following code outputs a list of files and directories contained in the user's desktop directory.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
var desktop:File = File.desktopDirectory;

var files:Array = desktop.getDirectoryListing();

for (var i:uint = 0; i &lt; files.length; i++) {
    trace(files[i].nativePath);
}
</codeblock><swfblock conref="examples\File.desktopDirectory.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:documentsDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">documentsDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 The user's documents directory.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The user's documents directory.
	 
	 <p class="- topic/p ">On Windows, this is the My Documents directory (for example, C:\Documents and Settings\userName\My Documents). 
	 On Mac OS, the default location is /Users/userName/Documents. On Linux, the default location is /home/userName/Documents
	 (on an English system), and the property observes the <codeph class="+ topic/ph pr-d/codeph ">xdg-user-dirs</codeph> setting.</p>
	 
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">documentsDirectory</codeph> property provides a way to reference the documents
	 directory that works across platforms. If you set a File object to reference 
	 the documents directory using the <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> or <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property,
	 it will only work on the platform for which that path is valid.</p>
	 
	 <p class="- topic/p ">If an operating system does not support a documents directory, a suitable directory in the 
	 file system is used instead.</p>
	 
  	 <p class="- topic/p ">AIR for TV devices have no concept of a user's documents directory. 
     Therefore, the <codeph class="+ topic/ph pr-d/codeph ">documentsDirectory</codeph> property 
     references the same directory location as the <codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph> property. 
     The user directory is unique to the application.</p>	 
	 
	 </apiDesc><example conref="examples\File.documentsDirectory.1.as" class="- topic/example "> The following code uses the <codeph class="+ topic/ph pr-d/codeph ">File.documentsDirectory</codeph> property and the 
 <codeph class="+ topic/ph pr-d/codeph ">File.createDirectory()</codeph> method to ensure that a directory named "AIR Test" exists
 in the user's documents directory.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var directory:File = File.documentsDirectory;
directory = directory.resolvePath("AIR Test");

File.createDirectory(directory);
trace(directory.exists); // true
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:downloaded:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">downloaded</apiName><shortdesc class="- topic/shortdesc ">
	 Indicates whether the referenced file or directory was downloaded (from the internet) or not.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indicates whether the referenced file or directory was downloaded (from the internet) or not.
	 
	 <p class="- topic/p ">This property is only meaningful on operating systems in which files can be flagged as downloaded:</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">Windows XP service pack 2 and later, and on Windows Vista</li><li class="- topic/li ">Mac OS 10.5 and later</li></ul>
	 
	 <p class="- topic/p ">On systems that do not flag downloaded files, such as Linux,
	 the property is not meaningful (and it is set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/openWithDefaultApplication()" class="- topic/link "><linktext class="- topic/linktext ">openWithDefaultApplication()</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:exists:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">exists</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether the referenced file or directory exists.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether the referenced file or directory exists.
     The value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the File object points to an existing file or directory, 
     <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.
	 
	 </apiDesc><example conref="examples\File.exists.1.as" class="- topic/example "> The following code creates a temporary file, then deletes it and uses the 
 <codeph class="+ topic/ph pr-d/codeph ">File.exists</codeph> property to check for the existence of the file.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var temp:File = File.createTempFile();
trace(temp.exists); // true
temp.deleteFile();
trace(temp.exists); // false
</codeblock><swfblock conref="examples\File.exists.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:icon:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">icon</apiName><shortdesc class="- topic/shortdesc ">
	 An Icon object containing the icons defined for the file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.desktop:Icon</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 An Icon object containing the icons defined for the file. An Icon object is an array of BitmapData
	 objects corresponding to the various icon states. On Linux, the Icon object contains no icons. On
	 Android, the <codeph class="+ topic/ph pr-d/codeph ">icon</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	 
	 </apiDesc><example conref="examples\File.icon.1.as" class="- topic/example "> The following code shows how to find the image in the <codeph class="+ topic/ph pr-d/codeph ">icon</codeph> array that has
 the greatest height, and it sets a Bitmap object to that image.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.display.*;

var directory:File = File.documentsDirectory;
var bitmaps:Array = directory.icon.bitmaps;
var bmpData:BitmapData = new BitmapData(1, 1);
for (var i:uint = 0; i &lt; bitmaps.length; i++) {
    if (bitmaps[i].height &gt; bmpData.height) {
        bmpData = directory.icon.bitmaps[i];
    }
}
var iconBmp:Bitmap = new Bitmap(bmpData);
</codeblock> You might add this Bitmap object as a child of a display object container, 
 such as a Sprite object or a Flex UIComponent object.
</example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isDirectory</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether the reference is to a directory.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether the reference is to a directory.
     The value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the File object points to a directory; <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.
	 
	 </apiDesc><example conref="examples\File.isDirectory.1.as" class="- topic/example "> The following code creates an array of File objects pointing to files and directories in the 
 user directory and then uses the <codeph class="+ topic/ph pr-d/codeph ">isDirectory</codeph> property to list only those File objects that point to 
 directories (not to files).
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var userDirFiles:Array = File.userDirectory.getDirectoryListing();
for (var i:uint = 0; i &lt; userDirFiles.length; i++) {
    if (userDirFiles[i].isDirectory) {
        trace(userDirFiles[i].nativePath);
    }
}    
</codeblock><swfblock conref="examples\File.isDirectory.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isHidden:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isHidden</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether the referenced file or directory is "hidden." 
     The value is true if the referenced file or directory is hidden, false otherwise.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>(Waiting for Stan's OK:)
	 
	 <ul class="- topic/ul "><li class="- topic/li ">On Windows, a file or directory is designated as hidden by specifying the 
	 Hidden attribute (for example, in the File Properties dialog box) for the file.</li><li class="- topic/li ">On Mac OS and Linux, files can be designated as hidden for a number of reasons. Files with 
	 names that begin with the dot (.) character are designated as hidden. A .hidden file 
	 in the root directory lists other hidden files. Also, there is a bit in the file that, 
	 when set, makes it hidden.</li></ul>
	 
	 </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether the referenced file or directory is "hidden." 
     The value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the referenced file or directory is hidden, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.
	 
	 </apiDesc><example conref="examples\File.isHidden.1.as" class="- topic/example "> The following code creates an array of File objects pointing to files and directories in the 
 user directory and then uses the <codeph class="+ topic/ph pr-d/codeph ">isHidden</codeph> property to list hidden files and directories.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var userDirFiles:Array = File.userDirectory.getDirectoryListing();
for (var i:uint = 0; i &lt; userDirFiles.length; i++) {
    if (userDirFiles[i].isHidden) {
        trace(userDirFiles[i].nativePath);
    }
}    
</codeblock><swfblock conref="examples\File.isHidden.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isPackage:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isPackage</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether the referenced directory is a package.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether the referenced directory is a package.
     
	 <p class="- topic/p ">The value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the referenced directory is a package, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.
	 Note that the File class does not allow creating packages directly.</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">On Mac OS, directories can be designated as packages and will show up in the Finder as a
	  single file rather than as a directory. This property is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the referenced 
	  directory is a package, and <codeph class="+ topic/ph pr-d/codeph ">false</codeph> if the file is not a directory, does not exist, or 
	 is not a package.</li><li class="- topic/li ">On other operating systems, this property is always set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</li></ul>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isSymbolicLink:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSymbolicLink</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether the reference is a symbolic link.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether the reference is a symbolic link.
     
	 <p class="- topic/p ">The value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the File object is a symbolic link, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.
	 Note that the File class does not allow creating symbolic links directly.</p>
	 
	 <p class="- topic/p ">Symbolic links allow a file to point to another file or directory on disk. Although similar, symbolic
	 links are not the same as aliases on Mac OS and shortcuts on Windows. An alias or a  shortcut is always
	 reported as a file (rather than a directory), and reading or writing to an alias or shortcut
	 never affects the original file or directory that it points to.
	 On the other hand, a symbolic link generally behaves like the file or directory it points to. It can be
	 reported as a file or a directory, and reading or writing to a symbolic link affects the file or directory
	 that it points to, not the symbolic link itself. Deleting a symbolic link, however, deletes the link 
	 and not the target of the link.</p>
	 
	 <p class="- topic/p ">Mac<sup class="+ topic/ph hi-d/sup ">®</sup> OS<sup class="+ topic/ph hi-d/sup ">®</sup>, Linux, and Windows<sup class="+ topic/ph hi-d/sup ">®</sup> Vista<sup class="+ topic/ph hi-d/sup ">®</sup>
	 support symbolic links. Additionally, on Windows the <codeph class="+ topic/ph pr-d/codeph ">isSymbolicLink</codeph> 
	 property for a File object referencing a junction point (used in the NTFS file system) is set to
	 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:lineEnding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lineEnding</apiName><shortdesc class="- topic/shortdesc ">
	 The line-ending character sequence used by the host operating system.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The line-ending character sequence used by the host operating system.
	 
	 <p class="- topic/p ">On Mac OS and Linux, this is the line-feed character (character code 0x0A hexadecimal). 
	 On Windows, this is the carriage return character (character code 0x0D hexadecimal) followed
	 by the line-feed character (character code 0x0A hexadecimal).</p>
	 
	 </apiDesc><example conref="examples\File.lineEnding.1.as" class="- topic/example "> The following code writes a string (<codeph class="+ topic/ph pr-d/codeph ">str</codeph>) to a text file and uses the 
 <codeph class="+ topic/ph pr-d/codeph ">File.lineEnding</codeph> static property to replace all instances of the new-line character 
 (represented in the code by the regular expression <codeph class="+ topic/ph pr-d/codeph ">/\n/g</codeph>) with the preferred  
 line-ending character for the host operating system.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var str:String = "Hello\n" + 
        "World\n";
str = str.replace(/\n/g, File.lineEnding);
var file:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.WRITE);
fileStream.writeUTF(str);
fileStream.close();
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:nativePath:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">nativePath</apiName><shortdesc class="- topic/shortdesc ">
	 The full path in the host operating system representation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The syntax of the path is invalid.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the application security sandbox.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The full path in the host operating system representation. On Mac OS and Linux, 
	 the forward slash (/) character is used as the path separator. 
	 However, in Windows, you can <i class="+ topic/ph hi-d/i ">set</i> the <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> property 
	 by using the forward slash character or the backslash (\) character as the 
     path separator, and AIR automatically replaces forward slashes with 
	 the appropriate backslash character.
	 
	<p class="- topic/p ">Before writing code to <i class="+ topic/ph hi-d/i ">set</i> the <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> property directly, 
	consider whether doing so may result in platform-specific code. For example, a native 
	path such as <codeph class="+ topic/ph pr-d/codeph ">"C:\\Documents and Settings\\bob\\Desktop"</codeph> is only valid on Windows.
	It is far better to use the following static properties, which represent commonly used directories,
	and which are valid on all platforms:</p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.documentsDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph></li></ul>
	
	<p class="- topic/p ">You can use the <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph> method to get a path relative to these directories.</p>
	
	<p class="- topic/p ">Some Flex APIs, such as the <codeph class="+ topic/ph pr-d/codeph ">source</codeph> property of the SWFLoader class, use a 
	URL (the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property of a File object), not a native path (the <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph>
	property).</p>
	
	
	
	 </apiDesc><example conref="examples\File.nativePath.1.as" class="- topic/example "> The following code shows the difference between the <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph>
 property and the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property of a File object. The comments show results on an
 example Windows computer.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var docs:File = File.documentsDirectory;
trace(docs.nativePath); // C:\Documents and Settings\turing\My Documents
trace(docs.url); // file:///C:/Documents%20and%20Settings/turing/My%20Documents
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:parent:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">parent</apiName><shortdesc class="- topic/shortdesc ">
     The directory that contains the file or directory referenced by this File object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The directory that contains the file or directory referenced by this File object. 
	 
	 <p class="- topic/p ">If the file or directory does not exist, the <codeph class="+ topic/ph pr-d/codeph ">parent</codeph> property still returns the
	 File object that points to the containing directory, even if that directory does not exist.</p>
	 
	 <p class="- topic/p ">This property is identical to the return value for <codeph class="+ topic/ph pr-d/codeph ">resolvePath("..")</codeph> except that the parent of a root
	 directory is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
	 
	 </apiDesc><example conref="examples\File.parent.1.as" class="- topic/example "> The following code uses the <codeph class="+ topic/ph pr-d/codeph ">parent</codeph> property to show the directory
 that contains a temporary file.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var tempFile:File = File.createTempDirectory();
trace(tempFile.parent.nativePath);
tempFile.deleteFile();
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:separator:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">separator</apiName><shortdesc class="- topic/shortdesc ">
	 The host operating system's path component separator character.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The host operating system's path component separator character.
	 
	 <p class="- topic/p ">On Mac OS and Linux, this is the forward slash (/) character. On Windows, it is the backslash 
	 (\) character.</p>
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> When using the backslash character in a String literal, remember to 
	 type the character twice (as in <codeph class="+ topic/ph pr-d/codeph ">"directory\\file.ext"</codeph>). Each pair of backslashes
	 in a String literal represent a single backslash in the String.</p>
	 
	 </apiDesc><example conref="examples\File.separator.1.as" class="- topic/example "> The following code uses the <codeph class="+ topic/ph pr-d/codeph ">getRelativePath()</codeph> method to get the relative path
 between a directory and a file. The code then uses the <codeph class="+ topic/ph pr-d/codeph ">File.separator</codeph> static property 
 to replace forward slash (/) characters in the path with the separator character used by the operating 
 system, which is the backslash character (\) on Windows and the forward slash character on other
 operating systems.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var directory:File = File.documentsDirectory.resolvePath("Apollo Test");
var file:File = File.documentsDirectory.resolvePath("Apollo Test/employees/bob/test.txt");

var relativePath:String = directory.getRelativePath(file); // employees/bob/test.txt
relativePath = relativePath.replace(/\//g, File.separator);
trace(relativePath); 
</codeblock> In this example, the <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> method uses a regular expression, 
 <codeph class="+ topic/ph pr-d/codeph ">/\//g</codeph>, to match <i class="+ topic/ph hi-d/i ">all</i> forward slash characters.
</example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:spaceAvailable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">spaceAvailable</apiName><shortdesc class="- topic/shortdesc ">
	 The space available for use at this File location, in bytes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The space available for use at this File location, in bytes. 
	 
	 <p class="- topic/p "> If the File object references a directory,
	 <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> indicates the space in the directory that files can use. If
	 the File object references a file, <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> indicates the space into which the file
	 could grow. If the file location does not exist, <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> is set to 0. If the File 
	 object references a symbolic link, <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> indicates the space available at the  
	 location the symbolic link points to.</p>
	 
	 <p class="- topic/p ">Typically the space available for a directory or file is the same as the space available on the 
	 volume containing the directory or file. However, space available can take into account quotas and 
	 per-directory limits.</p>
	 
	 <p class="- topic/p ">Adding a file or directory to a volume generally requires more space than the actual size of the file 
	 or the size of the contents of the directory. For example, the operating system may require more space to 
	 store index information. Or the disk sectors required may use additional space. Also, available
	 space changes dynamically. So, you cannot expect to allocate <i class="+ topic/ph hi-d/i ">all</i> of the reported space 
	 for file storage.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:systemCharset:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">systemCharset</apiName><shortdesc class="- topic/shortdesc ">
	 The default encoding used by the host operating system.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The default encoding used by the host operating system. 
	 
	 <p class="- topic/p ">Possible values include <codeph class="+ topic/ph pr-d/codeph ">"windows-1252"</codeph>
	 <codeph class="+ topic/ph pr-d/codeph ">"shift-jis"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"cn-gb"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph>, and others.
	 For a complete list, see <xref href="../../charset-codes.html" class="- topic/xref ">Supported Character Sets</xref>.</p>
	 
	 <p class="- topic/p ">You can use this value when using the <codeph class="+ topic/ph pr-d/codeph ">readMultiByte()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">writeMultiByte()</codeph>
	 methods of the FileStream class.</p>
	 
	 </apiDesc><example conref="examples\File.systemCharSet.1.as" class="- topic/example "> The following code opens a file (a test.txt file in the AIR Test subdirectory of the 
 user's documents directory), and uses the <codeph class="+ topic/ph pr-d/codeph ">File.systemCharset</codeph> static property
 as the <codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> parameter of a call to the <codeph class="+ topic/ph pr-d/codeph ">readMultiByte()</codeph> method
 of a FileStream object.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var file:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.READ);
var str:String = fileStream.readMultiByte(file.size, File.systemCharset);
trace(str);    
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/readMultiByte()" class="- topic/link "><linktext class="- topic/linktext ">FileStream.readMultiByte()</linktext></link><link href="flash.filesystem.xml#FileStream/writeMultiByte()" class="- topic/link "><linktext class="- topic/linktext ">FileStream.writeMultiByte()</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:url:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">url</apiName><shortdesc class="- topic/shortdesc ">
	 The URL for this file path.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>The URL will have a null "host" specification. (As opposed to "localhost". This is more confusing than 
	 informative.
	 
	 </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The URL syntax is invalid.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the application security sandbox.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The URL for this file path.
	 
	 <p class="- topic/p ">If this is a reference to a path in the application storage directory, the URL scheme is 
	 <codeph class="+ topic/ph pr-d/codeph ">"app-storage"</codeph>; if it is a reference to a path in the application directory, the 
	 URL scheme is <codeph class="+ topic/ph pr-d/codeph ">"app"</codeph>; otherwise the scheme is <codeph class="+ topic/ph pr-d/codeph ">"file"</codeph>. </p>
	 
	 <p class="- topic/p ">You can use blank space characters (rather than <codeph class="+ topic/ph pr-d/codeph ">"%20"</codeph>) when
     <i class="+ topic/ph hi-d/i ">assigning</i> a value to the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property; AIR automatically 
	 encodes the strings (for instance, converting spaces to <codeph class="+ topic/ph pr-d/codeph ">"%20"</codeph>).</p>
	 
	 </apiDesc><example conref="examples\File.nativePath.1.as" class="- topic/example "> The following code shows the difference between the <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph>
 property and the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property of a File object. The comments show results on an
 example Windows computer.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var docs:File = File.documentsDirectory;
trace(docs.nativePath); // C:\Documents and Settings\turing\My Documents
trace(docs.url); // file:///C:/Documents%20and%20Settings/turing/My%20Documents
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/nativePath" class="- topic/link "><linktext class="- topic/linktext ">nativePath</linktext></link><link href="../../package.html#decodeURI()" class="- topic/link "><linktext class="- topic/linktext ">decodeURI() global function</linktext></link><link href="../../package.html#decodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">decodeURIComponent() global function</linktext></link><link href="../../package.html#encodeURI()" class="- topic/link "><linktext class="- topic/linktext ">decodeURI() global function</linktext></link><link href="../../package.html#encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">decodeURIComponent() global function</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:userDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">userDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 The user's directory.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The user's directory.
	 
	 <p class="- topic/p ">On Windows, this is the parent of the My Documents directory
	 (for example, C:\Documents and Settings\userName). On
	 Mac OS, it is /Users/userName. On Linux, it is /home/userName.</p>
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">userDirectory</codeph> property provides a way to reference the user
	 directory that works across platforms. If you set the <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> or <codeph class="+ topic/ph pr-d/codeph ">url</codeph>
	 property of a File object directly, it will only work on the platform for which that path is valid.</p>
	 
	 <p class="- topic/p ">If an operating system does not support a user directory, a suitable directory in the 
	 file system is used instead.</p>
	 
     <p class="- topic/p ">On AIR for TV devices, the <codeph class="+ topic/ph pr-d/codeph ">userDirectory</codeph> property
	 references a user directory that is unique to the application.</p>	
     
	 </apiDesc><example conref="examples\File.userDirectory.1.as" class="- topic/example "> The following code outputs a list of files and directories contained in the root level 
 of the user directory:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var files:Array = File.userDirectory.listDirectory();
for (var i:uint = 0; i &lt; files.length; i++) {
    trace(files[i].nativePath);
}
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.filesystem:StorageVolume" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StorageVolume</apiName><shortdesc class="- topic/shortdesc ">
      A StorageVolume object includes properties defining a mass storage volume.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      A StorageVolume object includes properties defining a mass storage volume. 
      This class is used in two ways:
      
      <ul class="- topic/ul "><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">storageVolume</codeph> property of a StorageVolumeChangeEvent object
      is a StorageVolume object. This object represents the storage volume that has been 
      mounted or unmounted.</li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">StorageVolumeInfo.storageVolumeInfo.getStorageVolumes()</codeph> method returns a 
      vector of StorageVolume objects. Each of these StorageVolume objects represents a  
      mounted storage volume.</li></ul>
      
      </apiDesc><example conref="examples\StorageVolumeExample.as" class="- topic/example "> The following code lists the properties of each mounted storage volume:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.filesystem.StorageVolume;
    import flash.filesystem.StorageVolumeInfo;

    public class StorageVolumeExample extends Sprite
    {
        public function StorageVolumeExample()
        {
            var volumes:Vector.&lt;StorageVolume&gt; = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
            for (var i:int = 0; i &lt; volumes.length; i++)
            {
                var volume:StorageVolume = volumes[i];
                trace("nativePath:", volume.rootDirectory.nativePath);
                trace("fileSystemType:", volume.fileSystemType);
                trace("isRemovable:", volume.isRemovable);
                trace("isWritable:", volume.isWritable);
                trace("drive:", volume.drive);
                trace("name:", volume.name);
                trace("________________________________________________________");
            }
        }
    }
}
</codeblock></example><example conref="examples\StorageVolumeChangeEventExample.as" class="- topic/example "> The following code lists the properties of each storage volume that becomes mounted or unmounted. 
 Note that the <codeph class="+ topic/ph pr-d/codeph ">storageVolume</codeph> property of the StorageVolumeChangeEvent is only set for the <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph>
 event; it is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> for the <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> event:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.events.StorageVolumeChangeEvent;
    import flash.filesystem.StorageVolume;
    import flash.filesystem.StorageVolumeInfo;

    public class StorageVolumeChangeEventExample extends Sprite
    {
        public function StorageVolumeChangeEventExample()
        {
            StorageVolumeInfo.storageVolumeInfo.addEventListener(StorageVolumeChangeEvent.STORAGE_VOLUME_MOUNT, mountEventHandler);
            StorageVolumeInfo.storageVolumeInfo.addEventListener(StorageVolumeChangeEvent.STORAGE_VOLUME_UNMOUNT, unmountEventHandler);
        }
        public function mountEventHandler(event:StorageVolumeChangeEvent):void
        {            
            var volume:StorageVolume = event.storageVolume;
            trace("VOLUME MOUNTED:");
            trace("nativePath:", event.rootDirectory.nativePath);
            trace("fileSystemType:", volume.fileSystemType);
            trace("isRemovable:", volume.isRemovable);
            trace("isWritable:", volume.isWritable);
            trace("drive:", volume.drive);
            trace("name:", volume.name);
            trace();
        }
        public function unmountEventHandler(event:StorageVolumeChangeEvent):void
        {            
            trace("VOLUME UNMOUNTED:");
            trace("nativePath:", event.rootDirectory.nativePath);
            trace();
        }        
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#StorageVolumeInfo/getStorageVolumes()" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.StorageVolumeInfo.getStorageVolumes()</linktext></link><link href="flash.events.xml#StorageVolumeChangeEvent/storageVolume" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StorageVolumeChangeEvent.storageVolume</linktext></link></related-links><apiConstructor id="flash.filesystem:StorageVolume:StorageVolume" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">StorageVolume</apiName><shortdesc class="- topic/shortdesc "> 
	    The constructor function.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rootDirPath</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">writable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">removable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fileSysType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">drive</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	    The constructor function. Generally, you do not call this constructor function directly
	    (to create new StorageVolume objects). Rather, you reference StorageVolume objects 
	    by accessing the <codeph class="+ topic/ph pr-d/codeph ">storageVolume</codeph> property of a StorageVolumeChangeEvent object
	    or by calling <codeph class="+ topic/ph pr-d/codeph ">StorageVolumeInfo.storageVolumeInfo.getStorageVolumes()</codeph>.
	    
	    </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.filesystem:StorageVolume:drive:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">drive</apiName><shortdesc class="- topic/shortdesc ">
	     The volume drive letter on Windows.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     The volume drive letter on Windows. On other platforms, this property is set
	     to <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	     
	     </apiDesc><example conref="examples\StorageVolume.drive.1.as" class="- topic/example "/></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolume:fileSystemType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fileSystemType</apiName><shortdesc class="- topic/shortdesc "> 
             The type of file system on the storage volume (such as "FAT", "NTFS", 
             "HFS", or "UFS").</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
             The type of file system on the storage volume (such as <codeph class="+ topic/ph pr-d/codeph ">"FAT"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"NTFS"</codeph>, 
             <codeph class="+ topic/ph pr-d/codeph ">"HFS"</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">"UFS"</codeph>).
             
	     </apiDesc><example conref="examples\StorageVolume.fileSystemType.1.as" class="- topic/example "> The following code lists the native path for the root directory and the file system type of each mounted storage volume:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume&gt; = new Vector.&lt;StorageVolume&gt;;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
for (var i:int = 0; i &lt; volumes.length; i++)
{
    trace(volumes[i].rootDirectory.nativePath, "(" + volumes[i].fileSystemType + ")");
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolume:isRemovable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isRemovable</apiName><shortdesc class="- topic/shortdesc ">
             Whether the operating system considers the storage volume to be removable (true) 
             or not (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
             Whether the operating system considers the storage volume to be removable (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 
             or not (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
             
             <p class="- topic/p ">The following table lists the values <codeph class="+ topic/ph pr-d/codeph ">StorageVolume.isRemovable</codeph> property for various types
             of devices:</p>
             
	     <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Type of device</entry><entry class="- topic/entry ">Mac OS</entry><entry class="- topic/entry ">Windows</entry><entry class="- topic/entry ">Linux</entry></row></thead><tbody class="- topic/tbody "><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">CD/DVD (fixed)</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">USB flash drive</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">USB hard srive</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">true</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">FireWire hard drive</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">true</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Shared volume</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">- <sup class="+ topic/ph hi-d/sup ">1</sup></entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Network drive</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">false</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Storage card reader (empty)</entry><entry align="center" class="- topic/entry ">- <sup class="+ topic/ph hi-d/sup ">2</sup></entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">- <sup class="+ topic/ph hi-d/sup ">2</sup></entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Storage card reader (with SD/CF card)</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry></row></tbody></tgroup></adobetable>
	     
	     <p class="- topic/p "><sup class="+ topic/ph hi-d/sup ">1</sup> Linux does not have a concept of a shared volume.</p>
	     
	     <p class="- topic/p "><sup class="+ topic/ph hi-d/sup ">2</sup> On Windows, an empty card reader is listed as a non-removable device. On Mac OS and Linux, 
	     empty car readers are not listed as storage volumes.</p>
             
	     </apiDesc><example conref="examples\StorageVolume.isRemovable.1.as" class="- topic/example "> The following code outputs a list of non-removable storage volumes, followed by a list of removable storage volumes:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume&gt; = new Vector.&lt;StorageVolume&gt;;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();

trace("Non-removeable volumes:");
for (var i:int = 0; i &lt; volumes.length; i++)
{
    if (!volumes[i].isRemovable)
    {
        trace(volumes[i].rootDirectory.nativePath);
    }
}

trace("\nRemoveable volumes:");
for (i = 0; i &lt; volumes.length; i++)
{
    if (volumes[i].isRemovable)
    {
        trace(volumes[i].rootDirectory.nativePath);
    }
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolume:isWritable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isWritable</apiName><shortdesc class="- topic/shortdesc ">
             Whether a volume is writable (true) or not (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
             Whether a volume is writable (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or not (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
             
             <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> You can determine the amount of space available on a
             volume by calling the <codeph class="+ topic/ph pr-d/codeph ">rootDirectory.spaceAvailble</codeph> property of the 
             StorageVolume object.</p>
             
             </apiDesc><example conref="examples\StorageVolume.isWritable.1.as" class="- topic/example "> The following code outputs a list of writable storage volumes and the space available on each:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume&gt; = new Vector.&lt;StorageVolume&gt;;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();

for (var i:int = 0; i &lt; volumes.length; i++)
{
    if(volumes[i].isWritable)
    {         
        trace(volumes[i].rootDirectory.nativePath, volumes[i].rootDirectory.spaceAvailable);
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="" invalidHref="flash.fileSystem.File.spaceAvailable.xml" class="- topic/link "><linktext class="- topic/linktext ">flash.fileSystem.File.spaceAvailable</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:StorageVolume:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
	     The name of the volume.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     The name of the volume. If there is no name, this property is set to <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	     
	     </apiDesc><example conref="examples\StorageVolume.name.1.as" class="- topic/example "> The following code lists the native path for the root directory and the file system name (if there is one) of each mounted storage volume:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume&gt; = new Vector.&lt;StorageVolume&gt;;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
for (var i:int = 0; i &lt; volumes.length; i++)
{
    var name:String = new String();
    if (volumes[i].name)
    {
        name = "(" + volumes[i].name + ")";
    }
    trace(volumes[i].rootDirectory.nativePath, name);
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolume:rootDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rootDirectory</apiName><shortdesc class="- topic/shortdesc ">
	     A File object corresponding to the root directory of the volume.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     A File object corresponding to the root directory of the volume.
	     
	     </apiDesc><example conref="examples\StorageVolume.rootDirectory.1.as" class="- topic/example "> The following code lists the native path for the root directory of each mounted storage volume:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume&gt; = new Vector.&lt;StorageVolume&gt;;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
for (var i:int = 0; i &lt; volumes.length; i++)
{
    trace(volumes[i].rootDirectory.nativePath);
}
</codeblock></example></apiValueDetail></apiValue></apiClassifier></apiPackage>