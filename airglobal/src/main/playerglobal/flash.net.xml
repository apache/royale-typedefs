<?xml version="1.0" encoding="UTF-8"?><apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.net" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.net</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.net:XMLSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">XMLSocket</apiName><shortdesc class="- topic/shortdesc ">
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
 
 The XMLSocket class implements client sockets that let the 
 Flash Player or AIR application communicate
 with a server computer identified by an IP address or domain name.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLsocket, XMLsocket object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 
 The XMLSocket class implements client sockets that let the 
 <ph class="- topic/ph ">Flash Player or</ph> AIR application communicate
 with a server computer identified by an IP address or domain name. The XMLSocket class is useful for
 client-server applications that require low latency, such as real-time chat systems. A traditional 
 HTTP-based chat solution frequently polls the server and downloads new messages using an HTTP 
 request. In contrast, an XMLSocket chat solution maintains an open connection to the server, which
 lets the server immediately send incoming messages without a request from the client.
 To use the XMLSocket class, the server computer must run a daemon that understands the protocol used
 by the XMLSocket class. The protocol is described in the following list: 
 <ul class="- topic/ul "><li class="- topic/li ">XML messages are sent over a full-duplex TCP/IP stream socket connection.</li><li class="- topic/li ">Each XML message is a complete XML document, terminated by a zero (0) byte.</li><li class="- topic/li ">An unlimited number of XML messages can be sent and received over a single XMLSocket 
 connection.</li></ul>
 
 <p class="- topic/p ">Setting up a server to communicate with the XMLSocket object can be challenging. If your application
 does not require real-time interactivity, use the URLLoader class instead of the XMLSocket class. </p>
 
 <p class="- topic/p ">To use the methods of the XMLSocket class, first use the constructor, <codeph class="+ topic/ph pr-d/codeph ">new XMLSocket</codeph>,
 to create an XMLSocket object.</p>
 
 <p class="- topic/p ">SWF files in the local-with-filesystem sandbox may not use sockets.</p>
      
  <p class="- topic/p "> <i class="+ topic/ph hi-d/i ">Socket policy files</i> on the target host specify the hosts from which SWF files
  can make socket connections, and the ports to which those connections can be made.
  The security requirements with regard to socket policy files have become more stringent
  in the last several releases of Flash Player. 
  In all versions of Flash Player, Adobe recommends the use of a socket policy file; 
  in some circumstances, a socket policy file is required. Therefore, if you
  are using XMLSocket objects, make sure that the target host provides a socket policy file
  if necessary. </p>
 
  <p class="- topic/p ">The following list summarizes the requirements for socket policy files
  in different versions of Flash Player:</p>
 
  <ul class="- topic/ul "><li class="- topic/li "> In Flash Player 9.0.124.0 and later, a socket policy file is required for any XMLSocket connection.
      That is, a socket policy file on the target host is required no matter what port 
      you are connecting to, and is required even if you are connecting 
      to a port on the same host that is serving the SWF file. </li><li class="- topic/li "> In Flash Player versions 9.0.115.0 and earlier, if you want to connect to a port number below 1024,
      or if you want to connect to a host other than the one serving the SWF file, 
      a socket policy file on the target host is required. </li><li class="- topic/li "> In Flash Player 9.0.115.0, even if a socket policy file isn't required, 
      a warning is displayed when using the Flash Debug Player if the target host
      doesn't serve a socket policy file. </li></ul>
 
 <p class="- topic/p ">However, in Adobe AIR, content in the <codeph class="+ topic/ph pr-d/codeph ">application</codeph> security sandbox (content
 installed with the AIR application) are not restricted by these security limitations.</p>
 
 <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic: 
 <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
 
 </apiDesc><example conref="examples\XMLSocketExample.as" class="- topic/example "> The following example uses the class XMLSocketExample class to send data using 
 an XMLSocket and print information during XMLSocket events.  This is accomplished using
 the following steps:
 <ol class="- topic/ol "><li class="- topic/li ">The XMLSocketExample constructor creates a XMLSocket instance named <codeph class="+ topic/ph pr-d/codeph ">socket</codeph> and
  passes <codeph class="+ topic/ph pr-d/codeph ">socket</codeph> to <codeph class="+ topic/ph pr-d/codeph ">ConfigureListeners()</codeph> (described below) and then calls the
  <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method of XMLSocket using the host name "localhost" and port
  number of <codeph class="+ topic/ph pr-d/codeph ">8080</codeph>.</li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">configureListeners()</codeph> method is then called, which adds listeners for each of the 
  supported XMLSocket events:
  <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">closeHandler()</codeph>: listens for the <codeph class="+ topic/ph pr-d/codeph ">close</codeph> event, which is dispatched
      after the network connection has been closed.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">connectHandler()</codeph>: listens for the <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> event, dispatched when the network
      connection has been established.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">dataHandler()</codeph>: listens for the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> events, dispatched every time
      the XMLSocket receives new data.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">progressHandler()</codeph>: listens for the <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> events, dispatched when a call to
      <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> has been made and while the send is ongoing.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">securityErrorHandler()</codeph>: listens for <codeph class="+ topic/ph pr-d/codeph ">securityError</codeph> events, which would be
      dispatched if an attempt was made to access the XMLSocket with the wrong local playback security setting or 
      using a port lower than 1024.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ioErrorHandler()</codeph>: listens for <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> events, which would happen only
      if an operation to send or receive data failed.</li></ul></li></ol>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Notes:</b>
 <ul class="- topic/ul "><li class="- topic/li ">You need to compile the SWF file with "Local playback security" set to "Access network only".</li><li class="- topic/li ">You need a server running on your domain using port 8080 for this example to work.</li><li class="- topic/li ">If you are running Flash Player 9.0.124.0 or later, you need to place a socket policy file on your server 
    that permits socket connections from your domain to port 8080. For information on serving socket policy files, 
    see the Flash Player Developer Center Topic: 
  <xref href="http://www.adobe.com/devnet/flashplayer/articles/socket_policy_files.html" scope="external" class="- topic/xref ">
  Setting up a socket policy file server</xref>.</li></ul>
 </p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.XMLSocket;

    public class XMLSocketExample extends Sprite {
        private var hostName:String = "localhost";
        private var port:uint = 8080;
        private var socket:XMLSocket;

        public function XMLSocketExample() {
            socket = new XMLSocket();
            configureListeners(socket);
            if (hostName &amp;&amp; port) {
                socket.connect(hostName, port);
            }
        }

        public function send(data:Object):void {
            socket.send(data);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CLOSE, closeHandler);
            dispatcher.addEventListener(Event.CONNECT, connectHandler);
            dispatcher.addEventListener(DataEvent.DATA, dataHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
        }

        private function closeHandler(event:Event):void {
            trace("closeHandler: " + event);
        }

        private function connectHandler(event:Event):void {
            trace("connectHandler: " + event);
        }

        private function dataHandler(event:DataEvent):void {
            trace("dataHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.load()</linktext></link><link href="flash.net.xml#URLLoader" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader</linktext></link></related-links><adobeApiEvent id="flash.net:XMLSocket_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched if a call to the XMLSocket.connect() method
 attempts to connect either to a server outside the caller's security sandbox or to a port lower than 1024.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched if a call to the <codeph class="+ topic/ph pr-d/codeph ">XMLSocket.connect()</codeph> method
 attempts to connect either to a server outside the caller's security sandbox or to a port lower than 1024.
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#XMLSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">XMLSocket.connect()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an input/output error occurs that causes a send or receive operation to fail.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an input/output error occurs that causes a send or receive operation to fail. 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket_flash.events.DataEvent.DATA_data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched after raw data is sent or received.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.DataEvent.DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.DataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched after raw data is sent or received.
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket_flash.events.Event.CONNECT_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched after a successful call to the XMLSocket.connect() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CONNECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched after a successful call to the <codeph class="+ topic/ph pr-d/codeph ">XMLSocket.connect()</codeph> method.
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when the server closes the socket connection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when the server closes the socket connection. 
 The <codeph class="+ topic/ph pr-d/codeph ">close</codeph> event is dispatched only when the server
 closes the connection; it is not dispatched when you call the <codeph class="+ topic/ph pr-d/codeph ">XMLSocket.close()</codeph> method.
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:XMLSocket:XMLSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">XMLSocket</apiName><shortdesc class="- topic/shortdesc ">
    Creates a new XMLSocket object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">host</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A fully qualified DNS domain name or an IP address in the form 
    <i class="+ topic/ph hi-d/i ">.222.333.444</i>. In Flash Player 9.0.115.0 and AIR 1.0 and later, 
    you can specify IPv6 addresses, such as rtmp://[2001:db8:ccc3:ffff:0:444d:555e:666f]. 
    You can also specify <codeph class="+ topic/ph pr-d/codeph ">null</codeph> to connect to the host server
    on which the SWF file resides.  If the SWF file issuing this call is running in a web browser, 
    <codeph class="+ topic/ph pr-d/codeph ">host</codeph> must be in the same domain as the SWF file.
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The TCP port number on the target host used to establish a connection. 
      In Flash Player 9.0.124.0 and later, the target host must serve a socket policy file
      specifying that socket connections are permitted from the host serving the SWF file
      to the specified port. In earlier versions of Flash Player, a socket policy file is required
      only if you want to connect to a port number below 1024,
      or if you want to connect to a host other than the one serving the SWF file.
    
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Creates a new XMLSocket object. If no parameters are specified, an initially disconnected socket 
    is created. If parameters are specified, a connection is attempted to the specified host and port.
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> It is strongly advised to use the constructor form <b class="+ topic/ph hi-d/b ">without parameters</b>, then
    add any event listeners, then call the <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> method with <codeph class="+ topic/ph pr-d/codeph ">host</codeph>
    and <codeph class="+ topic/ph pr-d/codeph ">port</codeph> parameters. This sequence guarantees that all event listeners will work
    properly.</p>
    
    </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#XMLSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:XMLSocket:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Closes the connection specified by the XMLSocket object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">xmlsocket.close, close
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Closes the connection specified by the XMLSocket object. 
     The <codeph class="+ topic/ph pr-d/codeph ">close</codeph> event is dispatched only when the server
     closes the connection; it is not dispatched when you call the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#XMLSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:XMLSocket:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     Establishes a connection to the specified Internet host using the specified TCP port.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">xmlsocket.connect, connect
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Local untrusted files may not communicate with
     the Internet. Work around this limitation by reclassifying the file
     as local-with-networking or trusted.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You may not specify a socket port higher than
     65535.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">host</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A fully qualified DNS domain name or an IP address in the form 
     <i class="+ topic/ph hi-d/i ">111.222.333.444</i>. You can also specify <codeph class="+ topic/ph pr-d/codeph ">null</codeph> to connect to the host server
     on which the SWF file resides. If the calling file is a SWF file running in a web browser,
     <codeph class="+ topic/ph pr-d/codeph ">host</codeph> must be in the same domain as the file.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The TCP port number on the target host used to establish a connection. 
       In Flash Player 9.0.124.0 and later, the target host must serve a socket policy file
       specifying that socket connections are permitted from the host serving the SWF file
       to the specified port. In earlier versions of Flash Player, a socket policy file is required
       only if you want to connect to a port number below 1024,
       or if you want to connect to a host other than the one serving the SWF file.
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Establishes a connection to the specified Internet host using the specified TCP port.
     
     <p class="- topic/p ">If you specify <codeph class="+ topic/ph pr-d/codeph ">null</codeph> for the <codeph class="+ topic/ph pr-d/codeph ">host</codeph> parameter, the host 
     contacted is the one where the file calling <codeph class="+ topic/ph pr-d/codeph ">XMLSocket.connect()</codeph> resides. 
     For example, if the calling file was downloaded from www.adobe.com, specifying <codeph class="+ topic/ph pr-d/codeph ">null</codeph>
     for the host parameter means you are connecting to www.adobe.com.</p>
     
     
     <p class="- topic/p ">You can prevent a file from using this method by setting the 
     <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> parameter of the the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> 
     tags in the HTML page that contains the SWF content.</p>
     
     <p class="- topic/p ">For more information, see the Flash Player Developer Center Topic: 
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.events.xml#Event/CONNECT" class="- topic/link "><linktext class="- topic/linktext ">flash.events.Event.CONNECT</linktext></link></related-links><adobeApiEvent id="flash.net:XMLSocket:connect_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A connect operation attempted
     to connect to a host outside the caller's security sandbox, or
     to a port that requires a socket policy file.  Work around either problem by using
     a socket policy file on the target host.
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">A connect operation attempted
     to connect to a host outside the caller's security sandbox, or
     to a port that requires a socket policy file.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket:connect_data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when raw data has been received.
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when raw data has been received.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket:connect_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when network connection has been established. 
      
      </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when network connection has been established.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:XMLSocket:send" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">send</apiName><shortdesc class="- topic/shortdesc ">
     Converts the XML object or data specified in the object parameter
     to a string and transmits it to the server, followed by a zero (0) byte.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">xmlsocket.send, send
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The XMLSocket object is not connected to the server.
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">object</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XML object or other data to transmit to the server.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Converts the XML object or data specified in the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> parameter
     to a string and transmits it to the server, followed by a zero (0) byte. If <codeph class="+ topic/ph pr-d/codeph ">object</codeph> 
     is an XML object, the string is the XML textual representation of the XML object. The 
     send operation is asynchronous; it returns immediately, but the data may be transmitted at a 
     later time. The <codeph class="+ topic/ph pr-d/codeph ">XMLSocket.send()</codeph> method does not return a value indicating whether
     the data was successfully transmitted.
     
     <p class="- topic/p ">If you do not connect the XMLSocket object to the server using 
     <codeph class="+ topic/ph pr-d/codeph ">XMLSocket.connect()</codeph>), the <codeph class="+ topic/ph pr-d/codeph ">XMLSocket.send()</codeph> 
     operation fails.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#XMLSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link></related-links></apiOperation><apiValue id="flash.net:XMLSocket:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether this XMLSocket object is currently connected.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether this XMLSocket object is currently connected. You can also check 
     whether the connection succeeded by registering for the <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> 
     event and <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> event.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#XMLSocket/event:connect" class="- topic/link "><linktext class="- topic/linktext ">connect</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">ioError</linktext></link></related-links></apiValue><apiValue id="flash.net:XMLSocket:timeout:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">timeout</apiName><shortdesc class="- topic/shortdesc ">
     Indicates the number of milliseconds to wait for a connection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates the number of milliseconds to wait for a connection.
     
     <p class="- topic/p ">If the connection doesn't succeed within the specified time, the connection fails.
     The default value is 20,000 (twenty seconds).</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:IPVersion" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IPVersion</apiName><shortdesc class="- topic/shortdesc ">
	 The IPVersion class defines constants representing the different families of IP addresses.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The IPVersion class defines constants representing the different families of IP addresses.
	 
 	 </apiDesc></apiClassifierDetail><apiValue id="flash.net:IPVersion:IPV4" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">IPV4</apiName><shortdesc class="- topic/shortdesc ">
		 An Internet Protocol version 4 (IPv4) address.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">IPv4</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 An Internet Protocol version 4 (IPv4) address.
		 
		 <p class="- topic/p ">IPv4 addresses are expressed in ActionScript as a string in dot-decimal notation, such as: <codeph class="+ topic/ph pr-d/codeph ">"192.0.2.0"</codeph>.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:IPVersion:IPV6" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">IPV6</apiName><shortdesc class="- topic/shortdesc ">
		 An Internet Protocol version 6 (IPv6) address.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">IPv6</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 An Internet Protocol version 6 (IPv6) address.
		 
		 <p class="- topic/p ">IPv6 addresses are expressed in ActionScript as a string in hexadecimal-colon notation and enclosed in 
		 brackets, such as: <codeph class="+ topic/ph pr-d/codeph ">"[2001:db8:ccc3:ffff:0:444d:555e:666f]"</codeph>.</p>
		  
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:Socket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Socket</apiName><shortdesc class="- topic/shortdesc ">
 The Socket class enables code to establish Transport Control Protocol (TCP) socket
 connections for sending and receiving binary data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseInterface>flash.utils:IDataInput</apiBaseInterface><apiBaseInterface>flash.utils:IDataOutput</apiBaseInterface><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The Socket class enables code to establish Transport Control Protocol (TCP) socket
 connections for sending and receiving binary data.
 
 <p class="- topic/p ">The Socket class is useful for working with servers that use binary protocols.</p>
 
 <p class="- topic/p ">To use the methods of the Socket class, first use the constructor, <codeph class="+ topic/ph pr-d/codeph ">new Socket</codeph>,
 to create a Socket object.</p>
 
 <p class="- topic/p ">A socket transmits and receives data asynchronously. </p>
 
 <p class="- topic/p ">On some operating systems, flush() is called automatically between execution frames, but on other operating systems, such
 as Windows, the data is never sent unless you call <codeph class="+ topic/ph pr-d/codeph ">flush()</codeph> explicitly. To ensure your application behaves reliably
 across all operating systems, it is a good practice to call the <codeph class="+ topic/ph pr-d/codeph ">flush()</codeph> method after writing each message 
 (or related group of data) to the socket.</p>
 
 <p class="- topic/p ">In Adobe AIR, Socket objects are also created when a listening ServerSocket receives a connection from an external process.
 The Socket representing the connection is dispatched in a ServerSocketConnectEvent. Your application is responsible for
 maintaining a reference to this Socket object. If you don't, the Socket object is eligible for garbage collection and may be
 destroyed by the runtime without warning.</p>
 
 <p class="- topic/p ">SWF content running in the local-with-filesystem security sandbox cannot use sockets.</p>
 
  <p class="- topic/p "> <i class="+ topic/ph hi-d/i ">Socket policy files</i> on the target host specify the hosts from which SWF files
  can make socket connections, and the ports to which those connections can be made.
  The security requirements with regard to socket policy files have become more stringent
  in the last several releases of Flash Player.
  In all versions of Flash Player, Adobe recommends the use of a socket policy file;
  in some circumstances, a socket policy file is required. Therefore, if you
  are using Socket objects, make sure that the target host provides a socket policy file
  if necessary. </p>
 
  <p class="- topic/p ">The following list summarizes the requirements for socket policy files
  in different versions of Flash Player:</p>
 
  <ul class="- topic/ul "><li class="- topic/li "> In Flash Player 9.0.124.0 and later, a socket policy file is required for any socket connection.
      That is, a socket policy file on the target host is required no matter what port
      you are connecting to, and is required even if you are connecting
      to a port on the same host that is serving the SWF file. </li><li class="- topic/li "> In Flash Player versions 9.0.115.0 and earlier, if you want to connect to a port number below 1024,
      or if you want to connect to a host other than the one serving the SWF file,
      a socket policy file on the target host is required. </li><li class="- topic/li "> In Flash Player 9.0.115.0, even if a socket policy file isn't required,
      a warning is displayed when using the Flash Debug Player if the target host
      doesn't serve a socket policy file. </li><li class="- topic/li ">In AIR, a socket policy file is not required for content running in the application
      security sandbox. Socket policy files are required for any socket connection established
      by content running outside the AIR application security sandbox.</li></ul>
 
 <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic:
 <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>
 </p>
 
 </apiDesc><example conref="examples\SocketExample.as" class="- topic/example "> The following example reads from and writes to a socket and outputs information
 transmitted during socket events. Highlights of the example follow:
 <ol class="- topic/ol "><li class="- topic/li ">The constructor creates a <codeph class="+ topic/ph pr-d/codeph ">CustomSocket</codeph> instance named <codeph class="+ topic/ph pr-d/codeph ">socket</codeph> and passes the
     host name <codeph class="+ topic/ph pr-d/codeph ">localhost</codeph> and port 80 as arguments. Since <codeph class="+ topic/ph pr-d/codeph ">CustomSocket</codeph> extends
     Socket, a call to <codeph class="+ topic/ph pr-d/codeph ">super()</codeph> calls Socket's constructor.</li><li class="- topic/li ">The example then calls the <codeph class="+ topic/ph pr-d/codeph ">configureListeners()</codeph> method, which adds listeners for  
     Socket events.</li><li class="- topic/li ">Finally, the socket <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method is called with <codeph class="+ topic/ph pr-d/codeph ">localhost</codeph> as the 
      host name and 80 as the port number.</li></ol>
 
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">Note:</b> To run the example, you need a server running on the same domain
 where the SWF resides (in the example, <codeph class="+ topic/ph pr-d/codeph ">localhost</codeph>) and listening on port 80.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;

    public class SocketExample extends Sprite {

        public function SocketExample() {
            var socket:CustomSocket = new CustomSocket("localhost", 80);
        }
    }
}

import flash.errors.*;
import flash.events.*;
import flash.net.Socket;

class CustomSocket extends Socket {
    private var response:String;

    public function CustomSocket(host:String = null, port:uint = 0) {
        super();
        configureListeners();
        if (host &amp;&amp; port)  {
            super.connect(host, port);
        }
    }

    private function configureListeners():void {
        addEventListener(Event.CLOSE, closeHandler);
        addEventListener(Event.CONNECT, connectHandler);
        addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
        addEventListener(ProgressEvent.SOCKET_DATA, socketDataHandler);
    }

    private function writeln(str:String):void {
        str += "\n";
        try {
            writeUTFBytes(str);
        }
        catch(e:IOError) {
            trace(e);
        }
    }

    private function sendRequest():void {
        trace("sendRequest");
        response = "";
        writeln("GET /");
        flush();
    }

    private function readResponse():void {
        var str:String = readUTFBytes(bytesAvailable);
        response += str;
    }

    private function closeHandler(event:Event):void {
        trace("closeHandler: " + event);
        trace(response.toString());
    }

    private function connectHandler(event:Event):void {
        trace("connectHandler: " + event);
        sendRequest();
    }

    private function ioErrorHandler(event:IOErrorEvent):void {
        trace("ioErrorHandler: " + event);
    }

    private function securityErrorHandler(event:SecurityErrorEvent):void {
        trace("securityErrorHandler: " + event);
    }

    private function socketDataHandler(event:ProgressEvent):void {
        trace("socketDataHandler: " + event);
        readResponse();
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ServerSocket" class="- topic/link "><linktext class="- topic/linktext ">ServerSocket</linktext></link><link href="flash.net.xml#DatagramSocket" class="- topic/link "><linktext class="- topic/linktext ">DatagramSocket</linktext></link></related-links><adobeApiEvent id="flash.net:Socket_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched if a call to Socket.connect() attempts to connect to a server
 prohibited by the caller's security sandbox or to a port lower than 1024 and no socket policy file
 exists to permit such a connection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Dispatched when a security error occurs.
  
  </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched if a call to <codeph class="+ topic/ph pr-d/codeph ">Socket.connect()</codeph> attempts to connect to a server
 prohibited by the caller's security sandbox or to a port lower than 1024 and no socket policy file
 exists to permit such a connection.
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> In an AIR application, content running in the application security sandbox is permitted to
 connect to any server and port number without a socket policy file.</p>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/connect()" class="- topic/link "><linktext class="- topic/linktext ">Socket.connect()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:Socket_flash.events.ProgressEvent.SOCKET_DATA_socketData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">socketData</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a socket has received data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.SOCKET_DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a socket has received data.
 
 <p class="- topic/p ">The data received by the socket remains in the socket until it is read. You do not have to read
 all the available data during the handler for this event.</p>
 
 <p class="- topic/p ">Events of type <codeph class="+ topic/ph pr-d/codeph ">socketData</codeph> do not use the <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.bytesTotal</codeph>
 property.</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:Socket_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an input/output error occurs that causes a send or load operation to fail.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an input/output error occurs that causes a send or load operation to fail.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:Socket_flash.events.Event.CONNECT_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a network connection has been established.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CONNECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a network connection has been established.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:Socket_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when the server closes the socket connection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when the server closes the socket connection.
 
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">close</codeph> event is dispatched only when the server
 closes the connection; it is not dispatched when you call the <codeph class="+ topic/ph pr-d/codeph ">Socket.close()</codeph> method.</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:Socket:Socket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Socket</apiName><shortdesc class="- topic/shortdesc ">
    Creates a new Socket object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>BRS determine if all above events are accurate, and which ones also apply
     </internal></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs in SWF content
     <ph class="- topic/ph "> for the following reasons:</ph>
     
     <ul class="- topic/ul "><li class="- topic/li ">Local-with-filesystem files cannot communicate with the Internet. You can
       work around this problem by reclassifying this SWF file as local-with-networking or trusted.
       This limitation is not set for AIR application content in the application security sandbox.</li><li class="- topic/li ">You cannot specify a socket port higher than 65535.</li></ul>
     
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">host</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A fully qualified DNS domain name or an IP address. IPv4 addresses are specified in
    dot-decimal notation, such as <i class="+ topic/ph hi-d/i ">192.0.2.0</i>. In Flash Player 9.0.115.0 and AIR 1.0 and later,
    you can specify IPv6 addresses using hexadecimal-colon notation, such as <i class="+ topic/ph hi-d/i ">2001:db8:ccc3:ffff:0:444d:555e:666f</i>.
    You can also specify <codeph class="+ topic/ph pr-d/codeph ">null</codeph> to connect to the host server
    on which the SWF file resides.  If the SWF file issuing this call is running in a web browser,
    <codeph class="+ topic/ph pr-d/codeph ">host</codeph> must be in the domain from which the SWF file originated.
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The TCP port number on the target host used to establish a connection.
      In Flash Player 9.0.124.0 and later, the target host must serve a socket policy file
      specifying that socket connections are permitted from the host serving the SWF file
      to the specified port. In earlier versions of Flash Player, a socket policy file is required
      only if you want to connect to a port number below 1024,
      or if you want to connect to a host other than the one serving the SWF file.
    
    
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Creates a new Socket object. If no parameters are specified, an initially disconnected socket
    is created. If parameters are specified, a connection is attempted to the specified host and port.
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> It is strongly advised to use the constructor form <b class="+ topic/ph hi-d/b ">without parameters</b>, then
    add any event listeners, then call the <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> method with <codeph class="+ topic/ph pr-d/codeph ">host</codeph>
    and <codeph class="+ topic/ph pr-d/codeph ">port</codeph> parameters. This sequence guarantees that all event listeners will work
    properly.</p>
    
    </apiDesc></apiConstructorDetail><adobeApiEvent id="flash.net:Socket:Socket_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when a network connection has been established.
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when a network connection has been established.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:Socket:Socket_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when an input/output error
    occurs that causes the connection to fail.
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when an input/output error
    occurs that causes the connection to fail.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:Socket:Socket_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <ph class="- topic/ph "> Dispatched if a call to <codeph class="+ topic/ph pr-d/codeph ">Socket.connect()</codeph> attempts
    to connect either to a server that doesn't serve a socket policy file,
    or to a server whose policy file doesn't grant the calling host access to the specified port.
     For more information on policy files, see "Website controls (policy files)" in
     the <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i> and the Flash Player Developer Center Topic:
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</ph>
     
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">This error occurs in SWF content.
      Dispatched if a call to Socket.connect() attempts
    to connect either to a server that doesn't serve a socket policy file,
    or to a server whose policy file doesn't grant the calling host access to the specified port.</shortdesc></adobeApiEvent></apiConstructor><apiOperation id="flash.net:Socket:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Closes the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The socket could not be closed, or the socket was not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Closes the socket. You cannot read or write any data after the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method
     has been called.
     
     <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">close</codeph> event is dispatched only when the server
     closes the connection; it is not dispatched when you call the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method.</p>
     
     <p class="- topic/p ">You can reuse the Socket object by calling the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method on it again.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     Connects the socket to the specified host and port.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>BRS compare this entire description with XMLSocket.connect() and make consistent
      
      </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">No host was specified and the connection failed.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs in SWF content
     <ph class="- topic/ph "> for the following reasons:</ph>
     
          <ul class="- topic/ul "><li class="- topic/li ">Local untrusted SWF files may not communicate with
                  the Internet. You can work around this limitation by reclassifying the
                  file as local-with-networking or as trusted.</li><li class="- topic/li ">You cannot specify a socket port higher than 65535.</li><li class="- topic/li ">In the HTML page that contains the SWF content, the
          <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> parameter of the <codeph class="+ topic/ph pr-d/codeph ">object</codeph>
          and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> tags is set to <codeph class="+ topic/ph pr-d/codeph ">"none"</codeph>.</li></ul>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">host</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name or IP address of the host to connect to. If no host is specified,
          the host that is contacted is the host where the calling file
          resides. If you do not specify a host, use an event listener to
          determine whether the connection was successful.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The port number to connect to.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Connects the socket to the specified host and port.
     
     <p class="- topic/p ">If the connection fails immediately, either an event is dispatched
     or an exception is thrown: an error event is dispatched if a host was
     specified, and an exception is thrown if no host was specified.
     Otherwise, the status of the connection is reported by an event.
     If the socket is already connected, the existing connection is closed first.</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.net:Socket:connect_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when a network connection has been
          established.
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when a network connection has been
          established.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:Socket:connect_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched if a host is specified and an
          input/output error occurs that causes the connection to fail.
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched if a host is specified and an
          input/output error occurs that causes the connection to fail.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:Socket:connect_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched if a call to
          <codeph class="+ topic/ph pr-d/codeph ">Socket.connect()</codeph> attempts to connect
         either to a server that doesn't serve a socket policy file,
         or to a server whose policy file doesn't grant the calling host access to the specified port.
     For more information on policy files, see "Website controls (policy files)" in
     the <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i> and the Flash Player Developer Center Topic:
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched if a call to
          Socket.connect() attempts to connect
         either to a server that doesn't serve a socket policy file,
         or to a server whose policy file doesn't grant the calling host access to the specified port.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:Socket:flush" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">flush</apiName><shortdesc class="- topic/shortdesc ">
     Flushes any accumulated data in the socket's output buffer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Flushes any accumulated data in the socket's output buffer.
     
	 <p class="- topic/p ">On some operating systems, flush() is called automatically between execution frames, but on other operating systems, such
	 as Windows, the data is never sent unless you call <codeph class="+ topic/ph pr-d/codeph ">flush()</codeph> explicitly. To ensure your application behaves reliably
	 across all operating systems, it is a good practice to call the <codeph class="+ topic/ph pr-d/codeph ">flush()</codeph> method after writing each message 
	 (or related group of data) to the socket.</p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readBoolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBoolean</apiName><shortdesc class="- topic/shortdesc ">
     Reads a Boolean value from the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value of <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the byte read is nonzero,
          otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads a Boolean value from the socket. After reading a single byte, the
     method returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the byte is nonzero, and
     <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readByte</apiName><shortdesc class="- topic/shortdesc ">
     Reads a signed byte from the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value from -128 to 127.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads a signed byte from the socket.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBytes</apiName><shortdesc class="- topic/shortdesc ">
     Reads the number of data bytes specified by the length
     parameter from the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is
          not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The ByteArray object to read data into.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The offset at which data reading should begin in the byte
          array.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of bytes to read. The default value of 0 causes
          all available data to be read.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads the number of data bytes specified by the length
     parameter from the socket. The bytes are read into the specified byte
     array, starting at the position indicated by <codeph class="+ topic/ph pr-d/codeph ">offset</codeph>.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readDouble" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readDouble</apiName><shortdesc class="- topic/shortdesc ">
     Reads an IEEE 754 double-precision floating-point number from the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An IEEE 754 double-precision floating-point number.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads an IEEE 754 double-precision floating-point number from the socket.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readFloat</apiName><shortdesc class="- topic/shortdesc ">
     Reads an IEEE 754 single-precision floating-point number from the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An IEEE 754 single-precision floating-point number.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads an IEEE 754 single-precision floating-point number from the socket.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readInt</apiName><shortdesc class="- topic/shortdesc ">
     Reads a signed 32-bit integer from the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value from -2147483648 to 2147483647.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads a signed 32-bit integer from the socket.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readMultiByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readMultiByte</apiName><shortdesc class="- topic/shortdesc ">
     Reads a multibyte string from the byte stream, using the specified character set.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Socket, Socket.readMultiByte, readMultiByte
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A UTF-8 encoded string.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of bytes from the byte stream to read.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charSet</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string denoting the character set to use to interpret the bytes.
     Possible character set strings include <codeph class="+ topic/ph pr-d/codeph ">"shift_jis"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"CN-GB"</codeph>, and
     <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph>.
     For a complete list, see <xref href="../../charset-codes.html" class="- topic/xref ">Supported Character Sets</xref>.
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> If the value for the <codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> parameter is not recognized
     by the current system, then the application uses the system's default code page as the character set.
     For example, a value for the <codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> parameter, as in <codeph class="+ topic/ph pr-d/codeph ">myTest.readMultiByte(22, "iso-8859-01")</codeph>
     that uses <codeph class="+ topic/ph pr-d/codeph ">01</codeph> instead of <codeph class="+ topic/ph pr-d/codeph ">1</codeph> might work on your development machine, but not on another machine.
     On the other machine, the application will use the system's default code page.</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads a multibyte string from the byte stream, using the specified character set.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readObject</apiName><shortdesc class="- topic/shortdesc ">
     Reads an object from the socket, encoded in AMF serialized format.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The deserialized object
     
     </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads an object from the socket, encoded in AMF serialized format.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding</linktext></link><link href="../../flash/net/package.html#registerClassAlias()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.registerClassAlias()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:readShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readShort</apiName><shortdesc class="- topic/shortdesc ">
     Reads a signed 16-bit integer from the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value from -32768 to 32767.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads a signed 16-bit integer from the socket.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUTFBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTFBytes</apiName><shortdesc class="- topic/shortdesc ">
     Reads the number of UTF-8 data bytes specified by the length
     parameter from the socket, and returns a string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A UTF-8 string.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of bytes to read.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads the number of UTF-8 data bytes specified by the <codeph class="+ topic/ph pr-d/codeph ">length</codeph>
     parameter from the socket, and returns a string.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUTF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTF</apiName><shortdesc class="- topic/shortdesc ">
     Reads a UTF-8 string from the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A UTF-8 string.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads a UTF-8 string from the socket.  The string is assumed to be prefixed
     with an unsigned short integer that indicates the length in bytes.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUnsignedByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedByte</apiName><shortdesc class="- topic/shortdesc ">
     Reads an unsigned byte from the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value from 0 to 255.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads an unsigned byte from the socket.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUnsignedInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedInt</apiName><shortdesc class="- topic/shortdesc ">
     Reads an unsigned 32-bit integer from the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value from 0 to 4294967295.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads an unsigned 32-bit integer from the socket.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUnsignedShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedShort</apiName><shortdesc class="- topic/shortdesc ">
     Reads an unsigned 16-bit integer from the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available to read.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value from 0 to 65535.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads an unsigned 16-bit integer from the socket.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:writeBoolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeBoolean</apiName><shortdesc class="- topic/shortdesc ">
     Writes a Boolean value to the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value to write to the socket: 1 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or 0 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Writes a Boolean value to the socket. This method writes a single byte,
     with either a value of 1 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or 0 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeByte</apiName><shortdesc class="- topic/shortdesc ">
     Writes a byte to the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value to write to the socket. The low 8 bits of the
     value are used; the high 24 bits are ignored.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Writes a byte to the socket.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeBytes</apiName><shortdesc class="- topic/shortdesc ">
     Writes a sequence of bytes from the specified byte array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> is greater than the length of the ByteArray specified in
     <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> or if the amount of data specified to be written by <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> plus
     <codeph class="+ topic/ph pr-d/codeph ">length</codeph> exceeds the data available.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The ByteArray object to write data from.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The zero-based offset into the <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> ByteArray
          object at which data writing should begin.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of bytes to write.  The default value of 0 causes
          the entire buffer to be written, starting at the value specified by
          the <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> parameter.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Writes a sequence of bytes from the specified byte array. The write
     operation starts at the position specified by <codeph class="+ topic/ph pr-d/codeph ">offset</codeph>.
     
     <p class="- topic/p ">If you omit the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> parameter the default
     length of 0 causes the method to write the entire buffer starting at
     <codeph class="+ topic/ph pr-d/codeph ">offset</codeph>.</p>
     
     <p class="- topic/p ">If you also omit the <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> parameter, the entire buffer is written.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeDouble" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeDouble</apiName><shortdesc class="- topic/shortdesc ">
     Writes an IEEE 754 double-precision floating-point number to the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value to write to the socket.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Writes an IEEE 754 double-precision floating-point number to the socket.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeFloat</apiName><shortdesc class="- topic/shortdesc ">
     Writes an IEEE 754 single-precision floating-point number to the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value to write to the socket.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Writes an IEEE 754 single-precision floating-point number to the socket.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeInt</apiName><shortdesc class="- topic/shortdesc ">
     Writes a 32-bit signed integer to the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value to write to the socket.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Writes a 32-bit signed integer to the socket.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeMultiByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeMultiByte</apiName><shortdesc class="- topic/shortdesc ">
     Writes a multibyte string from the byte stream, using the specified character set.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Socket, Socket.writeMultiByte, writeMultiByte
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string value to be written.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charSet</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string denoting the character set to use to interpret the bytes.
     Possible character set strings include <codeph class="+ topic/ph pr-d/codeph ">"shift_jis"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"CN-GB"</codeph>,
     and <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph>. For a complete list, see
     <xref href="../../charset-codes.html" class="- topic/xref ">Supported Character Sets</xref>.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Writes a multibyte string from the byte stream, using the specified character set.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeObject</apiName><shortdesc class="- topic/shortdesc ">
     Write an object to the socket in AMF serialized format.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">object</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object to be serialized.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Write an object to the socket in AMF serialized format.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding</linktext></link><link href="../../flash/net/package.html#registerClassAlias()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.registerClassAlias()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeShort</apiName><shortdesc class="- topic/shortdesc ">
     Writes a 16-bit integer to the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value to write to the socket.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Writes a 16-bit integer to the socket. The bytes written are as follows:
     
     <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">(v &gt;&gt; 8) &amp; 0xff v &amp; 0xff</codeph></pre>
     
     <p class="- topic/p ">The low 16 bits of the parameter are used; the high 16 bits
     are ignored.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeUTFBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUTFBytes</apiName><shortdesc class="- topic/shortdesc ">
     Writes a UTF-8 string to the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string to write to the socket.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Writes a UTF-8 string to the socket.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeUTF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUTF</apiName><shortdesc class="- topic/shortdesc ">
     Writes the following data to the socket: a 16-bit unsigned integer, which
     indicates the length of the specified UTF-8 string in bytes, followed by
     the string itself.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The length is larger than 65535.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string to write to the socket.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Writes the following data to the socket: a 16-bit unsigned integer, which
     indicates the length of the specified UTF-8 string in bytes, followed by
     the string itself.
     
     <p class="- topic/p ">Before writing the string, the method calculates the number of bytes
     that are needed to represent all characters of the string.</p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeUnsignedInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUnsignedInt</apiName><shortdesc class="- topic/shortdesc ">
     Writes a 32-bit unsigned integer to the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the socket, or the socket is not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value to write to the socket.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Writes a 32-bit unsigned integer to the socket.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link></related-links></apiOperation><apiValue id="flash.net:Socket:bytesAvailable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesAvailable</apiName><shortdesc class="- topic/shortdesc ">
     The number of bytes of data available for reading in the input buffer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The number of bytes of data available for reading in the input buffer.
     
     <p class="- topic/p ">Your code must access <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> to ensure
     that sufficient data is available before trying to read
     it with one of the <codeph class="+ topic/ph pr-d/codeph ">read</codeph> methods.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:Socket:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether this Socket object is currently connected.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether this Socket object is currently connected.
     A call to this property returns a value of <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the socket
     is currently connected, or <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:Socket:endian:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">endian</apiName><shortdesc class="- topic/shortdesc ">
     Indicates the byte order for the data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiDefaultValue>Endian.BIG_ENDIAN
     </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates the byte order for the data. Possible values are
     constants from the flash.utils.Endian class,
     <codeph class="+ topic/ph pr-d/codeph ">Endian.BIG_ENDIAN</codeph> or <codeph class="+ topic/ph pr-d/codeph ">Endian.LITTLE_ENDIAN</codeph>.
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.utils.xml#Endian" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.Endian</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:localAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localAddress</apiName><shortdesc class="- topic/shortdesc ">
     The IP address this socket is bound to on the local machine.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The IP address this socket is bound to on the local machine.

     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:localPort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localPort</apiName><shortdesc class="- topic/shortdesc ">
     The port this socket is bound to on the local machine.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The port this socket is bound to on the local machine.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:objectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     Controls the version of AMF used when writing or reading an object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Property documented; needs review
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Controls the version of AMF used when writing or reading an object.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding class</linktext></link><link href="flash.net.xml#Socket/readObject()" class="- topic/link "><linktext class="- topic/linktext ">readObject()</linktext></link><link href="flash.net.xml#Socket/writeObject()" class="- topic/link "><linktext class="- topic/linktext ">writeObject()</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:remoteAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">remoteAddress</apiName><shortdesc class="- topic/shortdesc ">
     The IP address of the remote machine to which this socket is connected.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The IP address of the remote machine to which this socket is connected.
     
     <p class="- topic/p ">You can use this property to determine the IP address of a client socket
     dispatched in a ServerSocketConnectEvent by a ServerSocket object. Use the DNSResolver class to
     convert an IP address to a domain name, if desired.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link><link href="flash.net.xml#ServerSocket" class="- topic/link "><linktext class="- topic/linktext ">ServerSocket</linktext></link><link href="flash.events.xml#ServerSocketConnectEvent" class="- topic/link "><linktext class="- topic/linktext ">ServerSocketConnectEvent</linktext></link><link href="flash.net.dns.xml#DNSResolver" class="- topic/link "><linktext class="- topic/linktext ">DNSResolver</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:remotePort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">remotePort</apiName><shortdesc class="- topic/shortdesc ">
     The port on the remote machine to which this socket is connected.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The port on the remote machine to which this socket is connected.
     
     <p class="- topic/p ">You can use this property to determine the port number of a client socket
     dispatched in a ServerSocketConnectEvent by a ServerSocket object.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link><link href="flash.net.xml#ServerSocket" class="- topic/link "><linktext class="- topic/linktext ">ServerSocket</linktext></link><link href="flash.events.xml#ServerSocketConnectEvent" class="- topic/link "><linktext class="- topic/linktext ">ServerSocketConnectEvent</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:timeout:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">timeout</apiName><shortdesc class="- topic/shortdesc ">
     Indicates the number of milliseconds to wait for a connection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates the number of milliseconds to wait for a connection.
     
     <p class="- topic/p ">If the connection doesn't succeed within the specified time, the connection fails.
     The default value is 20,000 (twenty seconds).</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:ObjectEncoding" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ObjectEncoding</apiName><shortdesc class="- topic/shortdesc ">
 The ObjectEncoding class is used in defining serialization settings in classes
 that serialize objects (such as FileStream, NetStream, NetConnection, SharedObject,
 and ByteArray) to work with prior versions of ActionScript.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">ObjectEncoding, ObjectEncoding object, built-in class, AMF, Action Message Format
 
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The ObjectEncoding class is used in defining serialization settings in classes
 that serialize objects (such as FileStream, NetStream, NetConnection, SharedObject,
 and ByteArray) to work with prior versions of ActionScript.
 
 <p class="- topic/p ">Object encoding controls
 how objects are represented in Action Message Format (AMF). Flash Player uses
 AMF to enable efficient communication between an application and a remote server.
 AMF encodes remote procedure calls into a compact binary representation that can
 be transferred over HTTP/HTTPS or the RTMP/RTMPS protocol used by Flash Media Server.
 Objects and data values are serialized into this binary format,
 which is generally more compact than other representations, such as XML.</p>
 
 <p class="- topic/p ">Adobe AIR and Flash Player 9 can serialize in two different formats: AMF3 and AMF0.
 AMF3, the default serialization developed for ActionScript 3.0, provides various advantages
 over AMF0, which is used for ActionScript 1.0 and 2.0. AMF3 sends data over
 the network more efficiently than AMF0. <ph class="- topic/ph ">AMF3 supports
 sending <codeph class="+ topic/ph pr-d/codeph ">int</codeph> and <codeph class="+ topic/ph pr-d/codeph ">uint</codeph>
 objects as integers and supports data types that are available only in ActionScript 3.0, such as ByteArray,
 XML, and IExternalizable. It is available only in ActionScript 3.0 and with servers
 that use AMF3 encoding, such as Flex 2.</ph></p>
 
 <p class="- topic/p ">The ByteArray, FileStream, NetConnection, NetStream, <ph class="- topic/ph ">SharedObject,</ph>
 Socket, and URLStream classes contain an <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property that is assigned
 a constant from the ObjectEncoding class.
 The behavior of the <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property differs depending
 on the object; each class's <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property
 description explains the behavior more thoroughly.</p>
 
 
 </apiDesc></apiClassifierDetail><apiValue id="flash.net:ObjectEncoding:AMF0" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">AMF0</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies that objects are serialized using the Action Message Format for ActionScript 1.0 and 2.0.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies that objects are serialized using the Action Message Format for ActionScript 1.0 and 2.0.
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:ObjectEncoding:AMF3" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">AMF3</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies that objects are serialized using the Action Message Format for ActionScript 3.0.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">3</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies that objects are serialized using the Action Message Format for ActionScript 3.0.
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:ObjectEncoding:DEFAULT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEFAULT</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies the default (latest) format for the current runtime (either Flash
	 Player or AIR).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">3</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies the default (latest) format for the current runtime (either Flash
	 Player or AIR). Because object encoding control is only
	 available in Flash Player 9 and later and Adobe AIR, the earliest format used will be
	 the Action Message Format for ActionScript 3.0.
	 
	 <p class="- topic/p ">For example, if an object has the <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property set to
	 <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.DEFAULT</codeph>, AMF3 encoding is used.
	 If, in the future, a later version of Flash Player or Adobe AIR introduces a new AMF version
	 and you republish your content, the application will use that new AMF version.
	 You can use this constant only if you're not concerned at all about interoperability
	 with previous versions.</p>
     
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:ObjectEncoding:dynamicPropertyWriter:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dynamicPropertyWriter</apiName><shortdesc class="- topic/shortdesc ">
	 Allows greater control over the serialization of dynamic properties of dynamic objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:IDynamicPropertyWriter</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Allows greater control over the serialization of dynamic properties of dynamic objects.
	 When this property is set to <codeph class="+ topic/ph pr-d/codeph ">null</codeph>,
	 the default value, dynamic properties are serialized using native code, which writes
	 all dynamic properties excluding those whose value is a function.
     <p class="- topic/p ">This value is called only for properties of a dynamic object (objects declared
     within a dynamic class) or for objects declared using the
     <codeph class="+ topic/ph pr-d/codeph ">new</codeph> operator.</p>
	 
	 <p class="- topic/p ">You can use this property to exclude properties of dynamic objects from
     serialization; to write values to properties of dynamic objects; or to
	 create new properties for dynamic objects. To do so, set this property to an object that
	 implements the IDynamicPropertyWriter interface. For more information, see the
	 IDynamicPropertyWriter interface.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#IDynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">IDynamicPropertyWriter</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetStreamAppendBytesAction" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetStreamAppendBytesAction</apiName><shortdesc class="- topic/shortdesc ">

The NetStreamAppendBytesAction class is an enumeration of the constants you can pass to the NetStream.appendBytesAction() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">

The NetStreamAppendBytesAction class is an enumeration of the constants you can pass to the <codeph class="+ topic/ph pr-d/codeph ">NetStream.appendBytesAction()</codeph> method.

<p class="- topic/p ">Two of the constants indicate a timescale discontinuity. Every FLV tag has a timestamp indicating its position in the timescale.
Timestamps are used to synchronize video, audio, and script data playback. Timestamps for FLV tags of the same type
(video, audio, script data) must not decrease as the FLV progresses.</p>

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/appendBytesAction()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.appendBytesAction()</linktext></link><link href="flash.net.xml#NetStream/appendBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.appendBytes()</linktext></link></related-links><apiValue id="flash.net:NetStreamAppendBytesAction:END_SEQUENCE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">END_SEQUENCE</apiName><shortdesc class="- topic/shortdesc ">
    Indicates that the media stream data is complete.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">endSequence</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Indicates that the media stream data is complete.  For some codecs, such as H.264, the byte parser waits for
    the buffer to fill to a certain point before beginning playback.  Pass <codeph class="+ topic/ph pr-d/codeph ">END_SEQUENCE</codeph> to tell the byte parser to
    begin playback immediately.
    
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamAppendBytesAction:RESET_BEGIN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RESET_BEGIN</apiName><shortdesc class="- topic/shortdesc ">
    
    Indicates a timescale discontinuity.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">resetBegin</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    
    Indicates a timescale discontinuity. Flushes the FIFO (composed of an incomplete FLV tag) and resets the timescale to begin at the timestamp of the next appended message.
    On the next call to <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph>, the byte parser expects a file header and starts at the beginning of a file.
    
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamAppendBytesAction:RESET_SEEK" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RESET_SEEK</apiName><shortdesc class="- topic/shortdesc ">
    Indicates a timescale discontinuity.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">resetSeek</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Indicates a timescale discontinuity. Flushes the FIFO (composed of an incomplete FLV tag) and resets the timescale to begin at the timestamp of the next appended message.
    On the next call to <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph>, the byte parser expects the beginning of an FLV tag, as though you’ve just done a seek to
    a location in the same FLV, on a tag boundary.
    
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetGroupReplicationStrategy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetGroupReplicationStrategy</apiName><shortdesc class="- topic/shortdesc ">
The NetGroupReplicationStrategy class is an enumeration of constant values used in setting the replicationStrategy property
of the NetGroup class.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">An enumeration of constant values used in setting the replicationStrategy property of the NetGroup class.
</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
The NetGroupReplicationStrategy class is an enumeration of constant values used in setting the <codeph class="+ topic/ph pr-d/codeph ">replicationStrategy</codeph> property
of the <codeph class="+ topic/ph pr-d/codeph ">NetGroup</codeph> class.

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addWantObjects()</linktext></link><link href="flash.net.xml#NetGroup/replicationStrategy" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.replicationStrategy</linktext></link></related-links><apiValue id="flash.net:NetGroupReplicationStrategy:LOWEST_FIRST" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOWEST_FIRST</apiName><shortdesc class="- topic/shortdesc "> 
    Specifies that when fetching objects from a neighbor to satisfy a want, the objects with the
    lowest index numbers are requested first.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">lowestFirst</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Specifies that when fetching objects from a neighbor to satisfy a want, the objects with the
    lowest index numbers are requested first.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addWantObjects()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupReplicationStrategy:RAREST_FIRST" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RAREST_FIRST</apiName><shortdesc class="- topic/shortdesc "> 
    Specifies that when fetching objects from a neighbor to satisfy a want, the objects with
    the fewest replicas among all the neighbors are requested first.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">rarestFirst</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Specifies that when fetching objects from a neighbor to satisfy a want, the objects with
    the fewest replicas among all the neighbors are requested first.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">NetGroup.addWantObjects()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLLoader" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLLoader</apiName><shortdesc class="- topic/shortdesc ">
 The URLLoader class downloads data from a URL
 as text, binary data, or URL-encoded variables.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The URLLoader class downloads data from a URL
 as text, binary data, or URL-encoded variables. It is useful for downloading
 text files, XML, or other information to be used in a
 dynamic, data-driven application.
 
 <p class="- topic/p ">A URLLoader object downloads all of the data from a URL before
 making it available to code in the applications. It sends out
 notifications about the progress of the download, which you can monitor
 through the <codeph class="+ topic/ph pr-d/codeph ">bytesLoaded</codeph> and <codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph> properties,
 as well as through dispatched events.</p>
 
 <p class="- topic/p ">When loading very large video files, such as FLV's, out-of-memory errors may occur.
 </p>
 

 
 <p class="- topic/p ">When you use this class <ph class="- topic/ph ">in Flash Player and</ph> in
 AIR application content in security sandboxes other than then application security sandbox,
 consider the following security model:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">A SWF file in the local-with-filesystem sandbox may not load data from,
  or provide data to, a resource that is in the network sandbox. </li><li class="- topic/li "> By default, the calling SWF file and the URL you load must be in exactly the same domain.
 For example, a SWF file at www.adobe.com can load data only from sources that are also at www.adobe.com.
 To load data from a different domain, place a URL policy file on the server hosting the data.</li></ul>
 
 <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic:
 <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
 
 
 </apiDesc><example conref="examples\URLLoaderExample.as" class="- topic/example "> The following example loads and displays the 
 data found in a local text file. It also traces event handling information.
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> To run this example, put a file named urlLoaderExample.txt
 in the same directory as your SWF file. That file should only contain the following line of text:
 <codeph class="+ topic/ph pr-d/codeph ">answer=42&amp;question=unknown</codeph>
 </p>
 <p class="- topic/p ">The example code does the following:</p>
 <ol class="- topic/ol "><li class="- topic/li ">The constructor function creates a URLLoader instance named <codeph class="+ topic/ph pr-d/codeph ">loader</codeph> and a URLRequest
    instance named <codeph class="+ topic/ph pr-d/codeph ">request</codeph>, which contains the location and name of the file to be loaded.</li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">loader</codeph> object is passed to the <codeph class="+ topic/ph pr-d/codeph ">configureListeners()</codeph> method,
     which adds listeners for each of the supported URLLoader events.</li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">request</codeph> object is then passed to <codeph class="+ topic/ph pr-d/codeph ">loader.load()</codeph>, which loads the text file.</li><li class="- topic/li ">When the URLLoader has finished loading the text file the <codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE event</codeph> fires, 
      triggering the <codeph class="+ topic/ph pr-d/codeph ">completeHandler()</codeph> method. The <codeph class="+ topic/ph pr-d/codeph ">completeHandler()</codeph> method creates a
      URLVariables object from the text loaded from the file. The URLVariables object converts URL-encoded
      name/value pairs into ActionScript properties to make it easier to manipulate the loaded data.</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.*;

    public class URLLoaderExample extends Sprite {
        public function URLLoaderExample() {
            var loader:URLLoader = new URLLoader();
            configureListeners(loader);

            var request:URLRequest = new URLRequest("urlLoaderExample.txt");
            try {
                loader.load(request);
            } catch (error:Error) {
                trace("Unable to load requested document.");
            }
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            trace("completeHandler: " + loader.data);
    
            var vars:URLVariables = new URLVariables(loader.data);
            trace("The answer is " + vars.answer);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest" class="- topic/link "><linktext class="- topic/linktext ">URLRequest</linktext></link><link href="flash.net.xml#URLVariables" class="- topic/link "><linktext class="- topic/linktext ">URLVariables</linktext></link><link href="flash.net.xml#URLStream" class="- topic/link "><linktext class="- topic/linktext ">URLStream</linktext></link></related-links><adobeApiEvent id="flash.net:URLLoader_flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched if a call to the load() method attempts to access data over HTTP,
 and Adobe AIR is able to detect and return the status code for the request.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched if a call to the load() method attempts to access data over HTTP,
 and Adobe AIR is able to detect and return the status code for the request.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched if a call to URLLoader.load()
 attempts to access data over HTTP.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched if a call to URLLoader.load()
 attempts to access data over HTTP. <ph class="- topic/ph ">For content running in
 Flash Player, this event is only dispatched if the current Flash Player environment
 is able to detect and return the status code for the request. (Some browser environments
 may not be able to provide this information.)</ph> Note that the <codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> event
 (if any) is sent before (and in addition to) any <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>
 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched if a call to URLLoader.load()
 attempts to load data from a server outside the security sandbox.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched if a call to URLLoader.load()
 attempts to load data from a server outside the security sandbox.
 Also dispatched if a call to <codeph class="+ topic/ph pr-d/codeph ">URLLoader.load()</codeph> attempts
 to load a SWZ file and the certificate is invalid or the digest string
 does not match the component.
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched if a call to URLLoader.load()
 results in a fatal error that terminates the download.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched if a call to URLLoader.load()
 results in a fatal error that terminates the download.
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.ProgressEvent.PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when data is received as the download operation progresses.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when data is received as the download operation progresses.
 
 <p class="- topic/p ">Note that with a URLLoader object, it is not possible to access the data until it has
 been received completely.
 So, the progress event only serves as a notification of how far the download has progressed.
 To access the data before it's entirely downloaded, use a URLStream object. </p>
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched after all the received data is decoded and
 placed in the data property of the URLLoader object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched after all the received data is decoded and
 placed in the data property of the URLLoader object.
 The received data may be accessed once this event has been dispatched.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.Event.OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when the download operation commences following
 a call to the URLLoader.load() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Dispatched when the download operation begins.
 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when the download operation commences following
 a call to the <codeph class="+ topic/ph pr-d/codeph ">URLLoader.load()</codeph> method.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.net:URLLoader:URLLoader" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">URLLoader</apiName><shortdesc class="- topic/shortdesc ">
     Creates a URLLoader object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A URLRequest object specifying
                    the URL to download.  If this parameter is omitted,
                    no load operation begins.  If
                    specified, the load operation begins
                    immediately (see the <codeph class="+ topic/ph pr-d/codeph ">load</codeph> entry for more information).
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a URLLoader object.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader/load()" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.load()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:URLLoader:addEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addEventListener</apiName><shortdesc class="- topic/shortdesc ">
    
	Registers an event listener object with an EventDispatcher object so that the listener 
	receives notification of an event.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The type of event.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The listener function that processes the event. This function must accept
    an Event object as its only parameter and must return nothing<ph class="- topic/ph ">, as this example shows:</ph>
	
	
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">function(evt:Event):void</codeblock>
	
	<p class="- topic/p ">The function can have any name.</p>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">Determines whether the listener works in the capture phase or the 
	target and bubbling phases. If <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, 
	the listener processes the event only during the capture phase and not in the 
	target or bubbling phase. If <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, the
	listener processes the event only during the target or bubbling phase. To listen for
	the event in all three phases, call <codeph class="+ topic/ph pr-d/codeph ">addEventListener</codeph> twice, once with 
	<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, then again with
	<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</ph>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">priority</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The priority level of the event listener. The priority is designated by
	a signed 32-bit integer. The higher the number, the higher the priority. All listeners
	with priority <i class="+ topic/ph hi-d/i ">n</i> are processed before listeners of priority <i class="+ topic/ph hi-d/i ">n</i>-1. If two
	or more listeners share the same priority, they are processed in the order in which they
	were added. The default priority is 0.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useWeakReference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Determines whether the reference to the listener is strong or
	weak. A strong reference (the default) prevents your listener from being garbage-collected.
    A weak reference does not. <p class="- topic/p ">Class-level member functions are not subject to garbage 
    collection, so you can set <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for 
    class-level member functions without subjecting them to garbage collection. If you set
    <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for a listener that is a nested inner 
    function, the function will be garbage-collected and no longer persistent. If you create 
    references to the inner function (save it in another variable) then it is not 
    garbage-collected and stays persistent.</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    
	Registers an event listener object with an EventDispatcher object so that the listener 
	receives notification of an event. <ph class="- topic/ph ">You can register event listeners on all nodes in the 
	display list for a specific type of event, phase, and priority.</ph>
	
	
	
	<p class="- topic/p ">After you successfully register an event listener, you cannot change its priority
	through additional calls to <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>. To change a listener's
	priority, you must first call <codeph class="+ topic/ph pr-d/codeph ">removeListener()</codeph>. Then you can register the
	listener again with the new priority level. </p>
	
	<p class="- topic/p ">Keep in mind that after the listener is registered, subsequent calls to
	<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> with a different <codeph class="+ topic/ph pr-d/codeph ">type</codeph> or
	<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> value result in the creation of a separate listener registration. 
	<ph class="- topic/ph ">For example, if you first register a listener with <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> set to 
	<codeph class="+ topic/ph pr-d/codeph ">true</codeph>, it listens only during the capture phase. If you call 
	<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> again using the same listener object, but with
	<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, you have two separate listeners: one
	that listens during the capture phase and another that listens during the target and
	bubbling phases.</ph>
	</p>
	
	<p class="- topic/p ">You cannot register an event listener for only the target phase or the bubbling 
	phase. Those phases are coupled during registration because bubbling 
	applies only to the ancestors of the target node.</p>
	
	<p class="- topic/p ">If you no longer need an event listener, remove it by calling 
	<codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph>, or memory problems could result. Event listeners are not automatically
	removed from memory because the garbage
	collector does not remove the listener as long as the dispatching object exists (unless the <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph>
	parameter is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).</p>
		
	<p class="- topic/p ">Copying an EventDispatcher instance does not copy the event listeners attached to it. 
	(If your newly created node needs an event listener, you must attach the listener after
    creating the node.) However, if you move an EventDispatcher instance, the event listeners 
    attached to it move along with it.</p>
	
	
	<p class="- topic/p ">If the event listener is being registered on a node while an event is being processed
	on this node, the event listener is not triggered during the current phase but can be 
	triggered during a later phase in the event flow, such as the bubbling phase.</p>
	
	<p class="- topic/p ">If an event listener is removed from a node while an event is being processed on the node,
	it is still triggered by the current actions. After it is removed, the event listener is
	never invoked again (unless registered again for future processing). </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLLoader:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Closes the load operation in progress.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Closes the load operation in progress.  Any load
     operation in progress is immediately terminated.
     If no URL is currently being streamed, an invalid stream error is thrown.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLLoader:load" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">load</apiName><shortdesc class="- topic/shortdesc ">
     Sends and loads data from the specified URL.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">URLRequest.requestHeader</codeph> objects may not
     contain certain prohibited HTTP request headers. For more information,
     see the URLRequestHeader class description.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error can occur for the following reasons:
     1) <ph class="- topic/ph ">Flash Player or</ph> AIR cannot
     convert the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.data</codeph>
     parameter from UTF8 to MBCS. This error is applicable if the URLRequest object
     passed to <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> is set to perform a <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> operation and
     if <codeph class="+ topic/ph pr-d/codeph ">System.useCodePage</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     2) <ph class="- topic/ph ">Flash Player or</ph> AIR cannot
     allocate memory for the <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> data. This error is

     applicable if the URLRequest object passed to <codeph class="+ topic/ph pr-d/codeph ">load</codeph> is set
     to perform a <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> operation.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">MemoryError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:MemoryError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Local untrusted files may not communicate with
     the Internet. This may be worked around by reclassifying this file
     as local-with-networking or trusted.
     
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You are trying to connect to a commonly reserved port.
      For a complete list of blocked ports, see "Restricting Networking APIs" in the
      <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value of the request parameter
     or the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph> property of the URLRequest object passed are
     <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A URLRequest object specifying the URL to download.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sends and loads data from the specified URL. The data can be received as
     text, raw binary data, or URL-encoded variables, depending on the
     value you set for the <codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> property. Note that
     the default value of the <codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> property is text.
     If you want to send data to the specified URL, you can set the <codeph class="+ topic/ph pr-d/codeph ">data</codeph>
     property in the URLRequest object.
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> If a file being loaded contains non-ASCII characters (as found
     in many non-English languages), it is recommended that you save the
     file with UTF-8 or UTF-16 encoding as opposed to a non-Unicode format
     like ASCII.</p>
     
     <p class="- topic/p "> A SWF file in the local-with-filesystem sandbox may not load data from,
      or provide data to, a resource that is in the network sandbox.</p>
     
     <p class="- topic/p "> By default, the calling SWF file and the URL you load must be in exactly the same domain.
     For example, a SWF file at www.adobe.com can load data only from sources that are also at www.adobe.com.
     To load data from a different domain, place a URL policy file on the server hosting the data.</p>
     
     <p class="- topic/p ">You cannot connect to commonly reserved ports.
     For a complete list of blocked ports, see "Restricting Networking APIs" in the
     <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</p>
     
     <p class="- topic/p "> In Flash Player 10 and later, if you use a multipart Content-Type (for example "multipart/form-data")
     that contains an upload (indicated by a "filename" parameter in a "content-disposition" header within the POST body),
     the POST operation is subject to the security rules applied to uploads:</p>
     <ul class="- topic/ul "><li class="- topic/li ">The POST operation must be performed in response to a user-initiated action, such as a mouse click or key press.</li><li class="- topic/li ">If the POST operation is cross-domain (the POST target is not on the same server as the SWF file
     that is sending the POST request),
     the target server must provide a URL policy file that permits cross-domain access.</li></ul>
     <p class="- topic/p ">Also, for any multipart Content-Type, the syntax must be valid (according to the RFC2046 standards).
     If the syntax appears to be invalid, the POST operation is subject to the security rules applied to uploads.</p>
     
     <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic:
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     
     </apiDesc><example conref="examples\URLLoader_loadExample.as" class="- topic/example "> In the following example, an XML files is loaded and the content
 of its elements' first arguments are displayed in a text field.
 
 <p class="- topic/p ">A <codeph class="+ topic/ph pr-d/codeph ">URLRequest</codeph> object is created to identify the location of the
 XML file, which for this example is in the same directory as the SWF file. 
 The file is loaded in a <codeph class="+ topic/ph pr-d/codeph ">try...catch</codeph> block in order to catch any
 error that may occur. (Here we catch the <codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> errors.) 
 If an <codeph class="+ topic/ph pr-d/codeph ">IO_ERROR</codeph> event occurs, the <codeph class="+ topic/ph pr-d/codeph ">errorHandler()</codeph> method 
 is invoked, which writes an error message in the <codeph class="+ topic/ph pr-d/codeph ">xmlTextField</codeph> text field. 
 Once the XML file data is received and place in the data property of the <codeph class="+ topic/ph pr-d/codeph ">loader</codeph> 
 URLLoader object, the <codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE</codeph> event is dispatched and the 
 <codeph class="+ topic/ph pr-d/codeph ">loaderCompleteHandler()</codeph> method is invoked.</p>
 
 <p class="- topic/p ">In the <codeph class="+ topic/ph pr-d/codeph ">loaderCompleteHandler()</codeph> method, a <codeph class="+ topic/ph pr-d/codeph ">try...catch</codeph> 
 block is used to catch any parsing error that may occur while converting the loaded 
 data from the file into an XML object. The <codeph class="+ topic/ph pr-d/codeph ">readNodes()</codeph> method then 
 recursively goes through all the elements in the nodes of the XML document and 
 appends the <codeph class="+ topic/ph pr-d/codeph ">xmlTextField</codeph> text field with a list of the first attributes 
 of all the elements.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.xml.*;
    import flash.events.IOErrorEvent;
  
    public class URLLoader_loadExample extends Sprite {
        private var xmlTextField:TextField = new TextField();
        private var externalXML:XML;    
        private var loader:URLLoader;

        public function URLLoader_loadExample() {
            var request:URLRequest = new URLRequest("xmlFile.xml");

            loader = new URLLoader();
            
            try {
                loader.load(request);
            }
            catch (error:SecurityError)
            {
                trace("A SecurityError has occurred.");
            }

             loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(Event.COMPLETE, loaderCompleteHandler);

            xmlTextField.x = 10;
            xmlTextField.y = 10;
            xmlTextField.background = true;
            xmlTextField.autoSize = TextFieldAutoSize.LEFT;

            addChild(xmlTextField);
        }

        private function loaderCompleteHandler(event:Event):void {

                try {
                    externalXML = new XML(loader.data);
                    readNodes(externalXML);    
                } catch (e:TypeError) {
                    trace("Could not parse the XML file.");
                }
        }

        private function readNodes(node:XML):void {

                for each (var element:XML in node.elements()) {
                    xmlTextField.appendText(element.attributes()[0] + "\n");

                    readNodes(element);
                }    
        }

        private function errorHandler(e:IOErrorEvent):void {
            xmlTextField.text = "Had problem loading the XML File.";
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestHeader" class="- topic/link "><linktext class="- topic/linktext ">URLRequestHeader</linktext></link><link href="flash.net.xml#URLRequest/requestHeaders" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.requestHeaders</linktext></link><link href="flash.net.xml#URLRequest/data" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.data</linktext></link><link href="flash.net.xml#URLRequest/digest" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.digest</linktext></link></related-links><adobeApiEvent id="flash.net:URLLoader:load_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched after data has loaded successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched after data has loaded successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If access is over HTTP, and the current
     Flash Player environment supports obtaining status codes, you may
     receive these events in addition to any <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>
     or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">If access is over HTTP, and the current
     Flash Player environment supports obtaining status codes, you may
     receive these events in addition to any complete
     or error event.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The load operation could not be
     completed.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The load operation could not be
     completed.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when data is received as the download
     operation progresses.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when data is received as the download
     operation progresses.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A load operation attempted
     to retrieve data from a server outside the caller's security sandbox.
     This may be worked around using a policy file on the server.
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">A load operation attempted
     to retrieve data from a server outside the caller's security sandbox.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A load operation attempted
     to load a SWZ file (a Adobe platform component), but the certificate is invalid
     or the digest does not match the component.
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">A load operation attempted
     to load a SWZ file (a Adobe platform component), but the certificate is invalid
     or the digest does not match the component.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when a load operation commences.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when a load operation commences.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched if a call to the <codeph class="+ topic/ph pr-d/codeph ">load()</codeph>
     method attempts to access data over HTTP and Adobe AIR is able to detect and return the
     status code for the request.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched if a call to the load()
     method attempts to access data over HTTP and Adobe AIR is able to detect and return the
     status code for the request.</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:URLLoader:bytesLoaded" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesLoaded</apiName><shortdesc class="- topic/shortdesc ">
     Indicates the number of bytes that have been loaded thus far
     during the load operation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates the number of bytes that have been loaded thus far
     during the load operation.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLLoader:bytesTotal" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesTotal</apiName><shortdesc class="- topic/shortdesc ">
     Indicates the total number of bytes in the downloaded data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates the total number of bytes in the downloaded data.
     This property contains 0 while the load operation is in progress
     and is populated when the operation is complete.
     Also, a missing Content-Length header will result in bytesTotal being indeterminate.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLLoader:dataFormat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataFormat</apiName><shortdesc class="- topic/shortdesc ">
     Controls whether the downloaded data is received as
     text (URLLoaderDataFormat.TEXT), raw binary data
     (URLLoaderDataFormat.BINARY), or URL-encoded variables
     (URLLoaderDataFormat.VARIABLES).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">text</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiDefaultValue>URLLoaderDataFormat.TEXT
     </apiDefaultValue><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Controls how the downloaded data is received.
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Controls whether the downloaded data is received as
     text (<codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.TEXT</codeph>), raw binary data
     (<codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.BINARY</codeph>), or URL-encoded variables
     (<codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.VARIABLES</codeph>).
     
     <p class="- topic/p ">If the value of the <codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.TEXT</codeph>,
     the received data is a string containing the text of the loaded file.</p>
     
     <p class="- topic/p ">If the value of the <codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.BINARY</codeph>,
     the received data is a ByteArray object containing the raw binary data.</p>
     
     <p class="- topic/p ">If the value of the <codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.VARIABLES</codeph>,
     the received data is a URLVariables object containing the URL-encoded variables.</p>
     
     </apiDesc><example conref="examples\URLLoader_dataFormat.as" class="- topic/example "> The following example shows how you can load external text files. Use the URLRequest and URLLoader classes, and then listen for the complete event.
 Example provided by 
 <xref href="http://actionscriptexamples.com/2008/02/26/loading-text-files-using-the-urlloader-class-in-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var PATH:String = "lorem.txt";
var urlRequest:URLRequest = new URLRequest(PATH);
var urlLoader:URLLoader = new URLLoader();
urlLoader.dataFormat = URLLoaderDataFormat.TEXT; // default
urlLoader.addEventListener(Event.COMPLETE, urlLoader_complete);
urlLoader.load(urlRequest);
 
function urlLoader_complete(evt:Event):void {
    textArea.text = urlLoader.data;
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoaderDataFormat" class="- topic/link "><linktext class="- topic/linktext ">URLLoaderDataFormat</linktext></link></related-links></apiValue><apiValue id="flash.net:URLLoader:data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
     The data received from the load operation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiType value="" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The data received from the load operation. This property
     is populated only when the load operation is complete.
     The format of the data depends on the setting of the
     <codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> property:
     
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.TEXT</codeph>,
     the received data is a string containing the text of the loaded file.</p>
     
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.BINARY</codeph>,
     the received data is a ByteArray object containing the raw binary data.</p>
     
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">dataFormat</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">URLLoaderDataFormat.VARIABLES</codeph>,
     the received data is a URLVariables object containing the URL-encoded variables.</p>
     
     </apiDesc><example conref="examples\URLLoader_data.as" class="- topic/example "> The following example shows how you can load an external text file with URL encoded variables into an ActionScript 3.0 document using the URLLoader class and setting the dataFormat property to the URLLoaderDataFormat.VARIABLES constant ("variables").
 Example provided by 
 <xref href="http://actionscriptexamples.com/2008/02/27/loading-url-encoded-variables-into-a-flash-application-using-the-urlloader-class-in-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
//params.txt is a local file that includes: firstName=Tom&amp;lastName=Jones
var lbl:TextField = new TextField();
var urlRequest:URLRequest = new URLRequest("params.txt");
var urlLoader:URLLoader = new URLLoader();
urlLoader.dataFormat = URLLoaderDataFormat.VARIABLES;
urlLoader.addEventListener(Event.COMPLETE, urlLoader_complete);
urlLoader.load(urlRequest);
 
function urlLoader_complete(evt:Event):void {
    lbl.text = urlLoader.data.lastName + "," + urlLoader.data.firstName;
    addChild(lbl);
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoaderDataFormat" class="- topic/link "><linktext class="- topic/linktext ">URLLoaderDataFormat</linktext></link><link href="flash.net.xml#URLLoader/dataFormat" class="- topic/link "><linktext class="- topic/linktext ">URLLoader.dataFormat</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:IDynamicPropertyOutput" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IDynamicPropertyOutput</apiName><shortdesc class="- topic/shortdesc ">
	 This interface controls the serialization of dynamic properties of dynamic objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiInterface class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiInterface "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier "/></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 This interface controls the serialization of dynamic properties of dynamic objects. 
	 You use this interface with the IDynamicPropertyWriter interface
	 and the <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.dynamicPropertyWriter</codeph> property.
	 
     </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#IDynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">IDynamicPropertyWriter</linktext></link><link href="flash.net.xml#ObjectEncoding/dynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding.dynamicPropertyWriter</linktext></link></related-links><apiOperation id="flash.net:IDynamicPropertyOutput:flash.net:IDynamicPropertyOutput:writeDynamicProperty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeDynamicProperty</apiName><shortdesc class="- topic/shortdesc ">
		 Adds a dynamic property to the binary output of a serialized object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the property. You can use this parameter either to specify 
                the name of an existing property of the dynamic object or to create a 
                new property.  
		 
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value to write to the specified property.
		 
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Adds a dynamic property to the binary output of a serialized object.
         When the object is subsequently read (using a method such as
         <codeph class="+ topic/ph pr-d/codeph ">readObject</codeph>), it contains the new property.
         You can use this method
		 to exclude properties of dynamic objects from serialization; to write values
		 to properties of dynamic objects; or to create new properties
		 for dynamic objects.
		 
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#IDynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">IDynamicPropertyWriter</linktext></link><link href="flash.net.xml#ObjectEncoding/dynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding.dynamicPropertyWriter</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier languages="" id="flash.net:NetStreamPlayOptions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetStreamPlayOptions</apiName><shortdesc class="- topic/shortdesc ">
 
 The NetStreamPlayOptions class specifies the various options that can be passed 
 to the NetStream.play2() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The NetStreamPlayOptions class specifies the various options that can be passed 
 to the NetStream.play2() method.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 
 The NetStreamPlayOptions class specifies the various options that can be passed 
 to the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> method. You pass a NetStreamPlayOptions object
 to <codeph class="+ topic/ph pr-d/codeph ">play2()</codeph>, and the properties of the class specify the various options.
 The primary use case for this class is to implement transitions between streams dynamically,
 either to switch to streams of different bit rates and sizes or to swap to different content
 in a playlist.
 
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.net:NetStreamPlayOptions:NetStreamPlayOptions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NetStreamPlayOptions</apiName><shortdesc class="- topic/shortdesc ">
     
     Creates a NetStreamPlayOptions object to specify the options that are passed to the NetStream.play2() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     Creates a NetStreamPlayOptions object to specify the options that are passed to the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> method. 
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiConstructor><apiValue id="flash.net:NetStreamPlayOptions:len" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">len</apiName><shortdesc class="- topic/shortdesc ">
    The duration of playback, in seconds, for the stream specified in streamName.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The duration of playback, in seconds, for the stream specified in streamName.
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    The duration of playback, in seconds, for the stream specified in <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph>. 
    The default value is -1, which means that Flash Player plays a live stream until it is no longer available or plays a recorded stream until it ends.
    If you pass 0 for <codeph class="+ topic/ph pr-d/codeph ">len</codeph>, Flash Player plays the single frame that is <codeph class="+ topic/ph pr-d/codeph ">start</codeph> seconds from the beginning of a recorded stream
    (assuming that <codeph class="+ topic/ph pr-d/codeph ">start</codeph> is equal to or greater than 0).
    <p class="- topic/p ">If you pass a positive number for <codeph class="+ topic/ph pr-d/codeph ">len</codeph>, Flash Player plays a live stream for <codeph class="+ topic/ph pr-d/codeph ">len</codeph> seconds after it becomes available, 
    or plays a recorded stream for <codeph class="+ topic/ph pr-d/codeph ">len</codeph> seconds. (If a stream ends before <codeph class="+ topic/ph pr-d/codeph ">len</codeph> seconds, playback ends when the stream ends.)</p> 
    <p class="- topic/p ">If you pass a negative number other than -1 for <codeph class="+ topic/ph pr-d/codeph ">len</codeph>, Flash Player interprets the value as if it were -1.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/start" class="- topic/link "><linktext class="- topic/linktext ">start</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:offset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">offset</apiName><shortdesc class="- topic/shortdesc ">
     The time in seconds in the stream playback at which the switch to a new stream should be made.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The time in seconds in the stream playback at which the switch to a new stream should be made. 
     The <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> parameter is used when a <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> call is made with the 
     <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayTransitions.SWITCH</codeph> transition mode. Flash Media Server looks for the nearest switch point 
     after the specified offset time and starts streaming the new stream from that point onwards. 
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Fast switch</b></p>
     
     <p class="- topic/p ">When this property is specified, Flash Media Server pre-empts the current stream and starts streaming the new stream 
     from the specified index position immediately, without waiting to 
     find a keyframe. Any data after the offset already buffered from a previous stream is flushed. 
     This technique can switch to a new stream more quickly than standard switching, because the buffered data from an older stream
     doesn't have to play out.</p>
     
     <p class="- topic/p ">The default value of <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> is -1, which is fast switch mode. In this mode, switching occurs at the first available keyframe after <codeph class="+ topic/ph pr-d/codeph ">netstream.time + 3</codeph>, 
     which is about 3 seconds later than the playback point.</p>
     
     <p class="- topic/p ">The offset value must be higher than the current playback time (<codeph class="+ topic/ph pr-d/codeph ">Netstream.time</codeph>)
     If the value is less, a <codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.Failed</codeph> status event is sent.</p>
     
     <p class="- topic/p ">For more information, see <xref href="http://www.adobe.com/go/learn_fms_fastswitch_en" scope="external" class="- topic/xref ">"Fast switching between streams"</xref>
     in the <i class="+ topic/ph hi-d/i ">Adobe Flash Media Server Developer's Guide</i>.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayOptions/start" class="- topic/link "><linktext class="- topic/linktext ">start</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link><link href="flash.net.xml#NetStream/time" class="- topic/link "><linktext class="- topic/linktext ">NetStream.time</linktext></link><link href="flash.net.xml#NetStreamPlayTransitions/SWITCH" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayTransitions.SWITCH</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:oldStreamName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">oldStreamName</apiName><shortdesc class="- topic/shortdesc ">
    The name of the old stream or the stream to transition from.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    The name of the old stream or the stream to transition from.   
    When <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> is used to simply play a stream (not perform a transition), the value of this property
    should be either null or undefined. Otherwise, specify the stream to transition from.   
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayOptions/streamName" class="- topic/link "><linktext class="- topic/linktext ">streamName</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:start" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">start</apiName><shortdesc class="- topic/shortdesc ">
    The start time, in seconds, for streamName.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The start time, in seconds, for streamName.
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    The start time, in seconds, for <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph>. Valid values are -2, -1, and 0.
    
    <p class="- topic/p ">The default value for <codeph class="+ topic/ph pr-d/codeph ">start</codeph> is -2, which means that Flash Player first tries to play the live stream specified in <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph>. 
    If a live stream of that name is not found, Flash Player plays the recorded stream specified in <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph>. 
    If neither a live nor a recorded stream is found, Flash Player opens a live stream named <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph>, even though no one is 
    publishing on it. When someone does begin publishing on that stream, Flash Player begins playing it.</p>
    
    <p class="- topic/p ">If you pass -1 for <codeph class="+ topic/ph pr-d/codeph ">start</codeph>, Flash Player plays only the live stream specified in <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph>. If no live stream is found,
    Flash Player waits for it indefinitely if <codeph class="+ topic/ph pr-d/codeph ">len</codeph> is set to -1; if <codeph class="+ topic/ph pr-d/codeph ">len</codeph> is set to a different value, 
    Flash Player waits for <codeph class="+ topic/ph pr-d/codeph ">len</codeph> seconds before it begins playing the next item in the playlist.</p>
    
    <p class="- topic/p "> If you pass 0 or a positive number for <codeph class="+ topic/ph pr-d/codeph ">start</codeph>, Flash Player plays only a recorded stream named <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph>, 
    beginning <codeph class="+ topic/ph pr-d/codeph ">start</codeph> seconds from the beginning of the stream. If no recorded stream is found, Flash Player begins playing the next item
    in the playlist immediately.</p>
    
    <p class="- topic/p ">If you pass a negative number other than -1 or -2 for <codeph class="+ topic/ph pr-d/codeph ">start</codeph>, Flash Player interprets the value as if it were -2.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/len" class="- topic/link "><linktext class="- topic/linktext ">len</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:streamName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">streamName</apiName><shortdesc class="- topic/shortdesc ">
    The name of the new stream to transition to or to play.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    The name of the new stream to transition to or to play. When <codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> is null or undefined, calling
    <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> simply starts playback of <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph>. If <codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> is specified, calling <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph>
    transitions <codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> to <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> using the transition mode specified in the <codeph class="+ topic/ph pr-d/codeph ">transition</codeph> property. 
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayOptions/oldStreamName" class="- topic/link "><linktext class="- topic/linktext ">oldStreamName</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:transition" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">transition</apiName><shortdesc class="- topic/shortdesc ">
    The mode in which streamName is played or transitioned to.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The mode in which streamName is played or transitioned to.
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    The mode in which <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> is played or transitioned to. Possible values are constants from the NetStreamPlayTransitions class.
    Depending on whether <codeph class="+ topic/ph pr-d/codeph ">Netstream.play2()</codeph> is called to play or transition a stream, the transition mode results in different behaviors. 
    For more information on the transition modes, see the NetStreamPlayTransitions class.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayTransitions" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayTransitions</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetStreamMulticastInfo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetStreamMulticastInfo</apiName><shortdesc class="- topic/shortdesc ">
The NetStreamMulticastInfo class specifies various Quality of Service (QoS) statistics
related to a NetStream object's underlying RTMFP Peer-to-Peer and IP Multicast stream transport.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
The NetStreamMulticastInfo class specifies various Quality of Service (QoS) statistics
related to a NetStream object's underlying RTMFP Peer-to-Peer and IP Multicast stream transport.
A NetStreamMulticastInfo object is returned by the <codeph class="+ topic/ph pr-d/codeph ">NetStream.multicastInfo</codeph> property.

<p class="- topic/p ">Properties that return numbers represent totals computed from the beginning of the multicast stream. 
These types of properties include the number of media bytes sent or the number of media fragment messages received.
Properties that are rates represent a snapshot of the current rate averaged over a few seconds.
These types of properties include the rate at which a local node is receiving data. </p>

<p class="- topic/p ">To see a list of values contained in the NetStreamMulticastInfo object, use the 
<codeph class="+ topic/ph pr-d/codeph ">NetStreamMulticastInfo.toString()</codeph> method.</p>

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link><link href="flash.net.xml#NetStream/multicastInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.multicastInfo</linktext></link></related-links><apiOperation id="flash.net:NetStreamMulticastInfo:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    Returns a string listing the properties of the NetStreamMulticastInfo object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string containing the values of the properties of the NetStreamMulticastInfo object
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns a string listing the properties of the NetStreamMulticastInfo object.
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:NetStreamMulticastInfo:bytesPushedFromPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesPushedFromPeers</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the number of media bytes that were proactively pushed from peers and received by the local node.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the number of media bytes that were proactively pushed from peers and received by the local node.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesRequestedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesRequestedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsPushedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsPushedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsRequestedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsRequestedFromPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:bytesPushedToPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesPushedToPeers</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the number of media bytes that the local node has proactively pushed to peers.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the number of media bytes that the local node has proactively pushed to peers.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesRequestedByPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesRequestedByPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsPushedToPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsPushedToPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsRequestedByPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsRequestedByPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:bytesReceivedFromIPMulticast:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesReceivedFromIPMulticast</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the number of media bytes that the local node has received from IP Multicast.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the number of media bytes that the local node has received from IP Multicast.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesReceivedFromServer" class="- topic/link "><linktext class="- topic/linktext ">bytesReceivedFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsReceivedFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">fragmentsReceivedFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsReceivedFromServer" class="- topic/link "><linktext class="- topic/linktext ">fragmentsReceivedFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromIPMulticast</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:bytesReceivedFromServer:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesReceivedFromServer</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the number of media bytes that the local node has received from the server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the number of media bytes that the local node has received from the server.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesReceivedFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">bytesReceivedFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsReceivedFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">fragmentsReceivedFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsReceivedFromServer" class="- topic/link "><linktext class="- topic/linktext ">fragmentsReceivedFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromServer" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromServer</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:bytesRequestedByPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesRequestedByPeers</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the number of media bytes that the local node has sent to peers in response to requests from those peers for specific fragments.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the number of media bytes that the local node has sent to peers in response to requests from those peers for specific fragments.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesPushedToPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesPushedToPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsPushedToPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsPushedToPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsRequestedByPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsRequestedByPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:bytesRequestedFromPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesRequestedFromPeers</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the number of media bytes that the local node requested and received from peers.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the number of media bytes that the local node requested and received from peers.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesPushedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesPushedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsPushedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsPushedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsRequestedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsRequestedFromPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:fragmentsPushedFromPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fragmentsPushedFromPeers</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the number of media fragment messages that were proactively pushed from peers and received by the local node.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the number of media fragment messages that were proactively pushed from peers and received by the local node.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesPushedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesPushedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/bytesRequestedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesRequestedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsRequestedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsRequestedFromPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:fragmentsPushedToPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fragmentsPushedToPeers</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the number of media fragment messages that the local node has proactively pushed to peers.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the number of media fragment messages that the local node has proactively pushed to peers.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesPushedToPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesPushedToPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/bytesRequestedByPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesRequestedByPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsRequestedByPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsRequestedByPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:fragmentsReceivedFromIPMulticast:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fragmentsReceivedFromIPMulticast</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the number of media fragment messages that the local node has received from IP Multicast.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the number of media fragment messages that the local node has received from IP Multicast.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesReceivedFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">bytesReceivedFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/bytesReceivedFromServer" class="- topic/link "><linktext class="- topic/linktext ">bytesReceivedFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsReceivedFromServer" class="- topic/link "><linktext class="- topic/linktext ">fragmentsReceivedFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromIPMulticast</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:fragmentsReceivedFromServer:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fragmentsReceivedFromServer</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the number of media fragment messages that the local node has received from the server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the number of media fragment messages that the local node has received from the server.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesReceivedFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">bytesReceivedFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/bytesReceivedFromServer" class="- topic/link "><linktext class="- topic/linktext ">bytesReceivedFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsReceivedFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">fragmentsReceivedFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromServer" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromServer</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:fragmentsRequestedByPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fragmentsRequestedByPeers</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the number of media fragment messages that the local node has sent to peers in response to requests from those peers for specific fragments.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the number of media fragment messages that the local node has sent to peers in response to requests from those peers for specific fragments.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesPushedToPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesPushedToPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/bytesRequestedByPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesRequestedByPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsPushedToPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsPushedToPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:fragmentsRequestedFromPeers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fragmentsRequestedFromPeers</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the number of media fragment messages that the local node requested and received from peers.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the number of media fragment messages that the local node requested and received from peers.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/bytesPushedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesPushedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/bytesRequestedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">bytesRequestedFromPeers</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/fragmentsPushedFromPeers" class="- topic/link "><linktext class="- topic/linktext ">fragmentsPushedFromPeers</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:receiveControlBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">receiveControlBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the rate at which the local node is receiving control overhead messages from peers, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the rate at which the local node is receiving control overhead messages from peers, in bytes per second.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromServer" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendControlBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:receiveDataBytesPerSecondFromIPMulticast:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">receiveDataBytesPerSecondFromIPMulticast</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the rate at which the local node is receiving data from IP Multicast, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the rate at which the local node is receiving data from IP Multicast, in bytes per second.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveControlBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromServer" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendDataBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:receiveDataBytesPerSecondFromServer:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">receiveDataBytesPerSecondFromServer</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the rate at which the local node is receiving media data from the server, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the rate at which the local node is receiving media data from the server, in bytes per second.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveControlBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendDataBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:receiveDataBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">receiveDataBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the rate at which the local node is receiving media data from peers, from the server, and over IP multicast, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the rate at which the local node is receiving media data from peers, from the server, and over IP multicast, in bytes per second.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveControlBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromIPMulticast" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromIPMulticast</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromServer" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendDataBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:sendControlBytesPerSecondToServer:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sendControlBytesPerSecondToServer</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the rate at which the local node is sending control overhead messages to the server, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the rate at which the local node is sending control overhead messages to the server, in bytes per second.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecondFromServer" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecondFromServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendControlBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendDataBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:sendControlBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sendControlBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the rate at which the local node is sending control overhead messages to peers and the server, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the rate at which the local node is sending control overhead messages to peers and the server, in bytes per second.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveControlBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendControlBytesPerSecondToServer" class="- topic/link "><linktext class="- topic/linktext ">sendControlBytesPerSecondToServer</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendDataBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamMulticastInfo:sendDataBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sendDataBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the rate at which media data is being sent by the local node to peers, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the rate at which media data is being sent by the local node to peers, in bytes per second.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo/receiveDataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">receiveDataBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendControlBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">sendControlBytesPerSecond</linktext></link><link href="flash.net.xml#NetStreamMulticastInfo/sendControlBytesPerSecondToServer" class="- topic/link "><linktext class="- topic/linktext ">sendControlBytesPerSecondToServer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetworkInfo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetworkInfo</apiName><shortdesc class="- topic/shortdesc ">
 The NetworkInfo class provides information about the network 
 interfaces on a computer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The NetworkInfo class provides information about the network 
 interfaces on a computer. 
 
 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">AIR profile support:</i> This feature is supported 
 on all desktop operating systems and AIR for TV devices, but is not supported on all mobile devices.
 You can test for support at run time using the <codeph class="+ topic/ph pr-d/codeph ">NetworkInfo.isSupported</codeph> property. See 
 <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">
 AIR Profile Support</xref> for more information regarding API support across multiple profiles.</p>
 
 <p class="- topic/p ">The NetworkInfo object is a singleton. To get the single NetworkInfo object, 
 use the static <codeph class="+ topic/ph pr-d/codeph ">NetworkInfo.networkInfo</codeph> property. Do not call the class 
 constructor, <codeph class="+ topic/ph pr-d/codeph ">new NetworkInfo()</codeph>.</p>
 
 <p class="- topic/p ">Most computers have one or more interfaces, such as 
 a wired and a wireless network interface. Additional interfaces such as
 VPN, loopback, or virtual interfaces can also be present.</p>
 
 <p class="- topic/p ">A NetworkInfo object dispatches a change event when the available 
 interfaces change. Call the <codeph class="+ topic/ph pr-d/codeph ">findInterfaces()</codeph>
 method to determine the most current network information.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> The NativeApplication object also dispatches network change events.</p>
 
 </apiDesc><example conref="examples\NetInfoExample.as" class="- topic/example "/></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetworkInterface" class="- topic/link "><linktext class="- topic/linktext ">NetworkInterface class</linktext></link><link href="flash.net.xml#InterfaceAddress" class="- topic/link "><linktext class="- topic/linktext ">InterfaceAddress class</linktext></link></related-links><adobeApiEvent id="flash.net:NetworkInfo_flash.events.Event.NETWORK_CHANGE_networkChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">networkChange</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when the network interfaces have changed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.NETWORK_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when the network interfaces have changed.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.net:NetworkInfo:findInterfaces" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">findInterfaces</apiName><shortdesc class="- topic/shortdesc ">
     Returns the list of network interfaces associated with this 
     machine.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of NetworkInterface objects
     
     </apiDesc><apiType value="Vector$flash.net:NetworkInterface" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns the list of network interfaces associated with this 
     machine. 
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:NetworkInfo:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
	 Indicates whether access to network interface information is supported on the client system.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><language>3.0 
	 </language></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indicates whether access to network interface information is supported on the client system.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInfo:networkInfo:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">networkInfo</apiName><shortdesc class="- topic/shortdesc ">
	 The singleton instance of the NetworkInfo object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:NetworkInfo</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If content running outside the AIR application security
	 sandbox accesses this property.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The singleton instance of the NetworkInfo object.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLVariables" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLVariables</apiName><shortdesc class="- topic/shortdesc ">
 
 The URLVariables class allows you to transfer
 variables between an application and a
 server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">URLVariables, constructor
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 
 The URLVariables class allows you to transfer
 variables between an application and a
 server. 
 Use URLVariables objects with methods of the URLLoader
 class, with the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property
 of the URLRequest class, and with flash.net package 
 functions.
 
 </apiDesc><example conref="examples\URLVariablesExample.as" class="- topic/example "> The following example opens the remote application hosted at 
 http://www.[yourDomain].com/application.jsp in a new browser window and passes 
 data about a user session, captured in a URLVariables object, to the application. 
  
 <p class="- topic/p ">Highlights of the example follow:</p>
 <ol class="- topic/ol "><li class="- topic/li ">The constructor function creates a URLRequest
    instance named <codeph class="+ topic/ph pr-d/codeph ">request</codeph>, taking the URL of the remote application as a parameter.</li><li class="- topic/li ">A URLVariables object is created and two of its properties are assigned values.</li><li class="- topic/li ">The URLVariables object is assigned to the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property of the URLRequest object.</li><li class="- topic/li ">The example calls <codeph class="+ topic/ph pr-d/codeph ">navigateToURL</codeph>, which opens a new browser window
    to the remote application's URL.</li></ol>
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">Note:</b> To run the example, the remote application URL in the example must be replaced
 with a working URL. Additionally, you would need server code 
 to process the information captured by Flash Player in the URLVariables object.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.net.URLVariables;

    public class URLVariablesExample extends Sprite {

        public function URLVariablesExample() {
            var url:String = "http://www.[yourDomain].com/application.jsp";
            var request:URLRequest = new URLRequest(url);
            var variables:URLVariables = new URLVariables();
            variables.exampleSessionId = new Date().getTime();
            variables.exampleUserLabel = "guest";
            request.data = variables;
            navigateToURL(request);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader" class="- topic/link "><linktext class="- topic/linktext ">URLLoader</linktext></link></related-links><apiConstructor id="flash.net:URLVariables:URLVariables" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">URLVariables</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new URLVariables object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">source</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A URL-encoded string containing name/value pairs.
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new URLVariables object. You pass URLVariables
	 objects to the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property of URLRequest objects.
	 
	 <p class="- topic/p ">If you call the URLVariables constructor with a string, 
	 the <codeph class="+ topic/ph pr-d/codeph ">decode()</codeph> method is automatically called
	 to convert the string to properties of the URLVariables object.</p>
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.net:URLVariables:decode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">decode</apiName><shortdesc class="- topic/shortdesc ">
	 Converts the variable string to properties of the specified URLVariables object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">URLVariables, URLVariables.decode, decode
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The source parameter must be a URL-encoded query
	 string containing name/value pairs.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">source</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A URL-encoded query string containing name/value pairs.	 
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Converts the variable string to properties of the specified URLVariables object.
	 <p class="- topic/p ">This method is used internally by the URLVariables events. 
	 Most users do not need to call this method directly.</p>
	 
	 </apiDesc><example conref="examples\URLVariables_decode.as" class="- topic/example "> The following examples show how you can parse URL encoded strings. 
 Example provided by 
 <xref href="http://actionscriptexamples.com/2008/02/27/decoding-url-encoded-strings-in-a-flash-application-using-the-urlvariables-class-in-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// The first method passes the string to be decoded to the URLVariables class constructor:
var urlVariables:URLVariables = new URLVariables("firstName=Tom&amp;lastName=Jones");
lbl.text = urlVariables.lastName + "," + urlVariables.firstName;

// The second method uses the decode() method to parse the URL encoded string:
var urlVariables:URLVariables = new URLVariables();
urlVariables.decode("firstName=Tom&amp;lastName=Jones");
lbl.text = urlVariables.lastName + "," + urlVariables.firstName;
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLVariables:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 Returns a string containing all enumerable variables, 
	 in the MIME content encoding application/x-www-form-urlencoded.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">URLVariables, URLVariables.toString, toString
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A URL-encoded string containing name/value pairs.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns a string containing all enumerable variables, 
	 in the MIME content encoding <i class="+ topic/ph hi-d/i ">application/x-www-form-urlencoded</i>.
	 
	 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier languages="" id="flash.net:IDynamicPropertyWriter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IDynamicPropertyWriter</apiName><shortdesc class="- topic/shortdesc ">
     This interface is used with the IDynamicPropertyOutput interface to control
     the serialization of dynamic properties of dynamic objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiInterface class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiInterface "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier "/></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     This interface is used with the IDynamicPropertyOutput interface to control
     the serialization of dynamic properties of dynamic objects. To use this interface,
     assign an object that implements the IDynamicPropertyWriter interface to 
     the <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.dynamicPropertyWriter</codeph> property.
      
     </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#IDynamicPropertyOutput" class="- topic/link "><linktext class="- topic/linktext ">IDynamicPropertyOutput</linktext></link><link href="flash.net.xml#ObjectEncoding/dynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding.dynamicPropertyWriter</linktext></link></related-links><apiOperation id="flash.net:IDynamicPropertyWriter:flash.net:IDynamicPropertyWriter:writeDynamicProperties" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeDynamicProperties</apiName><shortdesc class="- topic/shortdesc ">
         Writes the name and value of an IDynamicPropertyOutput object to an object with 
         dynamic properties.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">obj</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object to write to.
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">output</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:IDynamicPropertyOutput</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The IDynamicPropertyOutput object that contains the name and value 
		 to dynamically write to the object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Writes the name and value of an IDynamicPropertyOutput object to an object with 
         dynamic properties. If <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.dynamicPropertyWriter</codeph> is set,
         this method is invoked for each object with dynamic properties. 
		 
		 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#IDynamicPropertyOutput" class="- topic/link "><linktext class="- topic/linktext ">IDynamicPropertyOutput</linktext></link><link href="flash.net.xml#ObjectEncoding/dynamicPropertyWriter" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding.dynamicPropertyWriter</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier languages="" id="flash.net:DatagramSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DatagramSocket</apiName><shortdesc class="- topic/shortdesc ">
 The DatagramSocket class enables code to send and receive 
 Universal Datagram Protocol (UDP) packets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The DatagramSocket class enables code to send and receive 
 Universal Datagram Protocol (UDP) packets. 
 
 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">AIR profile support:</i> This feature is supported on 
 all desktop operating systems, but is not supported on mobile devices or AIR for TV devices. You can test for 
 support at run time using the <codeph class="+ topic/ph pr-d/codeph ">DatagramSocket.isSupported</codeph> property. See 
 <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">
 AIR Profile Support</xref> for more information regarding API support across multiple profiles.</p>
 
 <p class="- topic/p ">Datagram packets are individually transmitted between the source and destination.
 Packets can arrive in a different order than they were sent. Packets lost in transmission are not retransmitted, or
 even detected.</p>
 
 <p class="- topic/p ">Data sent using a datagram socket is not automatically broken
 up into packets of transmittable size. If you send a UDP packet that exceeds the maximum
 transmission unit (MTU) size, network discards the packet (without warning). The limiting MTU is the
 smallest MTU of any interface, switch, or router in the transmission path. 
 You can use the NetworkInterface class to determine the MTU of the local interface, but 
 other nodes in the network can have different MTU values.</p>
 
 <p class="- topic/p ">The Socket class uses TCP which provides guaranteed packet delivery and automatically
 divides and reassembles large packets. TCP also provides better network bandwidth
 management. These features mean that data sent using a TCP socket incurs higher
 latency, but for most uses, the benefits of TCP far outweigh the costs. Most network 
 communication should use the Socket class rather than the DatagramSocket class.</p>
 
 <p class="- topic/p ">The DatagramSocket class is useful for working with 
 applications where a small transmission latency is important 
 and packet loss is tolerable. For example, network operations in voice-over-IP (VoIP) applications and 
 real-time, multiplayer games can often benefit from UDP. The 
 DatagramSocket class is also useful for some server-side 
 applications. Since UDP is a stateless protocol, a 
 server can handle more requests from more clients than it can with 
 TCP.</p>
 
 <p class="- topic/p ">The DatagramSocket class can only be used in Adobe AIR 
 applications and only in the application security sandbox.</p>
 
 <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic: 
 <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
 
 </apiDesc><example conref="examples\DatagramSocketExample.as" class="- topic/example "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.events.DatagramSocketDataEvent;
    import flash.events.Event;
    import flash.events.MouseEvent;
    import flash.events.TimerEvent;
    import flash.net.DatagramSocket;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.TextFieldType;
    import flash.utils.ByteArray;
    import flash.utils.Timer;
    
    public class DatagramSocketExample extends Sprite
    {
        private var datagramSocket:DatagramSocket = new DatagramSocket();;

        private var localIP:TextField;
        private var localPort:TextField;
        private var logField:TextField;
        private var targetIP:TextField;
        private var targetPort:TextField;
        private var message:TextField;
        
        public function DatagramSocketExample()
        {
            setupUI();
        }

        private function bind( event:Event ):void
        {
            if( datagramSocket.bound ) 
            {
                datagramSocket.close();
                datagramSocket = new DatagramSocket();
                
            }
            datagramSocket.bind( parseInt( localPort.text ), localIP.text );
            datagramSocket.addEventListener( DatagramSocketDataEvent.DATA, dataReceived );
            datagramSocket.receive();
            log( "Bound to: " + datagramSocket.localAddress + ":" + datagramSocket.localPort );
        }
        
        private function dataReceived( event:DatagramSocketDataEvent ):void
        {
            //Read the data from the datagram
            log("Received from " + event.srcAddress + ":" + event.srcPort + "&gt; " + 
                event.data.readUTFBytes( event.data.bytesAvailable ) );
        }
        
        private function send( event:Event ):void
        {
            //Create a message in a ByteArray
            var data:ByteArray = new ByteArray();
            data.writeUTFBytes( message.text );
            
            //Send a datagram to the target
            try
            {
                datagramSocket.send( data, 0, 0, targetIP.text, parseInt( targetPort.text )); 
                log( "Sent message to " + targetIP.text + ":" + targetPort.text );
            }
            catch ( error:Error )
            {
                log( error.message );
            }
        }
        
        private function log( text:String ):void
        {
            logField.appendText( text + "\n" );
            logField.scrollV = logField.maxScrollV;
            trace( text );
        }
        private function setupUI():void
        {
            targetIP = createTextField( 10, 10, "Target IP:", "192.168.0.1" );
            targetPort = createTextField( 10, 35, "Target port:", "8989" );
            message = createTextField( 10, 60, "Message:", "Lucy can't drink milk." );
            localIP = createTextField( 10, 85, "Local IP", "0.0.0.0");
            localPort = createTextField( 10, 110, "Local port:", "0" );
            createTextButton( 250, 135, "Bind", bind );
            createTextButton( 300, 135, "Send", send );
            logField = createTextField( 10, 160, "Log:", "", false, 200 )
                
            this.stage.nativeWindow.activate();
        }
        
        private function createTextField( x:int, y:int, label:String, defaultValue:String = '', editable:Boolean = true, height:int = 20 ):TextField
        {
            var labelField:TextField = new TextField();
            labelField.text = label;
            labelField.type = TextFieldType.DYNAMIC;
            labelField.width = 180;
            labelField.x = x;
            labelField.y = y;
            
            var input:TextField = new TextField();
            input.text = defaultValue;
            input.type = TextFieldType.INPUT;
            input.border = editable;
            input.selectable = editable;
            input.width = 280;
            input.height = height;
            input.x = x + labelField.width;
            input.y = y;
            
            this.addChild( labelField );
            this.addChild( input );
            
            return input;
        }
        
        private function createTextButton( x:int, y:int, label:String, clickHandler:Function ):TextField
        {
            var button:TextField = new TextField();
            button.htmlText = "&lt;u&gt;&lt;b&gt;" + label + "&lt;/b&gt;&lt;/u&gt;";
            button.type = TextFieldType.DYNAMIC;
            button.selectable = false;
            button.width = 180;
            button.x = x;
            button.y = y;
            button.addEventListener( MouseEvent.CLICK, clickHandler );
            
            this.addChild( button );
            return button;
            
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="http://tools.ietf.org/html/rfc768" class="- topic/link "><linktext class="- topic/linktext ">RFC 768</linktext></link><link href="flash.net.xml#Socket" class="- topic/link "><linktext class="- topic/linktext ">Socket class</linktext></link><link href="flash.net.xml#XMLSocket" class="- topic/link "><linktext class="- topic/linktext ">XMLSocket class</linktext></link><link href="flash.net.xml#ServerSocket" class="- topic/link "><linktext class="- topic/linktext ">ServerSocket class</linktext></link></related-links><adobeApiEvent id="flash.net:DatagramSocket_flash.events.IOErrorEvent.IOERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when this socket receives an I/O error.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IOERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Dispatched when this socket receives an I/O error.
 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when this socket receives an I/O error.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:DatagramSocket_flash.events.DatagramSocketDataEvent.DATA_data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when this socket receives a packet of data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.DatagramSocketDataEvent.DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.DatagramSocketDataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when this socket receives a packet of data.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:DatagramSocket_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when the operating system closes this socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when the operating system closes this socket.
  
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">close</codeph> event is not dispatched when the DatagramSocket <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> 
 method is called.</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:DatagramSocket:DatagramSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">DatagramSocket</apiName><shortdesc class="- topic/shortdesc ">
     Creates a DatagramSocket object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">if content outside the AIR application security 
     sandbox attempts to create a DatagramSocket object.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a DatagramSocket object.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.net:DatagramSocket:bind" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">bind</apiName><shortdesc class="- topic/shortdesc ">
     Binds this socket to the specified local address and port.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs when <codeph class="+ topic/ph pr-d/codeph ">localPort</codeph> is less than 0 or greater than 65535.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs when <codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> is not a syntactically well-formed IP address.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs if the socket cannot be bound, such as when:
     <ol class="- topic/ol "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">localPort</codeph> is already in use by another socket.</li><li class="- topic/li ">the user account under which the application is running doesn't have sufficient 
         system privileges to bind to the specified port. (Privilege issues typically occur when <codeph class="+ topic/ph pr-d/codeph ">localPort &lt; 1024</codeph>.)</li><li class="- topic/li ">This DatagramSocket object is already bound.</li><li class="- topic/li ">This DatagramSocket object has been closed.</li></ol>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs when <codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> is not a valid local address.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localPort</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of the port to bind to on the local computer. If <codeph class="+ topic/ph pr-d/codeph ">localPort</codeph>, 
     is set to 0 (the default), the next available system port is bound. Permission to connect to a port 
     number below 1024 is subject to the system security policy.  On Mac and Linux systems, for example, 
     the application must be running with root privileges to connect to ports below 1024.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localAddress</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.0.0.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The IP address on the local machine to bind to. This address can be an
     IPv4 or IPv6 address. If <codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">0.0.0.0</codeph> (the default), 
     the socket listens on all available IPv4 addresses.   
     To listen on all available IPv6 addresses, you must specify "::" as the <codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph>
     argument. To use an IPv6 address, the computer and network must both be  
     configured to support IPv6. Furthermore, a socket bound to an IPv4 address
     cannot connect to a socket with an IPv6 address. Likewise, a socket bound to an IPv6
     address cannot connect to a socket with an IPv4 address. The type of address must match. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Binds this socket to the specified local address and port.
     
     <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">bind()</codeph> method executes synchronously. The bind operation completes 
     before the next line of code is executed.</p>
     
	 </apiDesc><example conref="examples\DatagramSocket.bind.1.as" class="- topic/example "> The following example illustrates various ways to bind a DatagramSocket object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

udpSocket.bind(); //bind to any available port, listen on all IPv4 addresses
udpSocket.bind( 0, "0.0.0.0" ); //same as above
udpSocket.bind( 0, "127.0.0.1" ); //any available port on the localhost address
udpSocket.bind( 8989, "192.168.0.1" ); //port 8989 on a particular IPv4 address
udpSocket.bind( 0, "::" ); //any available port on all IPv6 address
udpSocket.bind( 8989, "::1" ); //port 8989 on the IPv6 localhost address
udpSocket.bind( 8989, "2001:1890:110b:1e19:f06b:72db:7026:3d7a" ); //port 8989 on a particular IPv6 address
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.net:DatagramSocket:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Closes the socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the socket cannot be closed (because of an internal, networking,
     or operating system error), or if the socket is not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Closes the socket. 
     
     <p class="- topic/p ">The socket is disconnected from the remote machine 
     and unbound from the local machine. A closed socket cannot be reused.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:DatagramSocket:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     Connects the socket to a specified remote address and port.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs when <codeph class="+ topic/ph pr-d/codeph ">localPort</codeph> is less than 1 or greater than 65535.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs when <codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> is not a syntactically valid address.
     Or when a default route address ('0.0.0.0' or '::') is used.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs if the socket cannot be connected, such as when <codeph class="+ topic/ph pr-d/codeph ">bind()</codeph> has not 
     been called before the call to <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> and default binding to the remote address family is not possible. 
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">remoteAddress</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The IP address of the remote machine with which to establish 
     a connection. This address can be an IPv4 or IPv6 address.  If <codeph class="+ topic/ph pr-d/codeph ">bind()</codeph> has not 
     been called, the address family of the <codeph class="+ topic/ph pr-d/codeph ">remoteAddress</codeph>, IPv4 or IPv6, is used when calling the 
     default <codeph class="+ topic/ph pr-d/codeph ">bind()</codeph>.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">remotePort</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The port number on the remote machine used to establish a connection. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Connects the socket to a specified remote address and port. 
     
     <p class="- topic/p ">When a datagram socket is "connected," datagram packets can only be sent to and received from 
     the specified target. Packets from other sources are ignored. Connecting a datagram socket is not
     required. Establishing a connection can remove the need to filter out extraneous packets from
     other sources. However, a UDP socket connection is not a persistent network connection (as it
     is for a TCP connection). It is possible that the remote end of the socket does not even exist.</p>
     
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">bind()</codeph> method has not been called, the socket is
     automatically bound to the default local address and port.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:DatagramSocket:receive" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">receive</apiName><shortdesc class="- topic/shortdesc ">
     Enables this DatagramSocket object to receive incoming packets on the bound IP address and port.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Enables this DatagramSocket object to receive incoming packets on the bound IP address and port.
     
     <p class="- topic/p ">The function returns immediately. The DatagramSocket object dispatches a <codeph class="+ topic/ph pr-d/codeph ">data</codeph> event
     when a data packet is received.</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.net:DatagramSocket:receive_data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DatagramSocketDataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">when a UDP packet is received.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">when a UDP packet is received.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:DatagramSocket:send" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">send</apiName><shortdesc class="- topic/shortdesc ">
     Sends packet containing the bytes in the ByteArray using UDP.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs when <codeph class="+ topic/ph pr-d/codeph ">port</codeph> is less than 1 or greater than 65535.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the socket is not connected and <codeph class="+ topic/ph pr-d/codeph ">address</codeph> is not a well-formed IP address.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs:
     <ol class="- topic/ol "><li class="- topic/li ">If <codeph class="+ topic/ph pr-d/codeph ">bind()</codeph> has not been called, and when default binding to the 
         destination address family is not possible.</li><li class="- topic/li ">On some operating systems, an IOError is thrown if the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method is 
     called when an ICMP "destination unreachable" message has already been 
     received from the target host. (Thus, the error is thrown on the second failed attempt to send data, not the first.) Other
     operating systems, such as Windows, disregard these ICMP messages, so no error is thrown.</li></ol>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">when the <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. 
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> is greater than the length of the ByteArray specified in
     <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> or if the amount of data specified to be written by <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> plus
     <codeph class="+ topic/ph pr-d/codeph ">length</codeph> exceeds the data available.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">address</codeph> or <codeph class="+ topic/ph pr-d/codeph ">port</codeph> parameters are specified
     when the socket has already been connected.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">a ByteArray containing the packet data.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The zero-based offset into the <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> ByteArray
     object at which the packet begins.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of bytes in the packet.  The default value of 0 causes
     the entire ByteArray to be sent, starting at the value specified by 
     the <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> parameter.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">address</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The IPv4 or IPv6 address of the remote machine. An address is required
     if one has not already been specified using the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The port number on the remote machine. A value greater than 0 and
     less than 65536 is required if the port has not already been specified using the
     <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method.
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sends packet containing the bytes in the ByteArray using UDP. 
     
     <p class="- topic/p ">If the socket is connected, the packet 
     is sent to the remote address and port specified in the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> 
     method and no destination IP address and port can be specified. If the socket is 
     not connected, the packet is sent to the specified address and port
     and you must supply valid values for <codeph class="+ topic/ph pr-d/codeph ">address</codeph> and <codeph class="+ topic/ph pr-d/codeph ">port</codeph>.  
     If the <codeph class="+ topic/ph pr-d/codeph ">bind()</codeph> method has not been called, the socket is 
     automatically bound to the default local address and port.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> Sending data to a broadcast address is not supported.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:DatagramSocket:bound:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bound</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether this socket object is currently bound to a local address 
     and port.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether this socket object is currently bound to a local address 
     and port.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:DatagramSocket:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether this socket object is currently connected to a remote address 
     and port.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether this socket object is currently connected to a remote address 
     and port.
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> A value of <codeph class="+ topic/ph pr-d/codeph ">true</codeph> does not mean that a remote computer
     is listening on the connected address and port. It only means that this DataGramSocket object
     will only send data to or receive data from that address and port.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link></related-links></apiValue><apiValue id="flash.net:DatagramSocket:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether or not DatagramSocket features are supported in the run-time environment.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether or not DatagramSocket features are supported in the run-time environment.
     
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:DatagramSocket:localAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localAddress</apiName><shortdesc class="- topic/shortdesc ">
     The IP address this socket is bound to on the local machine.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The IP address this socket is bound to on the local machine.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:DatagramSocket:localPort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localPort</apiName><shortdesc class="- topic/shortdesc ">
     The port this socket is bound to on the local machine.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The port this socket is bound to on the local machine.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:DatagramSocket:remoteAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">remoteAddress</apiName><shortdesc class="- topic/shortdesc ">
     The IP address of the remote machine to which this socket is connected.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The IP address of the remote machine to which this socket is connected.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link></related-links></apiValue><apiValue id="flash.net:DatagramSocket:remotePort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">remotePort</apiName><shortdesc class="- topic/shortdesc ">
     The port on the remote machine to which this socket is connected.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The port on the remote machine to which this socket is connected.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetGroupSendResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetGroupSendResult</apiName><shortdesc class="- topic/shortdesc ">
The NetGroupSendResult class is an enumeration of constant values used for the return value of the
Directed Routing methods associated with a NetGroup instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
The NetGroupSendResult class is an enumeration of constant values used for the return value of the
Directed Routing methods associated with a NetGroup instance.

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link><link href="flash.net.xml#NetGroup/sendToNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNeighbor()</linktext></link><link href="flash.net.xml#NetGroup/sendToAllNeighbors()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToAllNeighbors()</linktext></link></related-links><apiValue id="flash.net:NetGroupSendResult:ERROR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ERROR</apiName><shortdesc class="- topic/shortdesc "> 
    Indicates an error occurred (such as no permission) when using a Directed Routing method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">error</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Indicates an error occurred (such as no permission) when using a Directed Routing method.
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetGroupSendResult:NO_ROUTE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NO_ROUTE</apiName><shortdesc class="- topic/shortdesc "> 
    Indicates no neighbor could be found to route the message toward its requested destination.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">no route</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Indicates no neighbor could be found to route the message toward its requested destination.
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetGroupSendResult:SENT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SENT</apiName><shortdesc class="- topic/shortdesc "> 
    Indicates that a route was found for the message and it was forwarded toward its destination.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">sent</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Indicates that a route was found for the message and it was forwarded toward its destination.
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLRequestDefaults" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLRequestDefaults</apiName><shortdesc class="- topic/shortdesc ">
 The URLRequestDefaults class includes static properties that you can set to define 
 default values for the properties of the URLRequest class.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The URLRequestDefaults class includes static properties that you can set to define 
 default values for the properties of the URLRequest class. It also includes a static
 method, <codeph class="+ topic/ph pr-d/codeph ">URLRequestDefaults.setLoginCredentialsForHost()</codeph>, which lets you define 
 default authentication credentials for requests. The URLRequest class defines
 the information to use in an HTTP request. 
 
 <p class="- topic/p ">Any properties set in a URLRequest object override those static properties set for
 the URLRequestDefaults class.</p>
 
 <p class="- topic/p ">URLRequestDefault settings only apply to content in the caller's application domain,
 with one exception: settings made by calling <codeph class="+ topic/ph pr-d/codeph ">URLRequestDefaults.setLoginCredentialsForHost()</codeph>
 apply to all application domains in the currently running application.</p>
 
 <p class="- topic/p ">Only Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup> content running in the application security sandbox can 
 use the URLRequestDefaults class. Other content will result in a SecurityError being thrown when accessing the 
 members or properties of this class.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest" class="- topic/link "><linktext class="- topic/linktext ">URLRequest</linktext></link></related-links><apiOperation id="flash.net:URLRequestDefaults:setLoginCredentialsForHost" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setLoginCredentialsForHost</apiName><shortdesc class="- topic/shortdesc ">
	Sets default user and password credentials for a selected host.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hostname</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The host name to which the user name and password are applied. This
	can be a domain, such as <codeph class="+ topic/ph pr-d/codeph ">"www.example.com"</codeph> or a domain and a port number,
	such as <codeph class="+ topic/ph pr-d/codeph ">"www.example.com:80"</codeph>. Note that <codeph class="+ topic/ph pr-d/codeph ">"example.com"</codeph>,
	<codeph class="+ topic/ph pr-d/codeph ">"www.example.com"</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">"sales.example.com"</codeph> are each considered
	unique hosts. 
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">user</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The default user name to use in request authentication for the specified host.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">password</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The default password to use in request authentication for the specified host.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Sets default user and password credentials for a selected host. These settings 
	apply for URLRequest objects in all application domains of the application,
	not only those in the application domain of the object calling this method
	(whereas the static properties of the URLRequest class apply to the caller's 
	application domain only). This allows content in the entire application 
	(regardless of the content's application domain) to be logged in when another 
	part of the application logs in.
	
	<p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note for applications running on Mac OS:</i> On Mac OS, when you call 
	this method, the application uses these credentials for the specified host 
	until the application is closed, even if you subsequently call
	<codeph class="+ topic/ph pr-d/codeph ">URLRequestDefaults.setLoginCredentialsForHost()</codeph> for the same host. 
	However, if a server rejects the credentials specified by this method, 
	then a subsequent call to the <codeph class="+ topic/ph pr-d/codeph ">URLRequestDefaults.setLoginCredentialsForHost()</codeph> 
	method (for the same host) will be recognized.</p>
	
	<p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> This method does not apply to URLRequest objects used in file upload or 
	RTMP requests.</p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:URLRequestDefaults:authenticate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">authenticate</apiName><shortdesc class="- topic/shortdesc ">
	The default setting for the authenticate property of URLRequest objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The default setting for the <codeph class="+ topic/ph pr-d/codeph ">authenticate</codeph> property of URLRequest objects.
	Setting the <codeph class="+ topic/ph pr-d/codeph ">authenticate</codeph> property in a URLRequest object overrides this default setting.
	
	<p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> This setting does not apply to URLRequest objects used in file upload or 
	RTMP requests.</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/authenticate" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.authenticate</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:cacheResponse:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">cacheResponse</apiName><shortdesc class="- topic/shortdesc ">
	The default setting for the cacheResponse property of URLRequest objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The default setting for the <codeph class="+ topic/ph pr-d/codeph ">cacheResponse</codeph> property of URLRequest objects.
	Setting the <codeph class="+ topic/ph pr-d/codeph ">cacheResponse</codeph> property in a URLRequest object overrides this default setting.
	When set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the default behavior for the AIR application is to use the operating system's 
	HTTP cache. This setting does not apply to URLRequest objects used in file upload or RTMP requests.
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/cacheResponse" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.cacheResponse</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:followRedirects:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">followRedirects</apiName><shortdesc class="- topic/shortdesc ">
	The default setting for the followRedirects property of URLRequest objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The default setting for the <codeph class="+ topic/ph pr-d/codeph ">followRedirects</codeph> property of URLRequest objects.
	Setting the <codeph class="+ topic/ph pr-d/codeph ">followRedirects</codeph> property in a URLRequest object overrides this default setting.
	This setting does not apply to URLRequest objects used in file upload or RTMP requests.
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/followRedirects" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.followRedirects</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:idleTimeout:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">idleTimeout</apiName><shortdesc class="- topic/shortdesc ">
	The default setting for the idleTimeout property of URLRequest objects and HTMLLoader objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The idleTimeout value is negative.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiDefaultValue>0
	
	</apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The default setting for the <codeph class="+ topic/ph pr-d/codeph ">idleTimeout</codeph> property of URLRequest objects and HTMLLoader objects.
	
	<p class="- topic/p ">The idle timeout is the amount of time (in milliseconds) that the client waits for a response from the server, 
	after the connection is established, before abandoning the request.</p>
	
	<p class="- topic/p ">This defines the default idle timeout used by the URLRequest or HTMLLoader object. Setting the <codeph class="+ topic/ph pr-d/codeph ">idleTimeout</codeph> 
	property in a URLRequest object or an HTMLLoader object overrides this default setting.</p>
	
	<p class="- topic/p ">When this property is set to 0 (the default), the runtime uses the default idle timeout value defined by the operating system. 
	The default idle timeout value varies between operating systems (such as Mac OS, Linux, or Windows) and between 
	operating system versions.</p>
	
	<p class="- topic/p ">This setting does not apply to URLRequest objects used in file upload or RTMP requests.</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="../../flash/html/HTMLLoader.html#idleTimeout" class="- topic/link "><linktext class="- topic/linktext ">HTMLLoader.idleTimeout</linktext></link><link href="flash.net.xml#URLRequest/idleTimeout" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.idleTimeout</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:manageCookies:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">manageCookies</apiName><shortdesc class="- topic/shortdesc ">
	The default setting for the manageCookies property of URLRequest objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The default setting for the <codeph class="+ topic/ph pr-d/codeph ">manageCookies</codeph> property of URLRequest objects.
	Setting the <codeph class="+ topic/ph pr-d/codeph ">manageCookies</codeph> property in a URLRequest object overrides this default setting.
	
	<p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> This setting does not apply to URLRequest objects used in file upload or 
	RTMP requests.</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/manageCookies" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.manageCookies</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:useCache:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">useCache</apiName><shortdesc class="- topic/shortdesc ">
	The default setting for the useCache property of URLRequest objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The default setting for the <codeph class="+ topic/ph pr-d/codeph ">useCache</codeph> property of URLRequest objects.
	Setting the <codeph class="+ topic/ph pr-d/codeph ">useCache</codeph> property in a URLRequest object overrides this default setting.
	This setting does not apply to URLRequest objects used in file upload or RTMP requests.
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/useCache" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.useCache</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:userAgent:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">userAgent</apiName><shortdesc class="- topic/shortdesc ">
	The default setting for the userAgent property of URLRequest objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The default setting for the <codeph class="+ topic/ph pr-d/codeph ">userAgent</codeph> property of URLRequest objects.
	Setting the <codeph class="+ topic/ph pr-d/codeph ">userAgent</codeph> property in a URLRequest object overrides this 
	default setting.
	
	<p class="- topic/p ">This is also the default user agent string for all HTMLLoader objects (used 
	when you call the <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> method of the HTMLLoader object). Setting 
	the <codeph class="+ topic/ph pr-d/codeph ">userAgent</codeph> property of the HTMLLoader object overrides the 
	<codeph class="+ topic/ph pr-d/codeph ">URLRequestDefaults.userAgent</codeph> setting.</p>
	
	<p class="- topic/p ">This default value varies depending on the runtime operating system (such as Mac OS, Linux or Windows), 
	the runtime language, and the runtime version, as in the following examples:</p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/526.9+ (KHTML, like Gecko) AdobeAIR/1.5"</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"Mozilla/5.0 (Windows; U; en) AppleWebKit/526.9+ (KHTML, like Gecko) AdobeAIR/1.5"</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/526.9+ (KHTML, like Gecko) AdobeAIR/1.5"</codeph></li></ul>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/userAgent" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequest.userAgent</linktext></link><link href="../../flash/html/HTMLLoader.html#userAgent" class="- topic/link "><linktext class="- topic/linktext ">flash.html.HTMLLoader.userAgent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetGroup" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetGroup</apiName><shortdesc class="- topic/shortdesc ">
Instances of the NetGroup class represent membership in an RTMFP group.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
Instances of the NetGroup class represent membership in an RTMFP group. Use this class
to do the following:

<ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Monitor Quality of Service</b>. The <codeph class="+ topic/ph pr-d/codeph ">info</codeph> property contains a NetGroupInfo object whose properties provide
QoS statistics for this group.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Posting</b>. Call <codeph class="+ topic/ph pr-d/codeph ">post()</codeph> to broadcast ActionScript messages to all members of a group.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Direct routing</b>. Call <codeph class="+ topic/ph pr-d/codeph ">sendToNearest()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">sendToNeighbor()</codeph>, and
<codeph class="+ topic/ph pr-d/codeph ">sendToAllNeighbors()</codeph> to send a short data message to a specific member of a peer-to-peer group.
The source and the destination do not need to have a direct connection.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Object replication</b>. Call <codeph class="+ topic/ph pr-d/codeph ">addHaveObjects()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">removeHaveObjects()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">addWantObjects()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">removeWantObjects()</codeph>,
<codeph class="+ topic/ph pr-d/codeph ">writeRequestedObject()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">denyRequestedObject()</codeph> to break up large data into pieces and replicate it to all nodes in a peer-to-peer group.</li></ul>

<p class="- topic/p ">In the client-side NetGroup class, the NetConnection dispatches the following events:</p>

<ul class="- topic/ul "><li class="- topic/li ">NetGroup.Connect.Success</li><li class="- topic/li ">NetGroup.Connect.Failed</li><li class="- topic/li ">NetGroup.Connect.Rejected</li></ul>

<p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">info.group</codeph> property of the event object contains a reference to the event source (the NetGroup).
The NetGroup dispatches all other events. In the server-side NetGroup class, the NetGroup dispatches all events.</p>

<p class="- topic/p ">For information about peer-assisted networking, see <xref href="http://www.flashrealtime.com/basics-of-p2p-in-flash/" scope="external" class="- topic/xref ">
Basics of P2P in Flash</xref> by Adobe Evangelist Tom Krcha. For information about using groups with peer-assisted networking, see
<xref href="http://tv.adobe.com/watch/max-2009-develop/social-media-experiences-with-flash-media-and-rtmfp/" scope="external" class="- topic/xref ">Social Media Experiences with Flash Media
and RTMFP</xref>, also by Tom Krcha.</p>

<p class="- topic/p ">For information about the technical details behind peer-assisted networking, see <xref href="http://tv.adobe.com/watch/max-2009-develop/p2p-on-the-flash-platform-with-rtmfp" scope="external" class="- topic/xref ">P2P on the Flash Platform with RTMFP</xref> by Adobe Computer Scientist Matthew Kaufman.</p>

</apiDesc><example conref="examples\NetGroupExample.as" class="- topic/example "> This is a simple video chat application that uses peer-to-peer networking.
 The application connects over RTMFP to Flash Media Server.
 The server keeps the client applications' fingerprints and manages the peer group as clients connect. However, all data is sent between clients (peers) --
 data is not sent back to the server.
 <p class="- topic/p ">When you run the application, you can enter any group name into the text input field. The GroupSpecifier class uses the name (along with any
 GroupSpecifier properties you've set) to create a string which is the perpetually unique name of the group. To connect another client to the group, that client must use
 the same group name. For example, if client A uses the group name "firstmesh", other clients that want to communicate with client A must also use the group
 name "firstmesh". If client B uses the group name "kite", it will connect successfully, but it will create a new group and won't be able to communicate with
 client A or anyone in the "firstmesh" group.</p>

 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="100%" height="100%" applicationComplete="OnApplicationComplete()"&gt;
    &lt;mx:Script&gt;
        &lt;![CDATA[
            private var netConnection:NetConnection = null;
            private var netStream:NetStream = null;
            private var netGroup:NetGroup = null;
            private var video:Video = null;
            private var sequenceNumber:uint = 0;
            private var resizeTimer:Timer = null;

            private const SERVER:String = "rtmfp://fms.example.com/someapp";

            [Bindable] private var connected:Boolean = false;
            [Bindable] private var joinedGroup:Boolean = false;

            private function OnApplicationComplete():void
            {
                userName.text = "user " + int(Math.random() * 65536);

                groupName.text = "channel" + (int(Math.random() * 899) + 101);

                resizeTimer = new Timer(2000.0);
                resizeTimer.addEventListener(TimerEvent.TIMER, DoResizeVideo);
                resizeTimer.start();
            }

            private function StatusMessage(msg:Object):void
            {
                statusLog.text += msg;
                statusLog.verticalScrollPosition = statusLog.textHeight;
                statusLog.validateNow();
            }

            private function NetStatusHandler(e:NetStatusEvent):void
            {
                StatusMessage(e.info.code);
                switch(e.info.code)
                {
                case "NetConnection.Connect.Success":
                    OnConnect();
                    break;

                case "NetConnection.Connect.Closed":
                case "NetConnection.Connect.Failed":
                case "NetConnection.Connect.Rejected":
                case "NetConnection.Connect.AppShutdown":
                case "NetConnection.Connect.InvalidApp":
                    OnDisconnect();
                    break;

                case "NetStream.Connect.Success": // e.info.stream
                    OnNetStreamConnect();
                    break;

                case "NetStream.Connect.Rejected": // e.info.stream
                case "NetStream.Connect.Failed": // e.info.stream
                    DoDisconnect();
                    break;

                case "NetGroup.Connect.Success": // e.info.group
                    OnNetGroupConnect();
                    break;

                case "NetGroup.Connect.Rejected": // e.info.group
                case "NetGroup.Connect.Failed": // e.info.group
                    DoDisconnect();
                    break;

                case "NetGroup.Posting.Notify": // e.info.message, e.info.messageID
                    OnPosting(e.info.message);
                    break;


                case "NetStream.MulticastStream.Reset":
                case "NetStream.Buffer.Full":
                    DoResizeVideo();
                    break;

                case "NetGroup.SendTo.Notify": // e.info.message, e.info.from, e.info.fromLocal
                case "NetGroup.LocalCoverage.Notify": //
                case "NetGroup.Neighbor.Connect": // e.info.neighbor
                case "NetGroup.Neighbor.Disconnect": // e.info.neighbor
                case "NetGroup.MulticastStream.PublishNotify": // e.info.name
                case "NetGroup.MulticastStream.UnpublishNotify": // e.info.name
                case "NetGroup.Replication.Fetch.SendNotify": // e.info.index
                case "NetGroup.Replication.Fetch.Failed": // e.info.index
                case "NetGroup.Replication.Fetch.Result": // e.info.index, e.info.object
                case "NetGroup.Replication.Request": // e.info.index, e.info.requestID
                default:
                    break;
                }
            }

            private function DoConnect():void
            {
                StatusMessage("Connecting to \"" + SERVER + "\" ...\n");
                netConnection = new NetConnection();
                netConnection.addEventListener(NetStatusEvent.NET_STATUS, NetStatusHandler);
                netConnection.connect(SERVER);
            }

            private function OnConnect():void
            {
                var groupSpecifier:GroupSpecifier;

                StatusMessage("Connected\n");
                connected = true;

                groupSpecifier = new GroupSpecifier("max2009lab/" + groupName.text);
                groupSpecifier.multicastEnabled = true;
                groupSpecifier.postingEnabled = true;
                groupSpecifier.serverChannelEnabled = true;

                netStream = new NetStream(netConnection, groupSpecifier.groupspecWithAuthorizations());
                netStream.addEventListener(NetStatusEvent.NET_STATUS, NetStatusHandler);

                netGroup = new NetGroup(netConnection, groupSpecifier.groupspecWithAuthorizations());
                netGroup.addEventListener(NetStatusEvent.NET_STATUS, NetStatusHandler);

                StatusMessage("Join \"" + groupSpecifier.groupspecWithAuthorizations() + "\"\n");
            }

            private function OnNetStreamConnect():void
            {
                netStream.client = this;

                var mic:Microphone = Microphone.getMicrophone();
                if(mic)
                {
                    mic.codec = SoundCodec.SPEEX;
                    mic.setSilenceLevel(0);

                    netStream.attachAudio(mic);

                    StatusMessage("got microphone\n");
                }

                var camera:Camera = Camera.getCamera();
                if(camera)
                {
                    camera.setMode(320, 240, 10);
                    camera.setQuality(30000, 0);
                    camera.setKeyFrameInterval(15);

                    videoDisplay.attachCamera(camera);
                    videoDisplay.maintainAspectRatio = true;

                    netStream.attachCamera(camera);

                    StatusMessage("got camera\n");
                }

                netStream.publish("stream");
            }

            private function OnNetGroupConnect():void
            {
                joinedGroup = true;
            }

            private function DoDisconnect():void
            {
                if(netConnection)
                    netConnection.close();
                videoDisplay.attachCamera(null);
            }

            private function OnDisconnect():void
            {
                StatusMessage("Disconnected\n");
                netConnection = null;
                netStream = null;
                netGroup = null;
                connected = false;
                joinedGroup = false;
            }

            private function ClearChatText():void
            {
                chatText.text = "";
            }

            private function DoPost():void
            {
                var message:Object = new Object;

                message.user = userName.text;
                message.text = chatText.text;
                message.sequence = sequenceNumber++;
                message.sender = netConnection.nearID;

                netGroup.post(message);

                StatusMessage("==&gt; " + chatText.text + "\n");

                chatText.callLater(ClearChatText);
            }

            private function OnPosting(message:Object):void
            {
                StatusMessage("&lt;" + message.user + "&gt; " + message.text + "\n");
            }

            private function DoResizeVideo(ignored:* = null):void
            {
                if(video)
                {
                    if( (0 == video.videoHeight)
                     || (0 == video.videoWidth)
                    )
                    {
                        video.height = videoDisplay.height;
                        video.width = videoDisplay.width;
                        video.x = 0;
                        video.y = 0;
                    }
                    else
                    {
                        var videoAspect:Number = Number(video.videoWidth) / Number(video.videoHeight);
                        var displayAspect:Number = Number(videoDisplay.width) / Number(videoDisplay.height);
                        var adjustFactor:Number;

                        if(videoAspect &gt;= displayAspect) // video is wider than display
                        {
                            adjustFactor = Number(video.videoWidth) / Number(videoDisplay.width);
                            video.width = videoDisplay.width;
                            video.height = int(Number(video.videoHeight) / adjustFactor);
                            video.x = 0;
                            video.y = int((videoDisplay.height - video.height) / 2);
                        }
                        else
                        {
                            adjustFactor = Number(video.videoHeight) / Number(videoDisplay.height);
                            video.height = videoDisplay.height;
                            video.width = int(Number(video.videoWidth) / adjustFactor);
                            video.x = int((videoDisplay.width - video.width) / 2);
                            video.y = 0;
                        }
                    }
                }
            }

            public function onPlayStatus(info:Object):void {}
            public function onMetaData(info:Object):void {}
            public function onCuePoint(info:Object):void {}
            public function onTextData(info:Object):void {}

            public function ValidateConnectAllowed(isConnected:Boolean, groupNameText:String):Boolean
            {
                return (!isConnected) &amp;&amp; (groupNameText.length &gt; 0);
            }
        ]]&gt;
    &lt;/mx:Script&gt;

    &lt;mx:VBox top="10" right="10" left="10" bottom="10" verticalGap="6"&gt;
        &lt;mx:HBox width="100%"&gt;
            &lt;mx:Text text="Group:"/&gt;
            &lt;mx:TextInput id="groupName" width="100%" text="default" enabled="{!connected}"/&gt;
            &lt;mx:Button label="Connect" click="DoConnect()" enabled="{ValidateConnectAllowed(connected, groupName.text)}" /&gt;
            &lt;mx:Button label="Disconnect" click="DoDisconnect()" enabled="{connected}" /&gt;
        &lt;/mx:HBox&gt;
        &lt;mx:VideoDisplay id="videoDisplay" width="320" height="240" resize="DoResizeVideo()"/&gt;
        &lt;mx:TextArea id="statusLog" width="100%" height="100%"/&gt;
        &lt;mx:HBox width="100%"&gt;
            &lt;mx:TextInput id="userName" width="160" /&gt;
            &lt;mx:TextInput id="chatText" width="100%" enabled="{joinedGroup}" enter="DoPost()"/&gt;
        &lt;/mx:HBox&gt;
    &lt;/mx:VBox&gt;

&lt;/mx:Application&gt;
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier" class="- topic/link "><linktext class="- topic/linktext ">flash.net.GroupSpecifier</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent info.code values starting with "NetGroup."</linktext></link></related-links><adobeApiEvent id="flash.net:NetGroup_flash.events.NetStatusEvent.NET_STATUS_netStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">netStatus</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a NetGroup object is reporting its status or error condition.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.NetStatusEvent.NET_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.NetStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a NetGroup object is reporting its status or error condition.
 The <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event contains an <codeph class="+ topic/ph pr-d/codeph ">info</codeph> property.
 The <codeph class="+ topic/ph pr-d/codeph ">info</codeph> property is an object that contains information about the event,
 such as whether a connection attempt succeeded or failed.
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.net:NetGroup:NetGroup" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NetGroup</apiName><shortdesc class="- topic/shortdesc ">
     Constructs a NetGroup on the specified NetConnection object and joins it to the group
     specified by groupspec.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetGroup, constructor
     </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The NetConnection instance is not connected.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The groupspec is invalid.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">connection</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetConnection</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A NetConnection object.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">groupspec</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string specifying the RTMFP peer-to-peer group to join, including its name, capabilities,
     restrictions, and the authorizations of this member.
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     new NetGroup(myConnection, myGroupSpecifier.groupspecWithAuthorizations());
     </codeblock>
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Constructs a new NetGroup on the specified NetConnection object and joins it to the specified group.
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Constructs a NetGroup on the specified NetConnection object and joins it to the group
     specified by <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph>.
     
     <p class="- topic/p ">In most cases, a <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> has the potential for using the network uplink on the local system.
     When a NetStream or NetGroup object is constructed with a groupspec, Flash Player displays a Privacy Dialog.
     The dialog asks whether Flash Player can use the connection to share data with a user's peers.
     If the user clicks "Allow for this domain", the dialog is not displayed the next time the user connects to this application.
     If a user does not allow peer-assisted networking, all peer features within the group (posting, directed routing, and object replication, and multicast)
     are disabled. If permission is allowed, a NetStatusEvent is sent to the NetConnection's event listener
     with <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Connect.Success</codeph> in the <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property of the <codeph class="+ topic/ph pr-d/codeph ">info</codeph> object.
     If permission is denied, the <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Connect.Rejected</codeph>.
     Until a <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Connect.Success</codeph> event is received, an exception is thrown
     if you try to call any method of the NetGroup object.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> When a client subscribes to a native-IP multicast stream, the security dialog is not displayed.</p>
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Connect_Success" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Connect.Success"</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Connect_Rejected" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Connect.Rejected"</linktext></link><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection</linktext></link><link href="flash.net.xml#GroupSpecifier" class="- topic/link "><linktext class="- topic/linktext ">flash.net.GroupSpecifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:NetGroup:addHaveObjects" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addHaveObjects</apiName><shortdesc class="- topic/shortdesc ">
     Adds objects from startIndex through endIndex, to the set of objects this node
     advertises to neighbors as objects for which it fulfills requests.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number passed to this method is less than 0
     or greater than 9007199254740992.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The beginning of the range of object indices to add to the Have set.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The end of the range of object indices to add to the Have set.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Adds objects to the set of objects this node advertises to neighbors as objects for which it fulfills requests.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Adds objects from <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> through <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph>, to the set of objects this node
     advertises to neighbors as objects for which it fulfills requests. By default,
     the Have set is empty. Indices must be whole numbers from 0 through 9007199254740992.
     
     <p class="- topic/p ">For more information about object replication, 
     see <xref href="http://www.adobe.com/go/learn_fms_replicate_en" class="- topic/xref ">"Replicate an object within a group"</xref> in <i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>.</p>
     
     <p class="- topic/p ">This method sends a NetStatusEvent to the NetGroup's event listener with <codeph class="+ topic/ph pr-d/codeph ">"NetGroup.Replication.Request"</codeph>
     in the <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property of the <codeph class="+ topic/ph pr-d/codeph ">info</codeph> object. </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">NOTE:</b>  Test for the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> event before calling this method.</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/removeHaveObjects()" class="- topic/link "><linktext class="- topic/linktext ">removeHaveObjects()</linktext></link><link href="flash.net.xml#NetGroup/writeRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">writeRequestedObject()</linktext></link><link href="flash.net.xml#NetGroup/denyRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">denyRequestedObject()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Replication_Request" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Replication.Request"</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:addMemberHint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addMemberHint</apiName><shortdesc class="- topic/shortdesc ">
     Manually adds a record specifying that peerID is a member of the group.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">TRUE for success, FALSE for failure.
     
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">peerID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The peerID to add to the set of potential neighbors.
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Manually adds a record specifying that peerID is a member of the group, but doesn't necessarily connect immediately.
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Manually adds a record specifying that <codeph class="+ topic/ph pr-d/codeph ">peerID</codeph> is a member of the group.
     An immediate connection to it is attempted only if it is needed for the topology.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">addNeighbor()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:addNeighbor" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addNeighbor</apiName><shortdesc class="- topic/shortdesc ">
     Manually adds a neighbor by immediately connecting directly to the specified peerID, which must already be
     in this group.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">TRUE for success, FALSE for failure.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">peerID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The peerID to which to immediately connect.
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Manually adds a neighbor by immediately connecting directly to the specified peerID.
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Manually adds a neighbor by immediately connecting directly to the specified <codeph class="+ topic/ph pr-d/codeph ">peerID</codeph>, which must already be
     in this group. This direct connection may later be dropped if it is not needed for the topology.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addMemberHint()" class="- topic/link "><linktext class="- topic/linktext ">addMemberHint()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:addWantObjects" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addWantObjects</apiName><shortdesc class="- topic/shortdesc ">
     Adds objects from startIndex through endIndex, to the set of objects to retrieve.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number passed to this method is less than 0
     or greater than 9007199254740992.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The beginning of the range of object indices to add to the Want set.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The end of the range of object indices to add to the Want set.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Adds objects to the set of objects to retrieve.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Adds objects from <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> through <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph>, to the set of objects to retrieve.
     Indices must be whole numbers from 0 through 9007199254740992.
     By default, the Want set is empty.
     
     <p class="- topic/p ">For more information about object replication, 
     see <xref href="http://www.adobe.com/go/learn_fms_replicate_en" class="- topic/xref ">"Replicate an object within a group"</xref> in <i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>.</p>
     
     <p class="- topic/p ">This method sends a NetStatusEvent to the NetGroup's event listener with
     <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Fetch.SendNotify</codeph>
     in the <codeph class="+ topic/ph pr-d/codeph ">info.code</codeph> property. This event is followed by an <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Fetch.Failed</codeph>
     or <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Fetch.Result</codeph> event.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">NOTE:</b>  Test for the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> event before calling this method.</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/removeWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">removeWantObjects()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Replication_Fetch_SendNotify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Replication.Fetch.SendNotify"</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Replication_Fetch_Failed" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Replication.Fetch.Failed"</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Replication_Fetch_Result" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Replication.Fetch.Result"</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Disconnect from the group and close this NetGroup.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Disconnect from the group and close this NetGroup. This NetGroup is not usable after calling this method.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetGroup:convertPeerIDToGroupAddress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">convertPeerIDToGroupAddress</apiName><shortdesc class="- topic/shortdesc ">
     Converts a peerID to a group address suitable for use with the sendToNearest() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The group address for the peerID.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">peerID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The peerID to convert.
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Converts a peerID to a group address suitable for use with the sendToNearest() method.
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Converts a peerID to a group address suitable for use with the <codeph class="+ topic/ph pr-d/codeph ">sendToNearest()</codeph> method.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/farID" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.farID</linktext></link><link href="flash.net.xml#NetConnection/nearID" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.nearID</linktext></link><link href="flash.net.xml#NetStream/farID" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.farID</linktext></link><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">sendToNearest()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:denyRequestedObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">denyRequestedObject</apiName><shortdesc class="- topic/shortdesc ">
     Denies a request received in a NetStatusEvent
     NetGroup.Replication.Request for an object previously advertised with
     addHaveObjects().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">requestID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The request identifier as given in the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Request</codeph> event.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Denies a request for an object previously advertised.
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Denies a request received in a NetStatusEvent
     <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Request</codeph> for an object previously advertised with
     <codeph class="+ topic/ph pr-d/codeph ">addHaveObjects()</codeph>. The requestor can request this object again unless
     or until it is withdrawn from the Have set.
     
     <p class="- topic/p ">For more information about object replication, 
     see <xref href="http://www.adobe.com/go/learn_fms_replicate_en" class="- topic/xref ">"Replicate an object within a group"</xref> in <i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">NOTE:</b>  Test for the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> event before calling this method.</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addHaveObjects()" class="- topic/link "><linktext class="- topic/linktext ">addHaveObjects()</linktext></link><link href="flash.net.xml#NetGroup/writeRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">writeRequestedObject()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Replication_Request" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Replication.Request"</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:post" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">post</apiName><shortdesc class="- topic/shortdesc ">
     Sends a message to all members of a group.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The messageID of the message if posted, or <codeph class="+ topic/ph pr-d/codeph ">null</codeph> on error. The messageID is the hexadecmial of the SHA256 of the raw
     bytes of the serialization of the message.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The message to send to all other members of the group.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sends a message to all members of a group. To call this method,
     the <codeph class="+ topic/ph pr-d/codeph ">GroupSpecifier.postingEnabled</codeph> property must be <codeph class="+ topic/ph pr-d/codeph ">true</codeph> in the groupspec passed to the
     NetGroup constructor. For more information, see <xref href="http://www.adobe.com/go/learn_fms_post_en" class="- topic/xref ">"Post messages to a group"</xref> 
     in <i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>.
     
     <p class="- topic/p ">All messages must be unique. A message that is identical to one posted
     earlier might not be propagated. Use a sequence number to make messages unique.</p>
     
     <p class="- topic/p ">Message delivery is not ordered. Message delivery is not guaranteed.</p>
     
     <p class="- topic/p ">Messages are serialized in AMF. The message can be one of the following types:
     an Object, an int, a Number, or a String. The message cannot be a MovieClip.</p>
     
     <p class="- topic/p ">This method sends a NetStatusEvent to the NetGroup's event listener
     with <codeph class="+ topic/ph pr-d/codeph ">"NetGroup.Posting.Notify"</codeph> in the <codeph class="+ topic/ph pr-d/codeph ">info.code</codeph> property. The <codeph class="+ topic/ph pr-d/codeph ">"NetGroup.Posting.Notify"</codeph> event
     is dispatched to the NetGroup on both the client and the server.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">NOTE:</b>  Test for the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> event before calling this method.</p> 
     
     </apiDesc><example conref="examples\NetGroupPostExample.as" class="- topic/example "> This is a simple text chat application that uses peer-to-peer networking.
 The application connects over RTMFP to Flash Media Server.
 The server keeps the client applications' fingerprints and manages the peer group as clients connect. However, all data is sent between clients (peers) --
 data is not sent back to the server.
 <p class="- topic/p ">When you run the application, you can enter any group name into the text input field. The GroupSpecifier class uses the name (along with any
 GroupSpecifier properties you've set) to create a string which is the perpetually unique name of the group. To connect another client to the group, that client must use
 the same group name. For example, if client A uses the group name "firstmesh", other clients that want to communicate with client A must also use the group
 name "firstmesh". If client B uses the group name "kite", it will connect successfully, but it will create a new group and won't be able to communicate with
 client A or anyone in the "firstmesh" group.</p>
 <p class="- topic/p ">To run this example, add a Button, a Label, a TextInput, and a TextArea component to the Library in Flash Pro.</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">



package  {

    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.events.MouseEvent;
    import flash.events.NetStatusEvent;
    import fl.events.ComponentEvent;
    import fl.controls.Label;
    import fl.controls.Button;
    import fl.controls.TextInput;
    import fl.controls.TextArea;
    import flash.text.TextFieldAutoSize;
    import flash.net.*;

    public class NetGroupPostExample extends Sprite{

        private var connectButton:Button;
        private var disconnectButton:Button;
        private var groupNameText:TextInput;
        private var userNameText:TextInput;
        private var chatText:TextInput;
        private var statusLog:TextArea;
        private var groupLabel:Label;
        private var userLabel:Label;

        private var netConnection:NetConnection = null;
        private var netGroup:NetGroup = null;
        private var sequenceNumber:uint = 0;
        private var connected:Boolean = false;
        private var joinedGroup:Boolean = false;

        private const SERVER:String = "rtmfp://fms.example.com/someapp";

        public function NetGroupPostExample() {
            DoUI();
        }

        // Writes messages to the TextArea.
        private function StatusMessage(msg:Object):void{
            statusLog.text += msg;
            statusLog.verticalScrollPosition = statusLog.textHeight;
            statusLog.validateNow();
        }

        // Handles all NetStatusEvents for the NetConnection and the NetGroup.
        // This code includes cases it doesn't handle so you can see the cases
        // and their info objects for learning purposes.
        private function NetStatusHandler(e:NetStatusEvent):void{
            StatusMessage(e.info.code + "\n");
            switch(e.info.code){
                case "NetConnection.Connect.Success":
                    connectButton.enabled = false;
                    disconnectButton.enabled = true;
                    OnConnect();
                    break;

                case "NetConnection.Connect.Closed":
                    OnDisconnect();
                    break;

                case "NetGroup.Connect.Success": // e.info.group
                    OnNetGroupConnect();
                    break;

                case "NetGroup.Connect.Rejected": // e.info.group
                case "NetGroup.Connect.Failed": // e.info.group
                    break;

                case "NetGroup.Posting.Notify": // e.info.message, e.info.messageID
                    OnPosting(e.info.message);
                    break;

                case "NetStream.MulticastStream.Reset":
                case "NetStream.Buffer.Full":
                    break;

                case "NetGroup.SendTo.Notify": // e.info.message, e.info.from, e.info.fromLocal
                case "NetGroup.LocalCoverage.Notify": //
                case "NetGroup.Neighbor.Connect": // e.info.neighbor
                case "NetGroup.Neighbor.Disconnect": // e.info.neighbor
                case "NetGroup.MulticastStream.PublishNotify": // e.info.name
                case "NetGroup.MulticastStream.UnpublishNotify": // e.info.name
                case "NetGroup.Replication.Fetch.SendNotify": // e.info.index
                case "NetGroup.Replication.Fetch.Failed": // e.info.index
                case "NetGroup.Replication.Fetch.Result": // e.info.index, e.info.object
                case "NetGroup.Replication.Request": // e.info.index, e.info.requestID
                default:
                    break;
                }
            }
        // Creates a NetConnection to Flash Media Server if the app isn't already connected
        // and if there's a group name in the TextInput field.
        private function DoConnect(e:MouseEvent):void{
            if(!connected &amp;&amp; (groupNameText.length &gt; 0)){
                StatusMessage("Connecting to \"" + SERVER + "\" ...\n");
                netConnection = new NetConnection();
                netConnection.addEventListener(NetStatusEvent.NET_STATUS, NetStatusHandler);
                // To connect to Flash Media Server, pass the server name.
                netConnection.connect(SERVER);
            }
            else
            {
                StatusMessage("Enter a group name");
            }
        }

        // Called in the "NetConnection.Connect.Success" case in the NetStatusEvent handler.
        private function OnConnect():void{

            StatusMessage("Connected\n");
            connected = true;

            // Create a GroupSpecifier object to pass to the NetGroup constructor.
            // The GroupSpecifier determines the properties of the group
            var groupSpecifier:GroupSpecifier;
            groupSpecifier = new GroupSpecifier("aslrexample/" + groupNameText.text);
            groupSpecifier.postingEnabled = true;
            groupSpecifier.serverChannelEnabled = true;

            netGroup = new NetGroup(netConnection, groupSpecifier.groupspecWithAuthorizations());
            netGroup.addEventListener(NetStatusEvent.NET_STATUS, NetStatusHandler);

            StatusMessage("Join \"" + groupSpecifier.groupspecWithAuthorizations() + "\"\n");

        }

        private function OnNetGroupConnect():void{
            joinedGroup = true;
        }

        private function DoDisconnect(e:MouseEvent):void{
            if(netConnection){
                netConnection.close();
            }
        }

        private function OnDisconnect():void{
            StatusMessage("Disconnected\n");
            netConnection = null;
            netGroup = null;
            connected = false;
            joinedGroup = false;
            connectButton.enabled = true;
            disconnectButton.enabled = false;
        }

        private function ClearChatText():void{
            chatText.text = "";
        }

        // Called when you the chatText field has focus and you press Enter.
        private function DoPost(e:ComponentEvent):void{
            if(joinedGroup){
                var message:Object = new Object;
                message.user = userNameText.text;
                message.text = chatText.text;
                message.sequence = sequenceNumber++;
                message.sender = netConnection.nearID;

                netGroup.post(message);
                StatusMessage("==&gt; " + chatText.text + "\n");
            } else {
                StatusMessage("Click Connect before sending a chat message");
            }
            ClearChatText();
        }

        private function OnPosting(message:Object):void{
            StatusMessage("&lt;" + message.user + "&gt; " + message.text + "\n");
        }

        private function DoUI():void {

            groupLabel = new Label();
            groupLabel.move(20, 10);
            groupLabel.autoSize = TextFieldAutoSize.LEFT
            groupLabel.text = "Group name:"
            addChild(groupLabel);

            groupNameText = new TextInput();
            groupNameText.move(90, 10);
            groupNameText.text = "channel" + (int(Math.random() * 899) + 101);
            addChild(groupNameText);

            connectButton = new Button();
            connectButton.addEventListener(MouseEvent.CLICK, DoConnect);
            connectButton.move(205, 10);
            connectButton.label = "Connect";
            addChild(connectButton);

            disconnectButton = new Button();
            disconnectButton.addEventListener(MouseEvent.CLICK, DoDisconnect);
            disconnectButton.move(310, 10);
            disconnectButton.label = "Disconnect";
            disconnectButton.enabled = false;
            addChild(disconnectButton);

            statusLog = new TextArea();
            statusLog.move(30, 38);
            statusLog.width = 360;
            statusLog.height = 215;
            statusLog.editable = false;
            addChild(statusLog);

            userLabel = new Label();
            userLabel.move(20, 270);
            userLabel.autoSize = TextFieldAutoSize.LEFT
            userLabel.text = "User name:"
            addChild(userLabel);

            userNameText = new TextInput();
            userNameText.move(80, 270);
            userNameText.text = "user " + int(Math.random() * 65536);
            addChild(userNameText);

            chatText = new TextInput();
            chatText.addEventListener(ComponentEvent.ENTER, DoPost);
            chatText.move(185, 270);
            chatText.maxChars = 255;
            chatText.width = 215;
            addChild(chatText);

        }

        public function onPlayStatus(info:Object):void {}
        public function onMetaData(info:Object):void {}
        public function onCuePoint(info:Object):void {}
        public function onTextData(info:Object):void {}

    }

}




</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Posting_Notify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Posting.Notify"</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:removeHaveObjects" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeHaveObjects</apiName><shortdesc class="- topic/shortdesc ">
     Removes objects from startIndex through endIndex, from the set of objects this node
     advertises to neighbors as objects for which it fulfills requests.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number passed to this method is less than 0
     or greater than 9007199254740992.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The beginning of the range of object indices to remove from the Have set.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The end of the range of object indices to remove from the Have set.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Removes objects from the set of objects this node advertises to neighbors as objects for which it fulfills requests.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Removes objects from <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> through <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph>, from the set of objects this node
     advertises to neighbors as objects for which it fulfills requests.
     Indices must be whole numbers from 0 through 9007199254740992.
     
     <p class="- topic/p ">For more information about object replication, 
     see <xref href="http://www.adobe.com/go/learn_fms_replicate_en" class="- topic/xref ">"Replicate an object within a group"</xref> in <i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">NOTE:</b>  Test for the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> event before calling this method.</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addHaveObjects()" class="- topic/link "><linktext class="- topic/linktext ">addHaveObjects()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:removeWantObjects" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeWantObjects</apiName><shortdesc class="- topic/shortdesc ">
     Removes objects from startIndex through endIndex, from the set of objects to retrieve.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number passed to this method is less than 0
     or greater than 9007199254740992.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The beginning of the range of object indices to remove from the Want set.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The end of the range of object indices to remove from the Want set.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Removes objects from the set of objects to retrieve.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Removes objects from <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> through <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph>, from the set of objects to retrieve.
     Indices must be whole numbers from 0 through 9007199254740992.
     
     <p class="- topic/p ">For more information about object replication, 
     see <xref href="http://www.adobe.com/go/learn_fms_replicate_en" class="- topic/xref ">"Replicate an object within a group"</xref> in <i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">NOTE:</b>  Test for the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> event before calling this method.</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">addWantObjects()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:sendToAllNeighbors" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sendToAllNeighbors</apiName><shortdesc class="- topic/shortdesc ">
     Sends a message to all neighbors.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A property of enumeration class NetGroupSendResult indicating the success or failure of the send.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The message to send.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sends a message to all neighbors.  Returns <codeph class="+ topic/ph pr-d/codeph ">NetGroupSendResult.SENT</codeph> if at least one neighbor was selected.
     
     <p class="- topic/p ">For more information about routing messages, see
     <xref href="http://www.adobe.com/go/learn_fms_direct_routing_en" class="- topic/xref ">"Route messages directly to a peer"</xref> in <i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>.</p>
     
     <p class="- topic/p ">When a node receives a message, a NetStatusEvent is sent to the NetGroup's event listener
     with <codeph class="+ topic/ph pr-d/codeph ">NetGroup.SendTo.Notify</codeph>
     in the <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property of the <codeph class="+ topic/ph pr-d/codeph ">info</codeph> object. </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">NOTE:</b>  Test for the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> event before calling this method.</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">sendToNeighbor()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_SendTo_Notify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.SendTo.Notify"</linktext></link><link href="flash.net.xml#NetGroupSendResult" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupSendResult</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:sendToNearest" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sendToNearest</apiName><shortdesc class="- topic/shortdesc ">
     Sends a message to the neighbor (or local node) nearest to the specified group address.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A property of enumeration class NetGroupSendResult indicating the success or failure of the send.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The message to send.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">groupAddress</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The group address toward which to route the message.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sends a message to the neighbor (or local node) nearest to the specified group address.
     Considers neighbors from the entire ring. Returns <codeph class="+ topic/ph pr-d/codeph ">NetGroupSendResult.SENT</codeph> if the message
     was successfully sent toward its destination. 
     
     <p class="- topic/p ">For more information about routing messages, see
     <xref href="http://www.adobe.com/go/learn_fms_direct_routing_en" class="- topic/xref ">"Route messages directly to a peer"</xref> in <i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>.</p>
     
     <p class="- topic/p ">When a node receives a message, a NetStatusEvent is sent to the NetGroup's event listener
     with <codeph class="+ topic/ph pr-d/codeph ">NetGroup.SendTo.Notify</codeph>
     in the <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property of the <codeph class="+ topic/ph pr-d/codeph ">info</codeph> object. </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">NOTE:</b>  Test for the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> event before calling this method.</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/convertPeerIDToGroupAddress()" class="- topic/link "><linktext class="- topic/linktext ">convertPeerIDToGroupAddress()</linktext></link><link href="flash.net.xml#NetGroup/receiveMode" class="- topic/link "><linktext class="- topic/linktext ">receiveMode</linktext></link><link href="flash.net.xml#NetGroupSendResult" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupSendResult</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_SendTo_Notify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.SendTo.Notify"</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:sendToNeighbor" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sendToNeighbor</apiName><shortdesc class="- topic/shortdesc ">
     Sends a message to the neighbor specified by the sendMode parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A property of enumeration class NetGroupSendResult indicating the success or failure of the send.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The message to send.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sendMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A property of enumeration class NetGroupSendMode specifying the neighbor to which to send the message.
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Sends message to the neighbor specified by the sendMode parameter.
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sends a message to the neighbor specified by the <codeph class="+ topic/ph pr-d/codeph ">sendMode</codeph> parameter.
     Returns <codeph class="+ topic/ph pr-d/codeph ">NetGroupSendResult.SENT</codeph> if the message was successfully sent to the requested destination.
     
     <p class="- topic/p ">For more information about routing messages, see
     <xref href="http://www.adobe.com/go/learn_fms_direct_routing_en" class="- topic/xref ">"Route messages directly to a peer"</xref> in <i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>.</p>
     
     <p class="- topic/p ">When a node receives a message, a NetStatusEvent is sent to the NetGroup's event listener
     with <codeph class="+ topic/ph pr-d/codeph ">NetGroup.SendTo.Notify</codeph>
     in the <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property of the <codeph class="+ topic/ph pr-d/codeph ">info</codeph> object. </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">NOTE:</b>  Test for the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> event before calling this method.</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToAllNeighbors()" class="- topic/link "><linktext class="- topic/linktext ">sendToAllNeighbors()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_SendTo_Notify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.SendTo.Notify"</linktext></link><link href="flash.net.xml#NetGroupSendMode" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupSendMode</linktext></link><link href="flash.net.xml#NetGroupSendResult" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupSendResult</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetGroup:writeRequestedObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeRequestedObject</apiName><shortdesc class="- topic/shortdesc ">
     Satisfies the request as received by
     NetStatusEvent NetGroup.Replication.Request for an object previously
     advertised with the addHaveObjects() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">requestID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The request identifier as given in the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Request</codeph> event.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">object</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object corresponding to the index given in the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Request</codeph> event.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Satisfies the request for an object that was previously advertised.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Satisfies the request as received by
     NetStatusEvent <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Replication.Request</codeph> for an object previously
     advertised with the <codeph class="+ topic/ph pr-d/codeph ">addHaveObjects()</codeph> method. The <codeph class="+ topic/ph pr-d/codeph ">object</codeph>
     can be any of the following: An Object, an int, a Number, and a String.
     The <codeph class="+ topic/ph pr-d/codeph ">object</codeph> cannot be a MovieClip.
     
     <p class="- topic/p ">For more information about object replication, 
     see <xref href="http://www.adobe.com/go/learn_fms_replicate_en" class="- topic/xref ">"Replicate an object within a group"</xref> in <i class="+ topic/ph hi-d/i ">Flash Media Server Developer’s Guide</i>.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">NOTE:</b>  Test for the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> event before calling this method.</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addHaveObjects()" class="- topic/link "><linktext class="- topic/linktext ">addHaveObjects()</linktext></link><link href="flash.net.xml#NetGroup/denyRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">denyRequestedObject()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Replication_Request" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Replication.Request"</linktext></link></related-links></apiOperation><apiValue id="flash.net:NetGroup:estimatedMemberCount:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">estimatedMemberCount</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the estimated number of members of the group, based on local neighbor density and
     assuming an even distribution of group addresses.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Q for dev: why would someone use this instead of neighborcount? --brs
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Specifies the estimated number of members of the group.
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the estimated number of members of the group, based on local neighbor density and
     assuming an even distribution of group addresses.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/neighborCount" class="- topic/link "><linktext class="- topic/linktext ">neighborCount</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroup:info:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">info</apiName><shortdesc class="- topic/shortdesc ">
     Returns a NetGroupInfo object whose properties provide Quality of Service
     statistics about this NetGroup's RTMFP peer-to-peer data transport.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:NetGroupInfo</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns a NetGroupInfo object whose properties provide Quality of Service statistics.
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a NetGroupInfo object whose properties provide Quality of Service
     statistics about this NetGroup's RTMFP peer-to-peer data transport.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroupInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupInfo</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroup:localCoverageFrom:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localCoverageFrom</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the start of the range of group addresses for which this node is the "nearest" and responsible.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the start of the range of group addresses for which this node is the "nearest" and responsible.
     The range is specified in the increasing direction along the group address ring mod 2<sup class="+ topic/ph hi-d/sup ">256</sup>.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/localCoverageTo" class="- topic/link "><linktext class="- topic/linktext ">localCoverageTo</linktext></link><link href="flash.net.xml#NetGroup/receiveMode" class="- topic/link "><linktext class="- topic/linktext ">receiveMode</linktext></link><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">sendToNearest()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_LocalCoverage_Notify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.LocalCoverage.Notify"</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroup:localCoverageTo:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localCoverageTo</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the end of the range of group addresses for which this node is the "nearest" and responsible.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the end of the range of group addresses for which this node is the "nearest" and responsible.
     The range is specified in the increasing direction along the group address ring mod 2<sup class="+ topic/ph hi-d/sup ">256</sup>.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/localCoverageFrom" class="- topic/link "><linktext class="- topic/linktext ">localCoverageFrom</linktext></link><link href="flash.net.xml#NetGroup/receiveMode" class="- topic/link "><linktext class="- topic/linktext ">receiveMode</linktext></link><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">sendToNearest()</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_LocalCoverage_Notify" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.LocalCoverage.Notify"</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroup:neighborCount:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">neighborCount</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the number of group members to which this node is directly connected.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Specifies the number of group members to which this node is directly connected.
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the number of group members to which this node is directly connected.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">addNeighbor()</linktext></link><link href="flash.net.xml#NetGroup/estimatedMemberCount" class="- topic/link "><linktext class="- topic/linktext ">estimatedMemberCount</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Neighbor_Connect" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Neighbor.Connect"</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetGroup_Neighbor_Disconnect" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetGroup.Neighbor.Disconnect"</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroup:receiveMode:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">receiveMode</apiName><shortdesc class="- topic/shortdesc ">
     Specifies this node's routing receive mode as one of values in the NetGroupReceiveMode enum class.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies this node's routing receive mode as one of values in the NetGroupReceiveMode enum class.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/localCoverageFrom" class="- topic/link "><linktext class="- topic/linktext ">localCoverageFrom</linktext></link><link href="flash.net.xml#NetGroup/localCoverageTo" class="- topic/link "><linktext class="- topic/linktext ">localCoverageTo</linktext></link><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">sendToNearest()</linktext></link><link href="flash.net.xml#NetGroupReceiveMode" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupReceiveMode</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroup:replicationStrategy:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">replicationStrategy</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the object replication fetch strategy.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the object replication fetch strategy. The value is one of the enumerated values
     in the NetGroupReplicationStrategy class.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroupReplicationStrategy" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroupReplicationStrategy</linktext></link></related-links></apiValue></apiClassifier><apiOperation id="globalOperation:flash.net:getClassByAlias" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getClassByAlias</apiName><shortdesc class="- topic/shortdesc ">
     Looks up a class that previously had an alias registered through a call to the registerClassAlias()
     method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>includeExample examples\GetClassByAliasExample.as -noswf
      
      </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The alias was not registered.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ReferenceError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ReferenceError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The class associated with the given alias. If not found, an exception will be thrown.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Class</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">aliasName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The alias to find.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Looks up a class that previously had an alias registered through a call to the <codeph class="+ topic/ph pr-d/codeph ">registerClassAlias()</codeph>
     method.
     <p class="- topic/p ">This method does not interact with the <codeph class="+ topic/ph pr-d/codeph ">flash.utils.getDefinitionByName()</codeph> 
     method.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#/registerClassAlias()" class="- topic/link "><linktext class="- topic/linktext ">registerClassAlias()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.net:navigateToURL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">navigateToURL</apiName><shortdesc class="- topic/shortdesc ">
     Opens or replaces a window in the application that contains the Flash Player container
     (usually a browser).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>throws IOError The "digest" and "importToSandbox" properties of URLRequest
     are not supported by URLLoader.navigate.
     
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The <codeph class="+ topic/ph pr-d/codeph ">digest</codeph> property of the <codeph class="+ topic/ph pr-d/codeph ">request</codeph> object is not 
     <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. You should only set the <codeph class="+ topic/ph pr-d/codeph ">digest</codeph> property of a URLRequest object
     for use calling the <codeph class="+ topic/ph pr-d/codeph ">URLLoader.load()</codeph> method when loading a SWZ file (an Adobe 
     platform component).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">In Flash Player (and in non-application sandbox content in Adobe AIR), 
     this error is thrown in the following situations:
     <ul class="- topic/ul "><li class="- topic/li ">Local untrusted SWF files may not communicate with
     the Internet. You can avoid this situation by reclassifying this SWF file
     as local-with-networking or trusted.</li><li class="- topic/li ">A navigate operation attempted to evaluate a scripting
     pseudo-URL, but the containing document (usually an HTML document in a
     browser) is from a sandbox to which you do not have access.  You can avoid this situation 
     by specifying <codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess="always"</codeph> in the containing
     document.</li><li class="- topic/li ">You cannot navigate the special windows 
     <codeph class="+ topic/ph pr-d/codeph ">"_self"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"_top"</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">"_parent"</codeph>
     if your SWF file is contained by an HTML page
     that has set the <codeph class="+ topic/ph pr-d/codeph ">allowScriptAccess</codeph> to 
     <codeph class="+ topic/ph pr-d/codeph ">"none"</codeph>, or to <codeph class="+ topic/ph pr-d/codeph ">"sameDomain"</codeph> 
     when the domains of the HTML file and the SWF file do not match.</li><li class="- topic/li ">You cannot navigate a window with a nondefault name
     from within a SWF file that is in the local-with-filesystem sandbox.</li><li class="- topic/li ">You cannot connect to commonly reserved ports. 
     For a complete list of blocked ports, see "Restricting Networking APIs" in the 
     <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</li></ul>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the method is not called in response to a user action, such as a mouse
     event or keypress event. This requirement only applies to content in Flash Player and 
     to non-application sandbox content in Adobe AIR.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A URLRequest object that specifies the URL to navigate to.
     
     <p class="- topic/p "><ph class="- topic/ph ">For content running in Adobe AIR, when </ph>
     using the <codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> function, the runtime treats a URLRequest that uses the POST
     method (one that has its <codeph class="+ topic/ph pr-d/codeph ">method</codeph> property set to <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph>)
     as using the GET method.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">window</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The browser window or HTML frame in which to display
                   the document indicated by the <codeph class="+ topic/ph pr-d/codeph ">request</codeph> parameter.
     You can enter the name of a specific window or use one of the following values:
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"_self"</codeph> specifies the current frame in the current window.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"_blank"</codeph> specifies a new window.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"_parent"</codeph> specifies the parent of the current frame.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"_top"</codeph> specifies the top-level frame in the current window.</li></ul>
     <p class="- topic/p ">If you do not specify a value for this parameter, a new empty window is created.
     In the stand-alone player, you can either specify a new (<codeph class="+ topic/ph pr-d/codeph ">"_blank"</codeph>) window
     or a named window. The other values don't apply.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> When code in a SWF file that is running in the 
     local-with-filesystem sandbox calls the <codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> 
     function and specifies a custom window name for the <codeph class="+ topic/ph pr-d/codeph ">window</codeph> 
     parameter, the window name is transfered into a random name. The name is in 
     the form <codeph class="+ topic/ph pr-d/codeph ">"_flashXXXXXXXX"</codeph>, where each X represents a random 
     hexadecimal digit. Within the same session (until you close the containing 
     browser window), if you call the function again and specify the same name for 
     the <codeph class="+ topic/ph pr-d/codeph ">window</codeph> parameter, the same random string is used.</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <ph class="- topic/ph ">Opens or replaces a window in the application that contains the Flash Player container
     (usually a browser). In Adobe AIR, the function opens a URL in the default system web browser</ph>
     
     
      <p class="- topic/p ">  <b class="+ topic/ph hi-d/b "><i class="+ topic/ph hi-d/i ">Important Security Note  </i></b> </p>
      <p class="- topic/p ">Developers often pass URL values to the <codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> function that were obtained from external sources 
     such as FlashVars.  Attackers may try to manipulate these external sources to perform attacks such as cross-site scripting. 
     Therefore, developers should validate all URLs before passing them to this function. </p>
      
     <p class="- topic/p ">Good data validation for URLs can mean different things depending on the usage of the URL within the overall application.  
     The most common data validation techniques include validating that the URL is of the appropriate scheme.  
     For instance, unintentionally allowing javascript: URLs may result in cross-site scripting.  
     Validating that the URL is a within your domain can ensure that the SWF file can't be used as an open-redirector 
     by people who conduct phishing attacks.  For additional security, you may also choose to validate the path of the URL 
     and to validate that the URL conforms to the RFC guidelines</p>
     
     <p class="- topic/p ">For example, the following code shows a simple example of performing data validation by denying any URL 
     that does not begin with http:// or https:// and validating that the URL is within your domain name.  
     This example may not be appropriate for all web applications and you should consider whether additional checks 
     against the URL are necessary. </p>
     
      <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     // AS3 Regular expression pattern match for URLs that start with http:// and https:// plus your domain name.
     function checkProtocol (flashVarURL:String):Boolean {
        // Get the domain name for the SWF if it is not known at compile time.
        // If the domain is known at compile time, then the following two lines can be replaced with a hard coded string.
        var my_lc:LocalConnection = new LocalConnection();
        var domainName:String = my_lc.domain;
        // Build the RegEx to test the URL.
        // This RegEx assumes that there is at least one "/" after the
        // domain. http://www.mysite.com will not match.
        var pattern:RegExp = new RegExp("^http[s]?\:\\/\\/([^\\/]+)\\/");
        var result:Object = pattern.exec(flashVarURL);
        if (result == null || result[1] != domainName || flashVarURL.length &gt;= 4096) {
          return (false);
        }
        return (true);
     }  
     
      </codeblock>
     <p class="- topic/p ">For <i class="+ topic/ph hi-d/i ">local</i> content running in a browser, calls to the 
     <codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> method that specify a <codeph class="+ topic/ph pr-d/codeph ">"javascript:"</codeph> pseudo-protocol 
     (via a <codeph class="+ topic/ph pr-d/codeph ">URLRequest</codeph> object passed as the first parameter) are only permitted if the SWF 
     file and the containing web page (if there is one) are in the local-trusted security sandbox.
     Some browsers do not support using the javascript protocol with the <codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph>
     method. Instead, consider using the <codeph class="+ topic/ph pr-d/codeph ">call()</codeph> method of the <codeph class="+ topic/ph pr-d/codeph ">ExternalInterface</codeph>
     API to invoke JavaScript methods within the enclosing HTML page.</p>
     
      <p class="- topic/p ">In Flash Player, and in non-application sandboxes in Adobe AIR, 
     you cannot connect to commonly reserved ports. 
     For a complete list of blocked ports, see "Restricting Networking APIs" in the 
     <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</p>
     
     <p class="- topic/p ">In Flash Player 10 and later running in a browser, using this method programmatically to
     open a pop-up window may not be successful.  Various browsers (and browser configurations) may block pop-up windows 
     at any time; it is not possible to guarantee any pop-up window will appear.  
     However, for the best chance of success, use this method to open a pop-up window only in code that executes 
     as a direct result of a user action (for example, in an event handler for a mouse click or key-press event.)</p>
     
     <p class="- topic/p "> In Flash Player 10 and later, if you use a multipart Content-Type (for example "multipart/form-data") 
     that contains an upload (indicated by a "filename" parameter in a "content-disposition" header within the POST body),
     the POST operation is subject to the security rules applied to uploads:</p>
     <ul class="- topic/ul "><li class="- topic/li ">The POST operation must be performed in response to a user-initiated action, such as a mouse click or key press.</li><li class="- topic/li ">If the POST operation is cross-domain (the POST target is not on the same server as the SWF file 
     that is sending the POST request),
     the target server must provide a URL policy file that permits cross-domain access.</li></ul>
     <p class="- topic/p ">Also, for any multipart Content-Type, the syntax must be valid (according to the RFC2046 standards).
     If the syntax appears to be invalid, the POST operation is subject to the security rules applied to uploads.</p>
     
     
     
     <p class="- topic/p ">In AIR, on mobile platforms, the sms: and tel: URI schemes are supported. On Android, vipaccess:, connectpro:, and market: URI schemes are supported.
     The URL syntax is subject to the platform conventions. For example, on Android, the URI scheme must be lower case.
     When you navigate to a URL using one of these schemes, the runtime opens the URL in the default application for 
     handling the scheme. Thus, navigating to <codeph class="+ topic/ph pr-d/codeph ">tel:+5555555555</codeph> opens the phone dialer with the specified
     number already entered. A separate application or utility, such as a phone dialer must be available to process the URL.</p>
     
     <p class="- topic/p ">The following code shows how you can invoke the VIP Access and Connect Pro applications on Android:</p>
     
      <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
       //Invoke the VIP Access Application.
       navigateToURL(new URLRequest("vipaccess://com.verisign.mvip.main?action=securitycode"));
     
       //Invoke the Connect Pro Application.
       navigateToURL(new URLRequest("connectpro://"));
     
      </codeblock>
     
     </apiDesc><example conref="examples\NavigateToURLExample.as" class="- topic/example "> The following example opens the URL http://www.adobe.com in a new browser window and passes data about a
 user session, captured in a URLVariables object, to the web server.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.net.URLVariables;

    public class NavigateToURLExample extends Sprite {

        public function NavigateToURLExample() {
            var url:String = "http://www.adobe.com";
            var variables:URLVariables = new URLVariables();
            variables.exampleSessionId = new Date().getTime();
            variables.exampleUserLabel = "Your Name";
            var request:URLRequest = new URLRequest(url);
            request.data = variables;
            try {            
                navigateToURL(request);
            }
            catch (e:Error) {
                // handle error here
            }
        }
    }
}
</codeblock></example><example conref="examples\URLRequest_example.as" class="- topic/example "> The following example shows how you can open new browser windows from Flash Player using the navigateToURL() method. 
 Example provided by 
 <xref href="http://actionscriptexamples.com/2008/12/08/opening-urls-in-new-browser-windows-using-actionscript-30-and-actionscript-20/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Requires
// - Button symbol on Stage (or a display object, such as a MovieClip) with instance name "buttonSymbol"
//
buttonSymbol.addEventListener(MouseEvent.CLICK, buttonSymbol_click);
 
function buttonSymbol_click(evt:MouseEvent):void {
    var req:URLRequest = new URLRequest("http://www.adobe.com/");
    navigateToURL(req, "_blank");
}
</codeblock></example><example conref="examples\NavigateToURL.tel.1.as" class="- topic/example "> The following example illustrates the syntax for launching the 
 device telephone dialer with a specified number.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var request:URLRequest = new URLRequest( "tel:+5555555555" );
navigateToURL( request );
</codeblock></example><example conref="examples\NavigateToURL.sms.1.as" class="- topic/example "> The following example illustrates the syntax for launching the 
 device text message application with a specified receipient.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var request:URLRequest = new URLRequest( "sms:+5555555555" );
navigateToURL( request );
</codeblock></example><example conref="examples\NavigateToURL.market.1.as" class="- topic/example "> The following example illustrates the syntax for launching the 
 Android Market app. The search parameter is set to find the Flash Player app.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var request:URLRequest = new URLRequest( "market://search?q=pname:com.adobe.flashplayer" );
navigateToURL( request );
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.external.xml#ExternalInterface/call()" class="- topic/link "><linktext class="- topic/linktext ">flash.external.ExternalInterface.call()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.net:registerClassAlias" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">registerClassAlias</apiName><shortdesc class="- topic/shortdesc ">
     Preserves the class (type) of an object when the object is encoded in Action Message Format (AMF).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If either parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">aliasName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The alias to use.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">classObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Class</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The class associated with the given alias.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Preserves the class (type) of an object when the object is encoded in Action Message Format (AMF).
     When you encode an object into AMF, this function saves the alias for its class, so that you can 
     recover the class when decoding the object.
     If the encoding context did not register an alias for an object's class, the object
     is encoded as an anonymous object. Similarly, if the decoding context does not have the same
     alias registered, an anonymous object is created for the decoded data.
     
     <p class="- topic/p ">LocalConnection, ByteArray, SharedObject, NetConnection and NetStream are all examples
     of classes that encode objects in AMF.</p>
     
     <p class="- topic/p ">The encoding and decoding contexts do not need to use the same class for an alias;
     they can intentionally change classes, provided that the destination class contains all of the members
     that the source class serializes.</p>
     
     </apiDesc><example conref="examples\RegisterClassAliasExample.as" class="- topic/example "> This example uses the <codeph class="+ topic/ph pr-d/codeph ">registerClassAlias()</codeph> function to register
 an alias (<codeph class="+ topic/ph pr-d/codeph ">com.example.eg</codeph>) for the class ExampleClass. Because
 an alias is registered for the class, the object is able to be deserialized as an instance
 of ExampleClass, and the code outputs <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. If the <codeph class="+ topic/ph pr-d/codeph ">registerClassAlias()</codeph>
 call were removed, the code would output <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.registerClassAlias;
    import flash.utils.ByteArray;

    public class RegisterClassAliasExample extends Sprite {
        public function RegisterClassAliasExample() {
            registerClassAlias("com.example.eg", ExampleClass);
            var eg1:ExampleClass = new ExampleClass();
            var ba:ByteArray = new ByteArray();
            ba.writeObject(eg1);
            ba.position = 0;
            var eg2:* = ba.readObject();
            trace(eg2 is ExampleClass); // true
        }
    }
}

class ExampleClass {}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding class</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.net:sendToURL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sendToURL</apiName><shortdesc class="- topic/shortdesc ">
     Sends a URL request to a server, but ignores any response.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>throws IOError The "digest" and "importToSandbox" properties of URLRequest
     are not supported by URLLoader.send.
     
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Local untrusted SWF files cannot communicate with
     the Internet. You can avoid this situation by reclassifying this SWF file
     as local-with-networking or trusted.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot connect to commonly reserved ports. 
     For a complete list of blocked ports, see "Restricting Networking APIs" in the 
     <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.
      
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A URLRequest object specifying the URL to send data to.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sends a URL request to a server, but ignores any response.
     <p class="- topic/p ">To examine the server response, use the <codeph class="+ topic/ph pr-d/codeph ">URLLoader.load()</codeph> method instead.</p>
     
     <p class="- topic/p ">You cannot connect to commonly reserved ports. 
     For a complete list of blocked ports, see "Restricting Networking APIs" in the 
     <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</p>
     
     <p class="- topic/p ">You can prevent a SWF file from using this method by setting the 
     <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> parameter of the the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> 
     tags in the HTML page that contains the SWF content.</p>
     
     <p class="- topic/p "> In Flash Player 10 and later, if you use a multipart Content-Type (for example "multipart/form-data") 
     that contains an upload (indicated by a "filename" parameter in a "content-disposition" header within the POST body),
     the POST operation is subject to the security rules applied to uploads:</p>
     <ul class="- topic/ul "><li class="- topic/li ">The POST operation must be performed in response to a user-initiated action, such as a mouse click or key press.</li><li class="- topic/li ">If the POST operation is cross-domain (the POST target is not on the same server as the SWF file 
     that is sending the POST request),
     the target server must provide a URL policy file that permits cross-domain access.</li></ul>
     <p class="- topic/p ">Also, for any multipart Content-Type, the syntax must be valid (according to the RFC2046 standards).
     If the syntax appears to be invalid, the POST operation is subject to the security rules applied to uploads.</p>
     
     <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic: 
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     </apiDesc><example conref="examples\SendToURLExample.as" class="- topic/example "> The following example passes data about a
 user session, captured in a URLVariables object, to the application at http://www.yourDomain.com/application.jsp.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.net.URLVariables;
    import flash.net.sendToURL;

    public class SendToURLExample extends Sprite {

        public function SendToURLExample() {
            var url:String = "http://www.yourDomain.com/application.jsp";
            var variables:URLVariables = new URLVariables();
            variables.sessionId = new Date().getTime();
            variables.userLabel = "Your Name";

            var request:URLRequest = new URLRequest(url);
            request.data = variables;
            trace("sendToURL: " + request.url + "?" + request.data);
            try {
                sendToURL(request);
            }
            catch (e:Error) {
                // handle error here
            }
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiClassifier languages="" id="flash.net:NetGroupReceiveMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetGroupReceiveMode</apiName><shortdesc class="- topic/shortdesc ">
The NetGroupReceiveMode class is an enumeration of constant values used for the receiveMode property 
of the NetGroup class.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">An enumeration of constant values used for the receiveMode property of the NetGroup class.

</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
The NetGroupReceiveMode class is an enumeration of constant values used for the <codeph class="+ topic/ph pr-d/codeph ">receiveMode</codeph> property 
of the NetGroup class.

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/receiveMode" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.receiveMode</linktext></link><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link></related-links><apiValue id="flash.net:NetGroupReceiveMode:EXACT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">EXACT</apiName><shortdesc class="- topic/shortdesc "> 
    Specifies that this node accepts local messages from neighbors only if the address the neighbor uses
    matches this node's address exactly.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">exact</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Specifies that this node accepts local messages from neighbors only if the address the neighbor uses
    matches this node's address exactly. That is, this node considers itself as nearest for any 
    <codeph class="+ topic/ph pr-d/codeph ">NetGroup.sendToNearest()</codeph> call only if the <codeph class="+ topic/ph pr-d/codeph ">groupAddress</codeph> parameter passed to 
    <codeph class="+ topic/ph pr-d/codeph ">NetGroup.sendToNearest()</codeph> matches this node's group address exactly. 
    This value is the default setting. 
    
    <p class="- topic/p ">If you want to enable distributed routing behavior, set this value
    to <codeph class="+ topic/ph pr-d/codeph ">NetGroupReceiveMode.NEAREST</codeph>. With this value set, a node waits for its connectivity to stabilize
    before participating in the Directed Routing mesh.</p>
    
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupReceiveMode:NEAREST" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NEAREST</apiName><shortdesc class="- topic/shortdesc "> 
    Specifies that this node accepts local messages from neighbors that send messages to group
    addresses that don't match this node's address exactly.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">nearest</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Specifies that this node accepts local messages from neighbors that send messages to group
    addresses that don't match this node's address exactly. Messages are received when this node is nearest among all neighbors whose
    receive mode is <codeph class="+ topic/ph pr-d/codeph ">NetGroupReceiveMode.NEAREST</codeph>. Distance is measured between addresses on the ring mod 2<sup class="+ topic/ph hi-d/sup ">256</sup>.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:Responder" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Responder</apiName><shortdesc class="- topic/shortdesc ">
 The Responder class provides an object that is used 
 in NetConnection.call() to handle return
 values from the server related to the success or failure of
 specific operations.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The Responder class provides an object that is used 
 in <codeph class="+ topic/ph pr-d/codeph ">NetConnection.call()</codeph> to handle return
 values from the server related to the success or failure of
 specific operations. When working with <codeph class="+ topic/ph pr-d/codeph ">NetConnection.call()</codeph>,
 you may encounter a network operation fault specific to the current operation
 or a fault related to the current connection status. Operation errors target
 the Responder object instead of the NetConnection object for easier error handling.
 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/call()" class="- topic/link "><linktext class="- topic/linktext ">NetConnection.call()</linktext></link></related-links><apiConstructor id="flash.net:Responder:Responder" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Responder</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new Responder object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">result</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The function invoked if the call to the server succeeds and returns a result.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">status</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The function invoked if the server returns an error.
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new Responder object. You pass a Responder object to
	 <codeph class="+ topic/ph pr-d/codeph ">NetConnection.call()</codeph> to handle return values
	 from the server. You may pass <codeph class="+ topic/ph pr-d/codeph ">null</codeph> for either or 
	 both parameters.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="flash.net:URLRequestHeader" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLRequestHeader</apiName><shortdesc class="- topic/shortdesc ">
 A URLRequestHeader object encapsulates a single HTTP request header 
 and consists of a name/value pair.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A URLRequestHeader object encapsulates a single HTTP request header 
 and consists of a name/value pair. 
 
 URLRequestHeader objects are used in the <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> property of the URLRequest class.
 
 <p class="- topic/p ">In Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup>, content in the application security sandbox (such as 
 content installed with the AIR application) can use any request headers, without error. However, for content 
 running in Adobe AIR that is in a different security sandbox, 
 <ph class="- topic/ph ">or for content running in Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player,</ph> 
 using following request headers cause a runtime error to be thrown, and the 
 restricted terms are not case-sensitive (for example, <codeph class="+ topic/ph pr-d/codeph ">Get</codeph>, <codeph class="+ topic/ph pr-d/codeph ">get</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> 
 are each not allowed): </p>
 
 <p class="- topic/p ">In Flash Player and in Adobe AIR content outside of the application security sandbox, 
 the following request headers cannot be used, and the restricted terms are not case-sensitive 
 (for example, <codeph class="+ topic/ph pr-d/codeph ">Get</codeph>, <codeph class="+ topic/ph pr-d/codeph ">get</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> are all not allowed). Also,
 hyphenated terms apply if an underscore character is used (for example, both <codeph class="+ topic/ph pr-d/codeph ">Content-Length</codeph> and
 <codeph class="+ topic/ph pr-d/codeph ">Content_Length</codeph> are not allowed): </p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Accept-Charset</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Accept-Encoding</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Accept-Ranges</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Age</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Allow</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">Allowed</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Authorization</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Charge-To</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Connect</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">Connection</codeph>, 
 <codeph class="+ topic/ph pr-d/codeph ">Content-Length</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Content-Location</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Content-Range</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Cookie</codeph>, 
 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Delete</codeph>, 
 <codeph class="+ topic/ph pr-d/codeph ">ETag</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Expect</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Get</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Head</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Host</codeph>, <codeph class="+ topic/ph pr-d/codeph ">If-Modified-Since</codeph>, 
 <codeph class="+ topic/ph pr-d/codeph ">Keep-Alive</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Last-Modified</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Location</codeph>, 
 <codeph class="+ topic/ph pr-d/codeph ">Max-Forwards</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Options</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Origin</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Post</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">Proxy-Authenticate</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Proxy-Authorization</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Proxy-Connection</codeph>, 
 <codeph class="+ topic/ph pr-d/codeph ">Public</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Put</codeph>, 
 <codeph class="+ topic/ph pr-d/codeph ">Range</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Referer</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Request-Range</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Retry-After</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Server</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">TE</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Trace</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Trailer</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Transfer-Encoding</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">Upgrade</codeph>, <codeph class="+ topic/ph pr-d/codeph ">URI</codeph>, <codeph class="+ topic/ph pr-d/codeph ">User-Agent</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Vary</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Via</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Warning</codeph>, 
 <codeph class="+ topic/ph pr-d/codeph ">WWW-Authenticate</codeph>, <codeph class="+ topic/ph pr-d/codeph ">x-flash-version</codeph>.</p>
 
 <p class="- topic/p ">URLRequestHeader objects are restricted in length. If the cumulative length of a
 URLRequestHeader object (the length of the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> property plus the <codeph class="+ topic/ph pr-d/codeph ">value</codeph>
 property) or an array of URLRequestHeader objects used in the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.requestHeaders</codeph>
 property exceeds the acceptable length, an exception is thrown.</p>
 
 <p class="- topic/p ">Content running in Adobe AIR sets the <codeph class="+ topic/ph pr-d/codeph ">ACCEPT</codeph> header to the following, unless you
 specify a setting for the <codeph class="+ topic/ph pr-d/codeph ">ACCEPT</codeph> header in the <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph>
 property of the URLRequest class:</p>
 
 <codeph class="+ topic/ph pr-d/codeph ">text/xml,
 application/xml,
 application/xhtml+xml,
 text/html;q=0.9,
 text/plain;q=0.8,
 image/png,
 application/x-shockwave-flash,
 video/mp4;q=0.9,
 flv-application/octet-stream;q=0.8,
 video/x-flv;q=0.7,
 audio/mp4,
 ~~/~~;q=0.5</codeph>
 <p class="- topic/p ">Not all methods that accept URLRequest parameters support the <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> property,
 consult the documentation for the method you are calling. For example, the <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>
 and <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> methods do not
 support the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.requestHeaders</codeph> property.</p>
 <p class="- topic/p ">Due to browser limitations, custom HTTP request headers are only supported for <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> requests,
 not for <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> requests.</p>  
 
 </apiDesc><example conref="examples\URLRequestHeaderExample.as" class="- topic/example "> The following example adds a single HTTP request header <codeph class="+ topic/ph pr-d/codeph ">header</codeph> to the array for the <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> property. The header indicates that the application should forward the request to the origin server even if it has a cached copy of what is being requested.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.net.URLRequestHeader;
    import flash.net.URLRequestMethod;
    import flash.net.URLVariables;

    public class URLRequestHeaderExample extends Sprite {
        public function URLRequestHeaderExample() {
            var loader:URLLoader = new URLLoader();
            configureListeners(loader);

            var header:URLRequestHeader = new URLRequestHeader("pragma", "no-cache");
            var request:URLRequest = new URLRequest("http://www.[yourdomain].com/greeting.cfm");
            request.data = new URLVariables("name=John+Doe");
            request.method = URLRequestMethod.POST;
            request.requestHeaders.push(header);
            try {
                loader.load(request);
            } catch (error:Error) {
                trace("Unable to load requested document.");
            }
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            trace("completeHandler: " + loader.data);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest" class="- topic/link "><linktext class="- topic/linktext ">URLRequest</linktext></link><link href="flash.net.xml#URLLoader" class="- topic/link "><linktext class="- topic/linktext ">URLLoader</linktext></link></related-links><apiConstructor id="flash.net:URLRequestHeader:URLRequestHeader" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">URLRequestHeader</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new URLRequestHeader object that encapsulates a single HTTP request header.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An HTTP request header name (such as <codeph class="+ topic/ph pr-d/codeph ">Content-Type</codeph>
	 										or <codeph class="+ topic/ph pr-d/codeph ">SOAPAction</codeph>).
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value associated with the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> property 
	 (such as <codeph class="+ topic/ph pr-d/codeph ">text/plain</codeph>).
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new URLRequestHeader object that encapsulates a single HTTP request header.
	 URLRequestHeader objects are used in the <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> 
     property of the URLRequest class.
     
	 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.net:URLRequestHeader:name" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
	 An HTTP request header name (such as Content-Type or SOAPAction).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 An HTTP request header name (such as <codeph class="+ topic/ph pr-d/codeph ">Content-Type</codeph> or <codeph class="+ topic/ph pr-d/codeph ">SOAPAction</codeph>).
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestHeader:value" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">value</apiName><shortdesc class="- topic/shortdesc ">
	 The value associated with the name property (such as text/plain).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The value associated with the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> property (such as <codeph class="+ topic/ph pr-d/codeph ">text/plain</codeph>).
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLRequestMethod" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLRequestMethod</apiName><shortdesc class="- topic/shortdesc ">
 The URLRequestMethod class provides values that specify whether the URLRequest object should
 use the POST method or the GET method when sending data to a server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The URLRequestMethod class provides values that specify whether the URLRequest object should
 use the <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> method or the <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> method when sending data to a server.
 
 </apiDesc><example conref="examples\URLRequestMethodExample.as" class="- topic/example "> The following example loads and displays the 
 data found in a local text file. It also traces event handling information.
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b>To run this example, put a file named example.txt
 in the same directory as your SWF file. That file should be a simple text file containing
 a few words or lines of text.
 </p>
 <p class="- topic/p ">The example code does the following:</p>
 <ol class="- topic/ol "><li class="- topic/li ">The constructor function creates a URLLoader instance named <codeph class="+ topic/ph pr-d/codeph ">loader</codeph>.</li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">loader</codeph> object is passed to the <codeph class="+ topic/ph pr-d/codeph ">configureListeners()</codeph> method,
       which adds listeners for each of the supported URLLoader events.</li><li class="- topic/li ">A URLRequest instance named <codeph class="+ topic/ph pr-d/codeph ">request</codeph> is created, which specifies name of the file to be loaded.</li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">method</codeph> property of the request is set to <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph>.</li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">request</codeph> object is then passed to <codeph class="+ topic/ph pr-d/codeph ">loader.load()</codeph>, which loads the text file.</li><li class="- topic/li ">When the URLLoader has finished loading the text file the <codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE</codeph> event fires, 
    triggering the <codeph class="+ topic/ph pr-d/codeph ">completeHandler()</codeph> method. The <codeph class="+ topic/ph pr-d/codeph ">completeHandler()</codeph> method simply traces
    the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property, the contents of the text file.</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.*;

    public class URLRequestMethodExample extends Sprite {

        public function URLRequestMethodExample() {
            var loader:URLLoader = new URLLoader();
            configureListeners(loader);

            var request:URLRequest = new URLRequest("example.txt");
            
            request.method = URLRequestMethod.POST;
            loader.load(request);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            trace("completeHandler: " + loader.data);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest" class="- topic/link "><linktext class="- topic/linktext ">URLRequest</linktext></link><link href="flash.net.xml#URLVariables" class="- topic/link "><linktext class="- topic/linktext ">URLVariables</linktext></link></related-links><apiValue id="flash.net:URLRequestMethod:DELETE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DELETE</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies that the URLRequest object is a DELETE.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">DELETE</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Specifies that the URLRequest object is a DELETE.
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies that the URLRequest object is a <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:GET" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">GET</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies that the URLRequest object is a GET.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">GET</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Specifies that the URLRequest object is a GET.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies that the URLRequest object is a <codeph class="+ topic/ph pr-d/codeph ">GET</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:HEAD" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">HEAD</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies that the URLRequest object is a HEAD.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">HEAD</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Specifies that the URLRequest object is a HEAD.
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies that the URLRequest object is a <codeph class="+ topic/ph pr-d/codeph ">HEAD</codeph>.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:OPTIONS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">OPTIONS</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies that the URLRequest object is OPTIONS.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">OPTIONS</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Specifies that the URLRequest object is OPTIONS.
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies that the URLRequest object is <codeph class="+ topic/ph pr-d/codeph ">OPTIONS</codeph>.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:POST" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">POST</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies that the URLRequest object is a POST.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">POST</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Specifies that the URLRequest object is a POST.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies that the URLRequest object is a <codeph class="+ topic/ph pr-d/codeph ">POST</codeph>.
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> <ph class="- topic/ph ">For content running in Adobe AIR, when </ph>
	  using the <codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> function, the runtime
	 treats a URLRequest that uses the POST method (one that has its <codeph class="+ topic/ph pr-d/codeph ">method</codeph> property set to
	 <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph>) as using the GET method.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:PUT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">PUT</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies that the URLRequest object is a PUT.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">PUT</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Specifies that the URLRequest object is a PUT.
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies that the URLRequest object is a <codeph class="+ topic/ph pr-d/codeph ">PUT</codeph>.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:FileReference" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FileReference</apiName><shortdesc class="- topic/shortdesc ">
  The FileReference class provides a means to upload and
  download files between a user's computer and a server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">FileReference, FileReference.browse, FileReference.download, FileReference.create, browse, download, create
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  The FileReference class provides a means to upload and
  download files between a user's computer and a server. An operating-system 
  dialog box prompts the user to select a file to upload or a location for
  download. Each FileReference object refers to a single file on the user's disk 
  and has properties that contain information about 
  the file's size, type, name, creation date, modification date, and creator type
  (Macintosh only). 
  
  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> In Adobe AIR, the File class, which extends the FileReference class, 
  provides more capabilities and has less security restrictions than the FileReference class.</p>
  
  <p class="- topic/p ">FileReference instances are created in the following ways:</p>
  <ul class="- topic/ul "><li class="- topic/li ">When you use the <codeph class="+ topic/ph pr-d/codeph ">new</codeph> operator with the FileReference constructor: 
  
  <codeph class="+ topic/ph pr-d/codeph ">var myFileReference = new FileReference();</codeph></li><li class="- topic/li ">When you call the <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> method, which creates an array of FileReference objects.</li></ul>
  
  <p class="- topic/p ">During an upload operation, all the properties of a FileReference object are 
  populated by calls to the <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> methods.
  During a download operation, the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> property is populated when the
  <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event is dispatched; all other properties are populated when the
  <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event is dispatched.</p>
  
  <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> method opens an operating-system dialog box that prompts the 
  user to select a file for upload. The <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> method
  lets the user select a single file; the <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> method
  lets the user select multiple files. After a successful call to the <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> method,
  call the <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> method to upload one file at a time. The 
  <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> method prompts the user for a location to save
  the file and initiates downloading from a remote URL.</p>
  
  <p class="- topic/p ">The FileReference and FileReferenceList classes do not let you set the default file location
  for the dialog box that the <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">download()</codeph> methods generate.
  The default location shown in the dialog box is the most
  recently browsed folder, if that location can be determined, or the desktop.
  The classes do not allow you to read from or write to the transferred file. 
  They do not allow the SWF file that initiated the
  upload or download to access the uploaded or downloaded file or the file's location on
  the user's disk.</p>
  
  <p class="- topic/p ">The FileReference and FileReferenceList classes also do not provide
  methods for authentication. With servers that require authentication, you can
  download files with the Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player browser plug-in, but   
  uploading (on all players) and downloading (on the stand-alone or
  external player) fails. Listen for FileReference events to determine whether 
  operations complete successfully and to handle errors.</p>
  
  <p class="- topic/p ">For <ph class="- topic/ph ">content running in Flash Player or for</ph> 
  content running in Adobe AIR outside of the application security sandbox, 
  uploading and downloading operations can access files only within its own domain and within 
  any domains that a URL policy file specifies. Put a policy file on the file server 
  if the content initiating the upload or download doesn't come from the same domain as the file server.</p>
  
  <p class="- topic/p ">Note that because of new functionality added to the Flash Player, when publishing to Flash Player 10, you can have
  only one of the following operations active at one time: <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>, 
  <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph>,
  <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph>. Otherwise, Flash Player throws a runtime error (code 2174). Use <codeph class="+ topic/ph pr-d/codeph ">FileReference.cancel()</codeph>
  to stop an operation in progress. This restriction applies only to Flash Player 10. Previous versions of Flash Player
  are unaffected by this restriction on simultaneous multiple operations.</p>
  
  <p class="- topic/p ">While calls to the <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>, 
  or <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> methods are executing, SWF file playback pauses in stand-alone and external versions 
  of Flash Player and in AIR for Linux and Mac OS X 10.1 and earlier</p>
  
  <p class="- topic/p ">The following sample HTTP <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> request is sent from Flash Player to a server-side 
  script if no parameters are specified:
  </p>
  
  <pre xml:space="preserve" class="- topic/pre ">
  POST /handler.cfm HTTP/1.1 
  Accept: text/~~
  Content-Type: multipart/form-data; 
  boundary=----------Ij5ae0ae0KM7GI3KM7 
  User-Agent: Shockwave Flash 
  Host: www.example.com 
  Content-Length: 421 
  Connection: Keep-Alive 
  Cache-Control: no-cache
  
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Filename"
  
  MyFile.jpg
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Filedata"; filename="MyFile.jpg"
  Content-Type: application/octet-stream
  
  FileDataHere
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Upload"
  
  Submit Query
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7--
  </pre>
  
  <p class="- topic/p ">Flash Player sends the following HTTP <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> request if the user 
  specifies the parameters <codeph class="+ topic/ph pr-d/codeph ">"api_sig"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"api_key"</codeph>, and 
  <codeph class="+ topic/ph pr-d/codeph ">"auth_token"</codeph>:
  </p>
  
  <pre xml:space="preserve" class="- topic/pre ">
  POST /handler.cfm HTTP/1.1 
  Accept: text/~~
  Content-Type: multipart/form-data; 
  boundary=----------Ij5ae0ae0KM7GI3KM7 
  User-Agent: Shockwave Flash 
  Host: www.example.com 
  Content-Length: 421 
  Connection: Keep-Alive 
  Cache-Control: no-cache
  
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Filename"
  
  MyFile.jpg
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="api_sig"
  
  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="api_key"
  
  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="auth_token"
  
  XXXXXXXXXXXXXXXXXXXXXX
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Filedata"; filename="MyFile.jpg"
  Content-Type: application/octet-stream
  
  FileDataHere
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Upload"
  
  Submit Query
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7--
  </pre>
  </apiDesc><example conref="examples\FileReferenceExample.as" class="- topic/example "> The following example displays the 
 data format and status information for a file loaded at runtime.  
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">Note:</b>
 To run this example, change the uploadURL.url property to point to an actual URL,
 rather than the fictional one in the example. The URL should point to a file named 
 <codeph class="+ topic/ph pr-d/codeph ">yourUploadHandlerScript.cfm</codeph> in the root    web directory of the URL specified.
 Based on your configuration, you might also need to compile the SWF file with Local Playback Security set to Access Network Only
 or to update Flash Player security settings to allow this file network access.
 </p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileFilter;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReferenceExample extends Sprite {
        private var uploadURL:URLRequest;
        private var file:FileReference;

        public function FileReferenceExample() {
            uploadURL = new URLRequest();
            uploadURL.url = "http://www.[yourDomain].com/yourUploadHandlerScript.cfm";
            file = new FileReference();
            configureListeners(file);
            file.browse(getTypes());
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
            dispatcher.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,uploadCompleteDataHandler);
        }

        private function getTypes():Array {
            var allTypes:Array = new Array(getImageTypeFilter(), getTextTypeFilter());
            return allTypes;
        }

        private function getImageTypeFilter():FileFilter {
            return new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png");
        }

        private function getTextTypeFilter():FileFilter {
            return new FileFilter("Text Files (*.txt, *.rtf)", "*.txt;*.rtf");
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function uploadCompleteDataHandler(event:DataEvent):void {
            trace("uploadCompleteData: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }
        
        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + uploadURL.url);
            file.upload(uploadURL);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReferenceList" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReferenceList</linktext></link><link href="flash.filesystem.xml#File" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.File</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference_flash.events.DataEvent.UPLOAD_COMPLETE_DATA_uploadCompleteData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">uploadCompleteData</apiName><shortdesc class="- topic/shortdesc ">
    Dispatched after data is received from the server after a successful upload.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.28.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.DataEvent.UPLOAD_COMPLETE_DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.DataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Dispatched after data is received from the server after a successful upload.
    This event is not dispatched if data is not returned from the server.
    </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><shortdesc class="- topic/shortdesc ">
     Dispatched if a call to the upload() or uploadUnencoded() 
     method attempts to access data over HTTP and Adobe AIR is able to detect and return 
     the status code for the request.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Dispatched if a call to the <codeph class="+ topic/ph pr-d/codeph ">upload()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">uploadUnencoded()</codeph> 
     method attempts to access data over HTTP and Adobe AIR is able to detect and return 
     the status code for the request. 
     
     </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">upload()</linktext></link><link href="flash.net.xml#FileReference/uploadUnencoded()" class="- topic/link "><linktext class="- topic/linktext ">uploadUnencoded()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><shortdesc class="- topic/shortdesc ">
     Dispatched when an upload fails and an HTTP status code is available 
     to describe the failure.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Dispatched when an upload fails and an HTTP status code is available 
     to describe the failure. The <codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> event
     is dispatched, followed by an <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> event.
     
     <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> event is dispatched only for upload failures.
     For content running in Flash Player this event is not applicable for download failures.
     If a download fails because of an HTTP error, the error is reported as an I/O error.</p>
     
     </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.Event.SELECT_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><shortdesc class="- topic/shortdesc ">
    Dispatched when the user selects a file for upload or download from the file-browsing dialog box.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
    </helpid></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.SELECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Dispatched when the user selects a file for upload or download from the file-browsing dialog box. 
    (This dialog box opens when you call the <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>, 
    <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>,
    or <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> method.)
    When the user selects a file and confirms the operation (for example, by clicking OK), 
    the properties of the FileReference object are populated.
    
    <p class="- topic/p ">For content running <ph class="- topic/ph ">in Flash Player or</ph> outside of the 
    application security sandbox <ph class="- topic/ph ">in the Adobe AIR runtime</ph>,
    the <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event acts slightly differently depending on what
    method invokes it. When the <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event is dispatched after a <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> call, 
    <ph class="- topic/ph ">Flash Player or</ph> the AIR application can read all the 
    FileReference object's properties, because the file selected by the user is on the local
    file system. When the <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event occurs after a <codeph class="+ topic/ph pr-d/codeph ">download()</codeph> call, 
    <ph class="- topic/ph ">Flash Player or</ph> the AIR application can read only 
    the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> property, because the file hasn't yet been downloaded to the local file system
    at the moment the <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event is dispatched. When the file is downloaded and the
    <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event dispatched, <ph class="- topic/ph ">Flash Player or</ph> 
    the AIR application  can read all other properties of the FileReference object.</p>
    
    </apiDesc><example conref="examples\FileReference_event_select.as" class="- topic/example "> The following example shows usage of the <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event object.
 To run this example, change the <codeph class="+ topic/ph pr-d/codeph ">uploadURL.url</codeph> property to point to an actual domain and file,
 rather than the fictional http://www.[yourDomain].com/SomeFile.pdf.
 You might also need to compile the SWF file with Local playback security set to Access network only
 or to update Flash Player security settings to allow this file network access.
 In order for this example to run from your desktop, your server also needs to have a crossdomain.xml
 file posted.
 If the <codeph class="+ topic/ph pr-d/codeph ">ioErrorHandler()</codeph> function is triggered, you probably need to update the provided <codeph class="+ topic/ph pr-d/codeph ">uploadURL</codeph> with
 a valid url that is configured to receive uploads.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 
package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReference_event_select extends Sprite {
        private var uploadURL:URLRequest;
        private var file:FileReference;

        public function FileReference_event_select() {
            uploadURL = new URLRequest();
            uploadURL.url = "http://www.[yourDomain].com/yourUploadHandlerScript.cfm";
            file = new FileReference();
            file.addEventListener(Event.SELECT, selectHandler);
            file.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            file.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            file.addEventListener(Event.COMPLETE, completeHandler);
            file.browse();
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + uploadURL.url);
            file.upload(uploadURL);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
     Dispatched when a call to the FileReference.upload() 
     or FileReference.download() method tries to upload a file to a server or
     get a file from a server that is outside the caller's security sandbox.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
     
     </helpid></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Dispatched when a call to the <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> 
     or <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> method tries to upload a file to a server or
     get a file from a server that is outside the caller's security sandbox. The value of
     the text property that describes the specific error that occurred 
     is normally <codeph class="+ topic/ph pr-d/codeph ">"securitySandboxError"</codeph>.
     The calling SWF file may have tried to access a SWF file
     outside its domain and does not have permission to do so. You can
     try to remedy this error by using a URL policy file.
     
     <p class="- topic/p ">In Adobe AIR, these security restrictions do not apply 
     to content in the application security sandbox.</p>
     
     <p class="- topic/p ">In Adobe AIR, these security restrictions do not apply 
     to content in the application security sandbox.</p>
     
     </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.ProgressEvent.PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><shortdesc class="- topic/shortdesc ">
    Dispatched periodically during the file upload or download operation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
    </helpid></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Dispatched periodically during the file upload or download operation.
    The <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> event is dispatched while Flash Player 
    transmits bytes to a server, and it is periodically dispatched during the 
    transmission, even if the transmission is ultimately not successful. 
    To determine if and when the file transmission is actually successful
    and complete, listen for the <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event.
    
    <p class="- topic/p ">In some cases, <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> events are not received. For example,
    when the file being transmitted is very small or the upload or download
    happens very quickly a <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> event might not be dispatched.</p>
    
    <p class="- topic/p ">File upload progress cannot be determined on Macintosh platforms earlier than OS X 10.3.
    The <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> event is called during the upload operation, but the value of the 
    <codeph class="+ topic/ph pr-d/codeph ">bytesLoaded</codeph> property of the progress event is -1, 
    indicating that the progress cannot be determined.</p>
    
    </apiDesc><example conref="examples\FileReference_event_progress.as" class="- topic/example "> The following example shows usage of the <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> event.
 To run this example, change the <codeph class="+ topic/ph pr-d/codeph ">downloadURL.url</codeph> property to point to an actual domain and file,
 rather than the fictional http://www.[yourDomain].com/SomeFile.pdf.
 You might also need to compile the SWF file with Local playback security set to Access network only
 or to update Flash Player security settings to allow this file network access.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReference_event_progress extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_event_progress() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            file.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            file.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            file.addEventListener(Event.COMPLETE, completeHandler);
            file.download(downloadURL, fileName);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }
        
        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
        
        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/event:complete" class="- topic/link "><linktext class="- topic/linktext ">FileReference.complete</linktext></link><link href="flash.events.xml#ProgressEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.ProgressEvent</linktext></link><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.Event.OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
    Dispatched when an upload or download operation starts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example shows the usage of the <code>open</code> event.
    It should be made clear that there is no way to actually track the progress
    of a download, just that it hasn't yet finished or failed.
    
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    
    listener.onOpen = function(file:FileReference):void {
      trace("onOpen: " + file.name);
    }
    
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    var url:String = "http://www.adobe.com/platform/whitepapers/platform_overview.pdf";
    fileRef.download(url, "FlashPlatform.pdf");
    </listing>
    </maelexample></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Dispatched when an upload or download operation starts.
    
    
    </apiDesc><example conref="examples\FileReference_download.as" class="- topic/example "> The following example shows usage of the <codeph class="+ topic/ph pr-d/codeph ">download</codeph> event object.
 To run this example, change the <codeph class="+ topic/ph pr-d/codeph ">downloadURL.url</codeph> property to point to an actual domain and file,
 rather than the fictional http://www.[yourDomain].com/SomeFile.pdf.
 You might also need to compile the SWF file with Local playback security set to Access network only
 or to update Flash Player security settings to allow this file network access.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;
    import flash.net.FileFilter;

    public class FileReference_download extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_download() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            configureListeners(file);
            file.download(downloadURL, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL.url);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
    Dispatched when the upload or download fails.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example shows the usage of the <code>ioError</code> event. 
    Note that for simplicity, none of the other event types are used in this
    example.
    
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    
    listener.onIOError = function(file:FileReference):void {
      trace("onIOError");
    }
    
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    fileRef.download("http://www.adobe.com/NonExistentFile.pdf", "NonExistentFile.pdf");
    
    </listing>
    
    </maelexample></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Dispatched when the upload or download fails. A file transfer can fail for one of the following reasons:
    
    <ul class="- topic/ul "><li class="- topic/li ">An input/output error occurs while the player is reading, writing, or transmitting the file.</li><li class="- topic/li ">The <ph class="- topic/ph ">SWF file</ph> 
    tries to upload a file to a server that requires authentication 
    (such as a user name and password). During upload, <ph class="- topic/ph ">Flash Player or</ph>
    Adobe AIR does not provide a means for users to enter passwords. If <ph class="- topic/ph ">a SWF file</ph>
     tries to upload a file to a server that
    requires authentication, the upload fails.</li><li class="- topic/li ">The <ph class="- topic/ph ">SWF file</ph>
    tries to download a file from a server that requires authentication, 
    within the stand-alone or external player. During download, the stand-alone and external players
    do not provide a means for users to enter passwords. If <ph class="- topic/ph ">a SWF file</ph>
     in these players tries to download
    a file from a server that requires authentication, the download fails. 
    <ph class="- topic/ph ">File download can succeed only in the ActiveX control, browser plug-in 
    players, and the Adobe AIR runtime.</ph></li><li class="- topic/li ">The value passed to the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> parameter in the <codeph class="+ topic/ph pr-d/codeph ">upload()</codeph> method contains an 
    invalid protocol. Valid protocols are HTTP and HTTPS.</li></ul>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Important:</b> Only applications running 
    in a browser — that is, using the browser plug-in or ActiveX control — and 
    content running in Adobe AIR can provide a dialog box to prompt 
    the user to enter a user name and password for authentication, and then only for downloads. 
    For uploads using the plug-in or ActiveX control version of Flash Player, or for upload or 
    download using either the stand-alone or the external player, the file transfer fails.</p>
    
    </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
    Dispatched when download is complete or when upload generates an HTTP status code of 200.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example shows usage of the <code>complete</code> event 
    listener. It should be made clear that there is no way to actually track the progress
    of a download, just that it hasn't yet finished or failed.
    
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    
    listener.onComplete = function(file:FileReference):void {
      trace("onComplete: " + file.name);
    }
    
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    var url:String = "http://www.adobe.com/platform/whitepapers/platform_overview.pdf";
    fileRef.download(url, "FlashPlatform.pdf");
    </listing>
    </maelexample></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Dispatched when download is complete or when upload generates an HTTP status code of 200. 
    For file download, this event is dispatched when <ph class="- topic/ph ">Flash Player or</ph>
    Adobe AIR finishes downloading the entire file to disk. 
    For file upload, this event is dispatched after the 
    <ph class="- topic/ph ">Flash Player or</ph> Adobe AIR 
    receives an HTTP status code of 200 from the server receiving
    the transmission.
    
    </apiDesc><example conref="examples\FileReference_event_complete.as" class="- topic/example "> The following example shows usage of the <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event object.
 To run this example, change the <codeph class="+ topic/ph pr-d/codeph ">downloadURL.url</codeph> property to point to an actual domain and file,
 rather than the fictional http://www.[yourDomain].com/SomeFile.pdf.
 You might also need to compile the SWF file with Local playback security set to Access network only
 or to update Flash Player security settings to allow this file network access.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReference_event_complete extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_event_complete() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            configureListeners(file);
            file.download(downloadURL, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL.url);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.Event.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
    Dispatched when a file upload or download is canceled through the file-browsing dialog 
    box by the user.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example traces a message if the user dismisses the file-
    browsing dialog box. This method
    is triggered only if the user selects Cancel or presses the escape key after
    the dialog box opens.
    
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    
    listener.onCancel = function(file:FileReference):void {
      trace("onCancel");
    }
    
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    var url:String = "http://www.adobe.com/platform/whitepapers/platform_overview.pdf";
    if(!fileRef.download(url, "FlashPlatform.pdf")) {
      trace("dialog box failed to open.");
    }
    </listing>
    
    </maelexample></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Dispatched when a file upload or download is canceled through the file-browsing dialog 
    box by the user. Flash Player does not dispatch this event if the user cancels an upload
    or download through other means (closing the browser or stopping the current 
    application).
    
    </apiDesc><example conref="examples\FileReference_event_cancel.as" class="- topic/example "> The following example shows usage of the <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph> event object.
 To run this example, change the <codeph class="+ topic/ph pr-d/codeph ">downloadURL.url</codeph> property to point to an actual domain and file,
 rather than the fictional http://www.[yourDomain].com/SomeFile.pdf.
 You might also need to compile the SWF file with Local playback security set to Access network only
 or to update Flash Player security settings to allow this file network access.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReference_event_cancel extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_event_cancel() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            file.addEventListener(Event.CANCEL, cancelHandler);
            file.download(downloadURL, fileName);
        }
        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:FileReference:FileReference" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">FileReference</apiName><shortdesc class="- topic/shortdesc ">
    Creates a new FileReference object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a new <code>FileReference</code> object and 
    initiates the download of a pdf file.
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    listener.onComplete = function(file:FileReference) {
      trace("onComplete : " + file.name);
    }
    
    var url:String = "http://www.adobe.com/platform/whitepapers/platform_overview.pdf";
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    fileRef.download(url, "FlashPlatform.pdf");
    </listing>
    
    </maelexample></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Creates a new FileReference object. When populated, a FileReference object represents a file
    on the user's local disk.
    
    </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:FileReference:browse" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browse</apiName><shortdesc class="- topic/shortdesc ">
    Displays a file-browsing dialog box that lets the
    user select a file to upload.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">browse, FileReference.browse
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Thrown in the following situations:
  1) Another FileReference or FileReferenceList browse session is in 
  progress; only one file browsing session may be performed at a time.
  2) A setting in the user's mms.cfg file prohibits this operation.
  
  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">typeFilter</codeph> array contains 
  FileFilter objects that are incorrectly formatted, an exception is thrown.
  For information on the correct format for FileFilter objects,
  see the <xref href="FileFilter.html" class="- topic/xref ">FileFilter</xref> class.
  
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the method is not called in response to a user action, such as a mouse
    event or keypress event.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the parameters are valid and the file-browsing dialog box 
    opens.  
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">typeFilter</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of FileFilter instances used to filter the files that are 
    displayed in the dialog box. If you omit this parameter,
    all files are displayed. 
    For more information, see the <xref href="FileFilter.html" class="- topic/xref ">FileFilter</xref> class.
    
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Displays a file-browsing dialog box that lets the
    user select a file to upload. The dialog box is native to the user's 
    operating system. The user can select a file on the local computer
    or from other systems, for example, through a UNC path on Windows.
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> The File class, available in Adobe AIR, includes methods for
    accessing more specific system file selection dialog boxes. These methods are
    <codeph class="+ topic/ph pr-d/codeph ">File.browseForDirectory()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">File.browseForOpen()</codeph>,
    <codeph class="+ topic/ph pr-d/codeph ">File.browseForOpenMultiple()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">File.browseForSave()</codeph>.</p>
    
    <p class="- topic/p ">When you call this method and the user
    successfully selects a file, the properties of this FileReference object are populated with 
    the properties of that file. Each subsequent time that the <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> method
    is called, the FileReference
    object's properties are reset to the file that the user selects in the dialog box.
    Only one <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">download()</codeph> session
    can be performed at a time (because only one dialog box can be invoked at a time).</p>
    
    <p class="- topic/p ">Using the <codeph class="+ topic/ph pr-d/codeph ">typeFilter</codeph> parameter, you can determine which files the dialog box displays.</p>
    
    <p class="- topic/p ">In Flash Player 10 and Flash Player 9 Update 5, you can only call this method successfully in response
    to a user event (for example, in an event handler for a mouse click or keypress event). Otherwise, calling
    this method results in Flash Player throwing an Error exception.</p>
    
    <p class="- topic/p ">Note that because of new functionality added to the Flash Player, when publishing to Flash Player 10, you can have
    only one of the following operations active at one time: <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>, 
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph>,
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph>. Otherwise, Flash Player throws a runtime error (code 2174). Use <codeph class="+ topic/ph pr-d/codeph ">FileReference.cancel()</codeph>
    to stop an operation in progress. This restriction applies only to Flash Player 10. Previous versions of Flash Player
    are unaffected by this restriction on simultaneous multiple operations.</p> 
 	
	<p class="- topic/p ">In Adobe AIR, the file-browsing dialog is not always displayed in front of windows that are
	"owned" by another window (windows that have a non-null <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> property).
	To avoid window ordering issues, hide owned windows before calling this method.</p>
	
  	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReferenceList/event:select" class="- topic/link "><linktext class="- topic/linktext ">select event</linktext></link><link href="flash.net.xml#FileReference/event:cancel" class="- topic/link "><linktext class="- topic/linktext ">cancel event</linktext></link><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link><link href="" invalidHref="flash.filesystem.File.browseForDirectory().xml" class="- topic/link "><linktext class="- topic/linktext ">File.browseForDirectory()</linktext></link><link href="" invalidHref="flash.filesystem.File.browseForOpen().xml" class="- topic/link "><linktext class="- topic/linktext ">File.browseForOpen()</linktext></link><link href="" invalidHref="flash.filesystem.File.browseForOpenMultiple().xml" class="- topic/link "><linktext class="- topic/linktext ">File.browseForOpenMultiple()</linktext></link><link href="" invalidHref="flash.filesystem.File.browseForSave().xml" class="- topic/link "><linktext class="- topic/linktext ">File.browseForSave()</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:browse_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user successfully selects an item from the Browse file chooser.
  </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user successfully selects an item from the Browse file chooser.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:browse_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user cancels the file upload Browse window.
  
  </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user cancels the file upload Browse window.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
  Cancels any ongoing upload or download operation on this FileReference object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">cancel, FileReference.cancel
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Cancels any ongoing upload or download.
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Cancels any ongoing upload or download operation on this FileReference object.
  Calling this method does not dispatch the <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph> event; that event
  is dispatched only when the user cancels the operation by dismissing the 
  file upload or download dialog box.
  
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:FileReference:download" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">download</apiName><shortdesc class="- topic/shortdesc ">
    Opens a dialog box that lets the user download a file from a remote server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Thrown in the following situations: 1) Another browse session is in 
    progress; only one file browsing session can be performed at a time. 
    2) The value passed to <codeph class="+ topic/ph pr-d/codeph ">request</codeph> does not contain
    a valid path or protocol.
    3) The filename to download contains prohibited characters.
    4) A setting in the user's mms.cfg file prohibits this operation.
    
        </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Local untrusted content may not communicate with the Internet. To avoid this situation, reclassify this
    SWF file as local-with-networking or trusted. This exception is thrown with a message indicating the filename
    and the URL that may not be accessed because of local file security restrictions.
    
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot connect to commonly reserved ports. 
    For a complete list of blocked ports, see "Restricting Networking APIs" in the 
    <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If <codeph class="+ topic/ph pr-d/codeph ">url.data</codeph> is of type ByteArray, an exception is
    thrown. For use with the <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> and
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> methods, <codeph class="+ topic/ph pr-d/codeph ">url.data</codeph> can only be of type
    URLVariables or String.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error can occur for the following reasons:
    1) Flash Player cannot convert the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.data</codeph>
    parameter from UTF8 to MBCS. This error is applicable if the URLRequest object
    passed to the <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> method is set to perform a GET operation and if
    <codeph class="+ topic/ph pr-d/codeph ">System.useCodePage</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
    2) Flash Player cannot allocate memory for the <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> data. This error is
    applicable if the URLRequest object passed to the <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> method is set
    to perform a <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> operation.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">MemoryError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:MemoryError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the method is not called in response to a user action, such as a mouse
    event or keypress event.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The URLRequest object. The <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property of the URLRequest object
    should contain the URL of the file to download to the local computer. 
    If this parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, an exception is thrown. The <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> property
    of the URLRequest object is ignored; custom HTTP request headers are not supported in uploads or downloads.
    
    To send <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> or GET parameters to the server, set the value of <codeph class="+ topic/ph pr-d/codeph ">URLRequest.data</codeph>
    to your parameters, and set <codeph class="+ topic/ph pr-d/codeph ">URLRequest.method</codeph> to either <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph>
    or <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.GET</codeph>.
    
        <p class="- topic/p ">On some browsers, URL strings are limited in length. Lengths greater than 256 characters may 
        fail on some browsers or servers.</p>
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">defaultFileName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The default filename displayed in the dialog box for the file 
    to be downloaded. This string must not contain the following characters:
    / \ : ~~ ? " &lt; &gt; | %
    <p class="- topic/p ">If you omit this parameter, the filename of the
    remote URL is parsed and used as the default. </p>
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Opens a dialog box that lets the user download a file from a remote server. 
        <ph class="- topic/ph ">Although Flash Player has no restriction on the size of files you can upload or download,
        the player officially supports uploads or downloads of up to 100 MB.</ph>
    
    <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">download()</codeph> method first opens
    an operating-system dialog box that asks the user to enter a filename and 
    select a location on the local computer
    to save the file. When the user selects a location and confirms the download operation 
    (for example, by clicking Save), the download from the remote server begins. 
    Listeners receive events to indicate the progress, success, or
    failure of the download. 
    To ascertain the status of the dialog box and the download operation after calling 
        <codeph class="+ topic/ph pr-d/codeph ">download()</codeph>, your code must listen for events 
    such as <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph>, <codeph class="+ topic/ph pr-d/codeph ">open</codeph>,
    <codeph class="+ topic/ph pr-d/codeph ">progress</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>.
    </p>
    
    <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> functions
    are nonblocking. These functions return after they are called, before the file transmission
    is complete. In addition, if the FileReference object goes out of scope, any upload or download
    that is not yet completed on that object is canceled upon leaving the scope. 
    Be sure that your FileReference object remains in scope for as long as the 
    upload or download is expected to continue.</p>
    
    <p class="- topic/p ">When the file is downloaded successfully, the
    properties of the FileReference object are populated with the properties
    of the local file. The <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event is dispatched if the
    download is successful.</p>
    
    <p class="- topic/p ">Only one <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">download()</codeph> session can
    be performed at a time (because only one dialog box can be invoked at a time).</p>
    
    <p class="- topic/p ">This method supports downloading of any file type, with either HTTP or HTTPS.</p>
    
    <p class="- topic/p ">You cannot connect to commonly reserved ports. 
    For a complete list of blocked ports, see "Restricting Networking APIs" in the 
    <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</p>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: If your server requires user authentication, only  
    SWF files running in a browser — that is, using the browser plug-in or ActiveX control —
    can provide a dialog box to prompt the user for a user name and password for authentication,
    and only for downloads. For uploads using the plug-in or ActiveX control, or for
    uploads and downloads using the stand-alone or external player, the file transfer fails.</p>
    
    <p class="- topic/p ">When you use this method , consider the <ph class="- topic/ph ">Flash Player</ph>
     security model: </p>
    
    <ul class="- topic/ul "><li class="- topic/li ">Loading operations are not allowed if the calling SWF file is in an untrusted local sandbox.</li><li class="- topic/li ">The default behavior is to deny access between sandboxes. A website can enable access to a 
    resource by adding a URL policy file.</li><li class="- topic/li ">You can prevent a SWF file from using this method by setting the  <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> 
    parameter of the the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> tags in the HTML 
    page that contains the SWF content.</li><li class="- topic/li ">In Flash Player 10 and Flash Player 9 Update 5, you can only call this method successfully in response
    to a user event (for example, in an event handler for a mouse click or keypress event). Otherwise, calling
    this method results in Flash Player throwing an Error exception.</li></ul>
    
    <p class="- topic/p ">However, <ph class="- topic/ph ">in Adobe AIR,</ph>
    content in the <codeph class="+ topic/ph pr-d/codeph ">application</codeph> security sandbox (content
    installed with the AIR application) is not restricted by these security limitations.</p>
    
    <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic: 
    <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
    
    
    <p class="- topic/p ">When you download a file using this method, it is flagged as downloaded on operating systems 
    that flag downloaded files:</p>
           
    <ul class="- topic/ul "><li class="- topic/li ">Windows XP service pack 2 and later, and on Windows Vista</li><li class="- topic/li ">Mac OS 10.5 and later</li></ul>
           
    <p class="- topic/p ">Some operating systems, such as Linux, do not flag downloaded files.</p>
    
    <p class="- topic/p ">Note that because of new functionality added to the Flash Player, when publishing to Flash Player 10, you can have
    only one of the following operations active at one time: <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>, 
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph>,
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph>. Otherwise, Flash Player throws a runtime error (code 2174). Use <codeph class="+ topic/ph pr-d/codeph ">FileReference.cancel()</codeph>
    to stop an operation in progress. This restriction applies only to Flash Player 10. Previous versions of Flash Player
    are unaffected by this restriction on simultaneous multiple operations.</p> 
    
 	
	<p class="- topic/p ">In Adobe AIR, the download dialog is not always displayed in front of windows that are
	"owned" by another window (windows that have a non-null <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> property).
	To avoid window ordering issues, hide owned windows before calling this method.</p>
	 
    </apiDesc><example conref="examples\FileReference_download.as" class="- topic/example "> The following example shows usage of the <codeph class="+ topic/ph pr-d/codeph ">download</codeph> event object.
 To run this example, change the <codeph class="+ topic/ph pr-d/codeph ">downloadURL.url</codeph> property to point to an actual domain and file,
 rather than the fictional http://www.[yourDomain].com/SomeFile.pdf.
 You might also need to compile the SWF file with Local playback security set to Access network only
 or to update Flash Player security settings to allow this file network access.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;
    import flash.net.FileFilter;

    public class FileReference_download extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_download() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            configureListeners(file);
            file.download(downloadURL, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL.url);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="../../flash/filesystem/File.html#downloaded" class="- topic/link "><linktext class="- topic/linktext ">File.downloaded</linktext></link><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link><link href="flash.net.xml#FileReference/save()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.save()</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:download_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when a download operation starts.
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when a download operation starts.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched periodically during the file download operation.
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched periodically during the file download operation.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the file download operation successfully completes.
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the file download operation successfully completes.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user dismisses the dialog box.
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user dismisses the dialog box.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user selects a file for download from the dialog box. 
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user selects a file for download from the dialog box.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when a download fails because of a
    security error.
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when a download fails because of a
    security error.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched for any of the following reasons:
    <ul class="- topic/ul "><li class="- topic/li ">An input/output error occurs while the file is being read or transmitted.</li><li class="- topic/li ">SWF content running in the stand-alone or external versions of Flash Player tries to download a 
        file from a server that requires authentication. During download, the standalone and external players
    do not provide a means for users to enter passwords. If a SWF file in these players tries to download
    a file from a server that requires authentication, the download fails. 
    File download can succeed only in the ActiveX control and browser plug-in players.</li></ul>
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched for any of the following reasons:
    
    An input/output error occurs while the file is being read or transmitted.
        SWF content running in the stand-alone or external versions of Flash Player tries to download a 
        file from a server that requires authentication.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:load" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">load</apiName><shortdesc class="- topic/shortdesc ">
    Starts the load of a local file selected by a user.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">load, FileReference.load
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Thrown in the following situations: 1) Another FileReference or
    FileReferenceList browse session is in progress; only one file browsing session may be performed
    at a time.
    2) A setting in the user's mms.cfg file prohibits this operation.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error can occur if the application cannot allocate memory for the file.
    The file may be too large or available memory may be too low.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">MemoryError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:MemoryError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Starts the load of a local file.
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Starts the load of a local file selected by a user. 
    <ph class="- topic/ph ">Although Flash Player has no restriction on the size of files you can upload, 
    download, load or save, it officially supports sizes of up to 100 MB. For content running in Flash Player,
    you must call the <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> method before 
    you call the <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> method. However, content running in AIR in the application sandbox can call
    the <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> method of a File object without first calling the <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> method. 
    (The AIR File class extends the FileReference class.)</ph>
    
    <p class="- topic/p ">Listeners receive events to indicate the progress, success, or
    failure of the load. Although you can use the FileReferenceList object to let users 
    select multiple files to load, you must load the files one by one. To load the files
    one by one, iterate through the <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.fileList</codeph> array of FileReference objects.</p>
    
    <p class="- topic/p ">Adobe AIR also includes the FileStream class which provides more options for 
    reading files.</p>
    
    <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph>
    and <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph> functions
    are nonblocking. These functions return after they are called, before the file transmission
    is complete. In addition, if the FileReference object goes out of scope, any transaction
    that is not yet completed on that object is canceled upon leaving the scope. 
    Be sure that your FileReference object remains in scope for as long as the 
    upload, download, load or save is expected to continue.</p>
    
    <p class="- topic/p ">If the file finishes loading successfully, its contents are stored as a byte array
    in the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property of the FileReference object.</p>
    
    <p class="- topic/p ">The following security considerations apply:</p>
    
    <ul class="- topic/ul "><li class="- topic/li ">Loading operations are not allowed if the calling SWF file is in an untrusted local sandbox.</li><li class="- topic/li ">The default behavior is to deny access between sandboxes. A website can enable access to a 
    resource by adding a cross-domain policy file.</li><li class="- topic/li ">You can prevent a file from using this method by setting the  <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> 
    parameter of the the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> tags in the HTML 
    page that contains the SWF content.</li></ul>
    
    <p class="- topic/p ">However, these considerations do not apply to AIR content in the application sandbox.</p>
    
    <p class="- topic/p ">Note that when publishing to Flash Player 10 or AIR 1.5, you can have only one of the following operations active at one time: 
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph>,
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph>. Otherwise, the application throws a runtime error (code 2174). Use <codeph class="+ topic/ph pr-d/codeph ">FileReference.cancel()</codeph>
    to stop an operation in progress. This restriction applies only to Flash Player 10 and AIR 1.5. Previous versions of Flash Player
    or AIR are unaffected by this restriction on simultaneous multiple operations.</p>
    
 	
	<p class="- topic/p ">In Adobe AIR, the file-browsing dialog is not always displayed in front of windows that are
	"owned" by another window (windows that have a non-null <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> property).
	To avoid window ordering issues, hide owned windows before calling this method.</p>
	
    </apiDesc><example conref="examples\FileFilter.as" class="- topic/example "> The following example uploads an image from your local file system to the root display object (in this case, the stage).
 Example provided by <xref href="http://blog.andrevenancio.com/" scope="external" class="- topic/xref ">Andre Venancio</xref>.
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var buttonShape:Shape = new Shape();
buttonShape.graphics.beginFill(0x336699);
buttonShape.graphics.drawCircle(50, 50, 25);
var button = new SimpleButton(buttonShape, buttonShape, buttonShape, buttonShape);
addChild(button);

var fileRef:FileReference= new FileReference();
button.addEventListener(MouseEvent.CLICK, onButtonClick);

function onButtonClick(e:MouseEvent):void {
fileRef.browse([new FileFilter("Images", "*.jpg;*.gif;*.png")]);
fileRef.addEventListener(Event.SELECT, onFileSelected);
}

function onFileSelected(e:Event):void {
fileRef.addEventListener(Event.COMPLETE, onFileLoaded);
fileRef.load();
}

function onFileLoaded(e:Event):void {
var loader:Loader = new Loader();
loader.loadBytes(e.target.data);
addChild(loader);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/data" class="- topic/link "><linktext class="- topic/linktext ">FileReference.data</linktext></link><link href="flash.net.xml#FileReferenceList/fileList" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.fileList</linktext></link><link href="flash.net.xml#FileReference/save()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.save()</linktext></link><link href="flash.filesystem.xml#FileStream" class="- topic/link "><linktext class="- topic/linktext ">FileStream</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:load_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when an load operation starts.
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when an load operation starts.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:load_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched periodically during the file load operation.
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched periodically during the file load operation.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:load_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the file load operation completes successfully.
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the file load operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:load_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Invoked if the load fails because of an input/output error while the application
    is reading or writing the file.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Invoked if the load fails because of an input/output error while the application
    is reading or writing the file.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:save" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">save</apiName><shortdesc class="- topic/shortdesc ">
    Opens a dialog box that lets the user save a file to the local filesystem.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Thrown in the following situations: 1) Another browse session is in 
    progress; only one file browsing session can be performed at a time. 
    2) The filename to download contains prohibited characters.
    3) A setting in the user's mms.cfg file prohibits this operation.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If <codeph class="+ topic/ph pr-d/codeph ">data</codeph> is not of type ByteArray, and it does not
    have a <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method, an exception is thrown.  If <codeph class="+ topic/ph pr-d/codeph ">data</codeph> is
    not of type XML, and it does not have a <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> method, an exception is thrown.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the method is not called in response to a user action, such as a mouse
    event or keypress event.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error can occur if Flash Player cannot allocate memory for the file.
    The file may be too large or available memory may be too low.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">MemoryError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:MemoryError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The data to be saved. The data can be in one of several formats, and will be treated
    appropriately:
    <ul class="- topic/ul "><li class="- topic/li ">If the value is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, the application throws an ArgumentError exception.</li><li class="- topic/li ">If the value is a String, it is saved as a UTF-8 text file.</li><li class="- topic/li ">If the value is XML, it is written to a text file in XML format, with all formatting preserved.</li><li class="- topic/li ">If the value is a ByteArray object, it is written to a data file verbatim.</li><li class="- topic/li ">If the value is none of the above, the <codeph class="+ topic/ph pr-d/codeph ">save()</codeph> method calls the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method of the 
    object to convert the data to a string, and it then saves the data as a text file. If that fails, the application throws 
    an ArgumentError exception.</li></ul>
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">defaultFileName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The default filename displayed in the dialog box for the file 
    to be saved. This string must not contain the following characters:
    / \ : ~~ ? " &lt; &gt; | %
    <p class="- topic/p ">
    If a File object calls this method, the filename will be that of the file the File object references. (The AIR File class
    extends the FileReference class.)</p>
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Opens a dialog box that lets the user save a file to the local filesystem. 
    <ph class="- topic/ph ">Although Flash Player has no restriction on 
    the size of files you can upload, download, load or save,
    the player officially supports sizes of up to 100 MB.</ph>
    
    <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">save()</codeph> method first opens
    an operating-system dialog box that asks the user to enter a filename and 
    select a location on the local computer
    to save the file. When the user selects a location and confirms the save operation 
    (for example, by clicking Save), the save process begins. 
    Listeners receive events to indicate the progress, success, or
    failure of the save operation. 
    To ascertain the status of the dialog box and the save operation after calling 
    <codeph class="+ topic/ph pr-d/codeph ">save()</codeph>, your code must listen for events 
    such as <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph>, <codeph class="+ topic/ph pr-d/codeph ">open</codeph>,
    <codeph class="+ topic/ph pr-d/codeph ">progress</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>.
    </p>
    
    <p class="- topic/p ">Adobe AIR also includes the FileStream class which provides more options for 
    saving files locally.</p>
    
    <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph>
    and <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph> functions
    are nonblocking. These functions return after they are called, before the file transmission
    is complete. In addition, if the FileReference object goes out of scope, any transaction
    that is not yet completed on that object is canceled upon leaving the scope. 
    Be sure that your FileReference object remains in scope for as long as the 
    upload, download, load or save is expected to continue.</p>
    
    <p class="- topic/p ">When the file is saved successfully, the
    properties of the FileReference object are populated with the properties
    of the local file. The <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event is dispatched if the
    save is successful.</p>
    
    <p class="- topic/p ">Only one <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">save()</codeph> session can
    be performed at a time (because only one dialog box can be invoked at a time).</p>
    
    <p class="- topic/p ">In Flash Player, you can only call this method successfully in response to  
    a user event (for example, in an event handler for a mouse click or keypress event). Otherwise, calling
    this method results in Flash Player throwing an Error exception. This limitation does not apply to
    AIR content in the application sandbox.</p>
    
 	
	<p class="- topic/p ">In Adobe AIR, the save dialog is not always displayed in front of windows that are
	"owned" by another window (windows that have a non-null <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> property).
	To avoid window ordering issues, hide owned windows before calling this method.</p>
	
    </apiDesc><example conref="examples\FileReference_save.as" class="- topic/example "> The following example saves the content typed into a text field to a file.
 The example creates an editable text field (<codeph class="+ topic/ph pr-d/codeph ">MyTextField</codeph>)
 and another text field that is not editable (<codeph class="+ topic/ph pr-d/codeph ">MyButtonField</codeph>)to serve as a "button"
 to respond to a mouse click. A user can edit the first text field and click the button
 to save the text field contents to a local file. The mouse click event handler <codeph class="+ topic/ph pr-d/codeph ">clickhandler</codeph>
 uses the <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph> method (for a FileReference object named <codeph class="+ topic/ph pr-d/codeph ">MyFileReference</codeph>)
 to open a dialog on the user's current operating system so the user can save the contents to a local file with the
 name the user provides.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var MyTextField:TextField = new TextField();
var MyButtonField:TextField = new TextField();
var MyFile:FileReference = new FileReference();

MyTextField.border = true;
MyTextField.type = TextFieldType.INPUT;

MyButtonField.background = true;
MyButtonField.backgroundColor = 0x339933;
MyButtonField.x = 150;
MyButtonField.height = 20;
MyButtonField.text = "Click here to save";

addChild(MyTextField);
addChild(MyButtonField);
MyButtonField.addEventListener(MouseEvent.CLICK, clickhandler);

function clickhandler(e:MouseEvent): void {
    MyFile.save(MyTextField.text);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/load()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.load()</linktext></link><link href="flash.net.xml#FileReference/data" class="- topic/link "><linktext class="- topic/linktext ">FileReference.data</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.filesystem.xml#FileStream" class="- topic/link "><linktext class="- topic/linktext ">FileStream</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:save_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when a download operation starts.
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when a download operation starts.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched periodically during the file download operation.
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched periodically during the file download operation.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the file download operation successfully completes.
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the file download operation successfully completes.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user dismisses the dialog box.
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user dismisses the dialog box.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the user selects a file for download from the dialog box. 
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the user selects a file for download from the dialog box.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched if an input/output error occurs while the file is being read or transmitted.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched if an input/output error occurs while the file is being read or transmitted.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:uploadUnencoded" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">uploadUnencoded</apiName><shortdesc class="- topic/shortdesc ">
    Initiate uploading a file to a URL without any encoding.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Local untrusted SWF files may not communicate with
    the Internet. To avoid this situation, reclassify this SWF file
    as local-with-networking or trusted. This exception is thrown with a message indicating the name of
    the local file and the URL that may not be accessed.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Thrown in the following situations: 1) Another FileReference or FileReferenceList 
    browse session is in progress; only one file browsing session may be performed at a time. 2) The URL parameter 
    is not a valid path or protocol. File upload must use HTTP.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The URLRequest object; the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property of the URLRequest object
    should contain the URL of the server script
    configured to handle upload through HTTP <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> calls.
    On some browsers, URL strings are limited in length. 
    Lengths greater than 256 characters may fail on some browsers or servers.
    If this parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, an exception is thrown.  
     
    <p class="- topic/p ">The URL can be HTTP or, for secure uploads, HTTPS. 
    To use HTTPS, use an HTTPS url in the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> parameter.
    If you do not specify a port number in the <codeph class="+ topic/ph pr-d/codeph ">url</codeph>
    parameter, port 80 is used for HTTP and port 443 us used for HTTPS, by default.</p>
    
    <p class="- topic/p ">To send <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> or <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> parameters to the server, set the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property
    of the URLRequest object to your parameters, and set the <codeph class="+ topic/ph pr-d/codeph ">method</codeph> property 
    to either <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> or
    <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.GET</codeph>.</p>
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Starts the upload of a file to a remote server without encoding. 
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Initiate uploading a file to a URL without any encoding. Whereas the <codeph class="+ topic/ph pr-d/codeph ">upload()</codeph> method encodes 
    the file in a form-data envelope, the <codeph class="+ topic/ph pr-d/codeph ">uploadUnencoded()</codeph> method passes the file contents as-is
    in the HTTP request body. Use the uploadUnencoded() method if the data you wish to send is already encoded
    in a format that the receiving server can understand.You typically use the <codeph class="+ topic/ph pr-d/codeph ">uploadeUnencoded()</codeph> 
    method with the <codeph class="+ topic/ph pr-d/codeph ">HTTP/WebDAV PUT</codeph> method.
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReferenceList/fileList" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.fileList</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">upload()</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when an upload operation starts.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when an upload operation starts.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched periodically during the file upload operation.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched periodically during the file upload operation.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the file upload operation completes successfully.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the file upload operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_uploadCompleteData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">uploadCompleteData</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when data has been received from the server after a 
    successful file upload.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when data has been received from the server after a 
    successful file upload.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when an upload fails because of a
    security violation.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when an upload fails because of a
    security violation.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when an upload fails because of an HTTP error.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when an upload fails because of an HTTP error.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The upload operation completes successfully and the server 
    returns a response URL and response headers.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The upload operation completes successfully and the server 
    returns a response URL and response headers.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Invoked in any of the following situations:
    <ul class="- topic/ul "><li class="- topic/li ">The upload fails because of an input/output error while Adobe AIR is reading, 
    writing, or transmitting the file.</li><li class="- topic/li ">The upload fails because an attempt to upload a file to a server that requires 
    authentication (such as a user name and password). During upload, no mean is provided
    for users to enter passwords.</li><li class="- topic/li ">The upload fails because the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> parameter contains an invalid protocol.
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> must use HTTP or HTTPS.</li></ul>
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Invoked in any of the following situations:
    
    The upload fails because of an input/output error while Adobe AIR is reading, 
    writing, or transmitting the file.
    The upload fails because an attempt to upload a file to a server that requires 
    authentication (such as a user name and password).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:upload" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">upload</apiName><shortdesc class="- topic/shortdesc ">
    Starts the upload of the file to a remote server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">upload, FileReference.upload
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Local untrusted SWF files may not communicate with
    the Internet. To avoid this situation, reclassify this SWF file
    as local-with-networking or trusted. This exception is thrown with a message indicating the name of
    the local file and the URL that may not be accessed.
    
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot connect to commonly reserved ports. 
     For a complete list of blocked ports, see "Restricting Networking APIs" in the 
     <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.
     
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Thrown in the following situations: 1) Another FileReference or
    FileReferenceList browse session is in progress; only one file browsing session may be performed
    at a time.
    2) The URL parameter is not a valid path or protocol. File upload must use HTTP,
    and file download must use FTP or HTTP.
    3) The <codeph class="+ topic/ph pr-d/codeph ">uploadDataFieldName</codeph> parameter is set to <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    4) A setting in the user's mms.cfg file prohibits this operation.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Thrown in the following situations: 1) The <codeph class="+ topic/ph pr-d/codeph ">uploadDataFieldName</codeph>
    parameter is an empty string. 2) <codeph class="+ topic/ph pr-d/codeph ">url.data</codeph> is of type ByteArray. 
    For use with the <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> and
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> methods, <codeph class="+ topic/ph pr-d/codeph ">url.data</codeph> may only be of type
    URLVariables or String. 3) In the AIR runtime (in the application security sandbox), the method of the 
    URLRequest is not GET or POST (use <codeph class="+ topic/ph pr-d/codeph ">uploadEncoded()</codeph> instead).
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error can occur for the following reasons:
    1) Flash Player cannot convert the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.data</codeph>
    parameter from UTF8 to MBCS. This error is applicable if the URLRequest object
    passed to <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> is set to perform a GET operation and if
    <codeph class="+ topic/ph pr-d/codeph ">System.useCodePage</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
    2) Flash Player cannot allocate memory for the <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> data. This error is
    applicable if the URLRequest object passed to <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> is set
    to perform a <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> operation.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">MemoryError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:MemoryError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The URLRequest object; the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property of the URLRequest object
    should contain the URL of the server script
    configured to handle upload through HTTP <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> calls.
    On some browsers, URL strings are limited in length. 
    Lengths greater than 256 characters may fail on some browsers or servers.
    If this parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, an exception is thrown. The <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> property
    of the URLRequest object is ignored; custom HTTP request headers are not supported in uploads or downloads.
     
    <p class="- topic/p ">The URL can be HTTP or, for secure uploads, HTTPS. 
    To use HTTPS, use an HTTPS url in the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> parameter.
    If you do not specify a port number in the <codeph class="+ topic/ph pr-d/codeph ">url</codeph>
    parameter, port 80 is used for HTTP and port 443 us used for HTTPS, by default.</p>
    
    <p class="- topic/p ">To send <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> or <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> parameters to the server, set the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property
    of the URLRequest object to your parameters, and set the <codeph class="+ topic/ph pr-d/codeph ">method</codeph> property 
    to either <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph> or
    <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.GET</codeph>.</p>
    
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uploadDataFieldName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">Filedata</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The field name that precedes the file data in the upload <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> operation.
    The <codeph class="+ topic/ph pr-d/codeph ">uploadDataFieldName</codeph> value must be non-null and a non-empty String.
    By default, the value of <codeph class="+ topic/ph pr-d/codeph ">uploadDataFieldName</codeph> is <codeph class="+ topic/ph pr-d/codeph ">"Filedata"</codeph>,
    as shown in the following sample <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> request:
    <pre xml:space="preserve" class="- topic/pre ">
    Content-Type: multipart/form-data; boundary=AaB03x
    --AaB03x 
    Content-Disposition: form-data; name="Filedata"; filename="example.jpg" 
    Content-Type: application/octet-stream
    ... contents of example.jpg ... 
    --AaB03x-- 
    </pre>
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">testUpload</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A setting to request a test file upload. If <codeph class="+ topic/ph pr-d/codeph ">testUpload</codeph>
    is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, for files larger than 10 KB, Flash Player attempts
    a test file upload <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> with a Content-Length of 0. The test upload
    checks whether the actual file upload will be successful and that server
    authentication, if required, will succeed. A test upload 
    is only available for Windows players.
    
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Starts the upload of a file to a remote server.
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Starts the upload of the file to a remote server. <ph class="- topic/ph ">Although 
    Flash Player has no restriction on the size of files you can upload or download,
    the player officially supports uploads or downloads of up to 100 MB.</ph>
    You must call the <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>
    method before you call this method.
    
    <p class="- topic/p ">For the Adobe AIR File class, which extends the FileReference class, you can use the <codeph class="+ topic/ph pr-d/codeph ">upload()</codeph>
    method to upload any file. For the FileReference class (used in Flash Player), the user must first
    select a file.</p>
    
    <p class="- topic/p ">Listeners receive events to indicate the progress, success, or
    failure of the upload. Although you can use the FileReferenceList object to let users 
    select multiple files for upload, you must upload the files one by one; to do so, iterate through
    the <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.fileList</codeph> array of FileReference objects.</p>
    
    <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> functions
    are nonblocking. These functions return after they are called, before the file transmission
    is complete. In addition, if the FileReference object goes out of scope, any upload or download
    that is not yet completed on that object is canceled upon leaving the scope. 
    Be sure that your FileReference object remains in scope for as long as the 
    upload or download is expected to continue.</p>
    
    <p class="- topic/p ">The file is uploaded to the URL passed in the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> parameter. The URL 
    must be a server script configured to accept uploads. Flash Player uploads files by using 
    the HTTP <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> method. The server script that handles the upload
    should expect a <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> request with the following elements:</p>
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Content-Type</codeph> of <codeph class="+ topic/ph pr-d/codeph ">multipart/form-data</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Content-Disposition</codeph> with a <codeph class="+ topic/ph pr-d/codeph ">name</codeph> attribute set to <codeph class="+ topic/ph pr-d/codeph ">"Filedata"</codeph> by default
    and a <codeph class="+ topic/ph pr-d/codeph ">filename</codeph> attribute set to the name of the original file</li><li class="- topic/li ">The binary contents of the file</li></ul>
    
     <p class="- topic/p ">You cannot connect to commonly reserved ports. 
     For a complete list of blocked ports, see "Restricting Networking APIs" in the 
     <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</p>
     
    <p class="- topic/p ">For a sample <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> request, see the description of the <codeph class="+ topic/ph pr-d/codeph ">uploadDataFieldName</codeph>
    parameter. You can send <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> or <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> parameters to the server with the <codeph class="+ topic/ph pr-d/codeph ">upload()</codeph>
    method; see the description of the <codeph class="+ topic/ph pr-d/codeph ">request</codeph> parameter.</p>
    
    <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">testUpload</codeph> parameter is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, 
    and the file to be uploaded is bigger than approximately 10 KB, Flash Player on Windows
    first sends a test upload <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> operation with zero content before uploading the actual file,
    to verify that the transmission is likely to succeed. Flash Player then sends 
    a second <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> operation that contains the actual file content. 
    For files smaller than 10 KB, Flash Player performs a single
    upload <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> with the actual file content to be uploaded. 
    Flash Player on Macintosh does not perform test upload <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> operations.</p>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: If your server requires user authentication, only  
    SWF files running in a browser — that is, using the browser plug-in or ActiveX control —
    can provide a dialog box to prompt the user for a username and password for authentication,
    and only for downloads. For uploads using the plug-in or ActiveX control, or for
    uploads and downloads using the stand-alone or external player, the file transfer fails.</p>
    
    <p class="- topic/p ">When you use this method , consider the <ph class="- topic/ph ">Flash Player</ph>
     security model: </p>
    
    
    <ul class="- topic/ul "><li class="- topic/li ">Loading operations are not allowed if the calling SWF file is in an untrusted local sandbox.</li><li class="- topic/li ">The default behavior is to deny access between sandboxes. A website can enable access to a 
    resource by adding a URL policy file.</li><li class="- topic/li ">You can prevent a SWF file from using this method by setting the  <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> 
    parameter of the the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> tags in the HTML 
    page that contains the SWF content.</li></ul>
    
    <p class="- topic/p ">However, in Adobe AIR, content in the <codeph class="+ topic/ph pr-d/codeph ">application</codeph> security sandbox (content
    installed with the AIR application) are not restricted by these security limitations.</p>
    
    <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic: 
    <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
    
    <p class="- topic/p ">Note that because of new functionality added to the Flash Player, when publishing to Flash Player 10, you can have
    only one of the following operations active at one time: <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>, 
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.load()</codeph>,
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.save()</codeph>. Otherwise, Flash Player throws a runtime error (code 2174). Use <codeph class="+ topic/ph pr-d/codeph ">FileReference.cancel()</codeph>
    to stop an operation in progress. This restriction applies only to Flash Player 10. Previous versions of Flash Player
    are unaffected by this restriction on simultaneous multiple operations.</p>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/download()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.download()</linktext></link><link href="flash.net.xml#FileReferenceList/fileList" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.fileList</linktext></link><link href="flash.net.xml#FileReference/load()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.load()</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:upload_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when an upload operation starts.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when an upload operation starts.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched periodically during the file upload operation.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched periodically during the file upload operation.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the file upload operation completes successfully.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the file upload operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_uploadCompleteData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">uploadCompleteData</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when data has been received from the server after a successful file upload.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when data has been received from the server after a successful file upload.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when an upload fails because of a
    security violation.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when an upload fails because of a
    security violation.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when an upload fails because of an HTTP error.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when an upload fails because of an HTTP error.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The upload operation completes successfully and the server 
    returns a response URL and response headers.
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The upload operation completes successfully and the server 
    returns a response URL and response headers.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Invoked in any of the following situations:
    <ul class="- topic/ul "><li class="- topic/li ">The upload fails because of an input/output error while <ph class="- topic/ph ">Flash 
    Player or</ph> Adobe AIR is reading, writing, or transmitting the file.</li><li class="- topic/li ">The upload fails because an attempt to upload a file to a server that requires 
    authentication (such as a user name and password). During upload, no mean is provided
    for users to enter passwords.</li><li class="- topic/li ">The upload fails because the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> parameter contains an invalid protocol.
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> must use HTTP or HTTPS.</li></ul>
    
    </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Invoked in any of the following situations:
    
    The upload fails because of an input/output error while Flash 
    Player or Adobe AIR is reading, writing, or transmitting the file.
    The upload fails because an attempt to upload a file to a server that requires 
    authentication (such as a user name and password).</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:FileReference:creationDate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">creationDate</apiName><shortdesc class="- topic/shortdesc ">
    The creation date of the file on the local disk.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">creationDate, FileReference.creationDate
    
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Date</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>,
    <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> method was not called 
    successfully, an exception is thrown with a message indicating that functions were called in the 
    incorrect sequence or an earlier call was unsuccessful. 
    In this case, the value of the <codeph class="+ topic/ph pr-d/codeph ">creationDate</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the file information cannot be accessed, an exception is thrown with a message
    indicating a file I/O error.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gets the creation date of the file as a Date object.
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    The creation date of the file on the local disk. If the object is
    was not populated, a call to get the value of this property returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:creator:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">creator</apiName><shortdesc class="- topic/shortdesc ">
    The Macintosh creator type of the file, which is only used in Mac OS versions 
    prior to Mac OS X.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">creator, FileReference.creator
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">On Macintosh, if the <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>,
    <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> method was not called 
    successfully, an exception is thrown with a message indicating that functions were called in the 
    incorrect sequence or an earlier call was unsuccessful. In this case, the value of the <codeph class="+ topic/ph pr-d/codeph ">creator</codeph> property 
    is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The Macintosh creator type.
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    The Macintosh creator type of the file, which is only used in Mac OS versions 
    prior to Mac OS X. In Windows or Linux, this property is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    If the FileReference object
    was not populated, a call to get the value of this property returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReference/extension" class="- topic/link "><linktext class="- topic/linktext ">FileReference.extension</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
    The ByteArray object representing the data from the loaded file after a successful call to the load() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
    </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.utils:ByteArray</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> method was not called 
    successfully, an exception is thrown with a message indicating that functions were called in the 
    incorrect sequence or an earlier call was unsuccessful. In this case, the value of the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property 
    is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the file cannot be opened or read, or if a similar error is encountered in 
    accessing the file, an exception is thrown with a message indicating a file I/O error. In this case, the value 
    of the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The loaded data of the file, as a ByteArray.
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    The ByteArray object representing the data from the loaded file after a successful call to the <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> method.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReference/load()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.load()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:extension:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">extension</apiName><shortdesc class="- topic/shortdesc ">
     The filename extension.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the reference is not initialized.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The filename extension.
     
     <p class="- topic/p ">A file's extension is the part of the name following (and not including) the final dot (".").
     If there is no dot in the filename, the extension is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
     
     <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> You should use the <codeph class="+ topic/ph pr-d/codeph ">extension</codeph> property to determine a file's type; do not use the 
     <codeph class="+ topic/ph pr-d/codeph ">creator</codeph> or <codeph class="+ topic/ph pr-d/codeph ">type</codeph> properties. You should consider the <codeph class="+ topic/ph pr-d/codeph ">creator</codeph> and <codeph class="+ topic/ph pr-d/codeph ">type</codeph>
     properties to be considered deprecated. They apply to older versions of Mac OS.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:FileReference:modificationDate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">modificationDate</apiName><shortdesc class="- topic/shortdesc ">
   The date that the file on the local disk was last modified.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">modificationDate, FileReference.modificationDate
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Date</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>,
   <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> method was not called 
   successfully, an exception is thrown with a message indicating that functions were called in the 
   incorrect sequence or an earlier call was unsuccessful. In this case,
   the value of the <codeph class="+ topic/ph pr-d/codeph ">modificationDate</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
   
   </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the file information cannot be accessed, an exception is thrown with a message
   indicating a file I/O error.
   
   </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gets the modification date of the file as a Date object.
   </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
   The date that the file on the local disk was last modified. If the FileReference 
   object was not populated, a call to get the value of this property returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
   
   </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
   The name of the file on the local disk.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
   </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>,
   <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> method was not called 
   successfully, an exception is thrown with a message indicating that functions were called in the 
   incorrect sequence or an earlier call was unsuccessful.
   
   </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gets the name of the file as a String.
   </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
   The name of the file on the local disk. If the FileReference object
   was not populated (by a valid call to <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">
   FileReference.browse()</codeph>), Flash Player throws an error when you try to get the 
   value of this property.
   <p class="- topic/p ">All the properties of a FileReference object are populated by calling the <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> method.
   Unlike other FileReference properties, if you call the <codeph class="+ topic/ph pr-d/codeph ">download()</codeph> method, 
   the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> property is populated when the <codeph class="+ topic/ph pr-d/codeph ">select</codeph> event is dispatched.</p>
   
   </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:size:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">size</apiName><shortdesc class="- topic/shortdesc ">
  The size of the file on the local disk in bytes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
  </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>,
  <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> method was not called 
  successfully, an exception is thrown with a message indicating that functions were called in the 
  incorrect sequence or an earlier call was unsuccessful.
  
  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the file cannot be opened or read, or if a similar error is encountered in 
  accessing the file, an exception is thrown with a message indicating a file I/O error.
  
  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The size of the file in bytes.
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  The size of the file on the local disk in bytes. <ph class="- topic/ph ">If <codeph class="+ topic/ph pr-d/codeph ">size</codeph> is 0, 
  an exception is thrown.</ph>
  
  <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> In the initial version of ActionScript 3.0, the <codeph class="+ topic/ph pr-d/codeph ">size</codeph> property was 
  defined as a uint object, which supported files with sizes up to about 4 GB. It is now implemented as a Number 
  object to support larger files. </p>
  
  </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:type:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">type</apiName><shortdesc class="- topic/shortdesc ">
  The file type.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">type, FileReference.type
  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>,
  <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> method was not called 
  successfully, an exception is thrown with a message indicating that functions were called in the 
  incorrect sequence or an earlier call was unsuccessful. In this case, the value of the <codeph class="+ topic/ph pr-d/codeph ">type</codeph> property 
  is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
  
  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gets the type or extension of the file.
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  The file type. 
  
  <p class="- topic/p ">In Windows or Linux, this property is the file extension. On the Macintosh, this property is
  the four-character file type, which is only used in Mac OS versions prior to Mac OS X. If the FileReference object
    was not populated, a call to get the value of this property returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
    
    <p class="- topic/p ">For Windows, Linux, and Mac OS X, the file extension — the portion of the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> property that 
    follows the last occurrence of the dot (.) character — identifies the file type.</p>
    
  </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/extension" class="- topic/link "><linktext class="- topic/linktext ">FileReference.extension</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:FileReferenceList" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FileReferenceList</apiName><shortdesc class="- topic/shortdesc ">
 The FileReferenceList class provides a means to let users select one or more files for uploading.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">FileReferenceList
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Provides a means to upload one or more files.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The FileReferenceList class provides a means to let users select one or more files for uploading.
 A FileReferenceList object represents a group of one or more local files on the user's disk as
 an array of FileReference objects. For detailed information and important considerations about
 FileReference objects and the FileReference class, which you use with FileReferenceList,
 see the FileReference class.
 
 <p class="- topic/p ">To work with the FileReferenceList class:</p>
 <ul class="- topic/ul "><li class="- topic/li ">Instantiate the class: <codeph class="+ topic/ph pr-d/codeph ">var myFileRef = new FileReferenceList();</codeph></li><li class="- topic/li ">Call the <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> method, which opens a dialog box that
 lets the user select one or more files for upload: <codeph class="+ topic/ph pr-d/codeph ">myFileRef.browse();</codeph></li><li class="- topic/li ">After the <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> method is called successfully, the <codeph class="+ topic/ph pr-d/codeph ">fileList</codeph> property of
 the FileReferenceList object is populated with an array of FileReference objects.</li><li class="- topic/li ">Call <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> on each element in the
 <codeph class="+ topic/ph pr-d/codeph ">fileList</codeph> array.</li></ul>
 
 <p class="- topic/p ">The FileReferenceList class includes a <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> method and a
 <codeph class="+ topic/ph pr-d/codeph ">fileList</codeph> property for working with multiple files. While a call to <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>
 is executing, SWF file playback pauses in stand-alone and external versions of Flash Player
 and in AIR for Linux and Mac OS X 10.1 and earlier.</p>
 
 </apiDesc><example conref="examples\FileReferenceListExample.as" class="- topic/example "> The following example shows how you can use events to manage the upload of multiple files.
 The CustomFileReferenceList class extends FileReferenceList and includes a <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event,
 which is dispatched 
 when each individual file in the FileReferenceList object is uploaded. The <codeph class="+ topic/ph pr-d/codeph ">LIST_COMPLETE</codeph>
 event in the FileReferenceListExample class is dispatched when all the files in the FileReferenceList
 object have been uploaded.
 
 <p class="- topic/p ">To run this example, place a script that is written to accept
 a file upload at http://www.[yourDomain].com/yourUploadHandlerScript.cfm.
 Based on the location of your SWF file and where you are uploading files to, you 
 also might need to compile the SWF file with Local Playback Security set to Access Network Only
 or update Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player security settings to allow this file network access.
 If your upload server is remote and you run this example from your desktop computer,
 your server must have a crossdomain.xml file.</p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.FileReferenceList;
 
    public class FileReferenceListExample extends Sprite {
        public static var LIST_COMPLETE:String = "listComplete";
        public function FileReferenceListExample() {
            initiateFileUpload();
        }

        private function initiateFileUpload():void {
            var fileRef:CustomFileReferenceList = new CustomFileReferenceList();
            fileRef.addEventListener(FileReferenceListExample.LIST_COMPLETE, listCompleteHandler);
            fileRef.browse(fileRef.getTypes());
        }

        private function listCompleteHandler(event:Event):void {
            trace("listCompleteHandler");
        }
    }
}
 
import flash.events.*;
import flash.net.FileReference;
import flash.net.FileReferenceList;
import flash.net.FileFilter;
import flash.net.URLRequest;
 
class CustomFileReferenceList extends FileReferenceList {
    private var uploadURL:URLRequest;
    private var pendingFiles:Array;

    public function CustomFileReferenceList() {
        uploadURL = new URLRequest();
        uploadURL.url = "http://www.[yourDomain].com/yourUploadHandlerScript.cfm";
        initializeListListeners();
    }

    private function initializeListListeners():void {
        addEventListener(Event.SELECT, selectHandler);
        addEventListener(Event.CANCEL, cancelHandler);
    }

    public function getTypes():Array {
        var allTypes:Array = new Array();
        allTypes.push(getImageTypeFilter());
        allTypes.push(getTextTypeFilter());
        return allTypes;
    }
 
    private function getImageTypeFilter():FileFilter {
        return new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png");
    }
 
    private function getTextTypeFilter():FileFilter {
        return new FileFilter("Text Files (*.txt, *.rtf)", "*.txt;*.rtf");
    }
 
    private function doOnComplete():void {
        var event:Event = new Event(FileReferenceListExample.LIST_COMPLETE);
        dispatchEvent(event);
    }
 
    private function addPendingFile(file:FileReference):void {
        trace("addPendingFile: name=" + file.name);
        pendingFiles.push(file);
        file.addEventListener(Event.OPEN, openHandler);
        file.addEventListener(Event.COMPLETE, completeHandler);
        file.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        file.addEventListener(ProgressEvent.PROGRESS, progressHandler);
        file.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
        file.upload(uploadURL);
    }
 
    private function removePendingFile(file:FileReference):void {
        for (var i:uint; i &lt; pendingFiles.length; i++) {
            if (pendingFiles[i].name == file.name) {
                pendingFiles.splice(i, 1);
                if (pendingFiles.length == 0) {
                    doOnComplete();
                }
                return;
            }
        }
    }
 
    private function selectHandler(event:Event):void {
        trace("selectHandler: " + fileList.length + " files");
        pendingFiles = new Array();
        var file:FileReference;
        for (var i:uint = 0; i &lt; fileList.length; i++) {
            file = FileReference(fileList[i]);
            addPendingFile(file);
        }
    }
 
    private function cancelHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("cancelHandler: name=" + file.name);
    }
 
    private function openHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("openHandler: name=" + file.name);
    }
 
    private function progressHandler(event:ProgressEvent):void {
        var file:FileReference = FileReference(event.target);
        trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
    }
 
    private function completeHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("completeHandler: name=" + file.name);
        removePendingFile(file);
    }
 
    private function httpErrorHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("httpErrorHandler: name=" + file.name);
    }
 
    private function ioErrorHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("ioErrorHandler: name=" + file.name);
    }
 
    private function securityErrorHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("securityErrorHandler: name=" + file.name + " event=" + event.toString());
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference" class="- topic/link "><linktext class="- topic/linktext ">FileReference</linktext></link></related-links><adobeApiEvent id="flash.net:FileReferenceList_flash.events.Event.SELECT_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when the user selects one or more files to upload from the file-browsing dialog box.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example demonstrates the usage of the <code>select</code> event.
 <listing version="2.0">
 import flash.net.FileReferenceList;
 import flash.net.FileReference;
 
 var listener:Object = new Object();
 
 listener.onSelect = function(fileRefList:FileReferenceList) {
 	trace("onSelect");
 	var list:Array = fileRefList.fileList;
 	var item:FileReference;
 	for(var i:Number = 0; i &lt; list.length; i++) {
 		item = list[i];
 		trace("name: " + item.name);
 		trace(item.addListener(this));
 		item.upload("http://www.yourdomain.com/");
 	}
 }
 
 listener.onComplete = function(file:FileReference):void {
 	trace("onComplete: " + file.name);
 }
 
 var fileRef:FileReferenceList = new FileReferenceList();
 fileRef.addListener(listener);
 fileRef.browse();
 </listing>
 </maelexample></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.SELECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when the user selects one or more files to upload from the file-browsing dialog box.
 (This dialog box opens
 when you call the <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>  methods.)
 
 When the user selects a file and confirms the operation (for example, by clicking Save),
 the <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList</codeph> object is populated with FileReference objects
 that represent the files that the user selects.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReferenceList_flash.events.Event.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when the user dismisses the file-browsing dialog box.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
 </helpid></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when the user dismisses the file-browsing dialog box.
 (This dialog box opens
 when you call the <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>  methods.)
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.net:FileReferenceList:FileReferenceList" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">FileReferenceList</apiName><shortdesc class="- topic/shortdesc ">
 	 Creates a new FileReferenceList object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a new <code>FileReferenceList</code> object,
	 iterates over each selected file, and outputs their names.
	 <listing version="2.0">
	 import flash.net.FileReferenceList;
	 
	 var listener:Object = new Object();
	 listener.onSelect = function(fileRefList:FileReferenceList) {
	 	trace("onSelect");
	 	var arr:Array = fileRefList.fileList;
	 	for(var i:Number = 0; i &lt; arr.length; i++) {
	 		trace("name: " + arr[i].name);
	 	}
	 }
	 
	 var fileRef:FileReferenceList = new FileReferenceList();
	 fileRef.addListener(listener);
	 fileRef.browse();
	 </listing>
  	 
  	 </maelexample></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	 Creates a new FileReferenceList object. A FileReferenceList object contains nothing
	 until you call the <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> method on it and the user selects one or more files.
	 When you call <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> on the
	 FileReference object, the <codeph class="+ topic/ph pr-d/codeph ">fileList</codeph> property of the object is populated
	 with an array of <codeph class="+ topic/ph pr-d/codeph ">FileReference</codeph> objects.
	 
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference" class="- topic/link "><linktext class="- topic/linktext ">FileReference</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:FileReferenceList:browse" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browse</apiName><shortdesc class="- topic/shortdesc ">
	 Displays a file-browsing dialog box that lets the
	 user select one or more local files to upload.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample><pre xml:space="preserve" class="- topic/pre ">
	 // ask the user to choose an image file for upload
	 var fileRef = new FileReference();
	 if (fileRef.browse(["Images", "jpg;gif;png", "Flash Movies", "swf"])) {
	   trace("Opened " + fileRef.name);
	 } else {
	   trace("User canceled");
	 }
	 </pre>
	 
	 
	 </oldexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Thrown for the following reasons: 1) Another FileReference
	 or FileReferenceList browse session is in progress; only one file browsing session
	 may be performed at a time. 2) A setting in the user's mms.cfg file prohibits this operation. 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">typeFilter</codeph> array does not contain correctly formatted
	 FileFilter objects, an exception is thrown. For details on correct filter formatting,
	 see the FileFilter documentation.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the method is not called in response to a user action, such as a mouse
     event or keypress event.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the parameters are valid and the file-browsing dialog box
	 opens.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">typeFilter</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of FileFilter instances used to filter the files that are
	 displayed in the dialog box. If you omit this parameter, all files are displayed.
	 For more information, see the <xref href="FileFilter.html" class="- topic/xref ">FileFilter</xref> class. 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Displays a file-browsing dialog box that lets the
	 user select local files to upload.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Displays a file-browsing dialog box that lets the
	 user select one or more local files to upload. The dialog box is native to the user's
	 operating system.
	 
	 <p class="- topic/p ">In Flash Player 10 and later, you can call this method successfully 
	 only in response to a user event (for example, in an event handler for a mouse click or keypress event). 
	 Otherwise, calling this method results in Flash Player throwing an Error.</p>
	 
	 <p class="- topic/p ">When you call this method and the user successfully selects files,
	 the <codeph class="+ topic/ph pr-d/codeph ">fileList</codeph> property of this FileReferenceList object is populated with
	 an array of FileReference objects, one for each file that the user selects.
	 Each subsequent time that the FileReferenceList.browse() method is called, the
	 <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.fileList</codeph> property is reset to the file(s) that the 
	 user selects in the dialog box.</p>
	 
	 <p class="- topic/p ">Using the <codeph class="+ topic/ph pr-d/codeph ">typeFilter</codeph> parameter, you can determine which files 
	 the dialog box displays.</p>
	 
	 <p class="- topic/p ">Only one <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>,
	 or <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> session can be performed at a time 
	 on a FileReferenceList object
	 (because only one dialog box can be opened at a time).</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.browse()</linktext></link><link href="flash.net.xml#FileReference" class="- topic/link "><linktext class="- topic/linktext ">FileReference class</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">FileFilter class</linktext></link></related-links><adobeApiEvent id="flash.net:FileReferenceList:browse_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Invoked when the user has successfully selected an item for upload from the dialog box.
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Invoked when the user has successfully selected an item for upload from the dialog box.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReferenceList:browse_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Invoked when the user dismisses the dialog box by clicking Cancel or by closing it.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Invoked when the user dismisses the dialog box by clicking Cancel or by closing it.</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:FileReferenceList:fileList:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fileList</apiName><shortdesc class="- topic/shortdesc ">
	 An array of FileReference objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>The following example demonstrates the <code>fileList</code> property.
	 <listing version="2.0">
	 import flash.net.FileReferenceList;
	 import flash.net.FileReference;
	 
	 var listener:Object = new Object();
	 listener.onSelect = function(fileRefList:FileReferenceList) {
	 	trace("onSelect");
	 	var list:Array = fileRefList.fileList;
	 	var item:FileReference;
	 	for(var i:Number = 0; i &lt; list.length; i++) {
	 		item = list[i];
	 		trace("name: " + item.name);
	 	}
	 }
	 
	 var fileRef:FileReferenceList = new FileReferenceList();
	 fileRef.addListener(listener);
	 fileRef.browse();
	 </listing>
	 
	 </oldexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">An array of FileReference objects.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 An array of <codeph class="+ topic/ph pr-d/codeph ">FileReference</codeph> objects.
	 
	 <p class="- topic/p ">When the <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> method is called and the user
	 has selected one or more files from the dialog box that the <codeph class="+ topic/ph pr-d/codeph ">browse()</codeph> method opens,
	 this property is populated with an array of FileReference objects,
	 each of which represents the files the user selected.
	 You can then use this array to upload each file with the <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>method.
	 You must upload one file at a time.</p>
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">fileList</codeph> property is populated anew each time browse() is called on
	 that FileReferenceList object.</p>
	 
	 <p class="- topic/p ">The properties of <codeph class="+ topic/ph pr-d/codeph ">FileReference</codeph> objects are described
	 in the FileReference class documentation.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference" class="- topic/link "><linktext class="- topic/linktext ">FileReference</linktext></link><link href="flash.net.xml#FileReference/upload()" class="- topic/link "><linktext class="- topic/linktext ">FileReference.upload()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()" class="- topic/link "><linktext class="- topic/linktext ">FileReferenceList.browse()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetworkInterface" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetworkInterface</apiName><shortdesc class="- topic/shortdesc ">
 The NetworkInterface class describes a network interface.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The NetworkInterface class describes a network interface.
 
 <p class="- topic/p ">You can get a list of network interfaces by calling the
 <codeph class="+ topic/ph pr-d/codeph ">findInterfaces()</codeph> method of a NetworkInfo object.</p>
 
 </apiDesc><example conref="examples\NetworkInterfaceExample.as" class="- topic/example "/></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetworkInfo" class="- topic/link "><linktext class="- topic/linktext ">NetworkInfo</linktext></link><link href="flash.net.xml#InterfaceAddress" class="- topic/link "><linktext class="- topic/linktext ">InterfaceAddress</linktext></link></related-links><apiValue id="flash.net:NetworkInterface:active:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">active</apiName><shortdesc class="- topic/shortdesc ">
     Reports whether this interface is active.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reports whether this interface is active.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:addresses:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">addresses</apiName><shortdesc class="- topic/shortdesc ">
     The list of the addresses bound to this network interface.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiType value="Vector$flash.net:InterfaceAddress" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The list of the addresses bound to this network interface.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:displayName:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">displayName</apiName><shortdesc class="- topic/shortdesc ">
     The display name of this network interface.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The display name of this network interface.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:hardwareAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hardwareAddress</apiName><shortdesc class="- topic/shortdesc ">
     The hardware address of this network interface.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The hardware address of this network interface.
     
     <p class="- topic/p ">The hardware address is typically the Media Access Control (MAC) address
     of the network adapter or interface card.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:mtu:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">mtu</apiName><shortdesc class="- topic/shortdesc ">
     The maximum transmission unit (MTU) of this network interface.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The maximum transmission unit (MTU) of this network interface. 
     
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">mtu</codeph> value is reported as <codeph class="+ topic/ph pr-d/codeph ">-1</codeph>, then the actual MTU is unknown.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
     The name of this network interface.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The name of this network interface.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:parent:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">parent</apiName><shortdesc class="- topic/shortdesc ">
     The NetworkInterface object representing the parent interface (if this interface has a parent).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:NetworkInterface</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The NetworkInterface object representing the parent interface (if this interface has a parent).
     
     <p class="- topic/p ">This interface could have a parent if it is a subinterface. The <codeph class="+ topic/ph pr-d/codeph ">parent</codeph> 
     property is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if this interface has no parent.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetworkInterface:subInterfaces:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">subInterfaces</apiName><shortdesc class="- topic/shortdesc ">
     The list of subinterfaces attached to this network interface.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiType value="Vector$flash.net:NetworkInterface" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The list of subinterfaces attached to this network interface.
     
     <p class="- topic/p ">Subinterfaces are often virtual interfaces. The <codeph class="+ topic/ph pr-d/codeph ">subInterfaces</codeph> 
     property is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if this interface has no subinterfaces.</p>
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:SharedObjectFlushStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SharedObjectFlushStatus</apiName><shortdesc class="- topic/shortdesc ">
 The SharedObjectFlushStatus class provides values for the code returned from a call to the SharedObject.flush() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The SharedObjectFlushStatus class provides values for the code returned from a call to the <codeph class="+ topic/ph pr-d/codeph ">SharedObject.flush()</codeph> method.
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/flush()" class="- topic/link "><linktext class="- topic/linktext ">SharedObject.flush()</linktext></link></related-links><apiValue id="flash.net:SharedObjectFlushStatus:FLUSHED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">FLUSHED</apiName><shortdesc class="- topic/shortdesc ">
 Indicates that the flush completed successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">flushed</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Indicates that the flush completed successfully.
 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/flush()" class="- topic/link "><linktext class="- topic/linktext ">SharedObject.flush()</linktext></link></related-links></apiValue><apiValue id="flash.net:SharedObjectFlushStatus:PENDING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">PENDING</apiName><shortdesc class="- topic/shortdesc ">
 Indicates that the user is being prompted to increase disk space for the shared object
 before the flush can occur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">pending</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Indicates that the user is being prompted to increase disk space for the shared object
 before the flush can occur.
 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/flush()" class="- topic/link "><linktext class="- topic/linktext ">SharedObject.flush()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:SecureSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SecureSocket</apiName><shortdesc class="- topic/shortdesc ">
 The SecureSocket class enables code to make socket connections utilizing the Secure Sockets Layer (SSL)
 and Transport Layer Security (TLS) protocols.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.net:Socket</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The SecureSocket class enables code to make socket connections utilizing the Secure Sockets Layer (SSL)
 and Transport Layer Security (TLS) protocols. 
 
 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">AIR profile support:</i> This feature is supported 
 on all desktop operating systems, but is not supported on all AIR for TV devices. 
 It is not supported on mobile devices. You can test 
 for support at run time using the <codeph class="+ topic/ph pr-d/codeph ">SecureSocket.isSupported</codeph> property. See 
 <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">
 AIR Profile Support</xref> for more information regarding API support across multiple profiles.</p>
 
 <p class="- topic/p ">The SSL/TLS protocols provide a mechanism by which the
 identity of a host can be authenticated via its certificate, and  provides for encrypted communication
 over the socket. SSLv3 and TLSv1 are supported. Validation of the server certificate is performed using
 the trust store and certificate validation support of the client platform.</p> 
 
 <p class="- topic/p ">The SecureSocket class will only connect to servers with valid, trusted certificates. You cannot choose
 to connect to a server in spite of a problem with it's certificate. For example, there is no way to connect 
 to a server with an expired certificate or a certificate that doesn't chain to a trusted root certificate 
 even though the certificate would be valid otherwise.</p>
 
 <p class="- topic/p ">The SecureSocket class is useful for performing encrypted communication to a trusted server. In other respects
 a SecureSocket object behaves like a regular Socket object.</p>
 
 <p class="- topic/p ">To use the methods of the SecureSocket class, first use the constructor, <codeph class="+ topic/ph pr-d/codeph ">new SecureSocket()</codeph>,
 to create a SecureSocket object. When you connect to a server, the server certificate is validated. If the 
 certificate is valid and trusted, the connection is established and the Socket dispatches a 
 <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> event. If the certificate cannot be validated, the Socket dispatches an 
 <codeph class="+ topic/ph pr-d/codeph ">IOError</codeph> event.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Important:</b> The Online Certificate Status Protocol (OCSP) is not supported by all operating systems.
 Users can also disable OCSP checking on individual computers. If OCSP is not supported or is disabled and
 a certificate does not contain the information necessary to check revocation using a Certificate Revocation 
 List (CRL), then certificate revocation is not checked. The certificate is accepted if otherwise valid.
 This could allow a server to use a revoked certificate.</p>
 
 </apiDesc><example conref="examples\SecureSocketExample.as" class="- topic/example "> The following example illustrates how to create and connect a 
 SecureSocket object.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">package
{
    import flash.display.Sprite;
    import flash.errors.IOError;
    import flash.events.Event;
    import flash.events.IOErrorEvent;
    import flash.net.SecureSocket;
    
    public class SecureSocketExample extends Sprite
    {
        private var secureSocket:SecureSocket = new SecureSocket();
        
        public function SecureSocketExample()
        {
            secureSocket.addEventListener( Event.CONNECT, onConnect )
            secureSocket.addEventListener( IOErrorEvent.IO_ERROR, onError );
            
            try
            {
                secureSocket.connect( "208.77.188.166", 443 );
            }
            catch ( error:Error )
            {
                trace ( error.toString() );
            }
        }
        
        private function onConnect( event:Event ):void
        {
            trace("Connected.");
        }
        
        private function onError( error:IOErrorEvent ):void
        {
            trace( error.text + ", " + secureSocket.serverCertificateStatus );
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket" class="- topic/link "><linktext class="- topic/linktext ">Socket class</linktext></link></related-links><adobeApiEvent id="flash.net:SecureSocket_flash.events.ProgressEvent.SOCKET_DATA_socketData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">socketData</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a socket has received data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.SOCKET_DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a socket has received data.
 
 Events of type <codeph class="+ topic/ph pr-d/codeph ">socketData</codeph> do not use the <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.bytesTotal</codeph>
 property. 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:SecureSocket_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an input or output error occurs that causes a send or receive operation to fail.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an input or output error occurs that causes a send or receive operation to fail.
 
 <p class="- topic/p ">When a server certificate cannot be validated, the error event dispatched is an IOError. In this case,
 you can check the <codeph class="+ topic/ph pr-d/codeph ">serverCertificateStatus</codeph> property to determine the cause of the problem.</p>
  
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:SecureSocket_flash.events.Event.CONNECT_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a network connection has been established.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CONNECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a network connection has been established. 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:SecureSocket_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when the server closes the socket connection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when the server closes the socket connection. 
 
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">close</codeph> event is dispatched only when the server
 closes the connection; it is not dispatched when you call the <codeph class="+ topic/ph pr-d/codeph ">SecureSocket.close()</codeph> method.</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:SecureSocket:SecureSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SecureSocket</apiName><shortdesc class="- topic/shortdesc ">
    Creates a new SecureSocket object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs when SSLv3 or TLSv1 support is not available.
	
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Creates a new SecureSocket object.
	
	<p class="- topic/p ">Check <codeph class="+ topic/ph pr-d/codeph ">SecureSocket.isSupported</codeph> before attempting to create a SecureSocket 
	instance. If SSLv3 or TLSv1 sockets are not supported, the runtime will throw an IllegalOperationError.</p>
    
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.net:SecureSocket:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     Connects the socket to the specified host and port using SSL or TLS.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>BRS compare this entire description with XMLSocket.connect() and make consistent
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">No host was specified and the connection failed.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs if you specify a socket port less than 
	 zero or higher than 65535.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">host</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name or IP address of the host to connect to.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The port number to connect to.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Connects the socket to the specified host and port using SSL or TLS.
     
     <p class="- topic/p ">When you call the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method, the server certificate is validated. If the 
 	 SSL/TLS handshake succeeds and the certificate is valid and trusted, the connection is established, 
 	 the socket dispatches a <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> event. If the handshake fails or the certificate cannot 
 	 be validated, the socket dispatches an <codeph class="+ topic/ph pr-d/codeph ">IOError</codeph> event. You can check the certificate 
 	 validation result by reading the <codeph class="+ topic/ph pr-d/codeph ">serverCertificateStatus</codeph> property after one of these 
 	 events has been dispatched. (When a <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> event is dispatched, the certificate
 	 status is always <codeph class="+ topic/ph pr-d/codeph ">trusted</codeph>.)</p>
	 
     <p class="- topic/p ">If the socket is already connected, the existing connection is closed first.</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.net:SecureSocket:connect_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when a network connection has been 
          established.
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when a network connection has been 
          established.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:SecureSocket:connect_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched if a host is specified and an 
          input/output error occurs that causes the connection to fail.
	      This includes SSL/TLS handshake errors and failure to
	      successfully validate the host's server certificate.
	 
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched if a host is specified and an 
          input/output error occurs that causes the connection to fail.</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:SecureSocket:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether the secure sockets are supported on the current system.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether the secure sockets are supported on the current system.
     
     <p class="- topic/p ">Secure sockets are not supported on all platforms. Check this property 
	 before attempting to create a new SecureSocket instance.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:SecureSocket:serverCertificateStatus:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">serverCertificateStatus</apiName><shortdesc class="- topic/shortdesc ">
     The status of the server's certificate.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The status of the server's certificate.
     
     <p class="- topic/p ">The status is <codeph class="+ topic/ph pr-d/codeph ">CertificateStatus.UNKNOWN</codeph> until the
     socket attempts to connect to a server. After validation, the status will be one
     of the strings enumerated by the CertificateStatus class. The connection only
     succeeds when the certificate is valid and trusted. Thus, after a 
     <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> event, the status is always <codeph class="+ topic/ph pr-d/codeph ">trusted</codeph>. </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> Once the certificate has been validated or rejected, the status
     value is not updated until the next call to the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method.
     Calling <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> does not reset the status value to "unknown".</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.security.xml#CertificateStatus" class="- topic/link "><linktext class="- topic/linktext ">CertificateStatus class</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:ServerSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ServerSocket</apiName><shortdesc class="- topic/shortdesc ">
 The ServerSocket class allows code to act as a server for Transport Control Protocol (TCP)
 connections.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The ServerSocket class allows code to act as a server for Transport Control Protocol (TCP)
 connections. 
 
 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">AIR profile support:</i> This feature is supported 
 on all desktop operating systems, but is not supported on mobile devices or AIR for TV devices. You can test 
 for support at run time using the <codeph class="+ topic/ph pr-d/codeph ">ServerSocket.isSupported</codeph> property. See 
 <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">
 AIR Profile Support</xref> for more information regarding API support across multiple profiles.</p>
 
 <p class="- topic/p ">A TCP server listens for incoming connections from remote clients. When a client attempts to
 connect, the ServerSocket dispatches a <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> event. The ServerSocketConnectEvent object 
 dispatched for the event provides a Socket object representing the TCP connection between 
 the server and the client. Use this Socket object for subsequent communication 
 with the connected client. You can get the client address and port from the Socket object, if needed.</p> 
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> Your application is responsible for maintaining a reference to 
 the client Socket object. If you don't, the object is eligible for garbage collection and may be 
 destroyed by the runtime without warning.</p>
 
 <p class="- topic/p ">To put a ServerSocket object into the listening state, call the <codeph class="+ topic/ph pr-d/codeph ">listen()</codeph> method.
 In the listening state, the server socket object dispatches <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> events
 whenever a client using the TCP protocol attempts to connect to the bound address and port. The ServerSocket object 
 continues to listen for additional connections until you call the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method.</p>
 
 <p class="- topic/p ">TCP connections are persistent — they exist until one side of the connection closes it (or a serious 
 network failure occurs). Any data sent over the connection is broken into transmittable packets and reassembled 
 on the other end. All packets are guaranteed to arrive (within reason) — any lost packets are retransmitted. 
 In general, the TCP protocol manages the available network bandwidth better than the UDP protocol. 
 Most AIR applications that require socket communications should use the ServerSocket and Socket 
 classes rather than the DatagramSocket class.</p>
 
 <p class="- topic/p ">The ServerSocket class can only be used in Adobe AIR 
 applications and only in the application security sandbox.</p>
 
 <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic: 
 <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
 
 </apiDesc><example conref="examples\ServerSocketExample.as" class="- topic/example "> The following example creates a socket server. To use the server, bind the 
 socket to a local port and then connect to that port from another application. The server
 only understands UTF-8 strings.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.events.MouseEvent;
    import flash.events.ProgressEvent;
    import flash.events.ServerSocketConnectEvent;
    import flash.net.ServerSocket;
    import flash.net.Socket;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.utils.ByteArray;
        
    public class ServerSocketExample extends Sprite
    {
        private var serverSocket:ServerSocket = new ServerSocket();
        private var clientSocket:Socket;

        private var localIP:TextField;
        private var localPort:TextField;
        private var logField:TextField;
        private var message:TextField;

        public function ServerSocketExample()
        {
            setupUI();
        }
        
        private function onConnect( event:ServerSocketConnectEvent ):void
        {
            clientSocket = event.socket;
            clientSocket.addEventListener( ProgressEvent.SOCKET_DATA, onClientSocketData );
            log( "Connection from " + clientSocket.remoteAddress + ":" + clientSocket.remotePort );
        }
        
        private function onClientSocketData( event:ProgressEvent ):void
        {
            var buffer:ByteArray = new ByteArray();
            clientSocket.readBytes( buffer, 0, clientSocket.bytesAvailable );
            log( "Received: " + buffer.toString() );
        }

        private function bind( event:Event ):void
        {
            if( serverSocket.bound ) 
            {
                serverSocket.close();
                serverSocket = new ServerSocket();
                
            }
            serverSocket.bind( parseInt( localPort.text ), localIP.text );
            serverSocket.addEventListener( ServerSocketConnectEvent.CONNECT, onConnect );
            serverSocket.listen();
            log( "Bound to: " + serverSocket.localAddress + ":" + serverSocket.localPort );
        }
        
        private function send( event:Event ):void
        {
            try
            {
                if( clientSocket != null &amp;&amp; clientSocket.connected )
                {
                    clientSocket.writeUTFBytes( message.text );
                    clientSocket.flush(); 
                    log( "Sent message to " + clientSocket.remoteAddress + ":" + clientSocket.remotePort );
                }
                else log("No socket connection.");
            }
            catch ( error:Error )
            {
                log( error.message );
            }
        }

        private function log( text:String ):void
        {
            logField.appendText( text + "\n" );
            logField.scrollV = logField.maxScrollV;
            trace( text );
        }

        private function setupUI():void
        {
            localIP = createTextField( 10, 10, "Local IP", "0.0.0.0");
            localPort = createTextField( 10, 35, "Local port", "0" );
            createTextButton( 170, 60, "Bind", bind );
            message = createTextField( 10, 85, "Message", "Lucy can't drink milk." );
            createTextButton( 170, 110, "Send", send );
            logField = createTextField( 10, 135, "Log", "", false, 200 )
            
            this.stage.nativeWindow.activate();
        }
        
        private function createTextField( x:int, y:int, label:String, defaultValue:String = '', editable:Boolean = true, height:int = 20 ):TextField
        {
            var labelField:TextField = new TextField();
            labelField.text = label;
            labelField.type = TextFieldType.DYNAMIC;
            labelField.width = 100;
            labelField.x = x;
            labelField.y = y;
            
            var input:TextField = new TextField();
            input.text = defaultValue;
            input.type = TextFieldType.INPUT;
            input.border = editable;
            input.selectable = editable;
            input.width = 280;
            input.height = height;
            input.x = x + labelField.width;
            input.y = y;
            
            this.addChild( labelField );
            this.addChild( input );
            
            return input;
        }
        
        private function createTextButton( x:int, y:int, label:String, clickHandler:Function ):TextField
        {
            var button:TextField = new TextField();
            button.htmlText = "&lt;u&gt;&lt;b&gt;" + label + "&lt;/b&gt;&lt;/u&gt;";
            button.type = TextFieldType.DYNAMIC;
            button.selectable = false;
            button.width = 180;
            button.x = x;
            button.y = y;
            button.addEventListener( MouseEvent.CLICK, clickHandler );
            
            this.addChild( button );
            return button;
        }        
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#ServerSocketConnectEvent" class="- topic/link "><linktext class="- topic/linktext ">ServerSocketConnectEvent class</linktext></link><link href="flash.net.xml#Socket" class="- topic/link "><linktext class="- topic/linktext ">Socket class</linktext></link><link href="flash.net.xml#XMLSocket" class="- topic/link "><linktext class="- topic/linktext ">XMLSocket class</linktext></link><link href="flash.net.xml#DatagramSocket" class="- topic/link "><linktext class="- topic/linktext ">DatagramSocket class</linktext></link></related-links><adobeApiEvent id="flash.net:ServerSocket_flash.events.ServerSocketConnectEvent.CONNECT_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a remote socket seeks to connect to this server socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ServerSocketConnectEvent.CONNECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ServerSocketConnectEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a remote socket seeks to connect to this server socket.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:ServerSocket_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when the operating system closes this socket.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when the operating system closes this socket.
  
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">close</codeph> event is not dispatched when the ServerSocket <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> 
 method is called. If other objects in your application rely on the <codeph class="+ topic/ph pr-d/codeph ">close</codeph> event,
 you can dispatch the event manually before calling the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method.</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:ServerSocket:ServerSocket" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ServerSocket</apiName><shortdesc class="- topic/shortdesc ">
     Creates a ServerSocket object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs ff the calling content is running outside 
     the AIR application security sandbox.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a ServerSocket object.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.net:ServerSocket:bind" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">bind</apiName><shortdesc class="- topic/shortdesc ">
     Binds this socket to the specified local address and port.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs when <codeph class="+ topic/ph pr-d/codeph ">localPort</codeph> is less than 0 or greater than 65535.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs when <codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> is not a syntactically well-formed IP address.
     
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">when the socket cannot be bound, such as when:
     <ul class="- topic/ul "><li class="- topic/li ">the underlying network socket (IP and port) is already in bound by another object or process.</li><li class="- topic/li ">the application is running under a user account that does not
     have the privileges necessary to bind to the port. Privilege issues typically 
     occur when attempting to bind to well known ports (<codeph class="+ topic/ph pr-d/codeph ">localPort</codeph> &lt; 1024)</li><li class="- topic/li ">this ServerSocket object is already bound. (Call <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> before binding to a different
     socket.)</li><li class="- topic/li ">when <codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> is not a valid local address.</li></ul>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localPort</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of the port to bind to on the local computer. If <codeph class="+ topic/ph pr-d/codeph ">localPort</codeph>, 
     is set to 0 (the default), the next available system port is bound. Permission to connect to a port 
     number below 1024 is subject to the system security policy. On Mac and Linux systems, for example, 
     the application must be running with root privileges to connect to ports below 1024.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localAddress</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.0.0.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The IP address on the local machine to bind to. This address can be an
     IPv4 or IPv6 address. If <codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">0.0.0.0</codeph> (the default), 
     the socket listens on all available IPv4 addresses.   
     To listen on all available IPv6 addresses, you must specify "::" as the <codeph class="+ topic/ph pr-d/codeph ">localAddress</codeph>
     argument. To use an IPv6 address, the computer and network must both be  
     configured to support IPv6. Furthermore, a socket bound to an IPv4 address
     cannot connect to a socket with an IPv6 address. Likewise, a socket bound to an IPv6
     address cannot connect to a socket with an IPv4 address. The type of address must match.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Binds this socket to the specified local address and port.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:ServerSocket:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Closes the socket and stops listening for connections.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs if the socket could not be closed, or the socket was not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Closes the socket and stops listening for connections.
     
	 <p class="- topic/p ">Closed sockets cannot be reopened. Create a new ServerSocket instance instead.</p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:ServerSocket:listen" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">listen</apiName><shortdesc class="- topic/shortdesc ">
     Initiates listening for TCP connections on the bound IP address and port.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs if the socket is not open or bound. This error also
     occurs if the call to <codeph class="+ topic/ph pr-d/codeph ">listen()</codeph> fails for any other reason.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error occurs if the <codeph class="+ topic/ph pr-d/codeph ">backlog</codeph> parameter is less than zero.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">backlog</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The maximum length of the queue of pending connections.  If 
     <codeph class="+ topic/ph pr-d/codeph ">backlog</codeph> is 0, the queue length is set to the maximum system value.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Initiates listening for TCP connections on the bound IP address and port.
     
     <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">listen()</codeph> method returns immediately. Once you call <codeph class="+ topic/ph pr-d/codeph ">listen()</codeph>, 
     the ServerSocket object dispatches a <codeph class="+ topic/ph pr-d/codeph ">connect</codeph>
     event whenever a connection attempt is made. The <codeph class="+ topic/ph pr-d/codeph ">socket</codeph> property of the 
     ServerSocketConnectEvent event object references
     a Socket object representing the server-client connection.</p>
     
     <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">backlog</codeph> parameter specifies how many pending connections are queued while the
     <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> events are processed by your application. If the queue is full, additional connections 
     are denied without a <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> event being dispatched. If the default value of zero is
     specified, then the system-maximum queue length is used. This length varies by platform and can be
     configured per computer. If the specified value exceeds the system-maximum length, then the
     system-maximum length is used instead. No means for discovering the actual backlog value is provided.
     (The system-maximum value is determined by the SOMAXCONN setting of the TCP network subsystem on the
     host computer.)</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:ServerSocket:bound:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bound</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether the socket is bound to a local address and port.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether the socket is bound to a local address and port.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ServerSocket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:ServerSocket:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether or not ServerSocket features are supported in the run-time environment.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether or not ServerSocket features are supported in the run-time environment.
     
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:ServerSocket:listening:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">listening</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether the server socket is listening for incoming connections.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether the server socket is listening for incoming connections.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ServerSocket/listen()" class="- topic/link "><linktext class="- topic/linktext ">listen()</linktext></link></related-links></apiValue><apiValue id="flash.net:ServerSocket:localAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localAddress</apiName><shortdesc class="- topic/shortdesc ">
     The IP address on which the socket is listening.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The IP address on which the socket is listening.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ServerSocket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue><apiValue id="flash.net:ServerSocket:localPort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localPort</apiName><shortdesc class="- topic/shortdesc ">
     The port on which the socket is listening.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The port on which the socket is listening.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ServerSocket/bind()" class="- topic/link "><linktext class="- topic/linktext ">bind()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:FileFilter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FileFilter</apiName><shortdesc class="- topic/shortdesc ">
 The FileFilter class is used to indicate what files on the user's system are shown
 in the file-browsing dialog box that is displayed when the FileReference.browse() 
 method, the FileReferenceList.browse() method is called or a
 browse method of a File, FileReference, or FileReferenceList object is called.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The FileFilter class is used to indicate what files on the user's system are shown
 in the file-browsing dialog box that is displayed when the <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph> 
 method, the <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> method is called or a
 browse method of a File, FileReference, or FileReferenceList object is called.
 FileFilter instances are passed as a value for the optional <codeph class="+ topic/ph pr-d/codeph ">typeFilter</codeph> parameter to the method. 
 If you use a FileFilter instance, extensions and file types that aren't specified in the FileFilter instance
 are filtered out; that is, they are not available to the user for selection. 
 If no FileFilter object is passed to the method, all files are shown in the dialog box.
 
 <p class="- topic/p ">You can use FileFilter instances in one of two ways:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">A description with file extensions only</li><li class="- topic/li ">A description with file extensions and Macintosh file types</li></ul>
 
 <p class="- topic/p ">The two formats are not interchangeable within a single call to the browse method. 
 You must use one or the other.</p>
 
 <p class="- topic/p ">You can pass one or more FileFilter instances to the browse method, as shown in the following:</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var imagesFilter:FileFilter = new FileFilter("Images", "~~.jpg;~~.gif;~~.png");
 var docFilter:FileFilter = new FileFilter("Documents", "~~.pdf;~~.doc;~~.txt");
 var myFileReference:FileReference = new FileReference();
 myFileReference.browse([imagesFilter, docFilter]);
 </codeblock>
 
 <p class="- topic/p ">Or in an AIR application:</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var imagesFilter:FileFilter = new FileFilter("Images", "~~.jpg;~~.gif;~~.png");
 var docFilter:FileFilter = new FileFilter("Documents", "~~.pdf;~~.doc;~~.txt");
 var myFile:File = new File();
 myFile.browseForOpen("Open", [imagesFilter, docFilter]);
 </codeblock>
 
 
 
 <p class="- topic/p ">The list of extensions in the <codeph class="+ topic/ph pr-d/codeph ">FileFilter.extension</codeph> property 
 is used to filter the files shown in the file browsing dialog. The list is not actually 
 displayed in the dialog box; to display the file types 
 for users, you must list the file types in the description string as well as in the extension
 list. The description string is displayed in the dialog box in Windows and Linux.
 (It is not used on the Macintosh<sup class="+ topic/ph hi-d/sup ">®</sup>.) On the Macintosh, if you supply a list of Macintosh file types,
 that list is used to filter the files. If not, the list of file extensions is used. </p> 
 
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.net:FileFilter:FileFilter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">FileFilter</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new FileFilter instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">description</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The description string that is visible to users when they select files for uploading.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">extension</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A list of file extensions that indicate which file formats are visible to users
	 when they select files for uploading.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">macType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A list of Macintosh file types that indicate which file types are visible to
	 users when they select files for uploading. If no value is passed, this parameter is set to <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new FileFilter instance.
	 </apiDesc><example conref="examples\FileFilter.as" class="- topic/example "> The following example uploads an image from your local file system to the root display object (in this case, the stage).
 Example provided by <xref href="http://blog.andrevenancio.com/" scope="external" class="- topic/xref ">Andre Venancio</xref>.
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var buttonShape:Shape = new Shape();
buttonShape.graphics.beginFill(0x336699);
buttonShape.graphics.drawCircle(50, 50, 25);
var button = new SimpleButton(buttonShape, buttonShape, buttonShape, buttonShape);
addChild(button);

var fileRef:FileReference= new FileReference();
button.addEventListener(MouseEvent.CLICK, onButtonClick);

function onButtonClick(e:MouseEvent):void {
fileRef.browse([new FileFilter("Images", "*.jpg;*.gif;*.png")]);
fileRef.addEventListener(Event.SELECT, onFileSelected);
}

function onFileSelected(e:Event):void {
fileRef.addEventListener(Event.COMPLETE, onFileLoaded);
fileRef.load();
}

function onFileLoaded(e:Event):void {
var loader:Loader = new Loader();
loader.loadBytes(e.target.data);
addChild(loader);
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiValue id="flash.net:FileFilter:description:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">description</apiName><shortdesc class="- topic/shortdesc ">
	 The description string for the filter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The description string for the filter. The description 
	 is visible to the user in the dialog box that opens 
	 when <codeph class="+ topic/ph pr-d/codeph ">FileReference.browse()</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">FileReferenceList.browse()</codeph> is called.
	 The description string contains a string, such as
	 <codeph class="+ topic/ph pr-d/codeph ">"Images (~~.gif, ~~.jpg, ~~.png)"</codeph>, that can
	 help instruct the user on what file types can be uploaded
	 or downloaded. Note that the actual file types that are supported by
	 this FileReference object are stored in the <codeph class="+ topic/ph pr-d/codeph ">extension</codeph>
	 property.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:FileFilter:extension:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">extension</apiName><shortdesc class="- topic/shortdesc ">
	 A list of file extensions.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 A list of file extensions. This list indicates the types of files
	 that you want to show in the file-browsing dialog box. (The list 
	 is not visible to the user; the user sees only the value of the
	 <codeph class="+ topic/ph pr-d/codeph ">description</codeph> property.) The <codeph class="+ topic/ph pr-d/codeph ">extension</codeph> property contains
	 a semicolon-delimited list of file extensions, 
	 with a wildcard (~~) preceding each extension, as shown
	 in the following string: <codeph class="+ topic/ph pr-d/codeph ">"~~.jpg;~~.gif;~~.png"</codeph>.
	 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:FileFilter:macType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">macType</apiName><shortdesc class="- topic/shortdesc ">
	 A list of Macintosh file types.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 A list of Macintosh file types. This list indicates the types of files
	 that you want to show in the file-browsing dialog box. (This list 
	 itself is not visible to the user; the user sees only the value of the
	 <codeph class="+ topic/ph pr-d/codeph ">description</codeph> property.) The <codeph class="+ topic/ph pr-d/codeph ">macType</codeph> property contains
	 a semicolon-delimited list of Macintosh file types, as shown
	 in the following string: <codeph class="+ topic/ph pr-d/codeph ">"JPEG;jp2_;GIFF"</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLRequest" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLRequest</apiName><shortdesc class="- topic/shortdesc ">
  The URLRequest class captures all of the information in a single HTTP request.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>The above include is not a mistake, but rather code re-use.
 
  </internal></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  The URLRequest class captures all of the information in a single HTTP request. URLRequest
  objects are passed to the <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> methods of the Loader, URLStream,
  and URLLoader classes, and to other loading operations, to initiate URL downloads.
  They are also passed to the <codeph class="+ topic/ph pr-d/codeph ">upload()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">download()</codeph> methods
  of the FileReference class.
 
  <p class="- topic/p ">A SWF file in the local-with-filesystem sandbox may not load data from,
  or provide data to, a resource that is in the network sandbox. </p>
 
  <p class="- topic/p ">By default, the calling <ph class="- topic/ph ">SWF </ph>file
  and the URL you load must be in the same domain. For example, a <ph class="- topic/ph ">SWF </ph>file
  at www.adobe.com can load data only from sources that are also at www.adobe.com.
  <ph class="- topic/ph ">To load data from a different domain, place a URL policy file on the server
  hosting the data.</ph></p>
 
  <p class="- topic/p "> However, in Adobe AIR, content in the application security sandbox (content
  installed with the AIR application) is not restricted by these security limitations.
  For content running in Adobe AIR, files in the application security sandbox
  can access URLs using any of the following URL schemes:</p>

  
 
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">http</codeph> and <codeph class="+ topic/ph pr-d/codeph ">https</codeph> </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">file</codeph> </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph> </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">app</codeph> </li></ul>
 
  <p class="- topic/p ">Content <ph class="- topic/ph ">running in Adobe AIR </ph>that is not in the application security
  sandbox observes the same restrictions as content running in the browser
  <ph class="- topic/ph ">(in Flash Player)</ph>, and loading is
  governed by the content's domain<ph class="- topic/ph "> and any permissions granted in URL
  policy files</ph>.</p>
 
 <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic:
 <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
 
 
 </apiDesc><example conref="examples\URLRequestExample.as" class="- topic/example "> The following example creates a new Loader object and passes it
 a URLRequest object that contains the path to an XML file. If the loading operation is
 successful, a <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event is dispatched and the data in the XML
 file traces to the output. Additional event handlers capture other events, including error
 events.
 <p class="- topic/p ">To run this example, place a file named XMLFile.xml in the same directory
 as your SWF file.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.*;

    public class URLRequestExample extends Sprite {

        public function URLRequestExample() {
            var loader:URLLoader = new URLLoader();
            configureListeners(loader);

            var request:URLRequest = new URLRequest("XMLFile.xml");
            try {
                loader.load(request);
            } catch (error:Error) {
                trace("Unable to load requested document.");
            }
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            trace("completeHandler: " + loader.data);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference" class="- topic/link "><linktext class="- topic/linktext ">FileReference</linktext></link><link href="flash.net.xml#URLRequestHeader" class="- topic/link "><linktext class="- topic/linktext ">URLRequestHeader</linktext></link><link href="flash.net.xml#URLRequestDefaults" class="- topic/link "><linktext class="- topic/linktext ">URLRequestDefaults</linktext></link><link href="flash.net.xml#URLLoader" class="- topic/link "><linktext class="- topic/linktext ">URLLoader</linktext></link><link href="flash.net.xml#URLStream" class="- topic/link "><linktext class="- topic/linktext ">URLStream</linktext></link><link href="../../flash/html/HTMLLoader.html" class="- topic/link "><linktext class="- topic/linktext ">HTMLLoader class</linktext></link></related-links><apiConstructor id="flash.net:URLRequest:URLRequest" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">URLRequest</apiName><shortdesc class="- topic/shortdesc ">
     Creates a URLRequest object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">url</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The URL to be requested. You can set the URL later by using the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a URLRequest object.
     
     If <codeph class="+ topic/ph pr-d/codeph ">System.useCodePage</codeph> is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the request is encoded using the
     system code page, rather than Unicode.
     
     If <codeph class="+ topic/ph pr-d/codeph ">System.useCodePage</codeph> is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, the request is encoded using Unicode, rather than the
     system code page.
     
     </apiDesc><example conref="examples\URLRequest_example.as" class="- topic/example "> The following example shows how you can open new browser windows from Flash Player using the navigateToURL() method. 
 Example provided by 
 <xref href="http://actionscriptexamples.com/2008/12/08/opening-urls-in-new-browser-windows-using-actionscript-30-and-actionscript-20/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Requires
// - Button symbol on Stage (or a display object, such as a MovieClip) with instance name "buttonSymbol"
//
buttonSymbol.addEventListener(MouseEvent.CLICK, buttonSymbol_click);
 
function buttonSymbol_click(evt:MouseEvent):void {
    var req:URLRequest = new URLRequest("http://www.adobe.com/");
    navigateToURL(req, "_blank");
}
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.system.xml#System/useCodePage" class="- topic/link "><linktext class="- topic/linktext ">flash.system.System.useCodePage</linktext></link></related-links></apiConstructor><apiValue id="flash.net:URLRequest:authenticate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">authenticate</apiName><shortdesc class="- topic/shortdesc ">
    Specifies whether authentication requests should be handled (true
    or not (false) for this request.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
    </apiDefaultValue><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Specifies whether authentication requests should be handled or not.
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies whether authentication requests should be handled (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>
    or not (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>) for this request. If <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, authentication
    challenges return an HTTP error.
    
    <p class="- topic/p ">The supported authentication methods are:</p>
    
    <ul class="- topic/ul "><li class="- topic/li ">Windows—HTTP Basic/Digest, Windows Integrated Authentication
          (including NTLM and Kerberos), SSL Certificate Authentication.</li><li class="- topic/li ">Mac—HTTP Basic/Digest, NTLM, SSL Certificate Authentication.</li></ul>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>:The <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>,
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">HTMLLoader.load()</codeph>
    methods do not support the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.authenticate</codeph> property.</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/authenticate" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequestDefaults.authenticate</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:cacheResponse:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">cacheResponse</apiName><shortdesc class="- topic/shortdesc ">
    Specifies whether successful response data should be cached for this request.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
    
    </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies whether successful response data should be cached for this request.
    When set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the AIR application uses the operating system's
    HTTP cache.
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>:The <codeph class="+ topic/ph pr-d/codeph ">HTMLLoader.load()</codeph> method
    does not support the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.cacheResponse</codeph> property.</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/cacheResponse" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequestDefaults.cacheResponse</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:contentType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">contentType</apiName><shortdesc class="- topic/shortdesc ">
     The MIME content type of the content in the the data property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The MIME content type of the content in the data property.
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The MIME content type of the content in the the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property.
     
     <p class="- topic/p ">The default value is <codeph class="+ topic/ph pr-d/codeph ">application/x-www-form-urlencoded</codeph>.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>:The <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>,
     <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">HTMLLoader.load()</codeph> methods do not
     support the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.contentType</codeph> property.</p>
     
     <p class="- topic/p ">When sending a POST request, the values of the <codeph class="+ topic/ph pr-d/codeph ">contentType</codeph>
     and <codeph class="+ topic/ph pr-d/codeph ">data</codeph> properties must correspond properly. The value of the <codeph class="+ topic/ph pr-d/codeph ">contentType</codeph>
     property instructs servers on how to interpret the value of the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property. </p>
     
     <ul class="- topic/ul "><li class="- topic/li ">If the value of the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property is a URLVariables object, the value of
     <codeph class="+ topic/ph pr-d/codeph ">contentType</codeph> must be <codeph class="+ topic/ph pr-d/codeph ">application/x-www-form-urlencoded</codeph>. </li><li class="- topic/li "> If the value of the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property is any other type, the value of <codeph class="+ topic/ph pr-d/codeph ">contentType</codeph>
     should indicate the type of the POST data that will be sent (which is the binary or string data
     contained in the value of the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property). </li><li class="- topic/li ">For <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>,
     the Content-Type of the request is set automatically to <codeph class="+ topic/ph pr-d/codeph ">multipart/form-data</codeph>,
     and the value of the <codeph class="+ topic/ph pr-d/codeph ">contentType</codeph> property is ignored.</li></ul>
     
     <p class="- topic/p "> In Flash Player 10 and later, if you use a multipart Content-Type (for example "multipart/form-data")
     that contains an upload (indicated by a "filename" parameter in a "content-disposition" header within the POST body),
     the POST operation is subject to the security rules applied to uploads:</p>
     <ul class="- topic/ul "><li class="- topic/li ">The POST operation must be performed in response to a user-initiated action, such as a mouse click or key press.</li><li class="- topic/li ">If the POST operation is cross-domain (the POST target is not on the same server as the SWF file
     that is sending the POST request),
     the target server must provide a URL policy file that permits cross-domain access.</li></ul>
     <p class="- topic/p ">Also, for any multipart Content-Type, the syntax must be valid (according to the RFC2046 standards).
     If the syntax appears to be invalid, the POST operation is subject to the security rules applied to uploads.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/data" class="- topic/link "><linktext class="- topic/linktext ">data</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
     An object containing data to be transmitted with the URL request.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     An object containing data to be transmitted with the URL request.
     
     <p class="- topic/p ">This property is used in conjunction with the <codeph class="+ topic/ph pr-d/codeph ">method</codeph> property.
     When the value of <codeph class="+ topic/ph pr-d/codeph ">method</codeph> is <codeph class="+ topic/ph pr-d/codeph ">GET</codeph>,
     the value of <codeph class="+ topic/ph pr-d/codeph ">data</codeph> is appended to the value of <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph>,
     using HTTP query-string syntax. When the <codeph class="+ topic/ph pr-d/codeph ">method</codeph> value is <codeph class="+ topic/ph pr-d/codeph ">POST</codeph>
     (or any value other than <codeph class="+ topic/ph pr-d/codeph ">GET</codeph>), the value
     of <codeph class="+ topic/ph pr-d/codeph ">data</codeph> is transmitted in the body of the HTTP request.</p>
     
     <p class="- topic/p ">The URLRequest API offers binary <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> support and support for URL-encoded variables,
     as well as support for strings. The data object can be a ByteArray, URLVariables,
     or String object.</p>
     
     <p class="- topic/p ">The way in which the data is used depends on the type of object used:</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">If the object is a ByteArray object, the binary
     data of the ByteArray object is used as <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> data. For <codeph class="+ topic/ph pr-d/codeph ">GET</codeph>, data of ByteArray type
     is not supported. Also, data of ByteArray type is not supported for
     <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>.</li><li class="- topic/li ">If the object is a URLVariables object and the method is <codeph class="+ topic/ph pr-d/codeph ">POST</codeph>,
     the variables are encoded using <i class="+ topic/ph hi-d/i ">x-www-form-urlencoded</i> format
     and the resulting string is used as <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> data. An exception is a call to
     <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>, in which the variables are sent as separate fields in
     a <codeph class="+ topic/ph pr-d/codeph ">multipart/form-data</codeph> post.</li><li class="- topic/li ">If the object is a URLVariables object and the method is <codeph class="+ topic/ph pr-d/codeph ">GET</codeph>,
     the URLVariables object defines variables to be sent with the URLRequest object.</li><li class="- topic/li ">Otherwise, the object is converted to a string, and the string
     is used as the <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> or <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> data.</li></ul>
     
     <p class="- topic/p ">This data is not sent until a method, such as <codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph>
     or <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>, uses the URLRequest object.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: The value of <codeph class="+ topic/ph pr-d/codeph ">contentType</codeph> must correspond to the type of data
     in the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property. See the note in the description of the
     <codeph class="+ topic/ph pr-d/codeph ">contentType</codeph> property.</p>
     
     </apiDesc><example conref="examples\URLVariablesExample.as" class="- topic/example "> The following example opens the remote application hosted at 
 http://www.[yourDomain].com/application.jsp in a new browser window and passes 
 data about a user session, captured in a URLVariables object, to the application. 
  
 <p class="- topic/p ">Highlights of the example follow:</p>
 <ol class="- topic/ol "><li class="- topic/li ">The constructor function creates a URLRequest
    instance named <codeph class="+ topic/ph pr-d/codeph ">request</codeph>, taking the URL of the remote application as a parameter.</li><li class="- topic/li ">A URLVariables object is created and two of its properties are assigned values.</li><li class="- topic/li ">The URLVariables object is assigned to the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property of the URLRequest object.</li><li class="- topic/li ">The example calls <codeph class="+ topic/ph pr-d/codeph ">navigateToURL</codeph>, which opens a new browser window
    to the remote application's URL.</li></ol>
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">Note:</b> To run the example, the remote application URL in the example must be replaced
 with a working URL. Additionally, you would need server code 
 to process the information captured by Flash Player in the URLVariables object.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.net.URLVariables;

    public class URLVariablesExample extends Sprite {

        public function URLVariablesExample() {
            var url:String = "http://www.[yourDomain].com/application.jsp";
            var request:URLRequest = new URLRequest(url);
            var variables:URLVariables = new URLVariables();
            variables.exampleSessionId = new Date().getTime();
            variables.exampleUserLabel = "guest";
            request.data = variables;
            navigateToURL(request);
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequest/method" class="- topic/link "><linktext class="- topic/linktext ">URLRequest.method</linktext></link><link href="flash.net.xml#URLRequestMethod" class="- topic/link "><linktext class="- topic/linktext ">URLRequestMethod</linktext></link><link href="flash.net.xml#URLVariables" class="- topic/link "><linktext class="- topic/linktext ">URLVariables</linktext></link><link href="flash.utils.xml#ByteArray" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.ByteArray</linktext></link><link href="flash.net.xml#URLRequest/contentType" class="- topic/link "><linktext class="- topic/linktext ">contentType</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:digest:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">digest</apiName><shortdesc class="- topic/shortdesc ">
     A string that uniquely identifies the signed Adobe platform component to be stored
     to (or retrieved from) the Flash Player cache.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The digest provided does not match the digest of the file that is
     extracted from the downloaded signed file or the signed file loaded out of the cache. The
     application also throws this error if the provided digest is the wrong length or contains invalid
     (nonhexadecimal) characters.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     A string that uniquely identifies the signed Adobe platform component to be stored
     to (or retrieved from) the Flash Player cache. <ph class="- topic/ph "> An Adobe
     platform component is a signed file (a SWZ file) that contains SWF content that is cached
     persistently on a user's machine. All SWZ files are signed by Adobe. A digest
     corresponds to a single cached file; if you change the file in any way, its digest
     will change in an unpredictable way. By using a digest, you can verify the cached file across
     multiple domains. Two files with the same digest are the same file, and two files with different
     digests are not the same file. A file cannot (practically) be created to "spoof" a digest and
     pretend to be another digest. </ph>
     
     <p class="- topic/p ">The digest is based on an SHA-256 message digest algorithm
     (64 characters long in hexadecimal format).</p>
     
     <p class="- topic/p ">For example, the Flex SDK includes a SWZ for the Flex framework (and it
     provides the digest string for that SWZ file). You can post this SWZ on your web server and load it
     in your SWF file (using the <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> method of a URLLoader object). If the end user's
     machine already has the matching SWZ file cached, the application uses the cached SWZ file.
     (A SWZ file matches if its <codeph class="+ topic/ph pr-d/codeph ">digest</codeph> matches the one you provide.) Otherwise, the
     application downloads the SWZ file from the URL you specify. </p>
     
     <p class="- topic/p ">Only set the <codeph class="+ topic/ph pr-d/codeph ">digest</codeph> parameter in a URLRequest object
     used in a call to the <codeph class="+ topic/ph pr-d/codeph ">URLLoader.load()</codeph> method to load a SWZ file. If the <codeph class="+ topic/ph pr-d/codeph ">digest</codeph>
     property of a a URLRequest object is set when it is used in other methods, the application throws an
     IOError exception.</p>
     
     </apiDesc><example conref="examples\URLRequest_digest.as" class="- topic/example "> The following example loads a remote file into the cache. At the end of the load, the byte array 
 contains the actual file (not the signed file). The example completes the load operation by calling <codeph class="+ topic/ph pr-d/codeph ">loadBytes()</codeph>:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 
var myURLReq:URLRequest = new URLRequest();
myURLReq.url = "http://yourdomain/users/jdoe/test01/_rsc/Automated/AssetCaching_rsc/test01/rsl.swz";
myURLReq.digest = "3B0AA28C7A990385E044D80F5637FB036317BB41E044D80F5637FB036317BB41";
var myURLLoader:URLLoader = new URLLoader();
myURLLoader.dataFormat = URLLoaderDataFormat.BINARY;
myURLLoader.addEventListener("complete", onC);

myURLLoad.load(myURLReq);

function onC(e) {
    var someLoader:Loader = new Loader();
    addChild(someLoader);
    someLoader.loadBytes((ByteArray)(myURLLoad.data)); 
}

</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.net:URLRequest:followRedirects:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">followRedirects</apiName><shortdesc class="- topic/shortdesc ">
    Specifies whether redirects are to be followed (true)
    or not (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
    
    </apiDefaultValue><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Specifies whether redirects are to be followed.
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies whether redirects are to be followed (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>)
    or not (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>:The <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>,
    <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">HTMLLoader.load()</codeph> methods do not
    support the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.followRedirects</codeph> property.</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/followRedirects" class="- topic/link "><linktext class="- topic/linktext ">URLRequestDefaults.followRedirects</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:idleTimeout:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">idleTimeout</apiName><shortdesc class="- topic/shortdesc ">
	    Specifies the idle timeout value (in milliseconds) for this request.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
	    
	    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>initialized from the URLRequestDefaults.idleTimeout property
	    
	    </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	    Specifies the idle timeout value (in milliseconds) for this request.
	    
	    <p class="- topic/p ">The idle timeout is the amount of time the client waits for a response from the server, after the connection is established,
	    before abandoning the request.</p>
	    
	    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: The <codeph class="+ topic/ph pr-d/codeph ">HTMLLoader.load()</codeph> method
	    does not support the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.idleTimeout</codeph> property.
	    The HTMLLoader class defines its own <codeph class="+ topic/ph pr-d/codeph ">idleTimeout</codeph> property.</p>
	    
	    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/idleTimeout" class="- topic/link "><linktext class="- topic/linktext ">URLRequestDefaults.idleTimeout</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:manageCookies:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">manageCookies</apiName><shortdesc class="- topic/shortdesc ">
    Specifies whether the HTTP protocol stack should manage cookies for this
    request.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
    
    </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies whether the HTTP protocol stack should manage cookies for this
    request. When <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, cookies are added to the request
    and response cookies are remembered. If <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, cookies are
    <i class="+ topic/ph hi-d/i ">not</i> added to the request and response cookies are <i class="+ topic/ph hi-d/i ">not</i>
    remembered, but users can manage cookies themselves by direct header
    manipulation.
    
    <b class="+ topic/ph hi-d/b ">Note:</b> On Windows, you cannot add cookies to a URL request manually
    when <codeph class="+ topic/ph pr-d/codeph ">manageCookies</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. On other operating systems,
    adding cookies to a request is permitted irrespective of whether <codeph class="+ topic/ph pr-d/codeph ">manageCookies</codeph>
    is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> or <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. When permitted, you can add cookies
    to a request manually by adding a <codeph class="+ topic/ph pr-d/codeph ">URLRequestHeader</codeph> object containing the
    cookie data to the <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> array.
    
    <p class="- topic/p ">On Mac OS, cookies are shared with Safari. To clear cookies on Mac OS:</p>
    
    <ol class="- topic/ol "><li class="- topic/li ">Open Safari.</li><li class="- topic/li ">Select Safari &gt; Preferences, and click the Security panel.</li><li class="- topic/li ">Click the Show Cookies button.</li><li class="- topic/li ">Click the Reomove All button.</li></ol>
    
    <p class="- topic/p ">To clear cookies on Windows:</p>
    
    <ol class="- topic/ol "><li class="- topic/li ">Open the Internet Properties control panel, and click the General tab.</li><li class="- topic/li ">Click the Delete Cookies button. </li></ol>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/manageCookies" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequestDefaults.manageCookies</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:method:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">method</apiName><shortdesc class="- topic/shortdesc ">
     Controls the HTTP form submission method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">value</codeph> parameter is not
     <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.GET</codeph> or <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiDefaultValue>URLRequestMethod.GET
     
     </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Controls the HTTP form submission method.
     
     <p class="- topic/p "><ph class="- topic/ph ">For SWF content running in Flash Player
     (in the browser), this property is limited to GET or
     POST operations, and valid values are <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.GET</codeph>
     or <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph>.</ph></p>
     
     <p class="- topic/p "><ph class="- topic/ph ">For content running in Adobe AIR, you </ph>
     can use any string value
     if the content is in the application security sandbox. Otherwise,
     <ph class="- topic/ph ">as with content running in Flash Player,</ph>
     you are restricted to using GET or POST operations.</p>
     
     <p class="- topic/p "><ph class="- topic/ph ">For content running in Adobe AIR, when </ph>
     using the <codeph class="+ topic/ph pr-d/codeph ">navigateToURL()</codeph> function, the runtime treats a URLRequest that uses the POST
     method (one that has its <codeph class="+ topic/ph pr-d/codeph ">method</codeph> property set to <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph>)
     as using the GET method.</p>
     
     <p class="- topic/p "><ph class="- topic/ph "><b class="+ topic/ph hi-d/b ">Note:</b>
     If running in Flash Player and the referenced form has no body,
     Flash Player automatically uses a GET operation, even if the method is set to
     <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph>. For this reason, it is recommended to always include
     a "dummy" body to ensure that the correct method is used.</ph></p>
     
     </apiDesc><example conref="examples\URLRequest_method.as" class="- topic/example "> The following example opens the remote application hosted at 
 http://www.[yourDomain].com/application.jsp in a new browser window and passes 
 data about a user session, captured in a URLVariables object, to the application. 
 It explicitly sets the value of the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.method</codeph> property to 
 <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph>.
 <p class="- topic/p ">Highlights of the example follow:</p>
 <ol class="- topic/ol "><li class="- topic/li ">The constructor function creates a URLRequest
    instance named <codeph class="+ topic/ph pr-d/codeph ">request</codeph>, taking the URL of the remote application as a parameter.</li><li class="- topic/li ">A URLVariables object is created and two of its properties are assigned values.</li><li class="- topic/li ">The URLVariables object is assigned to the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property of the URLRequest object.</li><li class="- topic/li ">The value of the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.method</codeph> property is set to 
 <codeph class="+ topic/ph pr-d/codeph ">URLRequestMethod.POST</codeph>.</li><li class="- topic/li ">The example calls <codeph class="+ topic/ph pr-d/codeph ">navigateToURL</codeph>, which opens a new browser window
    to the remote application's URL.</li></ol>
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">Note:</b> To run the example, the remote application URL in the example must be replaced
 with a working URL. Additionally, you would need server code 
 to process the information captured by Flash Player in the URLVariables object.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.net.URLRequestMethod;
    import flash.net.URLVariables;

    public class URLRequest_method extends Sprite {

        public function URLRequest_method() {
            var url:String = "http://www.[yourDomain].com/application.jsp";
            var request:URLRequest = new URLRequest(url);
            
            var variables:URLVariables = new URLVariables();
            variables.exampleSessionId = new Date().getTime();
            variables.exampleUserLabel = "guest";
            request.data = variables;
            request.method = URLRequestMethod.POST;
            
            navigateToURL(request);
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestMethod" class="- topic/link "><linktext class="- topic/linktext ">URLRequestMethod class</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:requestHeaders:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">requestHeaders</apiName><shortdesc class="- topic/shortdesc ">
     The array of HTTP request headers to be appended to the
     HTTP request.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The array of HTTP request headers to be appended to the
     HTTP request. The array is composed of URLRequestHeader objects.
     Each object in the array must be a URLRequestHeader object that
     contains a name string and a value string, as follows:
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var rhArray:Array = new Array(new URLRequestHeader("Content-Type", "text/html"));
     </codeblock>
     
     <p class="- topic/p "><ph class="- topic/ph ">Flash Player and the AIR runtime impose</ph>
      certain restrictions on request headers;
     for more information, see the URLRequestHeader class description.</p>
     
     <p class="- topic/p ">Not all methods that accept URLRequest parameters support the <codeph class="+ topic/ph pr-d/codeph ">requestHeaders</codeph> property,
     consult the documentation for the method you are calling. For example, the <codeph class="+ topic/ph pr-d/codeph ">FileReference.upload()</codeph>
     and <codeph class="+ topic/ph pr-d/codeph ">FileReference.download()</codeph> methods do not
     support the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.requestHeaders</codeph> property.</p>
     <p class="- topic/p ">Due to browser limitations, custom HTTP request headers are only supported for <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> requests,
     not for <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> requests.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestHeader" class="- topic/link "><linktext class="- topic/linktext ">URLRequestHeader</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:url:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">url</apiName><shortdesc class="- topic/shortdesc ">
     The URL to be requested.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The URL to be requested.
     
     <p class="- topic/p ">Be sure to encode any characters that are either described as unsafe in the Uniform Resource Locator
     specification (see http://www.faqs.org/rfcs/rfc1738.html) or that are reserved in the
     URL scheme of the URLRequest object (when not used for their reserved purpose). For example,
     use <codeph class="+ topic/ph pr-d/codeph ">"%25"</codeph> for the percent (%) symbol and <codeph class="+ topic/ph pr-d/codeph ">"%23"</codeph> for the number sign (#), as in
     <codeph class="+ topic/ph pr-d/codeph ">"http://www.example.com/orderForm.cfm?item=%23B-3&amp;discount=50%25"</codeph>.</p>
     
      <p class="- topic/p ">By default, the URL must be in the same domain as the calling file,
      unless the content is running in the <ph class="- topic/ph ">Adobe AIR </ph>application
      security sandbox. <ph class="- topic/ph ">If you need to load data from a different domain,
      put a URL policy file on the server that is hosting the data</ph>. For more information,
      see the description of the URLRequest class.</p>
     
     <p class="- topic/p "><ph class="- topic/ph ">For content running in Adobe AIR, files</ph>
      in the application security sandobx
     — files installed with the AIR application — can access URLs using any of the
     following URL schemes:</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">http</codeph> and <codeph class="+ topic/ph pr-d/codeph ">https</codeph> </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">file</codeph> </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph> </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">app</codeph> </li></ul>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> IPv6 (Internet Protocol version 6) is supported<ph class="- topic/ph "> in
     AIR and in Flash Player 9.0.115.0 and later</ph>.
     
     IPv6 is a version of Internet Protocol that supports
     128-bit addresses (an improvement on the earlier IPv4 protocol that supports 32-bit
     addresses). You might need to activate IPv6 on your networking interfaces. For more
     information, see the Help for the operating system hosting the data.
     If IPv6 is supported on the hosting system, you can specify numeric IPv6 literal addresses
     in URLs enclosed in brackets ([])<ph class="- topic/ph ">, as in the following</ph>. </p>
     
     <ph class="- topic/ph ">
     <pre xml:space="preserve" class="- topic/pre ">
     rtmp://[2001:db8:ccc3:ffff:0:444d:555e:666f]:1935/test
     </pre>
     </ph>
     
     </apiDesc><example conref="examples\Loader_load_url.as" class="- topic/example "> The following example shows how you can dynamically load an image using the Loader class in ActionScript 3.0. 
 Example provided by 
 <xref href="http://actionscriptexamples.com/2008/03/02/dynamically-loading-an-image-in-actionscript-20-and-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var url:String = "http://www.helpexamples.com/flash/images/image2.jpg";
var urlRequest:URLRequest = new URLRequest(url);
var loader:Loader = new Loader();
loader.load(urlRequest);
addChild(loader);
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.net:URLRequest:useCache:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">useCache</apiName><shortdesc class="- topic/shortdesc ">
    Specifies whether the local cache should be consulted before this URLRequest
    fetches data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
    
    </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies whether the local cache should be consulted before this URLRequest
    fetches data.
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>:The <codeph class="+ topic/ph pr-d/codeph ">HTMLLoader.load()</codeph> method
    does not support the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.useCache</codeph> property.</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/useCache" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequestDefaults.useCache</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:userAgent:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">userAgent</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the user-agent string to be used in the HTTP request.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The caller is not in the AIR application security sandbox.
    
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the user-agent string to be used in the HTTP request.
    
    <p class="- topic/p ">The default value is the same user agent string that is used by
    Flash Player, which is different on Mac, Linux, and Windows.</p>
    
    <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Note:</i> This property does not affect the user agent string when
    the URLRequest object is used with the <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> method of an
    HTMLLoader object. To set the user agent string for an HTMLLoader object,
    set the <codeph class="+ topic/ph pr-d/codeph ">userAgent</codeph> property of the HTMLLoader object or set
    the static <codeph class="+ topic/ph pr-d/codeph ">URLRequestDefaults.userAgent</codeph> property.</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestDefaults/userAgent" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequestDefaults.userAgent</linktext></link><link href="../../flash/html/HTMLLoader.html#userAgent" class="- topic/link "><linktext class="- topic/linktext ">flash.html.HTMLLoader.userAgent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:InterfaceAddress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">InterfaceAddress</apiName><shortdesc class="- topic/shortdesc ">
 The InterfaceAddress class reports the properties of a network interface address.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The InterfaceAddress class reports the properties of a network interface address.
 
 </apiDesc><example conref="examples\InterfaceAddressExample.as" class="- topic/example "/></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetworkInfo" class="- topic/link "><linktext class="- topic/linktext ">NetworkInfo class</linktext></link><link href="flash.net.xml#NetworkInterface" class="- topic/link "><linktext class="- topic/linktext ">NetworkInterface class</linktext></link></related-links><apiValue id="flash.net:InterfaceAddress:address:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">address</apiName><shortdesc class="- topic/shortdesc ">
     The Internet Protocol (IP) address.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The Internet Protocol (IP) address.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:InterfaceAddress:broadcast:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">broadcast</apiName><shortdesc class="- topic/shortdesc ">
     The broadcast address of the local network segment.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The broadcast address of the local network segment.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:InterfaceAddress:ipVersion:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ipVersion</apiName><shortdesc class="- topic/shortdesc ">
	 The IP address type (IPv4 or IPv6).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The IP address type (IPv4 or IPv6).
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:InterfaceAddress:prefixLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prefixLength</apiName><shortdesc class="- topic/shortdesc ">
     The prefix length for this address.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The prefix length for this address. 
     
     <p class="- topic/p ">For IPv4 addresses, this is the subnet mask. Examples of the prefix length for
     IPv4 values include: 8 (255.0.0.0), 16 (255.255.0.0) and 24 (255.255.255.0).
     Example IPv6 prefix length values include 128 (::1/128) and 32 (2001:db8::/32) </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> If the prefix length for this address is not available, the value of 
     <codeph class="+ topic/ph pr-d/codeph ">prefixLength</codeph> is <codeph class="+ topic/ph pr-d/codeph ">-1</codeph>. A prefix value is not always returned by
     the network implementation of a specific client computer.</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:GroupSpecifier" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">GroupSpecifier</apiName><shortdesc class="- topic/shortdesc ">
     The GroupSpecifier class is used to construct the opaque groupspec strings
     that can be passed to NetStream and NetGroup constructors.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Constructs the opaque groupspec strings passed to NetStream and NetGroup constructors.
     </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The GroupSpecifier class is used to construct the opaque <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> strings
     that can be passed to NetStream and NetGroup constructors.
     A <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> specifies an RTMFP Peer-to-Peer Group, including
     the capabilities, restrictions, and authorizations of the member using the <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph>.
     
     <p class="- topic/p ">By default, all capabilities are disabled, and peer-to-peer connections are allowed.</p>
     
     </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link></related-links><apiConstructor id="flash.net:GroupSpecifier:GroupSpecifier" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">GroupSpecifier</apiName><shortdesc class="- topic/shortdesc ">
         Creates a new GroupSpecifier object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">if <codeph class="+ topic/ph pr-d/codeph ">name</codeph> is empty or <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
         
         </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A name for the Group on which all members must agree.
         
         </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Creates a new GroupSpecifier object.
         
         By default, all capabilities are disabled, and peer-to-peer connections are allowed.
         
         </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:GroupSpecifier:addBootstrapPeer" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addBootstrapPeer</apiName><shortdesc class="- topic/shortdesc ">
         Causes the associated NetStream or NetGroup to make an initial neighbor connection to the
         specified peerID.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">peerID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The peerID to which an initial neighbor connection should be made to
         bootstrap into the peer-to-peer mesh.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Causes the associated NetStream or NetGroup to make an initial neighbor connection to the
         specified peerID.
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/encodeBootstrapPeerIDSpec()" class="- topic/link "><linktext class="- topic/linktext ">encodeBootstrapPeerIDSpec()</linktext></link><link href="flash.net.xml#NetGroup/addMemberHint()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addMemberHint()</linktext></link><link href="flash.net.xml#NetGroup/addNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addNeighbor()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:addIPMulticastAddress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addIPMulticastAddress</apiName><shortdesc class="- topic/shortdesc ">
         Causes the associated NetStream or NetGroup to join the specified IP multicast group and listen
         to the specified UDP port.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">address</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A String specifying the address of the IPv4 or IPv6 multicast group to join, optionally followed
         by a colon (":") and the UDP port number. If specifying an IPv6 address and a port,
         the IPv6 address <i class="+ topic/ph hi-d/i ">must</i> be enclosed in square brackets. Examples: <codeph class="+ topic/ph pr-d/codeph ">"224.0.0.254"</codeph>,
         <codeph class="+ topic/ph pr-d/codeph ">"224.0.0.254:30000"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"ff03::ffff"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"[ff03::ffff]:30000"</codeph>.
         
         </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The UDP port on which to receive IP multicast datagrams. If <codeph class="+ topic/ph pr-d/codeph ">port</codeph> is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>,
         the UDP port <i class="+ topic/ph hi-d/i ">must</i> be specified in <codeph class="+ topic/ph pr-d/codeph ">address</codeph>. If not <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, the
         UDP port <i class="+ topic/ph hi-d/i ">must not</i> be specified in <codeph class="+ topic/ph pr-d/codeph ">address</codeph>.
         
         </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">source</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If not <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, a String specifying the source IP address of a source-specific multicast (SSM).
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Causes the associated NetStream or NetGroup to join the specified IP multicast group and listen
         to the specified UDP port.
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/encodeIPMulticastAddressSpec()" class="- topic/link "><linktext class="- topic/linktext ">encodeIPMulticastAddressSpec()</linktext></link><link href="flash.net.xml#GroupSpecifier/ipMulticastMemberUpdatesEnabled" class="- topic/link "><linktext class="- topic/linktext ">ipMulticastMemberUpdatesEnabled</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:authorizations" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">authorizations</apiName><shortdesc class="- topic/shortdesc ">
         Returns a string that represents passwords for IP multicast publishing and for posting.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Returns a string that represents passwords for IP multicast publishing and for posting.
         Append the string to an unauthorized <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> to enable
         features for which passwords have been set.
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/encodePostingAuthorization()" class="- topic/link "><linktext class="- topic/linktext ">encodePostingAuthorization()</linktext></link><link href="flash.net.xml#GroupSpecifier/encodePublishAuthorization()" class="- topic/link "><linktext class="- topic/linktext ">encodePublishAuthorization()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/setPostingPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPostingPassword()</linktext></link><link href="flash.net.xml#GroupSpecifier/setPublishPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPublishPassword()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:encodeBootstrapPeerIDSpec" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodeBootstrapPeerIDSpec</apiName><shortdesc class="- topic/shortdesc ">
         Encodes and returns a string that represents a bootstrap peerID.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">peerID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The peerID to which an initial neighbor connection should be made to
         bootstrap into the peer-to-peer mesh.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Encodes and returns a string that represents a bootstrap peerID. If you append the string
         to a <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph>, the associated NetStream or NetGroup makes an initial neighbor connection to the
         specified peerID.
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/addBootstrapPeer()" class="- topic/link "><linktext class="- topic/linktext ">addBootstrapPeer()</linktext></link><link href="flash.net.xml#NetGroup/addMemberHint()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addMemberHint()</linktext></link><link href="flash.net.xml#NetGroup/addNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addNeighbor()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:encodeIPMulticastAddressSpec" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodeIPMulticastAddressSpec</apiName><shortdesc class="- topic/shortdesc ">
         Encodes and returns a string that represents an IP multicast socket address.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">address</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A String indicating the address of the IPv4 or IPv6 multicast group to join, optionally followed
         by a colon (":") and the UDP port number. If specifying an IPv6 address <i class="+ topic/ph hi-d/i ">and</i> a port,
         the IPv6 address <i class="+ topic/ph hi-d/i ">must</i> be enclosed in square brackets. Examples: <codeph class="+ topic/ph pr-d/codeph ">"224.0.0.254"</codeph>,
         <codeph class="+ topic/ph pr-d/codeph ">"224.0.0.254:30000"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"ff03::ffff"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"[ff03::ffff]:30000"</codeph>.
         
         </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">port</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The UDP port on which to receive IP multicast datagrams. If <codeph class="+ topic/ph pr-d/codeph ">port</codeph> is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>,
         the UDP port <i class="+ topic/ph hi-d/i ">must</i> be specified in <codeph class="+ topic/ph pr-d/codeph ">address</codeph>. If not <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, the
         UDP port <i class="+ topic/ph hi-d/i ">must not</i> be specified in <codeph class="+ topic/ph pr-d/codeph ">address</codeph>.
         
         </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">source</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If not <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, a String specifying the source IP address of a source-specific multicast (SSM).
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Encodes and returns a string that represents an IP multicast socket address.
         If you append the string to a <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph>, the associated NetStream or NetGroup
         joins the specified IP multicast group and listens to the specified UDP port.
         
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/addIPMulticastAddress()" class="- topic/link "><linktext class="- topic/linktext ">addIPMulticastAddress()</linktext></link><link href="flash.net.xml#GroupSpecifier/ipMulticastMemberUpdatesEnabled" class="- topic/link "><linktext class="- topic/linktext ">ipMulticastMemberUpdatesEnabled</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:encodePostingAuthorization" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodePostingAuthorization</apiName><shortdesc class="- topic/shortdesc ">
         Encodes and returns a string that represents a posting password.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">password</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The password to encode, which must match the posting
         password (if set) to enable <codeph class="+ topic/ph pr-d/codeph ">NetGroup.post()</codeph>.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Encodes and returns a string that represents a posting password. When posting is password-protected,
         you can concatenate the string to a <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> to enable posting.
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/setPostingPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPostingPassword()</linktext></link><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:encodePublishAuthorization" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodePublishAuthorization</apiName><shortdesc class="- topic/shortdesc ">
         Encodes and returns a string that represents a multicast publishing password.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">password</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The password to encode, which must match the publish
         password (if set) to enable <codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph>.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Encodes and returns a string that represents a multicast publishing password. When multicast publishing is password-protected,
         you can concatenate the string to a <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> to enable publishing.
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/setPublishPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPublishPassword()</linktext></link><link href="flash.net.xml#NetStream/publish()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.publish()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:groupspecWithAuthorizations" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">groupspecWithAuthorizations</apiName><shortdesc class="- topic/shortdesc ">
         Returns the opaque groupspec string, including authorizations, that can be passed to NetStream and NetGroup constructors.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Returns the opaque <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> string, including authorizations, that can be passed to NetStream and NetGroup constructors.
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/authorizations()" class="- topic/link "><linktext class="- topic/linktext ">authorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/setPostingPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPostingPassword()</linktext></link><link href="flash.net.xml#GroupSpecifier/setPublishPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPublishPassword()</linktext></link><link href="flash.net.xml#GroupSpecifier/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:groupspecWithoutAuthorizations" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">groupspecWithoutAuthorizations</apiName><shortdesc class="- topic/shortdesc ">
         Returns the opaque groupspec string, without authorizations, that can be passed to NetStream and NetGroup constructors.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the opaque groupspec string, without authorizations, that can be passed to NetStream and NetGroup constructors.
         </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Returns the opaque <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> string, without authorizations, that can be passed to NetStream and NetGroup constructors.
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/authorizations()" class="- topic/link "><linktext class="- topic/linktext ">authorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/encodePostingAuthorization()" class="- topic/link "><linktext class="- topic/linktext ">encodePostingAuthorization()</linktext></link><link href="flash.net.xml#GroupSpecifier/encodePublishAuthorization()" class="- topic/link "><linktext class="- topic/linktext ">encodePublishAuthorization()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithAuthorizations()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:makeUnique" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">makeUnique</apiName><shortdesc class="- topic/shortdesc ">
         Adds a strong pseudorandom tag to the groupspec to make it unique.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Adds a strong pseudorandom tag to the groupspec to make it unique.
         </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Adds a strong pseudorandom tag to the <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> to make it unique. The opaque <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> string must then
         be passed verbatim to other potential members of the Group if they are to successfully join.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:GroupSpecifier:setPostingPassword" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setPostingPassword</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether a password is required to post in the NetGroup.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">password</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The password that must be given to use <codeph class="+ topic/ph pr-d/codeph ">NetGroup.post()</codeph>. If <codeph class="+ topic/ph pr-d/codeph ">null</codeph>,
         no password is required to post.
         
         </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">salt</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Modifies the hash of the password to increase the difficulty of guessing it.
         For best security, this parameter should be set to a random value.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether a password is required to post in the NetGroup.
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/encodePostingAuthorization()" class="- topic/link "><linktext class="- topic/linktext ">encodePostingAuthorization()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:setPublishPassword" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setPublishPassword</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether a password is required to publish a multicast stream in the NetStream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">password</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The password that must be given to use <codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph>. If <codeph class="+ topic/ph pr-d/codeph ">null</codeph>,
         no password is required to publish.
         
         </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">salt</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Modifies the hash of the password to increase the difficulty of guessing it.
         For best security, this parameter should be set to a random value.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether a password is required to publish a multicast stream in the NetStream.
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/encodePublishAuthorization()" class="- topic/link "><linktext class="- topic/linktext ">encodePublishAuthorization()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#NetStream/publish()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.publish()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:GroupSpecifier:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
         Identical to the groupspecWithAuthorizations() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Identical to the groupspecWithAuthorizations() method.
         </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Identical to the <codeph class="+ topic/ph pr-d/codeph ">groupspecWithAuthorizations()</codeph> method.
         Convenience method to return the opaque <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> string, including authorizations,
         that can be passed to NetStream and NetGroup constructors.
         
         </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/groupspecWithAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">groupspecWithAuthorizations()</linktext></link></related-links></apiOperation><apiValue id="flash.net:GroupSpecifier:ipMulticastMemberUpdatesEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ipMulticastMemberUpdatesEnabled</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether information about group membership can be exchanged on IP multicast
         sockets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether information about group membership can be exchanged on IP multicast
         sockets. IP multicast servers may send group membership updates to help bootstrap P2P meshes
         or heal partitions. Peers may send membership updates on the LAN to help bootstrap LAN P2P
         meshes and to inform on-LAN neighbors in global meshes that other on-LAN neighbors exist.
         These updates can improve P2P performance.
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/addIPMulticastAddress()" class="- topic/link "><linktext class="- topic/linktext ">addIPMulticastAddress()</linktext></link><link href="flash.net.xml#GroupSpecifier/peerToPeerDisabled" class="- topic/link "><linktext class="- topic/linktext ">peerToPeerDisabled</linktext></link></related-links></apiValue><apiValue id="flash.net:GroupSpecifier:multicastEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastEnabled</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether streaming is enabled for the NetGroup.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether streaming is enabled for the NetGroup. Methods used for streaming
         are <codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph>.
         By default, this property is FALSE (streaming is disabled).
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#GroupSpecifier/setPublishPassword()" class="- topic/link "><linktext class="- topic/linktext ">setPublishPassword()</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.play2()</linktext></link><link href="flash.net.xml#NetStream/publish()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.publish()</linktext></link></related-links></apiValue><apiValue id="flash.net:GroupSpecifier:objectReplicationEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectReplicationEnabled</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether object replication is enabled for the NetGroup.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether object replication is enabled for the NetGroup.
         By default, this property is FALSE (object replication is disabled).
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/addHaveObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addHaveObjects()</linktext></link><link href="flash.net.xml#NetGroup/addWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addWantObjects()</linktext></link><link href="flash.net.xml#NetGroup/denyRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.denyRequestedObject()</linktext></link><link href="flash.net.xml#NetGroup/removeHaveObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.removeHaveObjects()</linktext></link><link href="flash.net.xml#NetGroup/removeWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.removeWantObjects()</linktext></link><link href="flash.net.xml#NetGroup/writeRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.writeRequestedObject()</linktext></link></related-links></apiValue><apiValue id="flash.net:GroupSpecifier:peerToPeerDisabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">peerToPeerDisabled</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether peer-to-peer connections are disabled for the NetGroup or NetStream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether peer-to-peer connections are disabled for the NetGroup or NetStream.
         By default, this property is FALSE (P2P connections are enabled).
         
         <p class="- topic/p ">If P2P connections are disabled (you set this property to TRUE), the P2P warning dialog is suppressed.
         In this situation, no neighbor connections can be made, and no group members use upstream bandwidth.
         Disabling P2P connections in this way is generally useful only when receiving multicast streams via pure IP multicast.</p>
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:GroupSpecifier:postingEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">postingEnabled</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether posting is enabled for the NetGroup.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether posting is enabled for the NetGroup.
         By default, this property is FALSE (posting is disabled).
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiValue><apiValue id="flash.net:GroupSpecifier:routingEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">routingEnabled</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether directed routing methods are enabled for the NetGroup.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether directed routing methods are enabled for the NetGroup.
         By default, this property is FALSE (directed routing methods are disabled).
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link></related-links></apiValue><apiValue id="flash.net:GroupSpecifier:serverChannelEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">serverChannelEnabled</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether members of the NetGroup can open a channel to the server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether members of the NetGroup can open a channel to the server.
         By default, this property is FALSE.
         
         <p class="- topic/p ">A channel to the server must be opened before the
         server can provide supporting functions to group members. Depending on server
         configuration, supporting functions may or may not be provided over this channel.</p>
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:LocalConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">LocalConnection</apiName><shortdesc class="- topic/shortdesc ">
 The LocalConnection class lets you create a LocalConnection object that can invoke a method in another
 LocalConnection object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">LocalConnection
 
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The LocalConnection class lets you create a LocalConnection object that can invoke a method in another
 LocalConnection object. The communication can be:
 
 <ul class="- topic/ul "><li class="- topic/li ">Within a single SWF file</li><li class="- topic/li ">Between multiple SWF files</li><li class="- topic/li ">Between content (SWF-based or HTML-based) in AIR applications</li><li class="- topic/li ">Between content (SWF-based or HTML-based) in an AIR application and SWF content running in a browser</li></ul>
 
 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">AIR profile support:</i> This feature is supported 
 on all desktop operating systems and on all AIR for TV devices, but is not supported on mobile devices. 
 You can test for support at run time using the <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.isSupported</codeph> property. See 
 <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">
 AIR Profile Support</xref> for more information regarding API support across multiple profiles.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note: </b>AIR for TV devices support communication only between SWF-based content in AIR
 applications.</p>
 
 <p class="- topic/p ">Local connections enable this kind of communication between SWF files without the use of <codeph class="+ topic/ph pr-d/codeph ">fscommand()</codeph>
 or JavaScript. LocalConnection objects can communicate only among files that are running
 on the same client computer, but they can be
 running in different applications — for example, a file running in a browser
 and a SWF file running in Adobe AIR. </p>
 
 <p class="- topic/p ">LocalConnection objects created in ActionScript 3.0 can communicate with
 LocalConnection objects created in ActionScript 1.0 or 2.0. The reverse is also true:
 LocalConnection objects created in ActionScript 1.0 or 2.0 can communicate with LocalConnection
 objects created in ActionScript 3.0. Flash Player handles this communication
 between LocalConnection objects of different versions automatically.</p>
 
 <p class="- topic/p ">There are three ways to add callback methods to a LocalConnection object:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Subclass the LocalConnection class and add methods.</li><li class="- topic/li ">Set the <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.client</codeph> property to an object that implements the methods.</li><li class="- topic/li ">Create a dynamic class that extends LocalConnection and dynamically attach methods.</li></ul>
 
 <p class="- topic/p ">To understand how to use LocalConnection objects to implement communication between two files,
 it is helpful to identify the commands used in each file. One file is called the <i class="+ topic/ph hi-d/i ">receiving</i> file;
 it is the file that contains the method to be invoked. The receiving file must contain a LocalConnection object
 and a call to the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method.  The other file is called the <i class="+ topic/ph hi-d/i ">sending</i> file;
 it is the file that invokes the method. The sending file must contain another LocalConnection object
 and a call to the <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> method.</p>
 
 <p class="- topic/p ">Your use of <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> differs depending on whether the
 files are in the same domain, in different domains with predictable domain names,
 or in different domains with unpredictable or dynamic domain names. The following paragraphs
 explain the three different situations, with code samples for each.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Same domain</b>. This is the simplest way to use a LocalConnection object,
 to allow communication only between LocalConnection objects that are located in the same domain,
 because same-domain communication is permitted by default. When two files from the same domain communicate,
 you do not need to implement any special security measures, and you simply pass the same
 value for the <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> parameter to both the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph>
 and <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> methods:</p>
 
 <p class="- topic/p "><adobeimage alt="Loading from the same domain" href="../../images/localconnection_samedomains.gif" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// receivingLC is in http://www.domain.com/receiving.swf
receivingLC.connect('myConnection');

// sendingLC is in http://www.domain.com/sending.swf
// myMethod() is defined in sending.swf
sendingLC.send('myConnection', 'myMethod');
</codeblock>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Different domains with predictable domain names</b>.
 When two SWF files from different domains communicate,
 you need to allow communication between the two domains by calling the <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph>
 method. You also need to qualify the connection name in the <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> method
 with the receiving LocalConnection object's domain name:</p>
 
 <p class="- topic/p "><adobeimage alt="Loading from separate domains" href="../../images/localconnection_differentdomains.gif" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// receivingLC is in http://www.domain.com/receiving.swf
receivingLC.allowDomain('www.anotherdomain.com');
receivingLC.connect('myConnection');

// sendingLC is in http://www.anotherdomain.com/sending.swf
sendingLC.send('www.domain.com:myConnection', 'myMethod');
</codeblock>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Different domains with unpredictable domain names</b>.
 Sometimes, you might want to make the file with the receiving LocalConnection object
 more portable between domains. To avoid specifying the domain name in the <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> method,
 but to indicate that the receiving and sending LocalConnection objects
 are not in the same domain, precede the connection name
 with an underscore (_), in both the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> calls.
 To allow communication between the two domains, call the <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> method
 and pass the domains from which you want to allow LocalConnection calls.
 Alternatively, pass the wildcard (~~) argument to allow calls from all domains:</p>
 
 <p class="- topic/p "><adobeimage alt="Loading from unknown domain names" href="../../images/localconnection_unknowndomains.gif" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// receivingLC is in http://www.domain.com/receiving.swf
receivingLC.allowDomain('~~');
receivingLC.connect('_myConnection');

// sendingLC is in http://www.anotherdomain.com/sending.swf
sendingLC.send('_myConnection', 'myMethod');
</codeblock>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">From Flash Player to an AIR application</b>.
 A LocalConnection object created in the AIR application sandbox uses a special string as it's connection 
 prefix instead of a domain name. This string has the form:
 <codeph class="+ topic/ph pr-d/codeph ">app#appID.pubID</codeph> where appID is the application ID and pubID is the publisher ID of the application.
 (Only include the publisher ID if the AIR application uses a publisher ID.) For example, if an
 AIR application has an application ID of, "com.example", and no publisher ID, you could use: 
 <codeph class="+ topic/ph pr-d/codeph ">app#com.example:myConnection</codeph> as the local connection string. The AIR application also must call
 the <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> method, passing in the calling SWF file's domain of origin: </p>
 
 <p class="- topic/p "><adobeimage alt="Flash Player to AIR connection" href="../../images/localconnection_flash2AIR.gif" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// receivingLC is an AIR application with app ID = com.example (and no publisher ID)
receivingLC.allowDomain('www.domain.com');
receivingLC.connect('myConnection');

// sendingLC is in http://www.domain.com/sending.swf
sendingLC.send('app#com.example:myConnection', 'myMethod');
</codeblock>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> If an AIR application loads a SWF outside the AIR application sandbox, then the rules for 
 establishing a local connection with that SWF are the same as the rules for establishing a connection with a SWF 
 running in Flash Player.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">From an AIR application to Flash Player</b>.
 When an AIR application communicates with a SWF running in the Flash Player runtime,
 you need to allow communication between the two by calling the <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph>
 method and passing in the AIR application's connection prefix. For example, if an
 AIR application has an application ID of, "com.example", and no publisher ID, you could pass the string: 
 <codeph class="+ topic/ph pr-d/codeph ">app#com.example</codeph> to the <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> method.
 You also need to qualify the connection name in the <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> method
 with the receiving LocalConnection object's domain name (use "localhost" as the domain for SWF files loaded from the
 local file system):</p>
 
 <p class="- topic/p "><adobeimage alt="AIR to Flash Player communication" href="../../images/localconnection_AIR2flash.gif" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// receivingLC is in http://www.domain.com/receiving.swf
receivingLC.allowDomain('app#com.example');
receivingLC.connect('myConnection');

// sendingLC is an AIR application with app ID = com.example (and no publisher ID)
sendingLC.send('www.domain.com:myConnection', 'myMethod');
</codeblock>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">From an AIR application to another AIR application</b>.
 To communicate between two AIR applications,
 you need to allow communication between the two by calling the <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph>
 method and passing in the sending AIR application's connection prefix. For example, if the sending
 application has an application ID of, "com.example", and no publisher ID, you could pass the string: 
 <codeph class="+ topic/ph pr-d/codeph ">app#com.example</codeph> to the <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> method in the receiving application.
 You also need to qualify the connection name in the <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> method
 with the receiving LocalConnection object's connection prefix:</p>
 
 <p class="- topic/p "><adobeimage alt="AIR to AIR communication" href="../../images/localconnection_AIR2AIR.gif" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// receivingLC is an AIR application with app ID = com.sample (and no publisher ID)
receivingLC.allowDomain('app#com.example');
receivingLC.connect('myConnection');

// sendingLC is an AIR application with app ID = com.example (and no publisher ID)
sendingLC.send('app#com.sample:myConnection', 'myMethod');
</codeblock>
 
 <p class="- topic/p ">You can use LocalConnection objects to send and receive data within a single file,
 but this is not a typical implementation.</p>
 
 <p class="- topic/p ">For more information about the <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> methods, see the discussion of the
 <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> parameter in the <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.send()</codeph> and
 <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.connect()</codeph>entries. Also, see the <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">domain</codeph> entries.</p>
 
 </apiDesc><example conref="examples\LocalConnectionSenderExample.as" class="- topic/example "> This example consists of two ActionScript classes which 
 should be compiled into two separate SWF files:
 
 <p class="- topic/p ">In the LocalConnectionSenderExample SWF file, a LocalConnection instance is created, 
 and when the button is pressed the <codeph class="+ topic/ph pr-d/codeph ">call()</codeph> method is used to 
 call the method named <codeph class="+ topic/ph pr-d/codeph ">lcHandler</codeph> in the SWF file with the 
 connection name "myConnection," passing the contents of the 
 TextField as a parameter.</p>
 
 <p class="- topic/p ">In the LocalConnectionReceiverExample SWF file, a LocalConnection instance is 
 created and the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method is called to designate 
 this SWF file as the recipient of messages that are addressed to the 
 connection named "myConnection." In addition, this class includes 
 a public method named <codeph class="+ topic/ph pr-d/codeph ">lcHandler()</codeph>; this method is the 
 one that is called by the LocalConnectionSenderExample SWF file. When it's called, 
 the text that is passed in as a parameter is appended to the 
 TextField on the Stage.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> To test the example, both SWF files must 
 be loaded on the same computer simultaneously.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

// Code in LocalConnectionSenderExample.as
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.net.LocalConnection;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.events.StatusEvent;
    import flash.text.TextFieldAutoSize;

    public class LocalConnectionSenderExample extends Sprite {
        private var conn:LocalConnection;
        
        // UI elements
        private var messageLabel:TextField;
        private var message:TextField;
        private var sendBtn:Sprite;
        
        public function LocalConnectionSenderExample() {
            buildUI();
            sendBtn.addEventListener(MouseEvent.CLICK, sendMessage);
            conn = new LocalConnection();
            conn.addEventListener(StatusEvent.STATUS, onStatus);
        }
        
        private function sendMessage(event:MouseEvent):void {
            conn.send("myConnection", "lcHandler", message.text);
        }
        
        private function onStatus(event:StatusEvent):void {
            switch (event.level) {
                case "status":
                    trace("LocalConnection.send() succeeded");
                    break;
                case "error":
                    trace("LocalConnection.send() failed");
                    break;
            }
        }
        
        private function buildUI():void {
            const hPadding:uint = 5;
            // messageLabel
            messageLabel = new TextField();
            messageLabel.x = 10;
            messageLabel.y = 10;
            messageLabel.text = "Text to send:";
            messageLabel.autoSize = TextFieldAutoSize.LEFT;
            addChild(messageLabel);
            
            // message
            message = new TextField();
            message.x = messageLabel.x + messageLabel.width + hPadding;
            message.y = 10;
            message.width = 120;
            message.height = 20;
            message.background = true;
            message.border = true;
            message.type = TextFieldType.INPUT;
            addChild(message);
            
            // sendBtn
            sendBtn = new Sprite();
            sendBtn.x = message.x + message.width + hPadding;
            sendBtn.y = 10;
            var sendLbl:TextField = new TextField();
            sendLbl.x = 1 + hPadding;
            sendLbl.y = 1;
            sendLbl.selectable = false;
            sendLbl.autoSize = TextFieldAutoSize.LEFT;
            sendLbl.text = "Send";
            sendBtn.addChild(sendLbl);
            sendBtn.graphics.lineStyle(1);
            sendBtn.graphics.beginFill(0xcccccc);
            sendBtn.graphics.drawRoundRect(0, 0, (sendLbl.width + 2 + hPadding + hPadding), (sendLbl.height + 2), 5, 5);
            sendBtn.graphics.endFill();
            addChild(sendBtn);
        }
    }
}
</codeblock></example><example conref="examples\LocalConnectionReceiverExample.as" class="- topic/example "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Code in LocalConnectionReceiverExample.as
package {
    import flash.display.Sprite;
    import flash.net.LocalConnection;
    import flash.text.TextField;

    public class LocalConnectionReceiverExample extends Sprite {
        private var conn:LocalConnection;
        private var output:TextField;
        
        public function LocalConnectionReceiverExample()     {
            buildUI();
            
            conn = new LocalConnection();
            conn.client = this;
            try {
                conn.connect("myConnection");
            } catch (error:ArgumentError) {
                trace("Can't connect...the connection name is already being used by another SWF");
            }
        }
        
        public function lcHandler(msg:String):void {
            output.appendText(msg + "\n");
        }
        
        private function buildUI():void {
            output = new TextField();
            output.background = true;
            output.border = true;
            output.wordWrap = true;
            addChild(output);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/send()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.send()</linktext></link><link href="flash.net.xml#LocalConnection/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.allowDomain()</linktext></link><link href="flash.net.xml#LocalConnection/domain" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.domain</linktext></link></related-links><adobeApiEvent id="flash.net:LocalConnection_flash.events.StatusEvent.STATUS_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a LocalConnection object reports its status.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StatusEvent.STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a LocalConnection object reports its status.
 If <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.send()</codeph> is successful, the value of the <codeph class="+ topic/ph pr-d/codeph ">status</codeph> event
 object's <codeph class="+ topic/ph pr-d/codeph ">level</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">"status"</codeph>; if the call fails, the <codeph class="+ topic/ph pr-d/codeph ">level</codeph> property
 is <codeph class="+ topic/ph pr-d/codeph ">"error"</codeph>. If the receiving file refuses the connection, the call can fail
 without notification to the sending file.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/send()" class="- topic/link "><linktext class="- topic/linktext ">LocalConnection.send()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:LocalConnection_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched if a call to LocalConnection.send()
 attempts to send data to a different security sandbox.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched if a call to <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.send()</codeph>
 attempts to send data to a different security sandbox.
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/send()" class="- topic/link "><linktext class="- topic/linktext ">send()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:LocalConnection_flash.events.AsyncErrorEvent.ASYNC_ERROR_asyncError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">asyncError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an exception is thrown asynchronously &amp;#x2014; that is,
 from native asynchronous code.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.AsyncErrorEvent.ASYNC_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.AsyncErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an exception is thrown asynchronously — that is,
 from native asynchronous code.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:LocalConnection:LocalConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">LocalConnection</apiName><shortdesc class="- topic/shortdesc ">
     Creates a LocalConnection object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>The following example shows how receiving and sending files create LocalConnnection objects.
     The two files can use the same name or different names for their respective LocalConnection objects.
     In this example they use different names.
     
     <listing>
     // Code in the receiving file
     this.createTextField("result_txt", 1, 10, 10, 100, 22);
     result_txt.border = true;
     var receiving_lc:LocalConnection = new LocalConnection();
     receiving_lc.methodToExecute = function(param1:Number, param2:Number) {
       result_txt.text = param1+param2;
     };
     receiving_lc.connect("lc_name");
     </listing>
     
     <p class="- topic/p ">The following file sends the request to the first file.</p>
     
     <listing>
     // Code in the sending file
     var sending_lc:LocalConnection = new LocalConnection();
     sending_lc.send("lc_name", "methodToExecute", 5, 7);
     </listing>
     
     </oldexample></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a LocalConnection object. You can use LocalConnection objects to enable
     communication between different files that are running on the same client computer.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.connect()</linktext></link><link href="flash.net.xml#LocalConnection/send()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.send()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:LocalConnection:allowDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">allowDomain</apiName><shortdesc class="- topic/shortdesc ">
     Specifies one or more domains that can send LocalConnection calls to this LocalConnection instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Change the first example in the listing.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">All parameters specified must be non-null strings.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">domains</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">One or more strings that name the domains from which
     you want to allow LocalConnection calls. This parameter has two special cases:
     
     <ul class="- topic/ul "><li class="- topic/li ">You can specify a wildcard character "~~" to allow calls from all domains.</li><li class="- topic/li ">You can specify the string "<codeph class="+ topic/ph pr-d/codeph ">localhost</codeph>" to allow calls to this file from files that
      are installed locally. <ph class="- topic/ph ">Flash Player 8 introduced security restrictions
      on local files. By default, a SWF file running in Flash Player
      that is allowed to access the Internet cannot also have access to the local file system.
      In Flash Player, if you specify "<codeph class="+ topic/ph pr-d/codeph ">localhost</codeph>", any local SWF file can access this
      SWF file.</ph> </li></ul>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies one or more domains that can send LocalConnection calls to this LocalConnection instance.
     
     <p class="- topic/p ">You cannot use this method to let files hosted using a secure protocol (HTTPS) allow access from
     files hosted in nonsecure protocols; you must use the <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> method instead.</p>
     
     <p class="- topic/p ">You may want to use this method so that a child file from a different domain can make LocalConnection
     calls to the parent file, without knowing the final domain from which the child file will come.
     This can happen, for example, when you use load-balancing redirects or third-party servers. In this situation,
     you can use the <codeph class="+ topic/ph pr-d/codeph ">url</codeph> property of the LoaderInfo object used with the load, to get the domain to use with
     the <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> method. For example, if you use a Loader object to load a child file, once the file
     is loaded, you can check the <codeph class="+ topic/ph pr-d/codeph ">contentLoaderInfo.url</codeph> property of the Loader object, and parse the domain
     out of the full URL string. If you do this, make sure that you wait until the file is loaded, because the
     <codeph class="+ topic/ph pr-d/codeph ">contentLoaderInfo.url</codeph> property will not have its final, correct value until the file is completely loaded. </p>
     
     <p class="- topic/p ">The opposite situation can also occur: you might create a child file that wants to accept LocalConnection
     calls from its parent but doesn't know the domain of its parent. In this situation, implement this method by
     checking whether the domain argument matches the domain of the <codeph class="+ topic/ph pr-d/codeph ">loaderInfo.url</codeph> property in the
     loaded file. Again, you must parse the domain out of the full URL from <codeph class="+ topic/ph pr-d/codeph ">loaderInfo.url</codeph>.
     In this situation, you don't have to wait for the parent file to load; the parent will already be loaded
     by the time the child loads.</p>
     
     <p class="- topic/p ">When using this method, consider the Flash Player security model. By default, a LocalConnection object
     is associated with the sandbox of the file that created it, and cross-domain calls to LocalConnection
     objects are not allowed unless you call the <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph> method in the
     receiving file. However, in Adobe AIR, content in the <codeph class="+ topic/ph pr-d/codeph ">application</codeph> security sandbox
     (content installed with the AIR application) are not restricted by these security limitations.</p>
     
     <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic:
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: The <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> method has changed
     from the form it had in ActionScript 1.0 and 2.0.  In those earlier versions,
     <codeph class="+ topic/ph pr-d/codeph ">allowDomain</codeph> was a callback method that you
     implemented.  In ActionScript 3.0, <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> is a built-in
     method of LocalConnection that you call.  With this change, <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph>
     works in much the same way as <codeph class="+ topic/ph pr-d/codeph ">flash.system.Security.allowDomain()</codeph>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/allowInsecureDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.allowInsecureDomain()</linktext></link><link href="flash.display.xml#LoaderInfo/url" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.url</linktext></link><link href="flash.system.xml#Security/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Security.allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:LocalConnection:allowInsecureDomain" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">allowInsecureDomain</apiName><shortdesc class="- topic/shortdesc ">
     Specifies one or more domains that can send LocalConnection calls to this LocalConnection object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Seems like a security note is in order here.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">All parameters specified must be non-null strings.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">domains</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">One or more strings that name the domains from which
     you want to allow LocalConnection calls. There are two special cases
     for this parameter:
     <ul class="- topic/ul "><li class="- topic/li ">You can specify the wildcard character "~~" to allow calls from all domains.
      Specifying "~~" does not include local hosts.</li><li class="- topic/li ">You can specify the string "<codeph class="+ topic/ph pr-d/codeph ">localhost</codeph>" to allow calls to this SWF file from SWF files that
      are installed locally. Flash Player 8 introduced security restrictions on local SWF files. A SWF file
      that is allowed to access the Internet cannot also have access to the local file system. If you
      specify "<codeph class="+ topic/ph pr-d/codeph ">localhost</codeph>", any local SWF file can access this SWF file. Remember that you must also
      designate the calling SWF file as a local-with-networking SWF file at authoring time.</li></ul>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies one or more domains that can send LocalConnection calls to this LocalConnection object.
     
     <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> method works just like the <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> method,
     except that the <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> method additionally permits SWF files
     from non-HTTPS origins to send LocalConnection calls to files from HTTPS origins.  This difference
     is meaningful only if you call the <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> method from a
     file that was loaded using HTTPS.  You must call the <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> method even
     if you are crossing a non-HTTPS/HTTPS boundary within the same domain; by default, LocalConnection calls
     are never permitted from non-HTTPS files to HTTPS files, even within the same domain.</p>
     
     <p class="- topic/p ">Calling <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain()</codeph> is not recommended,
     because it can compromise the security offered by HTTPS.  When you
     load a file over HTTPS, you can be reasonably sure that the file
     will not be tampered with during delivery over the network.  If you
     then permit a non-HTTPS file to make LocalConnection calls to the
     HTTPS file, you are accepting calls from a file that may in fact have
     been tampered with during delivery.  This generally requires extra
     vigilance because you cannot trust the authenticity of LocalConnection
     calls arriving at your HTTPS file.</p>
     
     <p class="- topic/p ">By default, files hosted using the HTTPS protocol can be accessed only by other files hosted
     using the HTTPS protocol. This implementation maintains the integrity provided by the HTTPS protocol.</p>
     
     <p class="- topic/p ">Using this method to override the default behavior is not recommended, because it compromises HTTPS security.
     However, you might need to do so, for example, if you need to permit access to HTTPS SWF files published for
     Flash Player 9 or later from HTTP files SWF published for Flash Player 6 or earlier.</p>
     
     <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic:
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:LocalConnection:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Closes (disconnects) a LocalConnection object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">LocalConnection, LocalConnection.close, close
     
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The LocalConnection instance is not connected, so it cannot be closed.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Closes (disconnects) a LocalConnection object. Issue this command when you no longer want the object
     to accept commands — for example, when you want to issue a <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph>
     command using the same <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> parameter in another SWF file.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.connect()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:LocalConnection:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     Prepares a LocalConnection object to receive commands that are sent from a send() command
     (from the sending LocalConnection object).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">LocalConnection, LocalConnection.connect, connect
     
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value passed to the <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> parameter must be non-null.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error can occur for three reasons: 1) The string value passed to the <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> parameter
     was null. Pass a non-null value. 2) The value passed to the <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> parameter
     contained a colon (:). Colons are used as special characters to separate the superdomain
     from the <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> string in the <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> method, not the
     <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph>method. 3) The LocalConnection instance is already connected.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">connectionName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string that corresponds to the connection name specified in the
     <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> command that wants to communicate with the receiving LocalConnection object.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Prepares a LocalConnection object to receive commands that are sent from a <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> command
     (from the <i class="+ topic/ph hi-d/i ">sending LocalConnection object</i>). The object used with the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method is
     called the <i class="+ topic/ph hi-d/i ">receiving LocalConnection object</i>. The receiving and sending objects
     must be running on the same client computer.
     
     <p class="- topic/p ">To avoid a race condition, define the methods attached to the
     receiving LocalConnection object before
     calling this method, as shown in the LocalConnection class example. </p>
     
     <p class="- topic/p ">By default, the <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> argument is resolved into a value of
     <codeph class="+ topic/ph pr-d/codeph ">"<i class="+ topic/ph hi-d/i ">superdomain</i>:connectionName"</codeph>,
     where <codeph class="+ topic/ph pr-d/codeph "><i class="+ topic/ph hi-d/i ">superdomain</i></codeph> is the superdomain of the file that contains the
     <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> command. For example, if the file that contains the
     receiving LocalConnection object is located at www.someDomain.com, <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph>
     resolves to <codeph class="+ topic/ph pr-d/codeph ">"someDomain.com:connectionName"</codeph>. (If a file running in Flash Player
     is located on the client computer, the value assigned to <codeph class="+ topic/ph pr-d/codeph ">superdomain</codeph> is
     <codeph class="+ topic/ph pr-d/codeph ">"localhost"</codeph>.)</p>
     
     <p class="- topic/p ">In content running in the <codeph class="+ topic/ph pr-d/codeph ">application</codeph> security sandbox in Adobe AIR (content
     installed with the AIR application), the runtime uses the string <codeph class="+ topic/ph pr-d/codeph ">app#</codeph> followed by the application
     ID for the AIR application (defined in the application descriptor file) in place of the superdomain.
     For example a <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> for an application with the application ID <codeph class="+ topic/ph pr-d/codeph ">com.example.air.MyApp</codeph>
     <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> resolves to <codeph class="+ topic/ph pr-d/codeph ">"app#com.example.air.MyApp:connectionName"</codeph>.</p>
     
     <p class="- topic/p ">Also by default, Flash Player lets the receiving LocalConnection object accept commands only from
     sending LocalConnection objects whose connection name also resolves into a value of
     <codeph class="+ topic/ph pr-d/codeph ">"</codeph><codeph class="+ topic/ph pr-d/codeph "><i class="+ topic/ph hi-d/i ">superdomain</i></codeph><codeph class="+ topic/ph pr-d/codeph ">:connectionName"</codeph>. In this way, Flash Player makes
     it simple for files that are located in the same domain to communicate with each other.</p>
     
     <p class="- topic/p ">If you are implementing communication only between files in the same domain, specify a string
     for <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> that does not begin with an underscore (_) and that does not specify
     a domain name (for example, <codeph class="+ topic/ph pr-d/codeph ">"myDomain:connectionName"</codeph>). Use the same string in the
     <codeph class="+ topic/ph pr-d/codeph ">connect(connectionName)</codeph> method.</p>
     
     <p class="- topic/p ">If you are implementing communication between files in different domains, specifying a string
     for <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> that begins with an underscore (_) makes the file with the
     receiving LocalConnection object more portable between domains. Here are the two possible cases:</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">If the string for <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph>does not begin with an underscore (_),
      a prefix is added with the superdomain and a colon (for example,
      <codeph class="+ topic/ph pr-d/codeph ">"myDomain:connectionName"</codeph>). Although this ensures that your connection does not conflict
      with connections of the same name from other domains, any sending LocalConnection objects must
      specify this superdomain (for example, <codeph class="+ topic/ph pr-d/codeph ">"myDomain:connectionName"</codeph>).
      If the file with the receiving LocalConnection object is moved to another domain, the player changes
      the prefix to reflect the new superdomain (for example, <codeph class="+ topic/ph pr-d/codeph ">"anotherDomain:connectionName"</codeph>).
      All sending LocalConnection objects would have to be manually edited to point to the new superdomain.</li><li class="- topic/li ">If the string for <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph>begins with an underscore (for example,
      <codeph class="+ topic/ph pr-d/codeph ">"_connectionName"</codeph>), a prefix is not added to the string. This means that
      the receiving and sending LocalConnection objects use identical strings for
      <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph>. If the receiving object uses <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph>
      to specify that connections from any domain will be accepted, the file with the receiving LocalConnection
      object can be moved to another domain without altering any sending LocalConnection objects.</li></ul>
     
     <p class="- topic/p ">For more information, see the discussion in the class overview and the discussion
     of <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> in <codeph class="+ topic/ph pr-d/codeph ">send()</codeph>, and also
     the <codeph class="+ topic/ph pr-d/codeph ">allowDomain()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">domain</codeph> entries.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note: </b>Colons are used as special characters to separate the superdomain from the
     <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> string. A string for <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> that contains a colon is
     not valid.</p>
     
     <p class="- topic/p ">When you use this method , consider the <ph class="- topic/ph ">Flash Player</ph>
      security model. By default, a LocalConnection object
     is associated with the sandbox of the  file that created it, and cross-domain calls to LocalConnection
     objects are not allowed unless you call the <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph> method in the
     receiving file. <ph class="- topic/ph ">You can prevent a file from using this method by setting the
     <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> parameter of the the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph>
     tags in the HTML page that contains the SWF content.</ph> However, in Adobe AIR,
     content in the <codeph class="+ topic/ph pr-d/codeph ">application</codeph> security sandbox (content installed with the AIR application)
     are not restricted by these security limitations.</p>
     
     <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic:
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/send()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.send()</linktext></link><link href="flash.net.xml#LocalConnection/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.allowDomain()</linktext></link><link href="flash.net.xml#LocalConnection/domain" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.domain</linktext></link></related-links></apiOperation><apiOperation id="flash.net:LocalConnection:send" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">send</apiName><shortdesc class="- topic/shortdesc ">
     Invokes the method named methodName on a connection that was opened with the
     connect(connectionName) method (in the receiving LocalConnection
     object).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">LocalConnection, LocalConnection.send, send
     
     
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value of either <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> or <codeph class="+ topic/ph pr-d/codeph ">methodName</codeph>
     is null. Pass non-null values for these parameters.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error can occur for one of the following reasons:
     1) The value of either <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> or <codeph class="+ topic/ph pr-d/codeph ">methodName</codeph>
     is an empty string. Pass valid strings for these parameters.
     2) The method specified in <codeph class="+ topic/ph pr-d/codeph ">methodName</codeph> is restricted.
     3) The serialized message that is being sent is too large (larger than 40K).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">connectionName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Corresponds to the connection name specified in the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> command
     that wants to communicate with the sending LocalConnection object.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">methodName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the method to be invoked in the receiving LocalConnection object. The
     following method names cause the command to fail: <codeph class="+ topic/ph pr-d/codeph ">send</codeph>, <codeph class="+ topic/ph pr-d/codeph ">connect</codeph>,
     <codeph class="+ topic/ph pr-d/codeph ">close</codeph>, <codeph class="+ topic/ph pr-d/codeph ">allowDomain</codeph>, <codeph class="+ topic/ph pr-d/codeph ">allowInsecureDomain</codeph>,
     <codeph class="+ topic/ph pr-d/codeph ">client</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">domain</codeph>.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Additional optional parameters to be passed to the specified method.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Invokes the method named <codeph class="+ topic/ph pr-d/codeph ">methodName</codeph> on a connection that was opened with the
     <codeph class="+ topic/ph pr-d/codeph ">connect(connectionName)</codeph> method (in the <i class="+ topic/ph hi-d/i ">receiving LocalConnection
     object</i>). The object used with the <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> method is called the <i class="+ topic/ph hi-d/i ">sending LocalConnection object</i>.
     The SWF files that contain the sending and receiving objects must be running on the same client computer.
     
     <p class="- topic/p ">There is a 40 kilobyte limit to the amount of data you can pass as parameters to this command.
     If <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> throws an <codeph class="+ topic/ph pr-d/codeph ">ArgumentError</codeph> but your syntax is correct, try dividing the
     <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> requests into multiple commands, each with less than 40K of data.</p>
     
     <p class="- topic/p ">As discussed in the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> entry, the current superdomain in added to
     <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> by default. If you are implementing communication between different domains,
     you need to define <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> in both the sending and receiving LocalConnection
     objects in such a way that the current superdomain is not added to <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph>.
     You can do this in one of the following two ways:</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">Use an underscore (_) at the beginning of <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> in both the sending and
      receiving LocalConnection objects. In the file that contains the receiving object, use
      <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph> to specify that connections from any domain will be accepted.
      This implementation lets you store your sending and receiving files in any domain.</li><li class="- topic/li ">Include the superdomain in <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> in the sending LocalConnection
      object — for example, <codeph class="+ topic/ph pr-d/codeph ">myDomain.com:myConnectionName</codeph>. In the receiving object, use
      <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph> to specify that connections from the specified superdomain
      will be accepted (in this case, myDomain.com) or that connections from any domain will be accepted.</li></ul>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note: </b>You cannot specify a superdomain in <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> in the receiving
     LocalConnection object — you can do this in only the sending LocalConnection object.</p>
     
     <p class="- topic/p ">When you use this method , consider the <ph class="- topic/ph ">Flash Player</ph>
      security model. By default, a LocalConnection object
     is associated with the sandbox of the file that created it, and cross-domain calls to LocalConnection
     objects are not allowed unless you call the <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph> method in the
     receiving file.  For SWF content running in the browser, ou can prevent a file from using this method by setting the
     <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> parameter of the the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph>
     tags in the HTML page that contains the SWF content. However, in Adobe AIR, content in the
     <codeph class="+ topic/ph pr-d/codeph ">application</codeph> security sandbox (content installed with the AIR application) are not
     restricted by these security limitations.</p>
     
     <p class="- topic/p ">For more information related to security, see the Flash Player Developer Center Topic:
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.allowDomain()</linktext></link><link href="flash.net.xml#LocalConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.connect()</linktext></link><link href="flash.net.xml#LocalConnection/domain" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.domain</linktext></link></related-links><adobeApiEvent id="flash.net:LocalConnection:send_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">LocalConnection.send()</codeph> attempted
     to communicate with a SWF file from a security sandbox to which the calling
     code does not have access. You can work around this in the receiver's
     implementation of <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph>.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">LocalConnection.send() attempted
     to communicate with a SWF file from a security sandbox to which the calling
     code does not have access.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:LocalConnection:send_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the value of the <codeph class="+ topic/ph pr-d/codeph ">level</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">"status"</codeph>,
     the call was successful; if the value is <codeph class="+ topic/ph pr-d/codeph ">"error"</codeph>, the call failed. The call can fail
     if the receiving SWF file refuses the connection.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">If the value of the level property is "status",
     the call was successful; if the value is "error", the call failed.</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:LocalConnection:client:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">client</apiName><shortdesc class="- topic/shortdesc ">
     Indicates the object on which callback methods are invoked.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property must be set to a non-null object.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates the object on which callback methods are invoked. The default object
     is <codeph class="+ topic/ph pr-d/codeph ">this</codeph>, the local connection being created. You can set the
     <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property to another object, and callback methods are
     invoked on that other object.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:LocalConnection:domain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">domain</apiName><shortdesc class="- topic/shortdesc ">
     A string representing the domain of the location of the current file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">LocalConnection, LocalConnection.domain, domain
     
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     A string representing the domain of the location of the current file.
     
     <p class="- topic/p ">In content running in the <codeph class="+ topic/ph pr-d/codeph ">application</codeph> security sandbox in Adobe AIR (content
     installed with the AIR application), the runtime uses the string <codeph class="+ topic/ph pr-d/codeph ">app#</codeph> followed by the application
     ID for the AIR application (defined in the application descriptor file) in place of the superdomain.
     For example a <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> for an application with the application ID <codeph class="+ topic/ph pr-d/codeph ">com.example.air.MyApp</codeph>
     <codeph class="+ topic/ph pr-d/codeph ">connectionName</codeph> resolves to <codeph class="+ topic/ph pr-d/codeph ">"app#com.example.air.MyApp:connectionName"</codeph>.</p>
     
     <p class="- topic/p ">In SWF files published for Flash Player 9 or later, the returned string is the exact domain of
     the file, including subdomains. For example, if the file is located at www.adobe.com, this command
     returns <codeph class="+ topic/ph pr-d/codeph ">"www.adobe.com"</codeph>. </p>
     
     <p class="- topic/p ">If the current file is a local file residing on the client computer running in Flash Player,
     this command returns <codeph class="+ topic/ph pr-d/codeph ">"localhost"</codeph>.</p>
     
     <p class="- topic/p ">The most common ways to use this property are to include the domain name of the sending
     LocalConnection object as a parameter to the method you plan to invoke in the receiving
     LocalConnection object, or to use it with <codeph class="+ topic/ph pr-d/codeph ">LocalConnection.allowDomain()</codeph> to accept commands
     from a specified domain. If you are enabling communication only between LocalConnection objects
     that are located in the same domain, you probably don't need to use this property.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#LocalConnection/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.allowDomain()</linktext></link><link href="flash.net.xml#LocalConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.connect()</linktext></link></related-links></apiValue><apiValue id="flash.net:LocalConnection:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
    The isSupported property is set to true if the
    LocalConnection class is supported on the current platform, otherwise it is
    set to false.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    The <codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph> property is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the
    LocalConnection class is supported on the current platform, otherwise it is
    set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:LocalConnection:isPerUser:set" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isPerUser</apiName><shortdesc class="- topic/shortdesc "/><prolog class="- topic/prolog "/><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetStream</apiName><shortdesc class="- topic/shortdesc ">
 The NetStream class opens a one-way streaming channel over a NetConnection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The NetStream class opens a one-way streaming channel over a NetConnection.
 
 <p class="- topic/p "> Use the NetStream class to do the following:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Call <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> to play a media file from a local disk, a web server, or Flash Media Server.</li><li class="- topic/li ">Call <codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph> to publish a video, audio, and data stream to Flash Media Server.</li><li class="- topic/li ">Call <codeph class="+ topic/ph pr-d/codeph ">NetStream.send()</codeph> to send data messages to all subscribed clients.</li><li class="- topic/li ">Call <codeph class="+ topic/ph pr-d/codeph ">NetStream.send()</codeph> to add metadata to a live stream.</li><li class="- topic/li ">Call <codeph class="+ topic/ph pr-d/codeph ">NetStream.appendBytes()</codeph> to pass ByteArray data into the NetStream.</li></ul>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b>You cannot play and publish a stream over the same NetStream object.</p>
 
 <p class="- topic/p ">Adobe AIR and Flash Player 9.0.115.0 and later versions
 support files derived from the standard MPEG-4 container format. These files include F4V, MP4, M4A, MOV, MP4V, 3GP, and 3G2
 if they contain H.264 video, HEAAC v2 encoded audio, or both. H.264 delivers higher quality video at lower bit rates
 when compared to the same encoding profile in Sorenson or On2. AAC is a standard audio format defined in the MPEG-4 video standard.
 HE-AAC v2 is an extension of AAC that uses Spectral Band Replication (SBR)
 and Parametric Stereo (PS) techniques to increase coding efficiency at low bit rates.</p>
 
 <p class="- topic/p ">For information about supported codecs and file formats, see the following:</p>
 
 <ul class="- topic/ul "><li class="- topic/li "><xref href="http://www.adobe.com/go/learn_fms_fileformats_en" scope="external" class="- topic/xref ">Flash Media Server documentation</xref></li><li class="- topic/li "><xref href="http://www.adobe.com/go/hardware_scaling_en" scope="external" class="- topic/xref ">Exploring Flash Player support for high-definition H.264 video and AAC audio</xref></li><li class="- topic/li "><xref href="http://www.adobe.com/go/video_file_format" scope="external" class="- topic/xref ">FLV/F4V open specification documents</xref></li></ul>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Receiving data from a Flash Media Server stream, progressive F4V file, or progressive FLV file</b></p>
 
 <p class="- topic/p ">Flash Media Server, F4V files, and FLV files can send event objects containing data at specific
 data points during streaming or playback. You can handle data from a stream or FLV file during playback in two ways:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">
 Associate a client property with an event handler to receive the data object.
 Use the <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> property to assign an object to call specific
 data handling functions. The object assigned to the <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> property
 can listen for the following data points: <codeph class="+ topic/ph pr-d/codeph ">onCuePoint()</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">onImageData()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">onMetaData()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">onPlayStatus()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">onSeekPoint()</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">onTextData()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">onXMPData()</codeph>. Write procedures within those functions
 to handle the data object returned from the stream during playback.
 See the <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> property for more information.
 </li><li class="- topic/li ">
 Associate a client property with a subclass of the NetStream class, then write
 an event handler to receive the data object. NetStream is
 a sealed class, which means that properties or methods cannot be added to a NetStream object
 at runtime. However, you can create a subclass of NetStream and define your event handler
 in the subclass. You can also make the subclass dynamic and add the event handler to an
 instance of the subclass.
 </li></ul>
 
 <p class="- topic/p ">Wait to receive a <codeph class="+ topic/ph pr-d/codeph ">NetGroup.Neighbor.Connect</codeph> event before you use the object replication, direct routing, or posting APIs.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> To send data through an audio file, like an mp3 file, use the Sound class
 to associate the audio file with a Sound object. Then, use the <codeph class="+ topic/ph pr-d/codeph ">Sound.id3</codeph> property
 to read metadata from the sound file.</p>
 
 </apiDesc><example conref="examples\NetConnectionExample.as" class="- topic/example "> The following example uses a Video object with the NetConnection and 
 NetStream classes to load and play an FLV file. 
 <p class="- topic/p ">In this example, the code that creates the Video and NetStream objects and calls the
 <codeph class="+ topic/ph pr-d/codeph ">Video.attachNetStream()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> methods is placed 
 in a handler function. The handler is called only if the
 attempt to connect to the NetConnection object is successful; that is, 
 when the <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event returns an <codeph class="+ topic/ph pr-d/codeph ">info</codeph> object with a <codeph class="+ topic/ph pr-d/codeph ">code</codeph>
 property that indicates success. 
 It is recommended that you wait for a successful connection before you call
 <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph>. </p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.NetStatusEvent;
    import flash.events.SecurityErrorEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;
    import flash.events.Event;

    public class NetConnectionExample extends Sprite {
        private var videoURL:String = "http://www.helpexamples.com/flash/video/cuepoints.flv";
        private var connection:NetConnection;
        private var stream:NetStream;
        private var video:Video = new Video();        

        public function NetConnectionExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Stream not found: " + videoURL);
                    break;
            }
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function connectStream():void {
            var stream:NetStream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.client = new CustomClient();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }
    }
}

class CustomClient {
    public function onMetaData(info:Object):void {
        trace("metadata: duration=" + info.duration + " width=" + info.width + " height=" + info.height + " framerate=" + info.framerate);
    }
    public function onCuePoint(info:Object):void {
        trace("cuepoint: time=" + info.time + " name=" + info.name + " type=" + info.type);
    }
}
</codeblock></example><example conref="examples\NetConnectionExample.2.as" class="- topic/example "> You can get metadata using a function, instead of creating a custom class. The following suggestion, 
 provided by <xref href="http://www.sandlight.com" scope="external" class="- topic/xref ">Bill Sanders</xref>, shows how to edit the NetConnectionExample code above to call metadata within a function. In this case, the object
 <codeph class="+ topic/ph pr-d/codeph ">mdata</codeph> is used to set up the width and height of a video instance <codeph class="+ topic/ph pr-d/codeph ">video</codeph>:
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  //Place the following in the connectStream() function
  //in the NetConnectionExample code
  var metaSniffer:Object=new Object();  
  stream.client=metaSniffer; //stream is the NetStream instance  
  metaSniffer.onMetaData=getMeta;  
      
   
  // Add the following function within the NetConnectionExample class  
  private function getMeta (mdata:Object):void  
  {  
     video.width=mdata.width/2;  
     video.height=mdata.height/2;  
  }  
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Video" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Video</linktext></link><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream/appendBytes()" class="- topic/link "><linktext class="- topic/linktext ">appendBytes()</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/publish()" class="- topic/link "><linktext class="- topic/linktext ">publish()</linktext></link><link href="flash.net.xml#NetStream/send()" class="- topic/link "><linktext class="- topic/linktext ">send()</linktext></link><link href="flash.net.xml#NetStream/event:onImageData" class="- topic/link "><linktext class="- topic/linktext ">onImageData</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData" class="- topic/link "><linktext class="- topic/linktext ">onMetaData</linktext></link></related-links><adobeApiEvent id="flash.net:NetStream_flash.events.NetDataEvent_mediaTypeData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mediaTypeData</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when playing video content and certain type of messages are processed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="3.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.NetDataEvent</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.NetDataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when playing video content and certain type of messages are processed.
 
 <p class="- topic/p ">A NetDataEvent is dispatched for the following messages:</p>
 <ul class="- topic/ul "><li class="- topic/li ">onCuePoint</li><li class="- topic/li ">onImageData</li><li class="- topic/li ">onMetaData</li><li class="- topic/li ">onPlayStatus (for code NetStream.Play.Complete)</li><li class="- topic/li ">onTextData</li><li class="- topic/li ">onXMPData</li></ul>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> This event is not dispatched by content running in Flash Player in the browser on Android or Blackberry Tablet OS or
 by content running in AIR on iOS.</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onSeekPoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onSeekPoint</apiName><shortdesc class="- topic/shortdesc ">
 Called synchronously from appendBytes() when the append bytes parser encounters a point that it believes is a seekable
 point (for example, a video key frame).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Called synchronously from <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> when the append bytes parser encounters a point that it believes is a seekable
 point (for example, a video key frame). Use this event to construct a seek point table. The <codeph class="+ topic/ph pr-d/codeph ">byteCount</codeph> corresponds to
 the <codeph class="+ topic/ph pr-d/codeph ">byteCount</codeph> at the first byte of the parseable message for that seek point, and is reset to zero as described above.
 To seek, at the event <codeph class="+ topic/ph pr-d/codeph ">NetStream.Seek.Notify</codeph>, find the bytes that start at a
 seekable point and call <codeph class="+ topic/ph pr-d/codeph ">appendBytes(bytes)</codeph>.
 If the <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> argument is a <codeph class="+ topic/ph pr-d/codeph ">ByteArray</codeph> consisting of bytes starting at the seekable point, the video
 plays at that seek point.
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> Calls to <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> from within this callback are ignored.</p>
 
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">onSeekPoint</codeph> property is a property of the <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph>
 object. The property is listed in the Events section because it responds to data
 coming into the <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> method.
 For more information, see the NetStream class description and the
 <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> property. You cannot use the <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>
 method, or any other EventDispatcher methods, to listen for or process
 <codeph class="+ topic/ph pr-d/codeph ">onSeekPoint</codeph> as an event. To use <codeph class="+ topic/ph pr-d/codeph ">onSeekPoint</codeph>, define a
 callback function and attach it to one of the following objects:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">The object that the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property of a NetStream instance references.</li><li class="- topic/li ">An instance of a NetStream subclass. NetStream is a sealed class, which means that properties or methods
 cannot be added to a NetStream object at runtime. However, you can create a subclass of NetStream
 and define your event handler in the subclass. You can also make the subclass dynamic and add the event handler function
 to an instance of the subclass.</li></ul>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.DRMStatusEvent.DRM_STATUS_drmStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">drmStatus</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when the digital rights management (DRM) encrypted content
 begins playing (when the user is authenticated and authorized to play the content).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.DRMStatusEvent.DRM_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.DRMStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when the digital rights management (DRM) encrypted content
 begins playing (when the user is authenticated and authorized to play the content).
 <p class="- topic/p ">
 DRMStatusEvent object contains information related to the voucher, such as whether the content
 is available offline or when the voucher expires and users can no longer view the content.
 </p>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#DRMStatusEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.DRMStatusEvent</linktext></link><link href="flash.net.drm.xml#DRMManager/resetDRMVouchers()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager.resetDRMVouchers()</linktext></link><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()" class="- topic/link "><linktext class="- topic/linktext ">setDRMAuthenticationCredentials()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.DRMErrorEvent.DRM_ERROR_drmError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">drmError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a NetStream object, trying to play a digital rights management (DRM) encrypted
 file, encounters a DRM-related error.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.DRMErrorEvent.DRM_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.DRMErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a NetStream object, trying to play a digital rights management (DRM) encrypted
 file, encounters a DRM-related error. For example, a DRMErrorEvent object is dispatched when
 the user authorization fails. This may be because the user has not purchased the rights to view the content
 or because the content provider does not support the viewing application.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#DRMErrorEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.DRMErrorEvent</linktext></link><link href="flash.net.drm.xml#DRMManager/resetDRMVouchers()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager.resetDRMVouchers()</linktext></link><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()" class="- topic/link "><linktext class="- topic/linktext ">setDRMAuthenticationCredentials()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.DRMAuthenticateEvent.DRM_AUTHENTICATE_drmAuthenticate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">drmAuthenticate</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a NetStream object tries to play a digital rights management (DRM) encrypted
 content that requires a user credential for authentication before playing.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.DRMAuthenticateEvent.DRM_AUTHENTICATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.DRMAuthenticateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a NetStream object tries to play a digital rights management (DRM) encrypted
 content that requires a user credential for authentication before playing.
 
 <p class="- topic/p ">
 Use the <codeph class="+ topic/ph pr-d/codeph "> setDRMAuthenticationCredentials()</codeph> method of the NetStream object
 to authenticate the user. If user authentication failed, the application retries
 authentication and dispatches a new DRMAuthenticateEvent event for the NetStream object.
 </p>
 
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#DRMAuthenticateEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.DRMAuthenticateEvent</linktext></link><link href="flash.net.drm.xml#DRMManager/resetDRMVouchers()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager.resetDRMVouchers()</linktext></link><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()" class="- topic/link "><linktext class="- topic/linktext ">setDRMAuthenticationCredentials()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onDRMContentData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onDRMContentData</apiName><shortdesc class="- topic/shortdesc ">
 Establishes a listener to respond when AIR extracts DRM content metadata embedded in a media file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Establishes a listener to respond when AIR extracts DRM content metadata embedded in a media file.
 
 <p class="- topic/p ">A DRMContentData object contains the information needed to obtain
 a voucher required to play a DRM-protected media file.  Use the DRMManager class to download the voucher with
 this information.</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onDRMContentData</codeph> is a property of the <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph>
 object. This property is listed in the Events section because it responds to a data
 event when preloading embedded data from a local media file.
 For more information, see the NetStream class
 description. You cannot use the <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> method, or any
 other EventDispatcher methods, to listen for, or process <codeph class="+ topic/ph pr-d/codeph ">onDRMContentData</codeph> as an event.
 Rather, you must define a single
 callback function and attach it directly to one of the following objects:</p>
 <ul class="- topic/ul "><li class="- topic/li ">The object that the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property of a NetStream instance references.</li><li class="- topic/li ">An instance of a NetStream subclass. NetStream is a sealed class, which means that properties
 or methods cannot be added to a NetStream object at runtime. However, you can create a subclass of
 NetStream and define your event handler in the subclass or make the subclass dynamic and add the
 event handler function to an instance of the subclass.</li></ul>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.drm.xml#DRMContentData" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMContentData</linktext></link><link href="flash.net.xml#NetStream/preloadEmbeddedData()" class="- topic/link "><linktext class="- topic/linktext ">preloadEmbeddedData()</linktext></link><link href="flash.net.drm.xml#DRMManager" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager</linktext></link><link href="flash.net.drm.xml#DRMVoucher" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMVoucher</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onPlayStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onPlayStatus</apiName><shortdesc class="- topic/shortdesc ">
 Establishes a listener to respond when a NetStream object has completely played a stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Establishes a listener to respond when a NetStream object has completely played a stream.
 The associated event object provides information in addition to
 what's returned by the <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event.
 You can use this property to trigger actions in your code when a NetStream object
 has switched from one stream to another stream in a playlist (as indicated by the
 information object <codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.Switch</codeph>)
 or when a NetStream object has played to the end (as indicated by the information object
 <codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.Complete</codeph>).
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onPlayStaus</codeph> is actually a property of the <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph>
 object. The property is listed in the Events section because it responds to a data
 event, either when streaming media using Flash Media Server or during FLV file playback. For more information, see the NetStream class
 description. You cannot use the <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> method, or any
 other EventDispatcher methods, to listen for, or process <codeph class="+ topic/ph pr-d/codeph ">onPlayStatus</codeph> as an event. Define a
 callback function and attach it to one of the following objects:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">The object that the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property of a NetStream instance references.</li><li class="- topic/li ">An instance of a NetStream subclass. NetStream is a sealed class, which means that
 properties or methods cannot be added to a NetStream object at runtime. Create a subclass of NetStream and
 define your event handler in the subclass. You can also make the subclass dynamic and add the event handler function to
 an instance of the subclass.</li></ul>
 
 <p class="- topic/p ">This event can return an information object with the following properties:</p>

 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Code property</entry><entry class="- topic/entry ">Level property</entry><entry class="- topic/entry ">Meaning</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.Switch</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">The subscriber is switching from one stream to another in a playlist.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.Complete</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">Playback has completed.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.TransitionComplete</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">The subscriber is switching to a new stream as a result of stream bit-rate switching</entry></row></tbody></tgroup></adobetable>
 
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.events.xml#NetStatusEvent/NET_STATUS" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.NET_STATUS</linktext></link><link href="flash.net.xml#NetStream/event:asyncError" class="- topic/link "><linktext class="- topic/linktext ">asyncError</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData" class="- topic/link "><linktext class="- topic/linktext ">onMetaData</linktext></link><link href="flash.net.xml#NetStream/event:onCuePoint" class="- topic/link "><linktext class="- topic/linktext ">onCuePoint</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onCuePoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onCuePoint</apiName><shortdesc class="- topic/shortdesc ">
 Establishes a listener to respond when an embedded cue point is reached while playing a video file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Establishes a listener to respond when an embedded cue point is reached while playing a video file. You can use the listener to trigger actions in your
 code when the video reaches a specific cue point, which lets you synchronize other actions in your application with video
 playback events. For information about video file formats supported by Flash Media Server, see
 the <xref href="http://www.adobe.com/go/learn_fms_fileformats_en" scope="external" class="- topic/xref ">www.adobe.com/go/learn_fms_fileformats_en</xref>.

 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onCuePoint</codeph> is actually a property of the <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph>
 object. IThe property is listed in the Events section because it responds to a data
 event, either when streaming media using Flash Media Server or during FLV file playback. For more information, see the NetStream class
 description. You cannot use the <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> method, or any
 other EventDispatcher methods, to listen for, or process <codeph class="+ topic/ph pr-d/codeph ">onCuePoint</codeph> as an event. Define a
 callback function and attach it to one of the following objects:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">The object that the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property of a NetStream instance references.</li><li class="- topic/li ">An instance of a NetStream subclass. NetStream is a sealed class, which means that properties or methods cannot be added to a NetStream object
 at runtime. Create a subclass of NetStream and define your event handler in the subclass.
 You can also make the subclass dynamic and add the event handler function to an instance of the subclass.</li></ul>
 
 <p class="- topic/p ">The associated event listener is triggered after a call to the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> method, but before the
 video playhead has advanced.</p>
 
 <p class="- topic/p ">You can embed the following types of cue points in a video file:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">A navigation cue point specifies a keyframe within the video file
 and the cue point's <codeph class="+ topic/ph pr-d/codeph ">time</codeph> property corresponds to that exact keyframe. Navigation cue points are often used as bookmarks
 or entry points to let users navigate through the video file.</li><li class="- topic/li ">An event cue point specifies a time. The time may or may not correspond to a specific keyframe.
 An event cue point usually represents a time in the video when something happens that could be used to trigger other application events.</li></ul>
 
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">onCuePoint</codeph> event object has the following properties:</p>
 
 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Property</entry><entry class="- topic/entry ">Description</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">name</codeph></entry><entry class="- topic/entry ">The name given to the cue point when it was embedded in the video file.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">parameters</codeph></entry><entry class="- topic/entry ">An associative array of name and value pair strings specified for this cue point. Any valid string can be used for
     the parameter name or value.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">time</codeph></entry><entry class="- topic/entry ">The time in seconds at which the cue point occurred in the video file during playback.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">type</codeph></entry><entry class="- topic/entry ">The type of cue point that was reached, either navigation or event.</entry></row></tbody></tgroup></adobetable>
 
 <p class="- topic/p ">You can define cue points in a video file when you first encode the file, or when you import a video clip in
 the Flash authoring tool by using the Video Import wizard.</p>
 
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> event also retrieves information about the cue points in a video file.
 However the <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> event gets information about all of the cue points
 before the video begins playing. The <codeph class="+ topic/ph pr-d/codeph ">onCuePoint</codeph> event receives information about a single cue point
 at the time specified for that cue point during playback.</p>
 
 <p class="- topic/p ">Generally, to have your code respond to a specific cue point at the time it occurs, use
 the <codeph class="+ topic/ph pr-d/codeph ">onCuePoint</codeph> event to trigger some action in your code.</p>
 
 <p class="- topic/p ">You can use the list of cue points provided to the <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> event to
 let the user start playing the video at predefined points along the video stream.
 Pass the value of the cue point's <codeph class="+ topic/ph pr-d/codeph ">time</codeph> property to the
 <codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph> method to play the video from that cue point.</p>
 
 </apiDesc><example conref="examples\NetStream_onCuePoint.as" class="- topic/example "> The following example shows how you can load external FLV files and respond to metadata and cue points.
 Example provided by 
 <xref href="http://actionscriptexamples.com/2008/02/26/loading-flv-files-in-actionscript-30-using-the-netconnection-and-netstream-classes/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var video:Video = new Video();
addChild(video);
 
var nc:NetConnection = new NetConnection();
nc.connect(null);
 
var ns:NetStream = new NetStream(nc);
ns.client = {};
ns.client.onMetaData = ns_onMetaData;
ns.client.onCuePoint = ns_onCuePoint;
ns.play("http://www.helpexamples.com/flash/video/cuepoints.flv");
 
video.attachNetStream(ns);
 
function ns_onMetaData(item:Object):void {
    trace("metaData");
    // Resize video instance.
    video.width = item.width;
    video.height = item.height;
    // Center video instance on Stage.
    video.x = (stage.stageWidth - video.width) / 2;
    video.y = (stage.stageHeight - video.height) / 2;
}
 
function ns_onCuePoint(item:Object):void {
    trace("cuePoint");
    trace(item.name + "\t" + item.time);
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData" class="- topic/link "><linktext class="- topic/linktext ">onMetaData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onTextData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onTextData</apiName><shortdesc class="- topic/shortdesc ">
  Establishes a listener to respond when Flash Player receives text data embedded in a media file that is playing.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Establishes a listener to respond when Flash Player receives text data embedded in a media file that is playing.
  The text data
  is in UTF-8 format and can contain information about formatting based on the 3GP timed text specification.
  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onTextData</codeph> is actually a property of the <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph>
 object. The property is listed in the Events section because it responds to a data
 event, either when streaming media using Flash Media Server or during FLV file playback. For more information,
 see the NetStream class
 description. You cannot use the <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> method, or any
 other EventDispatcher methods, to listen for, or process <codeph class="+ topic/ph pr-d/codeph ">onTextData</codeph> as an event.
 Define a callback function and attach it to one of the following objects:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">The object that the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property of a NetStream instance references.</li><li class="- topic/li ">An instance of a NetStream subclass. NetStream is a sealed class, which means that properties or
 methods cannot be added to a NetStream object at runtime. Create a subclass of
 NetStream and define your event handler in the subclass. You can also make the subclass dynamic and add the
 event handler function to an instance of the subclass.</li></ul>
 
 <p class="- topic/p ">The associated event listener is triggered after a call to the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> method, but before the
 video playhead has advanced.</p>
  
  <p class="- topic/p ">The onTextData event object contains one property for each piece of text data.</p>
  
  </apiDesc><example conref="examples\OnTextDataExample.as" class="- topic/example "> The code in this example uses the <codeph class="+ topic/ph pr-d/codeph ">Netstream.client</codeph> property to handle 
 the callback functions for <codeph class="+ topic/ph pr-d/codeph ">onTextData</codeph> and <codeph class="+ topic/ph pr-d/codeph ">onImageData</codeph>. 
 The <codeph class="+ topic/ph pr-d/codeph ">onImageDataHandler()</codeph> function uses the onImageData event object 
 <codeph class="+ topic/ph pr-d/codeph ">imageData</codeph> to store the byte array. And, the <codeph class="+ topic/ph pr-d/codeph ">onTextDataHandler()</codeph> 
 function uses the onTextData event object <codeph class="+ topic/ph pr-d/codeph ">textData</codeph> to store the pieces of 
 text data (each piece of data is a property of the <codeph class="+ topic/ph pr-d/codeph ">textData</codeph> object).
 <p class="- topic/p ">You need to substitute a real location to a media file with text or image 
 metadata for the location <codeph class="+ topic/ph pr-d/codeph ">"yourURL"</codeph> in the code.</p>
 <p class="- topic/p "> You can also handle image and text data using a custom class. See the article 
 <xref href="http://www.adobe.com/devnet/flash/quickstart" scope="external" class="- topic/xref ">Handling metadata and cue points in Flash video</xref> for more information and examples.</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.*;
    import flash.net.*;
    import flash.media.*;
    import flash.system.*;
    import flash.events.*;

        public class OnTextDataExample extends Sprite {
                                              
            public function OnTextDataExample():void {

                var customClient:Object = new Object();
                customClient.onImageData = onImageDataHandler;           
                customClient.onTextData = onTextDataHandler;               

                var my_nc:NetConnection = new NetConnection();
                my_nc.connect(null);
                var my_ns:NetStream = new NetStream(my_nc);
                my_ns.play("yourURL");
                my_ns.client = customClient;

                var my_video:Video = new Video();
                my_video.attachNetStream(my_ns);
                addChild(my_video);

            }

            public function onImageDataHandler(imageData:Object):void {

                trace("imageData length: " + imageData.data.length);
                var imageloader:Loader = new Loader();           
                imageloader.loadBytes(imageData.data); // imageData.data is a ByteArray object.
                addChild(imageloader);
            }

    
            public function onTextDataHandler(textData:Object):void {

                trace("--- textData properties ----");
                var key:String;

                for (key in textData) {
                    trace(key + ": " + textData[key]);
                }
            }

        }

}

</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">NetConnection</linktext></link><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream/event:asyncError" class="- topic/link "><linktext class="- topic/linktext ">asyncError</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/event:onImageData" class="- topic/link "><linktext class="- topic/linktext ">onImageData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onImageData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onImageData</apiName><shortdesc class="- topic/shortdesc ">
 Establishes a listener to respond when Flash Player receives image data as a byte array embedded in a media file that is
 playing.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.115.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Establishes a listener to respond when Flash Player receives image data as a byte array embedded in a media file that is
 playing. The image data can produce either JPEG, PNG, or GIF content. Use the
 <codeph class="+ topic/ph pr-d/codeph ">flash.display.Loader.loadBytes()</codeph> method to load the byte array into a display object.
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onImageData</codeph> is actually a property of the <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph>
 object. The property is listed in the Events section because it responds to a data
 event, either when streaming media using Flash Media Server or during FLV file playback. For more information, see the NetStream class
 description. You cannot use the <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> method, or any
 other EventDispatcher methods, to listen for, or process <codeph class="+ topic/ph pr-d/codeph ">onImageData</codeph> as an event. Define a single
 callback function and attach it to one of the following objects:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">The object that the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property of a NetStream instance references.</li><li class="- topic/li ">An instance of a NetStream subclass. NetStream is a sealed class, which means that properties or methods cannot be added
 to a NetStream object at runtime. Create a subclass of NetStream and define your event handler in the subclass.
 You can also make the subclass dynamic and add the event handler function to an instance of the subclass.</li></ul>
 
 <p class="- topic/p ">The associated event listener is triggered after a call to the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> method, but before the
 video playhead has advanced.</p>
 
 <p class="- topic/p ">The onImageData event object contains the image data as a byte array sent through an AMF0 data channel.</p>
 
 </apiDesc><example conref="examples\OnTextDataExample.as" class="- topic/example "> The code in this example uses the <codeph class="+ topic/ph pr-d/codeph ">Netstream.client</codeph> property to handle 
 the callback functions for <codeph class="+ topic/ph pr-d/codeph ">onTextData</codeph> and <codeph class="+ topic/ph pr-d/codeph ">onImageData</codeph>. 
 The <codeph class="+ topic/ph pr-d/codeph ">onImageDataHandler()</codeph> function uses the onImageData event object 
 <codeph class="+ topic/ph pr-d/codeph ">imageData</codeph> to store the byte array. And, the <codeph class="+ topic/ph pr-d/codeph ">onTextDataHandler()</codeph> 
 function uses the onTextData event object <codeph class="+ topic/ph pr-d/codeph ">textData</codeph> to store the pieces of 
 text data (each piece of data is a property of the <codeph class="+ topic/ph pr-d/codeph ">textData</codeph> object).
 <p class="- topic/p ">You need to substitute a real location to a media file with text or image 
 metadata for the location <codeph class="+ topic/ph pr-d/codeph ">"yourURL"</codeph> in the code.</p>
 <p class="- topic/p "> You can also handle image and text data using a custom class. See the article 
 <xref href="http://www.adobe.com/devnet/flash/quickstart" scope="external" class="- topic/xref ">Handling metadata and cue points in Flash video</xref> for more information and examples.</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.*;
    import flash.net.*;
    import flash.media.*;
    import flash.system.*;
    import flash.events.*;

        public class OnTextDataExample extends Sprite {
                                              
            public function OnTextDataExample():void {

                var customClient:Object = new Object();
                customClient.onImageData = onImageDataHandler;           
                customClient.onTextData = onTextDataHandler;               

                var my_nc:NetConnection = new NetConnection();
                my_nc.connect(null);
                var my_ns:NetStream = new NetStream(my_nc);
                my_ns.play("yourURL");
                my_ns.client = customClient;

                var my_video:Video = new Video();
                my_video.attachNetStream(my_ns);
                addChild(my_video);

            }

            public function onImageDataHandler(imageData:Object):void {

                trace("imageData length: " + imageData.data.length);
                var imageloader:Loader = new Loader();           
                imageloader.loadBytes(imageData.data); // imageData.data is a ByteArray object.
                addChild(imageloader);
            }

    
            public function onTextDataHandler(textData:Object):void {

                trace("--- textData properties ----");
                var key:String;

                for (key in textData) {
                    trace(key + ": " + textData[key]);
                }
            }

        }

}

</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">NetConnection</linktext></link><link href="flash.display.xml#Loader/loadBytes()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Loader.loadBytes()</linktext></link><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream/event:asyncError" class="- topic/link "><linktext class="- topic/linktext ">asyncError</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/event:onTextData" class="- topic/link "><linktext class="- topic/linktext ">onTextData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onMetaData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onMetaData</apiName><shortdesc class="- topic/shortdesc ">
 Establishes a listener to respond when Flash Player receives descriptive information embedded in the video being played.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Establishes a listener to respond when Flash Player receives descriptive information embedded in the video being played.
 For information about video file formats supported by Flash Media Server, see
 the <xref href="http://www.adobe.com/go/learn_fms_fileformats_en" scope="external" class="- topic/xref ">www.adobe.com/go/learn_fms_fileformats_en</xref>.
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> is actually a property of the <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph>
 object. The property is listed in the Events section because it responds to a data
 event, either when streaming media using Flash Media Server or during FLV file playback.
 For more information, see the NetStream class description and the
 <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> property. You cannot use the <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>
 method, or any other EventDispatcher methods, to listen for or process
 <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> as an event. Define a single
 callback function and attach it to one of the following objects:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">The object that the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property of a NetStream instance references.</li><li class="- topic/li ">An instance of a NetStream subclass. NetStream is a sealed class, which means that properties or methods
 cannot be added to a NetStream object at runtime. You can create a subclass of NetStream
 and define your event handler in the subclass. You can also make the subclass dynamic and add the event handler function
 to an instance of the subclass.</li></ul>
 
 <p class="- topic/p ">The Flash Video Exporter utility (version 1.1 or later) embeds
 a video's duration, creation date, data rates, and other information into the video file itself.
 Different video encoders embed different sets of meta data.</p>
 
 <p class="- topic/p ">The associated event listener is triggered after a call to the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> method,
 but before the video playhead has advanced.</p>
 
 <p class="- topic/p ">In many cases, the duration value embedded in stream metadata approximates the actual duration
 but is not exact. In other words, it does not always match the value of the <codeph class="+ topic/ph pr-d/codeph ">NetStream.time</codeph> property
 when the playhead is at the end of the video stream.</p>
 <p class="- topic/p ">The event object passed to the onMetaData event handler contains one property for each piece of data.</p>
 
 </apiDesc><example conref="examples\NetStream_onCuePoint.as" class="- topic/example "> The following example shows how you can load external FLV files and respond to metadata and cue points.
 Example provided by 
 <xref href="http://actionscriptexamples.com/2008/02/26/loading-flv-files-in-actionscript-30-using-the-netconnection-and-netstream-classes/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var video:Video = new Video();
addChild(video);
 
var nc:NetConnection = new NetConnection();
nc.connect(null);
 
var ns:NetStream = new NetStream(nc);
ns.client = {};
ns.client.onMetaData = ns_onMetaData;
ns.client.onCuePoint = ns_onCuePoint;
ns.play("http://www.helpexamples.com/flash/video/cuepoints.flv");
 
video.attachNetStream(ns);
 
function ns_onMetaData(item:Object):void {
    trace("metaData");
    // Resize video instance.
    video.width = item.width;
    video.height = item.height;
    // Center video instance on Stage.
    video.x = (stage.stageWidth - video.width) / 2;
    video.y = (stage.stageHeight - video.height) / 2;
}
 
function ns_onCuePoint(item:Object):void {
    trace("cuePoint");
    trace(item.name + "\t" + item.time);
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">NetConnection</linktext></link><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream/event:asyncError" class="- topic/link "><linktext class="- topic/linktext ">asyncError</linktext></link><link href="flash.net.xml#NetStream/event:onCuePoint" class="- topic/link "><linktext class="- topic/linktext ">onCuePoint</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/time" class="- topic/link "><linktext class="- topic/linktext ">time</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onXMPData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">onXMPData</apiName><shortdesc class="- topic/shortdesc ">
 Establishes a listener to respond when Flash Player receives information specific to Adobe
 Extensible Metadata Platform (XMP) embedded in the video being played.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier "/><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Establishes a listener to respond when Flash Player receives information specific to Adobe
 Extensible Metadata Platform (XMP) embedded in the video being played.
 For information about video file formats supported by Flash Media Server, see
 the <xref href="http://www.adobe.com/go/learn_fms_fileformats_en" scope="external" class="- topic/xref ">www.adobe.com/go/learn_fms_fileformats_en</xref>.
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">onXMPData</codeph> is actually a property of the <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph>
 object. The property is listed in the Events section because it responds to a data
 event, either when streaming media using Flash Media Server or during FLV file playback.
 For more information, see the NetStream class description and the
 <codeph class="+ topic/ph pr-d/codeph ">NetStream.client</codeph> property. You cannot use the <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>
 method, or any other EventDispatcher methods, to listen for or process
 <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> as an event. Define a
 callback function and attach it to one of the following objects:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">The object that the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property of a NetStream instance references.</li><li class="- topic/li ">An instance of a NetStream subclass. NetStream is a sealed class, which means that properties or methods
 cannot be added to a NetStream object at runtime.
 However, you can create a subclass of NetStream and define your event handler in the subclass.
 You can also make the subclass dynamic and add the event handler function to an instance of the subclass.</li></ul>
 
 <p class="- topic/p ">The associated event listener is triggered after a call to the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> method,
 but before the video playhead has advanced.</p>
 
 <p class="- topic/p ">The object passed to the <codeph class="+ topic/ph pr-d/codeph ">onXMPData()</codeph> event handling function has one <codeph class="+ topic/ph pr-d/codeph ">data</codeph>
 property, which is a string. The string is generated from
 a top-level UUID box. (The 128-bit UUID of the top level box is <codeph class="+ topic/ph pr-d/codeph ">BE7ACFCB-97A9-42E8-9C71-999491E3AFAC</codeph>.) This
 top-level UUID box contains exactly one XML document represented as a null-terminated UTF-8 string.</p>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream/event:asyncError" class="- topic/link "><linktext class="- topic/linktext ">asyncError</linktext></link><link href="flash.net.xml#NetStream/event:onCuePoint" class="- topic/link "><linktext class="- topic/linktext ">onCuePoint</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/time" class="- topic/link "><linktext class="- topic/linktext ">time</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.NetStatusEvent.NET_STATUS_netStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">netStatus</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a NetStream object is reporting its status or error condition.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.NetStatusEvent.NET_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.NetStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a NetStream object is reporting its status or error condition.
 The <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event contains an <codeph class="+ topic/ph pr-d/codeph ">info</codeph> property,
 which is an information object that contains specific information about the event,
 such as if a connection attempt succeeded or failed.
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an input or output error occurs that causes a network operation to fail.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an input or output error occurs that causes a network operation to fail.
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.AsyncErrorEvent.ASYNC_ERROR_asyncError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">asyncError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an exception is thrown asynchronously &amp;#x2014; that is,
 from native asynchronous code.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.AsyncErrorEvent.ASYNC_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.AsyncErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an exception is thrown asynchronously — that is,
 from native asynchronous code.
 This event is dispatched when a server calls a method on the client that is not defined.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:onPlayStatus" class="- topic/link "><linktext class="- topic/linktext ">onPlayStatus</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData" class="- topic/link "><linktext class="- topic/linktext ">onMetaData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.StatusEvent.STATUS_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when the application attempts to play content encrypted with digital rights management (DRM),
 by invoking the NetStream.play() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StatusEvent.STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when the application attempts to play content encrypted with digital rights management (DRM),
 by invoking the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> method. The value of the status code property will be
 <codeph class="+ topic/ph pr-d/codeph ">"DRM.encryptedFLV"</codeph>.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.net:NetStream:NetStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NetStream</apiName><shortdesc class="- topic/shortdesc ">
     Creates a stream that you can use to play media files and send data over a NetConnection object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream, constructor
     
      </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The NetConnection instance is not connected.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">connection</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetConnection</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A NetConnection object.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">peerID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">connectToFMS</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This optional parameter is available in Flash Player 10 and later, for use with RTMFP connections.
     (If the value of the <codeph class="+ topic/ph pr-d/codeph ">NetConnection.protocol</codeph> property
     is not <codeph class="+ topic/ph pr-d/codeph ">"rtmfp"</codeph>, this parameter is ignored.) Use one of the following values:
     
     <ul class="- topic/ul "><li class="- topic/li ">To connect to Flash Media Server, specify <codeph class="+ topic/ph pr-d/codeph ">NetStream.CONNECT_TO_FMS</codeph>. </li><li class="- topic/li ">To publish directly to peers, specify <codeph class="+ topic/ph pr-d/codeph ">NetStream.DIRECT_CONNECTIONS</codeph>.</li><li class="- topic/li ">To play directly from a specific peer, specify that peer's identity (see <codeph class="+ topic/ph pr-d/codeph ">NetConnection.nearID</codeph>
     and <codeph class="+ topic/ph pr-d/codeph ">NetStream.farID</codeph>).</li><li class="- topic/li ">(Flash Player 10.1 or AIR 2 or later) To publish or play a stream in a peer-to-peer multicast group,
     specify a <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> string (see the GroupSpecifier class).</li></ul>
     
     <p class="- topic/p ">In most cases, a <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph> has the potential to use the network uplink on the local system. In this case,
     the user is asked for permission to use the computer's network resources. If the user allows this
     use, a <codeph class="+ topic/ph pr-d/codeph ">NetStream.Connect.Success</codeph> NetStatusEvent is sent to the NetConnection's event
     listener. If the user denies permission, a <codeph class="+ topic/ph pr-d/codeph ">NetStream.Connect.Rejected</codeph> event is sent.
     When specifying a <codeph class="+ topic/ph pr-d/codeph ">groupspec</codeph>, until a <codeph class="+ topic/ph pr-d/codeph ">NetStream.Connect.Success</codeph> event is received, it is an error to use any method
     of the NetStream object, and an exception is raised.</p>
     
     
     <p class="- topic/p ">If you include this parameter in your constructor statement but pass a value of <codeph class="+ topic/ph pr-d/codeph ">null</codeph>,
     the value is set to <codeph class="+ topic/ph pr-d/codeph ">"connectToFMS"</codeph>.</p>
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a stream that you can use to play media files and send data over a NetConnection object.
     
     </apiDesc><example conref="examples\NetStreamExample_constructor.as" class="- topic/example "> The following code shows a connection to download and display, progressively, a video assigned to the 
 variable <codeph class="+ topic/ph pr-d/codeph ">videoURL</codeph>:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
            var my_nc:NetConnection = new NetConnection();
            my_nc.connect(null);
            var my_ns:NetStream = new NetStream(my_nc);
            my_ns.play(videoURL);
            var my_video:Video = new Video();
            my_video.attachNetStream(my_ns);
            addChild(my_video);
</codeblock></example><example conref="examples\NetStreamExample_constructor2.as" class="- topic/example "> The following code shows a connection to stream and display a video (assigned to the 
 variable <codeph class="+ topic/ph pr-d/codeph ">videoURL</codeph>) on a remote Flash Media Server instance specified in the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph>
 command:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
            var my_nc:NetConnection = new NetConnection();
            my_nc.connect("rtmp://www.yourfmsserver.com/someappname");
            var my_ns:NetStream = new NetStream(my_nc, NetStream.CONNECT_TO_FMS);
            my_ns.play(videoURL);
            var my_video:Video = new Video();
            my_video.attachNetStream(my_ns);
            addChild(my_video);
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/CONNECT_TO_FMS" class="- topic/link "><linktext class="- topic/linktext ">CONNECT_TO_FMS</linktext></link><link href="flash.net.xml#NetStream/DIRECT_CONNECTIONS" class="- topic/link "><linktext class="- topic/linktext ">DIRECT_CONNECTIONS</linktext></link><link href="flash.net.xml#NetStream/farID" class="- topic/link "><linktext class="- topic/linktext ">farID</linktext></link><link href="flash.media.xml#Video/attachCamera()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Video.attachCamera()</linktext></link><link href="flash.net.xml#GroupSpecifier" class="- topic/link "><linktext class="- topic/linktext ">flash.net.GroupSpecifier</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.GroupSpecifier.groupspecWithAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/groupspecWithoutAuthorizations()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.GroupSpecifier.groupspecWithoutAuthorizations()</linktext></link><link href="flash.net.xml#GroupSpecifier/multicastEnabled" class="- topic/link "><linktext class="- topic/linktext ">flash.net.GroupSpecifier.multicastEnabled</linktext></link><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetConnection/nearID" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.nearID</linktext></link><link href="flash.net.xml#NetConnection/protocol" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.protocol</linktext></link><link href="flash.net.xml#NetGroup" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetStream_Connect_Rejected" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetStream.Connect.Rejected"</linktext></link><link href="flash.events.xml#NetStatusEvent/code_NetStream_Connect_Success" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info.code="NetStream.Connect.Success"</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:NetStream:appendBytesAction" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">appendBytesAction</apiName><shortdesc class="- topic/shortdesc ">
     Indicates a timescale discontinuity, flushes the FIFO, and tells the byte parser to expect a file header or the beginning of an FLV tag.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">netStreamAppendBytesAction</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates a timescale discontinuity, flushes the FIFO, and tells the byte parser to expect a file header or the beginning of an FLV tag.
     
     <p class="- topic/p ">
     Calls to <codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph> flush the NetStream buffers.  The byte parser remains in flushing mode until you
     call <codeph class="+ topic/ph pr-d/codeph ">appendBytesAction()</codeph> and pass the <codeph class="+ topic/ph pr-d/codeph ">RESET_BEGIN</codeph> or <codeph class="+ topic/ph pr-d/codeph ">RESET_SEEK</codeph> argument.
     Capture the <codeph class="+ topic/ph pr-d/codeph ">"NetStream.Seek.Notify"</codeph> event to call <codeph class="+ topic/ph pr-d/codeph ">appendBytesAction()</codeph> after a seek.
     A new file header can support playlists and seeking without calling <codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph>.
     </p>
     
     <p class="- topic/p ">
     You can also call this method to reset the byte counter for the <codeph class="+ topic/ph pr-d/codeph ">onSeekPoint()</codeph>) callback.
     </p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/appendBytes()" class="- topic/link "><linktext class="- topic/linktext ">appendBytes()</linktext></link><link href="flash.net.xml#NetStream/seek()" class="- topic/link "><linktext class="- topic/linktext ">seek()</linktext></link><link href="flash.net.xml#NetStreamAppendBytesAction" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStreamAppendBytesAction</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:appendBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">appendBytes</apiName><shortdesc class="- topic/shortdesc ">
     Passes a ByteArray into a NetStream for playout.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Passes a ByteArray into a NetStream for playout. Call this method on a NetStream in "Data Generation Mode". To put a NetStream into
     Data Generation Mode, call <codeph class="+ topic/ph pr-d/codeph ">NetStream.play(null)</codeph> on a NetStream created on a NetConnection connected to <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     Calling <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> on a NetStream that isn't in Data Generation Mode is an error and raises an exception.
     
     <p class="- topic/p ">
     The byte parser understands an FLV file with a header.
     After the header is parsed, <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> expects all future calls to be continuations
     of the same real or virtual file. Another header is not expected unless
     <codeph class="+ topic/ph pr-d/codeph ">appendBytesAction(NetStreamAppendBytesAction.RESET_BEGIN)</codeph> is called.
     </p>
     
     <p class="- topic/p ">
     A NetStream object has two buffers: the FIFO from <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> to the NetStream,
     and the playout buffer. The FIFO is the partial-FLV-tag reassembly buffer and contains no more than one incomplete FLV tag.
     Calls to <codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph> flush both buffers.
     After a call to <codeph class="+ topic/ph pr-d/codeph ">seek()</codeph>, call <codeph class="+ topic/ph pr-d/codeph ">appendBytesAction()</codeph> to reset the timescale to begin at the timestamp of the next appended message.
     </p>
     
     <p class="- topic/p ">
     Each call to <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> adds bytes into the FIFO until an FLV tag is complete.
     When an FLV tag is complete, it moves to the playout buffer.  A call to <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> can write multiple FLV tags.
     The first bytes complete an existing FLV tag (which moves to the playout buffer). Complete FLV tags move to the playout buffer.
     Remaining bytes that don’t form a complete FLV tag go into the FIFO. Bytes in the FIFO are either completed by a call to <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph>
     or flushed by a call to <codeph class="+ topic/ph pr-d/codeph ">appendBytesAction()</codeph> with the <codeph class="+ topic/ph pr-d/codeph ">RESET_SEEK</codeph> or <codeph class="+ topic/ph pr-d/codeph ">RESET_BEGIN</codeph> argument.
     </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> The byte parser may not be able to completely decode a call to <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> until a
     subsequent call to <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> is made. </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/appendBytesAction()" class="- topic/link "><linktext class="- topic/linktext ">appendBytesAction()</linktext></link><link href="flash.net.xml#NetStream/seek()" class="- topic/link "><linktext class="- topic/linktext ">seek()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:attachAudio" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attachAudio</apiName><shortdesc class="- topic/shortdesc ">
     Attaches an audio stream to a NetStream object from a Microphone
     object passed as the source.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiDefaultValue>"null"
     </apiDefaultValue><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">microphone</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.media:Microphone</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The source of the audio stream to be transmitted.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Attaches an audio stream to a NetStream object from a Microphone
     object passed as the source. This method is available
     only to the publisher of the specified stream.
     
     <p class="- topic/p ">Use this method with Flash Media Server to send live audio to the server.
     Call this method before or after you call the <codeph class="+ topic/ph pr-d/codeph ">publish()</codeph> method.
     </p>
     
     <p class="- topic/p ">Set the <codeph class="+ topic/ph pr-d/codeph ">Microphone.rate</codeph> property to match
     the rate of the sound capture device. Call <codeph class="+ topic/ph pr-d/codeph ">setSilenceLevel()</codeph> to set the silence level threshold.
     To control the sound properties (volume and panning) of
     the audio stream, use the <codeph class="+ topic/ph pr-d/codeph ">Microphone.soundTransform</codeph> property.</p>
     
     <pre xml:space="preserve" class="- topic/pre ">
     var nc:NetConnection = new NetConnection();
     nc.connect("rtmp://server.domain.com/app");
     var ns:NetStream = new NetStream(nc);
     
     var live_mic:Microphone = Microphone.get();
     live_mic.rate = 8;
     live_mic.setSilenceLevel(20,200);
     
     var soundTrans:SoundTransform = new SoundTransform();
     soundTrans.volume = 6;
     live_mic.soundTransform = soundTrans;
     
     ns.attachAudio(live_mic);
     ns.publish("mic_stream","live")
     </pre>
     
     <p class="- topic/p "> To hear the audio, call the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> method and call <codeph class="+ topic/ph pr-d/codeph ">DisplayObjectContainer.addChild()</codeph>
     to route the audio to an object on the display list.
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.media.xml#Microphone" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone</linktext></link><link href="flash.display.xml#DisplayObjectContainer/addChild()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObjectContainer.addChild()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:attachCamera" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attachCamera</apiName><shortdesc class="- topic/shortdesc ">
     Starts capturing video from a camera, or stops capturing if
     theCamera is set to null.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">theCamera</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.media:Camera</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The source of the video transmission. Valid values are a Camera object
     (which starts capturing video) and <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. If you pass <codeph class="+ topic/ph pr-d/codeph ">null</codeph>,
     the application stops capturing video, and any additional parameters you send are ignored.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">snapshotMilliseconds</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies whether the video stream is continuous,
     a single frame, or a series of single frames used to create time-lapse photography.
     
     <ul class="- topic/ul "><li class="- topic/li ">If you omit this parameter, the application captures all video until you pass
     a value of <codeph class="+ topic/ph pr-d/codeph ">null</codeph> to <codeph class="+ topic/ph pr-d/codeph ">attachCamera</codeph>.</li><li class="- topic/li ">If you pass 0, the application captures only a single video frame. Use this value
     to transmit "snapshots" within a preexisting stream. <ph class="- topic/ph ">Flash Player
     or </ph> AIR interprets invalid, negative, or nonnumeric arguments as 0.</li><li class="- topic/li ">If you pass a positive number, the application captures a single video frame and then appends a pause
     of the specified length as a trailer on the snapshot. Use this value to create time-lapse
     photography effects.</li></ul>
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Starts capturing video from a camera, or stops capturing if
     <codeph class="+ topic/ph pr-d/codeph ">theCamera</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     This method is available only to the publisher of the specified stream.
     
     <p class="- topic/p ">This method is intended for use with Flash Media Server;
     for more information, see the class description.</p>
     
     <p class="- topic/p "> After attaching the video source, you must call <codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph>
     to begin transmitting. Subscribers who want to display the video
     must call the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">Video.attachCamera()</codeph> methods
     to display the video on the stage.</p>
     
     <p class="- topic/p ">You can use <codeph class="+ topic/ph pr-d/codeph ">snapshotMilliseconds</codeph> to send a single snapshot
     (by providing a value of 0) or a series of snapshots — in effect,
     time-lapse footage — by providing a positive number that adds a trailer
     of the specified number of milliseconds to the video feed. The trailer
     extends the display time of the video message. By repeatedly
     calling <codeph class="+ topic/ph pr-d/codeph ">attachCamera()</codeph> with a positive value for <codeph class="+ topic/ph pr-d/codeph ">snapshotMilliseconds</codeph>,
     the sequence of alternating snapshots and trailers creates time-lapse footage.
     For example, you could capture one frame per day and append it to a video file.
     When a subscriber plays the file, each frame remains onscreen for the specified
     number of milliseconds and then the next frame is displayed.</p>
     
     <p class="- topic/p ">The purpose of the <codeph class="+ topic/ph pr-d/codeph ">snapshotMilliseconds</codeph> parameter is different
     from the <codeph class="+ topic/ph pr-d/codeph ">fps</codeph> parameter you can set with <codeph class="+ topic/ph pr-d/codeph ">Camera.setMode()</codeph>. When you specify
     <codeph class="+ topic/ph pr-d/codeph ">snapshotMilliseconds</codeph>, you control how much time elapses between recorded frames. When
     you specify <codeph class="+ topic/ph pr-d/codeph ">fps</codeph> using <codeph class="+ topic/ph pr-d/codeph ">Camera.setMode()</codeph>, you are
     controlling how much time elapses during recording and playback.</p>
     
     <p class="- topic/p ">For example, suppose you want to take a snapshot every 5 minutes for a total
     of 100 snapshots. You can do this in two ways:</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">You can issue a <codeph class="+ topic/ph pr-d/codeph ">NetStream.attachCamera(myCamera, 500)</codeph> command
     100 times, once every 5 minutes. This takes 500 minutes to record, but the resulting file
     will play back in 50 seconds (100 frames with 500 milliseconds between frames).</li><li class="- topic/li ">You can issue a <codeph class="+ topic/ph pr-d/codeph ">Camera.setMode()</codeph> command with an <codeph class="+ topic/ph pr-d/codeph ">fps</codeph> value
     of 1/300 (one per 300 seconds, or one every 5 minutes), and then issue a
     <codeph class="+ topic/ph pr-d/codeph ">NetStream.attachCamera(source)</codeph> command, letting the camera capture continuously
     for 500 minutes. The resulting file will play back in 500 minutes — the same length of time
     that it took to record — with each frame being displayed for 5 minutes.</li></ul>

     <p class="- topic/p ">Both techniques capture the same 500 frames, and both approaches are useful;
     the approach to use depends primarily on your playback requirements. For example,
     in the second case, you could be recording audio the entire time. Also, both files
     would be approximately the same size.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><shortdesc class="- topic/shortdesc ">
    Attaches a stream to a new NetConnection object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>uncomment the following line after offset is added to the file
    </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">connection</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetConnection</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Attaches a stream to a new NetConnection object. Call this method to attach a NetStream to a new NetConnection object
    after a connection has dropped and been reconnected. Flash Player and AIR resume streaming from the playback point when
    the connection was lost.You can also use this method to implement load balancing.
    
    <p class="- topic/p ">This method requires Flash Media Server version 3.5.3 or later.</p>
    
    <p class="- topic/p ">To use this method to implement <b class="+ topic/ph hi-d/b ">stream reconnection</b>, see the
    <xref href="http://www.adobe.com/go/learn_fms_docs_en" scope="external" class="- topic/xref ">Flash Media Server 3.5.3 documentation</xref>.</p>
    
    <p class="- topic/p "> To use this method to implement <b class="+ topic/ph hi-d/b ">load balancing</b>, do the following: </p>
    
    <ol class="- topic/ol "><li class="- topic/li "> Attach a connected stream to a NetConnection object on another server. </li><li class="- topic/li ">After the stream is successfully attached to the new connection, call <codeph class="+ topic/ph pr-d/codeph ">NetConnection.close()</codeph>
    on the prior connection to prevent data leaks.</li><li class="- topic/li ">Call <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> and set the value of <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.transition</codeph> to RESUME.
    Set the rest of the NetStreamPlayOptions properties to the same values you used when you originally called
    <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> to start the stream.</li></ol>
    
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">play2()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/transition" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.transition</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Stops playing all data on the stream, sets the time property to 0,
     and makes the stream available for another use.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.close, close
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Stops playing all data on the stream, sets the <codeph class="+ topic/ph pr-d/codeph ">time</codeph> property to 0,
     and makes the stream available for another use. This method also deletes the local copy
     of a video file that was downloaded through HTTP. Although the application deletes the
     local copy of the file that it creates, a copy might persist in the
     cache directory. If you must completely prevent caching or local storage of the video file,
     use Flash Media Server.
     
     <p class="- topic/p ">
     When using Flash Media Server, this method is invoked implicitly when you call
     <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> from a publishing stream or
     <codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph> from a subscribing stream.
     Please note that:
     </p>
     
     <ul class="- topic/ul "><li class="- topic/li ">
     If <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> is called from a publishing stream, the stream
     stops publishing and the publisher can now use the stream for another purpose.
     Subscribers no longer receive anything that was being published on the stream,
     because the stream has stopped publishing.
     </li><li class="- topic/li ">
     If <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> is called from a subscribing stream, the stream
     stops playing for the subscriber, and the subscriber can use the stream for
     another purpose.  Other subscribers are not affected.
     </li><li class="- topic/li ">
     You can stop a subscribing stream from playing, without closing the stream
     or changing the stream type by using <codeph class="+ topic/ph pr-d/codeph ">flash.net.NetStream.play(false)</codeph>.
     </li></ul>
     
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/pause()" class="- topic/link "><linktext class="- topic/linktext ">pause()</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/publish()" class="- topic/link "><linktext class="- topic/linktext ">publish()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:onPeerConnect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">onPeerConnect</apiName><shortdesc class="- topic/shortdesc ">
     
     Invoked when a peer-publishing stream matches a peer-subscribing stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">subscriber</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetStream</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     Invoked when a peer-publishing stream matches a peer-subscribing stream. Before the subscriber is
     connected to the publisher, call this method to allow the ActionScript code fine access control for
     peer-to-peer publishing. The following code shows an example of how to create a callback function for this method:
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var c:Object = new Object;
     c.onPeerConnect = function(subscriber:NetStream):Boolean {
      if (accept)
          return true;
      else
          return false;
      };
      m_netStream.client = c;
     </codeblock>
     
     <p class="- topic/p ">If a peer-publisher does not implement this method, all peers are allowed to play any published content.</p>
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:pause" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pause</apiName><shortdesc class="- topic/shortdesc ">
     Pauses playback of a video stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.pause, pause
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Pauses playback of a video stream. Calling this method does nothing if the video
     is already paused. To resume play after pausing a video, call <codeph class="+ topic/ph pr-d/codeph ">resume()</codeph>.
     To toggle between pause and play (first pausing the video, then resuming), call
     <codeph class="+ topic/ph pr-d/codeph ">togglePause()</codeph>.
     
     <p class="- topic/p ">Starting with Flash Player 9.0.115.0, Flash Player no longer clears the buffer when <codeph class="+ topic/ph pr-d/codeph ">NetStream.pause()</codeph> is called. 
     This behavior is called "smart pause". Before Flash Player 9.0.115.0, Flash Player waited for the buffer to fill up before resuming 
     playback, which often caused a delay. </p>
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> For backwards compatibility, the <codeph class="+ topic/ph pr-d/codeph ">"NetStream.Buffer.Flush"</codeph> event (see the <codeph class="+ topic/ph pr-d/codeph ">NetStatusEvent.info</codeph>
     property) still fires, although the server does not flush the buffer.</p>
     <p class="- topic/p ">For a single pause, the <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> property has a limit of either 60 seconds
     or twice the value of <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferTime</codeph>, whichever value is higher. For example, if
     <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> is 20 seconds, Flash Player buffers until <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph>
     is the higher value of either 20~~2 (40), or 60, so in this case it buffers until <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> is 60.
     If <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> is 40 seconds, Flash Player buffers until <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> is the higher value
     of 40~~2 (80), or 60, so in this case it buffers until <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> is 80 seconds.</p>
     
     <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> property also has an absolute limit.
     If any call to <codeph class="+ topic/ph pr-d/codeph ">pause()</codeph> causes <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph>
     to increase more than 600 seconds or the value of <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> ~~ 2, whichever is higher, Flash Player
     flushes the buffer and resets <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> to 0. For example, if
     <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> is 120 seconds, Flash Player flushes the buffer
     if <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> reaches 600 seconds; if <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> is 360 seconds,
     Flash Player flushes the buffer if <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> reaches 720 seconds.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Tip</b>: You can use <codeph class="+ topic/ph pr-d/codeph ">NetStream.pause()</codeph> in code to buffer data while viewers are watching
     a commercial, for example, and then unpause when the main video starts.</p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/resume()" class="- topic/link "><linktext class="- topic/linktext ">resume()</linktext></link><link href="flash.net.xml#NetStream/togglePause()" class="- topic/link "><linktext class="- topic/linktext ">togglePause()</linktext></link><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:play2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">play2</apiName><shortdesc class="- topic/shortdesc ">
     Switches seamlessly between files with multiple bit rates and allows a NetStream to resume when a connection is dropped and reconnected.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">param</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetStreamPlayOptions</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Switches seamlessly between files with multiple bit rates and allows a NetStream to resume when a connection is dropped and reconnected.
     
     <p class="- topic/p ">This method is an enhanced version of <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph>. Like the <codeph class="+ topic/ph pr-d/codeph ">play()</codeph> method, the <codeph class="+ topic/ph pr-d/codeph ">play2()</codeph> method begins
     playback of a media file or queues up media files to create a playlist. When used with Flash Media Server, it can also
     request that the server switch to a different media file. The transition occurs seamlessly in the client application. The following features
     use <codeph class="+ topic/ph pr-d/codeph ">play2()</codeph> stream switching:</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Dynamic streaming</b></p>
     
     <p class="- topic/p ">Dynamic streaming (supported in Flash Media Server 3.5 and later) lets you serve a stream encoded at multiple bit rates. As a viewer's network conditions change,
     they receive the bitrate that provides the best viewing experience. Use the <codeph class="+ topic/ph pr-d/codeph ">NetStreamInfo</codeph> class to monitor network conditions and
     switch streams based on the data. You can also switch streams for clients with different capabilities.
     For more information, see <xref href="http://www.adobe.com/go/learn_fms_dynstream_en" scope="external" class="- topic/xref ">"Dynamic streaming"</xref> in the
     "Adobe Flash Media Server Developer Guide".</p>
     
     <p class="- topic/p ">Adobe built a custom ActionScript class called DynamicStream that extends the NetStream class. You can use the DynamicStream class
     to implement dynamic streaming in an application instead of writing your own code to detect network conditions. Even if you choose to write your own
     dynamic streaming code, use the DynamicStream class as a reference implementation. Download the class and the class documentation at the
     <xref href="http://www.adobe.com/go/fms_tools" scope="external" class="- topic/xref ">Flash Media Server tools and downloads</xref> page.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Stream reconnecting</b></p>
     
     <p class="- topic/p ">Stream reconnecting (supported in Flash Media Server 3.5.3 and later) lets users to experience media uninterrupted even when they lose their connection.
     The media uses the buffer to play while your ActionScript logic reconnects to Flash Media Server. After reconnection, call <codeph class="+ topic/ph pr-d/codeph ">NetStream.attach()</codeph>
     to use the same NetStream object with the new NetConnection. Use the <codeph class="+ topic/ph pr-d/codeph ">NetStream.attach()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayTransitions.RESUME</codeph>,
     and <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayTrasitions.APPEND_AND_WAIT</codeph> APIs to reconnect a stream. For more information,
     see the <xref href="http://www.adobe.com/go/learn_fms_docs_en" scope="external" class="- topic/xref ">Flash Media Server 3.5.3 documentation</xref>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions</linktext></link><link href="flash.net.xml#NetStreamPlayTransitions" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayTransitions</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:play" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">play</apiName><shortdesc class="- topic/shortdesc ">
     Plays a media file from a local directory or a web server; plays a media file or a live stream from Flash Media Server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>"at"see flash.media.Video#attachVideo()  This method no longer exists.  Replace with new method.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Local untrusted SWF files cannot communicate with
     the Internet. You can work around this restriction by reclassifying this SWF file
     as local-with-networking or trusted.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">At least one parameter must be specified.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The NetStream Object is invalid.  This may be due to a failed NetConnection.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Play a local file</b></p>
     
     
     <p class="- topic/p ">
     The location of a media file. Argument can be a String, a <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph>
     property, or a variable referencing either. In <ph class="- topic/ph ">Flash Player and in</ph> AIR content outside the application
     security sandbox, you can play local video files that are stored in the same directory as the SWF file or in a
     subdirectory; however, you can't navigate to a higher-level directory.
     </p>
     
     <p class="- topic/p ">
     With AIR content in the application security sandbox, the path you specify for the media file is relative to the SWF 
     file's directory. However, you cannot navigate above the SWF file's directory. Do not specify a full path since 
     AIR treats it as a relative path.      
     </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Play a file from Flash Media Server</b></p>
     
     <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Name</entry><entry class="- topic/entry ">Required</entry><entry class="- topic/entry ">Description</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">name:Object</codeph></entry><entry class="- topic/entry ">Required </entry><entry class="- topic/entry "> The name of a recorded file,
            an identifier for live data published by <codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph>,
            or <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
            If <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, the stream stops playing and any additional parameters
            are ignored. For more information on the filename syntax, see the file format table following this table.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">start:Number</codeph></entry><entry class="- topic/entry ">Optional</entry><entry class="- topic/entry "> The start time, in seconds. Allowed values are -2, -1, 0,
            or a positive number. The default value is -2, which looks
            for a live stream, then a recorded stream, and if it finds
            neither, opens a live stream. If -1, plays only a live stream.
            If 0 or a positive number, plays a recorded stream, beginning
            <codeph class="+ topic/ph pr-d/codeph ">start</codeph> seconds in.
       </entry></row><row class="- topic/row "><entry class="- topic/entry "> <codeph class="+ topic/ph pr-d/codeph ">len:Number</codeph> </entry><entry class="- topic/entry "> Optional if <codeph class="+ topic/ph pr-d/codeph ">start</codeph> is specified. </entry><entry class="- topic/entry "> The duration of the playback, in seconds.
            Allowed values are -1, 0, or a positive number.
            The default value is -1,
            which plays a live or recorded stream until it ends.
            If 0, plays a single frame that is
            <codeph class="+ topic/ph pr-d/codeph ">start</codeph>
            seconds from the beginning of a recorded stream.
            If a positive number, plays a live or recorded stream for
            <codeph class="+ topic/ph pr-d/codeph ">len</codeph> seconds.
       </entry></row><row class="- topic/row "><entry class="- topic/entry "> <codeph class="+ topic/ph pr-d/codeph ">reset:Object</codeph> </entry><entry class="- topic/entry "> Optional if <codeph class="+ topic/ph pr-d/codeph ">len</codeph> is specified. </entry><entry class="- topic/entry "> Whether to clear a playlist.
            The default value is 1 or <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, which clears any previous
            <codeph class="+ topic/ph pr-d/codeph ">play</codeph> calls and plays <codeph class="+ topic/ph pr-d/codeph ">name</codeph> immediately.
            If 0 or <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, adds the stream to a playlist.
            If 2, maintains the playlist and returns all stream
            messages at once, rather than at intervals.
            If 3, clears the playlist and returns all stream messages
            at once.  </entry></row></tbody></tgroup></adobetable>
     
     
     <p class="- topic/p ">
     You can play back the file formats described in the following table. The syntax differs depending on the file format.
     </p>
     
     <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">File format</entry><entry class="- topic/entry ">Syntax</entry><entry class="- topic/entry ">Example</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">FLV</entry><entry class="- topic/entry ">Specify the stream name (in the "samples" directory) as a string without a filename extension.</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ns.play("samples/myflvstream");</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">mp3 or ID3</entry><entry class="- topic/entry ">Specify the stream name (in the "samples" directory) as a string with the prefix <codeph class="+ topic/ph pr-d/codeph ">mp3:</codeph> or <codeph class="+ topic/ph pr-d/codeph ">id3:</codeph> without a filename extension.</entry><entry class="- topic/entry "><p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ns.play("mp3:samples/mymp3stream");</codeph></p>
            <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ns.play("id3:samples/myid3data");</codeph></p></entry></row><row class="- topic/row "><entry class="- topic/entry ">MPEG-4-based files (such as F4V and MP4)</entry><entry class="- topic/entry ">Specify the stream name (in the "samples" directory) as a string with the prefix <codeph class="+ topic/ph pr-d/codeph ">mp4:</codeph>
        The prefix indicates to the server that the file contains H.264-encoded video and AAC-encoded audio within
        the MPEG-4 Part 14 container format. If the file on the server has a file extension, specify it. </entry><entry class="- topic/entry "><p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ns.play("mp4:samples/myvideo.f4v");</codeph></p>
            <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ns.play("mp4:samples/myvideo.mp4");</codeph></p>
          <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ns.play("mp4:samples/myvideo");</codeph></p>
          <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">ns.play("mp4:samples/myvideo.mov");</codeph></p></entry></row><row class="- topic/row "><entry class="- topic/entry ">RAW</entry><entry class="- topic/entry ">Specify the stream name (in the "samples" directory) as a string with the prefix <codeph class="+ topic/ph pr-d/codeph ">raw:</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ns.play("raw:samples/myvideo");</codeph></entry></row></tbody></tgroup></adobetable>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Enable Data Generation Mode</b></p>
     
     <p class="- topic/p ">
     To enable "Data Generation Mode", pass the value <codeph class="+ topic/ph pr-d/codeph ">null</codeph> to a NetStream created on a NetConnection connected to <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     In this mode, call <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> to deliver data to the NetStream.
     (Passing <codeph class="+ topic/ph pr-d/codeph ">null</codeph> also resets the byte counter for the <codeph class="+ topic/ph pr-d/codeph ">onSeekPoint()</codeph> callback.)
     </p>
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Plays a media file from a local directory or a web server; plays a media file or a live stream from Flash Media Server.
     Dispatches a <codeph class="+ topic/ph pr-d/codeph ">NetStatusEvent</codeph> object to report status and error messages.
     
     <p class="- topic/p ">For information about supported codecs and file formats, see the following:</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><xref href="http://www.adobe.com/go/learn_fms_fileformats_en" scope="external" class="- topic/xref ">Flash Media Server documentation</xref></li><li class="- topic/li "><xref href="http://www.adobe.com/go/hardware_scaling_en" scope="external" class="- topic/xref ">Exploring Flash Player support for high-definition H.264 video and AAC audio</xref></li><li class="- topic/li "><xref href="http://www.adobe.com/go/video_file_format" scope="external" class="- topic/xref ">FLV/F4V open specification documents</xref></li></ul>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Workflow for playing a file or live stream</b></p>
     
     <ol class="- topic/ol "><li class="- topic/li ">Create a NetConnection object and call <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph>.
     <p class="- topic/p ">To play a file from a local directory or web server, pass null.</p>
     <p class="- topic/p ">To play a recorded file or live stream from Flash Media Server, pass the URI of a Flash Media Server application.</p></li><li class="- topic/li ">Call <codeph class="+ topic/ph pr-d/codeph ">NetConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler)</codeph> to listen for NetStatusEvent events.</li><li class="- topic/li ">On <codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Connect.Success"</codeph>, create a NetStream object and pass the NetConnection object to the constructor.</li><li class="- topic/li ">Create a Video object and call <codeph class="+ topic/ph pr-d/codeph ">Video.attachNetStream()</codeph> and pass the NetStream object.</li><li class="- topic/li ">Call <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph>.
     <p class="- topic/p ">To play a live stream,
     pass the stream name passed to the <codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph> method.</p>
     <p class="- topic/p ">To play a recorded file, pass the file name.</p></li><li class="- topic/li ">Call <codeph class="+ topic/ph pr-d/codeph ">addChild()</codeph> and pass the Video object to display the video.</li></ol>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b>To see sample code, scroll to the example at the bottom of this page.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Enable Data Generation Mode</b></p>
     
     <p class="- topic/p ">
     Call <codeph class="+ topic/ph pr-d/codeph ">play(null)</codeph> to enable "Data Generation Mode". In this mode, call the <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> method to deliver
     data to the NetStream. Use Data Generation Mode to stream content over HTTP from the Adobe HTTP Dynamic Streaming Origin Module on an Apache HTTP Server.
     HTTP Dynamic Streaming lets clients seek quickly to any point in a file. The Open Source Media Framework (OSMF)
     supports HTTP Dynamic Streaming for vod and live streams. For examples of how to use NetStream Data Generation Mode, download the
     <xref href="http://www.opensourcemediaframework.com" scope="external" class="- topic/xref ">OSMF</xref> source.
     For more information about HTTP Dynamic Streaming, see
     <xref href="http://www.adobe.com/go/learn_fms_http_en" scope="external" class="- topic/xref ">HTTP Dynamic Streaming</xref>.
     </p>
     
     <p class="- topic/p ">
     When you use this method without Flash Media Server, there are security considerations. A file in the local-trusted or
     local-with-networking sandbox can load and play a video file from the remote sandbox, but cannot access
     the remote file's data without explicit permission in the form of a URL policy file.
     <ph class="- topic/ph ">Also, you can prevent a SWF file running in Flash Player from using this method
     by setting the <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> parameter of the the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph>
     tags in the HTML page that contains the SWF content.</ph> For more information related to security, see the Flash Player Developer Center Topic:
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.
     </p>
     
     </apiDesc><example class="- topic/example "><b class="+ topic/ph hi-d/b ">Flash Media Server</b>
     This example plays a recorded F4V file from the "samples" directory, starting at
     the beginning, for up to 100 seconds. With MPEG-4 files, if the file on the server has a filename extension
     the <codeph class="+ topic/ph pr-d/codeph ">play()</codeph> method must specify a filename extension.
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     ns.play("mp4:samples/record1.f4v", 0, 100, true);
     </codeblock>
     
     </example><example class="- topic/example "><b class="+ topic/ph hi-d/b ">Flash Media Server</b>
     This example plays a live FLV stream published by a client, from beginning to end, starting
     immediately:
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     ns.play("livestream");
     </codeblock>
     
     
     </example><example conref="examples\Video_new.as" class="- topic/example "> The following example shows how to load an external FLV file:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var MyVideo:Video = new Video();
addChild(MyVideo);
 
var MyNC:NetConnection = new NetConnection();
MyNC.connect(null);
 
var MyNS:NetStream = new NetStream(MyNC);
MyNS.play("http://www.helpexamples.com/flash/video/clouds.flv");

MyVideo.attachNetStream(MyNS);

//the clouds.flv video has metadata we're not using, so create
//an error handler to ignore the message generated by the runtime
//about the metadata
MyNS.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler); 

function asyncErrorHandler(event:AsyncErrorEvent):void 
{ 
   //ignore metadata error message
} 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObjectContainer/addChild()" class="- topic/link "><linktext class="- topic/linktext ">DisplayObjectContainer.addChild()</linktext></link><link href="flash.net.xml#NetStream/checkPolicyFile" class="- topic/link "><linktext class="- topic/linktext ">checkPolicyFile</linktext></link><link href="flash.net.xml#NetStream/appendBytes()" class="- topic/link "><linktext class="- topic/linktext ">appendBytes()</linktext></link></related-links><adobeApiEvent id="flash.net:NetStream:play_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when attempting to play content encrypted with
     digital rights management (DRM). The value of the <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property is
     <codeph class="+ topic/ph pr-d/codeph ">"DRM.encryptedFLV"</codeph>.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when attempting to play content encrypted with
     digital rights management (DRM).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:NetStream:preloadEmbeddedData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">preloadEmbeddedData</apiName><shortdesc class="- topic/shortdesc ">
     Extracts any DRM metadata from a locally stored media file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">param</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetStreamPlayOptions</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A NetStreamPlayOptions describing the options to use while processing the content file.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Extracts any DRM metadata from a locally stored media file.
     
     <p class="- topic/p ">Use <codeph class="+ topic/ph pr-d/codeph ">preloadEmbeddedMetaData()</codeph> as the first step in downloading and caching the DRM vouchers
     needed for offline playback. When embedded DRM metadata is detected in a media file, a DRMContentData object is passed
     to the NetStream client <codeph class="+ topic/ph pr-d/codeph ">onDRMContentData</codeph> function. This DRMContentData object contains the information
     needed to obtain the voucher required to play the content. Pass the DRMContentDataObject to the DRMManager
     <codeph class="+ topic/ph pr-d/codeph ">loadVoucher()</codeph> method to download the voucher.</p>
     
     <p class="- topic/p ">The steps for preloading a DRM voucher include:</p>
     <ul class="- topic/ul "><li class="- topic/li ">
     <p class="- topic/p ">Create a new NetStream object for preloading the metadata.</p>
     </li><li class="- topic/li ">Assign a callback function to the <codeph class="+ topic/ph pr-d/codeph ">onDRMContentData</codeph> property of the NetStream <codeph class="+ topic/ph pr-d/codeph ">client</codeph>.</li><li class="- topic/li ">Create a new NetStreamPlayOptions object and set its <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> property to the the URL string of the local video file.</li><li class="- topic/li ">Call <codeph class="+ topic/ph pr-d/codeph ">preloadEmbeddedMetadata()</codeph>, passing in the NetStreamPlayOptions object.</li><li class="- topic/li ">In response to the <codeph class="+ topic/ph pr-d/codeph ">onDRMContentData</codeph> callback, call the DRMManager <codeph class="+ topic/ph pr-d/codeph ">loadVoucher()</codeph> method, passing
     in the DRMContentData object. If the <codeph class="+ topic/ph pr-d/codeph ">authenticationMethod</codeph> property of the DRMContentData object has the value,
     <codeph class="+ topic/ph pr-d/codeph ">userNameAndPassWord</codeph>, authenticate the user on the media rights server before loading the voucher.</li><li class="- topic/li ">Close the NetStream used for preloading.</li></ul>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> To use the same NetStream object to both preload metadata and play content,
     wait for the <codeph class="+ topic/ph pr-d/codeph ">onPlayStatus</codeph> call generated by the preload operation before starting playback.</p>
     
     <p class="- topic/p ">Downloaded vouchers are stored in a local cache. Playing content online also downloads and
     caches vouchers. When a DRM-protected content file is viewed, a cached
     voucher is retrieved from the local store automatically. Use the DRMManager to manage the
     voucher cache.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Notes:</b> Preloading DRM metadata through HTTP, HTTPS, or RTMP connections is not supported. You can only
     preload metadata from files stored on the file system.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:onDRMContentData" class="- topic/link "><linktext class="- topic/linktext ">onDRMContentData</linktext></link><link href="flash.net.drm.xml#DRMContentData" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMContentData</linktext></link><link href="flash.net.drm.xml#DRMManager/loadVoucher()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager.loadVoucher()</linktext></link><link href="flash.net.drm.xml#DRMVoucher" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMVoucher</linktext></link><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:publish" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">publish</apiName><shortdesc class="- topic/shortdesc ">
     Sends streaming audio, video, and data messages from a client to Flash Media Server,
     optionally recording the stream during transmission.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string that identifies the stream. Clients that subscribe to this stream pass
     this name when they call <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph>. Don't follow the stream name with a "/". For example, don't use
     the stream name <codeph class="+ topic/ph pr-d/codeph ">"bolero/"</codeph>.
     
     <p class="- topic/p ">
     You can record files in the formats described in the following table (you cannot use <codeph class="+ topic/ph pr-d/codeph ">publish()</codeph> for MP3 format files). 
     The syntax differs depending on the file format.</p>
     <p class="- topic/p ">
     <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">File format</entry><entry class="- topic/entry ">Syntax</entry><entry class="- topic/entry ">Example</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">FLV</entry><entry class="- topic/entry ">Specify the stream name as a string without a filename extension.</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ns.publish("myflvstream");</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">MPEG-4-based files (such as F4V or MP4)</entry><entry class="- topic/entry ">Specify the stream name as a string with the prefix <codeph class="+ topic/ph pr-d/codeph ">mp4:</codeph> with or without the filename extension.
     Flash Player doesn't encode using H.264, but Flash Media Server can record any codec in the F4V container. Flash Media Live Encoder
     can encode using H.264.
     </entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ns.publish("mp4:myvideo.f4v")</codeph>
         <codeph class="+ topic/ph pr-d/codeph ">ns.publish("mp4:myvideo");</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">RAW</entry><entry class="- topic/entry ">Specify the stream name as a string with the prefix <codeph class="+ topic/ph pr-d/codeph ">raw:</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ns.publish("raw:myvideo");</codeph></entry></row></tbody></tgroup></adobetable>
     </p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string that specifies how to publish the stream.
     Valid values are "<codeph class="+ topic/ph pr-d/codeph ">record</codeph>", "<codeph class="+ topic/ph pr-d/codeph ">append</codeph>", "<codeph class="+ topic/ph pr-d/codeph ">appendWithGap</codeph>", and "<codeph class="+ topic/ph pr-d/codeph ">live</codeph>".
     The default value is "<codeph class="+ topic/ph pr-d/codeph ">live</codeph>".
     <ul class="- topic/ul "><li class="- topic/li ">If you pass "<codeph class="+ topic/ph pr-d/codeph ">record</codeph>", the server publishes and records live data,
     saving the recorded data to a new file with a name matching the value passed
     to the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter. If the file exists, it is overwritten.</li><li class="- topic/li ">If you pass "<codeph class="+ topic/ph pr-d/codeph ">append</codeph>", the server publishes and records live data,
     appending the recorded data to a file with a name that matches the value passed
     to the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter. If no file matching the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter is found, it is created. </li><li class="- topic/li ">If you pass "<codeph class="+ topic/ph pr-d/codeph ">appendWithGap</codeph>", additional
      information about time coordination is passed to help the server determine the correct transition point when dynamic streaming.</li><li class="- topic/li ">If you omit this parameter or pass "<codeph class="+ topic/ph pr-d/codeph ">live</codeph>", the server publishes live data without
     recording it. If a file with a name that matches the value passed
     to the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter exists, it is deleted.</li></ul>
     
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sends streaming audio, video, and data messages from a client to Flash Media Server,
     optionally recording the stream during transmission. This method dispatches a NetStatusEvent object with information about the stream.
     Before you call <codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph>, capture the <codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Connect.Success"</codeph> event
     to verify that the application has successfully connected to Flash Media Server.
     
     <p class="- topic/p ">While publishing, you can record files in FLV or F4V format. If you record a file in F4V format,
     use a flattener tool to edit or play the file in another application.
     To download the tool, see
     <xref href="http://www.adobe.com/go/fms_tools" scope="external" class="- topic/xref ">www.adobe.com/go/fms_tools</xref>.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b>Do not use this method to play a stream. To play a stream, call the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> method.</p>
     
     <p class="- topic/p ">Workflow for publishing a stream</p>
     
     <ol class="- topic/ol "><li class="- topic/li ">Create a NetConnection object and call <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph>.</li><li class="- topic/li ">Call <codeph class="+ topic/ph pr-d/codeph ">NetConnection.addEventListener()</codeph> to listen for NetStatusEvent events.</li><li class="- topic/li ">On the <codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Connect.Success"</codeph> event, create a NetStream object and pass the NetConnection object to the constructor.</li><li class="- topic/li ">To capture audio and video, call the <codeph class="+ topic/ph pr-d/codeph ">NetStream.attachAudio()</codeph>method
     and the <codeph class="+ topic/ph pr-d/codeph ">NetStream.attachCamera()</codeph> method.</li><li class="- topic/li ">To publish a stream, call the <codeph class="+ topic/ph pr-d/codeph ">NetStream.publish()</codeph> method.
     You can record the data as you publish it so that users can play it back later.</li></ol>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> A NetStream can either publish a stream or play a stream, it cannot do both. To publish a stream and view the playback
     from the server, create two NetStream objects. You can send multiple NetStream objects over one NetConnection object.</p>
     
     <p class="- topic/p ">When Flash Media Server records a stream it creates a file.
     By default, the server creates a directory with the
     application instance name passed to <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> and stores the file in the directory.
     For example, the following code connects to the default instance of the "lectureseries" application and records a stream called "lecture".
     The file "lecture.flv" is recorded in the applications/lectureseries/streams/_definst_ directory:
     </p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var nc:NetConnection = new NetConnection();
     nc.connect("rtmp://fms.example.com/lectureseries");
     nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
     
     function netStatusHandler(event:NetStatusEvent):void{
       if (event.info.code == "NetConnection.Connect.Success"){
            var ns:NetStream = new NetStream(nc);
            ns.publish("lecture", "record");
       }
     }
     </codeblock>
     
     <p class="- topic/p ">The following example connects to the "monday" instance of the same application.
     The file "lecture.flv" is recorded in the directory /applications/lectureseries/streams/monday:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var nc:NetConnection = new NetConnection();
     nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
     nc.connect("rtmp://fms.example.com/lectureseries/monday");
     
     function netStatusHandler(event:NetStatusEvent):void{
       if (event.info.code == "NetConnection.Connect.Success"){
            var ns:NetStream = new NetStream(nc);
            ns.publish("lecture", "record");
       }
     }
     </codeblock>
     
     </apiDesc><example conref="examples\NetStream_publish.as" class="- topic/example "> The following example captures video from a camera and publishes it over a NetStream to Flash Media Server.
 The example displays the video as it's played back from Flash Media Server.
 <p class="- topic/p ">To run this example, you need a camera attached to your computer. You also need to add a Button 
 component and a Label component to the Library.</p>
 <p class="- topic/p ">The application has a button that publishes a stream (sends it to Flash Media Server) only after
 the application has successfully connected to the server. The application plays back the stream from the server
 only after the stream has been successfully published. The <codeph class="+ topic/ph pr-d/codeph ">NetStatusEvent</codeph> returns an <codeph class="+ topic/ph pr-d/codeph ">info</codeph> object with a <codeph class="+ topic/ph pr-d/codeph ">code</codeph>
 property that specifies these cases. The <codeph class="+ topic/ph pr-d/codeph ">netStatusHandler</codeph> function handles these events for the NetConnection and NetStream classes.</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Video;
    import flash.media.Camera;
    import flash.net.NetConnection;
    import flash.net.NetStream;
    import fl.controls.Button;
    import fl.controls.Label;

    public class NetStream_publish extends Sprite {
        private var connectionURL:String = "rtmp://localhost/live/";
        private var videoURL:String = "liveVideo";
        private var nc:NetConnection;
        private var ns_publish:NetStream;
        private var ns_playback:NetStream;
        private var video_publish:Video;
        private var video_playback:Video;
        private var cam:Camera;
        private var b:Button;
        private var l:Label;

        public function NetStream_publish() {
            setUpUI();
            
            nc = new NetConnection();
            nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            
            // Add bandwidth detection handlers on the NetConnection Client to
            // prevent Reference Errors at runtime when using the "live" and "vod" applications.          
            var clientObj:Object = new Object();
            clientObj.onBWDone = onBWDone;
            clientObj.onBWCheck = onBWCheck;
            nc.client = clientObj;
            
            // Connect to the "live" application on Flash Media Server.
            nc.connect(connectionURL);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            trace(event.info.code + " | " + event.info.description);
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    // Enable the "Publish" button after the client connects to the server.
                    b.enabled = true;
                    break;
                case "NetStream.Publish.Start":
                    playbackVideo();
                    break;
            }
        }
    
        private function publishVideo(event:MouseEvent):void{
            // Disable the button so that you can only publish once.
            b.enabled = false;
            // Create a NetStream to send video to FMS.
            ns_publish = new NetStream(nc);
            ns_publish.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            // Publish (send) the video to FMS.
            cam = Camera.getCamera();
            ns_publish.attachCamera(cam);
               ns_publish.publish(videoURL);
        }

        private function playbackVideo():void {
            // Create a NetStream to receive the video from FMS.
            ns_playback = new NetStream(nc);
            ns_playback.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            ns_playback.play(videoURL);    
            // Display the video that was published to FMS.
            video_playback = new Video(cam.width, cam.height);
            video_playback.x = cam.width + 20;
            video_playback.y = 10;
            video_playback.attachNetStream(ns_playback);
            addChild(video_playback);
        }
        
        
        private function setUpUI():void { 
            b = new Button(); 
            b.addEventListener(MouseEvent.CLICK, publishVideo);
            b.width = 150;
            b.label = "Publish video to server";
            b.move(10, 150);
            b.enabled = false;
            
            l = new Label();
            l.width = 150;
            l.text = "Playing back from server"
            l.move(190, 150);
            
            addChild(b);
            addChild(l);
        }
        
        // Handlers called by the Flash Media Server "live" and "vod" applications.
        public function onBWDone(... rest):Boolean {
            return true;
        }
        
        public function onBWCheck(... rest):Number {
            return 0;
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.connect()</linktext></link><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:receiveAudio" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">receiveAudio</apiName><shortdesc class="- topic/shortdesc ">
     Specifies whether incoming audio plays on the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">flag</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies whether incoming audio plays on the stream (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or not (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>). The default value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. 
     If the specified stream contains only audio data, <codeph class="+ topic/ph pr-d/codeph ">NetStream.time</codeph> stops incrementing when you pass <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies whether incoming audio plays on the stream.
     This method is available only to clients subscribed to the specified stream.
     It is not available to the publisher of the stream. Call this method before or after you call the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> method.
     For example, attach this method to a button to allow users to mute and unmute the audio.
	 Use this method only on unicast streams that are played back from Flash Media Server.  This method doesn't work on RTMFP multicast streams
	 or when using the <codeph class="+ topic/ph pr-d/codeph ">NetStream.appendBytes()</codeph> method.
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:receiveVideoFPS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">receiveVideoFPS</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the frame rate for incoming video.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">FPS</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies the frame rate per second at which the incoming video plays.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the frame rate for incoming video. This method is available only to clients subscribed to the specified stream. 
     It is not available to the publisher of the stream.
     Call this method before or after you call the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> method. For example, call this method to allow users 
     to set the video frame rate. To determine the current frame rate, use <codeph class="+ topic/ph pr-d/codeph ">NetStream.currentFPS</codeph>. To stop receiving video, pass <codeph class="+ topic/ph pr-d/codeph ">0</codeph>.
	 <p class="- topic/p ">When you pass a value to the FPS parameter to limit the frame rate of the video, Flash Media Server attempts to reduce the frame rate while preserving
	 the integrity of the video. Between every two keyframes, the server sends the minimum number of frames needed to satisfy the desired rate. 
	 Please note that I-frames (or intermediate frames) must be sent contiguously, otherwise the video is corrupted. Therefore, the desired number of frames 
	 is sent immediately and contiguously following a keyframe. Since the frames are not evenly distributed, the motion appears smooth in segments punctuated by stalls.</p>
	 <p class="- topic/p ">Use this method only on unicast streams that are played back from Flash Media Server. This method doesn't work on RTMFP multicast streams or when using the
	 <codeph class="+ topic/ph pr-d/codeph ">NetStream.appendBytes()</codeph> method.</p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:receiveVideo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">receiveVideo</apiName><shortdesc class="- topic/shortdesc ">
     Specifies whether incoming video plays on the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">flag</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies whether incoming video plays on this stream (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or not (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>). The default value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     If the specified stream contains only video data, <codeph class="+ topic/ph pr-d/codeph ">NetStream.time</codeph> stops incrementing when you pass <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies whether incoming video plays on the stream. This method is available only to clients subscribed to the specified stream.
     It is not available to the publisher of the stream. Call this method before or after you call the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> method. 
     For example, attach this method to a button to allow users to show and hide the video.
	 Use this method only on unicast streams that are played back from Flash Media Server. This method doesn't work on RTMFP multicast streams
	 or when using <codeph class="+ topic/ph pr-d/codeph ">the NetStream.appendBytes()</codeph> method.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:resetDRMVouchers" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">resetDRMVouchers</apiName><shortdesc class="- topic/shortdesc ">
     Deletes all locally cached digital rights management (DRM) voucher data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream, resetDRMVouchers
     
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The voucher data cannot be deleted.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Deletes all locally cached digital rights management (DRM) voucher data.
     <p class="- topic/p ">
     The application must re-download any required vouchers from the media rights server for the user
     to be able to access protected content. Calling this function is equivalent to calling the
     <codeph class="+ topic/ph pr-d/codeph ">resetDRMVouchers()</codeph> function of the DRMManager object.</p>
     
     </apiDesc><example conref="examples\NetStream.resetDRMVouchers.1.as" class="- topic/example "> The following example resets all DRM vouchers:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

NetStream.resetDRMVouchers();
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.drm.xml#DRMManager/resetDRMVouchers()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager.resetDRMVouchers()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:resume" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">resume</apiName><shortdesc class="- topic/shortdesc ">
     Resumes playback of a video stream that is paused.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.resume, resume
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Resumes playback of a video stream that is paused. If the video is already playing, calling this method
     does nothing.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.net.xml#NetStream/pause()" class="- topic/link "><linktext class="- topic/linktext ">pause()</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/togglePause()" class="- topic/link "><linktext class="- topic/linktext ">togglePause()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:seek" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">seek</apiName><shortdesc class="- topic/shortdesc ">
     
     Seeks the keyframe (also called an I-frame in the video industry) closest to
     the specified location.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.seek, seek
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The approximate time value, in seconds, to move to in a video file.
     With Flash Media Server, if <codeph class="+ topic/ph pr-d/codeph ">&lt;EnhancedSeek&gt;</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> in the Application.xml
     configuration file (which it is by default), the server
     generates a keyframe at <codeph class="+ topic/ph pr-d/codeph ">offset</codeph>.
     
     <ul class="- topic/ul "><li class="- topic/li ">To return to the beginning of the stream, pass 0 for <codeph class="+ topic/ph pr-d/codeph ">offset</codeph>.</li><li class="- topic/li ">To seek forward from the beginning of the stream, pass the number of seconds to advance.
           For example, to position the playhead at 15 seconds from the beginning (or the keyframe
           before 15 seconds), use <codeph class="+ topic/ph pr-d/codeph ">myStream.seek(15)</codeph>.</li><li class="- topic/li ">To seek relative to the current position, pass <codeph class="+ topic/ph pr-d/codeph ">NetStream.time + n</codeph>
           or <codeph class="+ topic/ph pr-d/codeph ">NetStream.time - n</codeph>
           to seek <codeph class="+ topic/ph pr-d/codeph ">n</codeph> seconds forward or backward, respectively, from the current position.
           For example, to rewind 20 seconds from the current position, use
           <codeph class="+ topic/ph pr-d/codeph ">NetStream.seek(NetStream.time - 20).</codeph></li></ul>
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     Seeks the keyframe (also called an I-frame in the video industry) closest to
     the specified location. The keyframe is placed at an offset, in seconds, from
     the beginning of the stream.
     
     <p class="- topic/p ">
     Video streams are usually encoded with two types of frames, keyframes (or I-frames)
     and P-frames. A keyframe contains an entire image, while a P-frame is an
     interim frame that provides additional video information between keyframes.
     A video stream typically has a keyframe every 10-50 frames.
     </p>
     
     <p class="- topic/p ">Flash Media Server has several types of seek behavior: enhanced seeking and smart seeking.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Enhanced seeking</b></p>
     
     <p class="- topic/p "> Enhanced seeking is enabled by default. To disable enhanced seeking, on Flash Media Server set the <codeph class="+ topic/ph pr-d/codeph ">EnhancedSeek</codeph>
     element in the <codeph class="+ topic/ph pr-d/codeph ">Application.xml</codeph> configuration file to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     </p>
     
     <p class="- topic/p ">If enhanced seeking is enabled, the server generates
     a new keyframe at <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> based on the previous keyframe and any
     intervening P-frames. However, generating keyframes creates a high processing load on the server
     and distortion might occur in the generated keyframe.
     If the video codec is On2, the keyframe before the seek point and any
     P-frames between the keyframe and the seek point are sent to the client.
     </p>
     
     <p class="- topic/p ">
     If enhanced seeking is disabled, the server starts streaming
     from the nearest keyframe. For example, suppose a video has keyframes at 0 seconds
     and 10 seconds. A seek to 4 seconds causes playback to start at 4 seconds
     using the keyframe at 0 seconds. The video stays frozen until it reaches the
     next keyframe at 10 seconds. To get a better seeking experience, you need to
     reduce the keyframe interval. In normal seek mode, you cannot start the video
     at a point between the keyframes.
     </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Smart seeking</b></p>
     
     <p class="- topic/p ">To enable smart seeking, set <codeph class="+ topic/ph pr-d/codeph ">NetStream.inBufferSeek</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</p>
     
     <p class="- topic/p ">Smart seeking allows Flash Player to seek within an existing back buffer and forward buffer. When smart seeking is disabled,
     each time <codeph class="+ topic/ph pr-d/codeph ">seek()</codeph> is called Flash Player flushes the buffer and requests data from the server.
     For more information, see <codeph class="+ topic/ph pr-d/codeph ">NetStream.inBufferSeek</codeph>.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Seeking in Data Generation Mode</b></p>
     
     <p class="- topic/p ">When you call <codeph class="+ topic/ph pr-d/codeph ">seek()</codeph> on a NetStream in Data Generation Mode, all bytes passed to
     <codeph class="+ topic/ph pr-d/codeph ">appendBytes()</codeph> are discarded (not placed in the buffer, accumulated in the partial message FIFO, or parsed for seek points)
     until you call <codeph class="+ topic/ph pr-d/codeph ">appendBytesAction(NetStreamAppendBytesAction.RESET_BEGIN)</codeph> or <codeph class="+ topic/ph pr-d/codeph ">appendBytesAction(NetStreamAppendBytesAction.RESET_SEEK)</codeph>
     to reset the parser. For information about Data Generation Mode, see <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph>.</p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/inBufferSeek" class="- topic/link "><linktext class="- topic/linktext ">inBufferSeek</linktext></link><link href="flash.net.xml#NetStream/backBufferLength" class="- topic/link "><linktext class="- topic/linktext ">backBufferLength</linktext></link><link href="flash.net.xml#NetStream/backBufferTime" class="- topic/link "><linktext class="- topic/linktext ">backBufferTime</linktext></link><link href="flash.net.xml#NetStream/step()" class="- topic/link "><linktext class="- topic/linktext ">step()</linktext></link><link href="flash.net.xml#NetStream/time" class="- topic/link "><linktext class="- topic/linktext ">time</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:send" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">send</apiName><shortdesc class="- topic/shortdesc ">
     Sends a message on a published stream to all subscribing clients.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">handlerName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The message to send; also the name of the ActionScript
     handler to receive the message. The handler name can be only one level deep
     (that is, it can't be of the form parent/child) and is relative to the stream object.
     Do not use a reserved term for a handler name.
     For example, using "<codeph class="+ topic/ph pr-d/codeph ">close</codeph>" as a handler name causes
     the method to fail.
     With Flash Media Server, use <codeph class="+ topic/ph pr-d/codeph ">@setDataFrame</codeph> to add a
     keyframe of metadata to a live stream
     or <codeph class="+ topic/ph pr-d/codeph ">@clearDataFrame</codeph> to remove a keyframe.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Optional arguments that can be of any type. They are
     serialized and sent over the connection, and the receiving handler receives
     them in the same order. If a parameter is a circular object (for example,
     a linked list that is circular), the serializer handles the references correctly.
     With Flash Media Server,
     if <codeph class="+ topic/ph pr-d/codeph ">@setDataFrame</codeph> is the first argument,
     use <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> as the second argument; for the third
     argument, pass an instance of <codeph class="+ topic/ph pr-d/codeph ">Object</codeph>
     or <codeph class="+ topic/ph pr-d/codeph ">Array</codeph> that has the metadata set as properties.
     See the
     <xref href="http://www.adobe.com/go/learn_fms_devguide_en" scope="external" class="- topic/xref ">Flash Media Server Developer Guide</xref>
     for a list of suggested
     property names.
     With <codeph class="+ topic/ph pr-d/codeph ">@clearDataFrame</codeph> as the first argument,
     use <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> as the second argument and no third argument.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sends a message on a published stream to all subscribing clients.
     This method is available only to the publisher of the specified stream.
     This method is available for use with Flash Media Server only.
     To process and respond to this message, create a handler on the
     <codeph class="+ topic/ph pr-d/codeph ">NetStream</codeph> object, for example, <codeph class="+ topic/ph pr-d/codeph ">ns.HandlerName</codeph>.
     
     <p class="- topic/p ">
     <ph class="- topic/ph ">Flash Player or </ph> AIR does not serialize methods
     or their data, object prototype variables, or non-enumerable variables. For display objects,
     <ph class="- topic/ph ">Flash Player or </ph> AIR serializes the path but none of the data.
     </p>
     
     <p class="- topic/p ">
     You can call the <codeph class="+ topic/ph pr-d/codeph ">send()</codeph> method to add data keyframes to a live stream
     published to Flash Media Server. A data keyframe is a message a publisher adds
     to a live stream. Data keyframes are typically used to add metadata to a live stream
     before data is captured for the stream from camera and microphone.
     A publisher can add a data keyframe at any time while the live stream is being published.
     The data keyframe is saved in the server's memory as long
     as the publisher is connected to the server.
     </p>
     <p class="- topic/p ">
     Clients who are subscribed to the live stream before a data keyframe is
     added receive the keyframe as soon as it is added. Clients who subscribe
     to the live stream after the data keyframe is added receive the keyframe
     when they subscribe.
     </p>
     <p class="- topic/p ">
     To add a keyframe of metadata to a live stream sent to Flash Media Server, use
     <codeph class="+ topic/ph pr-d/codeph ">@setDataFrame</codeph> as the handler name,
     followed by two additional arguments, for example:
     </p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var ns:NetStream = new NetStream(nc);
     ns.send("@setDataFrame", "onMetaData", metaData);
     </codeblock>
     
     
     
     <p class="- topic/p ">
     The <codeph class="+ topic/ph pr-d/codeph ">@setDataFrame</codeph> argument
     refers to a special handler built in to Flash Media Server.
     The <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> argument is the
     name of a callback function in your client application that
     listens for the <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> event and retrieves the metadata.
     The third item, <codeph class="+ topic/ph pr-d/codeph ">metaData</codeph>, is an instance
     of <codeph class="+ topic/ph pr-d/codeph ">Object</codeph> or <codeph class="+ topic/ph pr-d/codeph ">Array</codeph>
     with properties that define the metadata values.
     </p>
     
     <p class="- topic/p ">Use <codeph class="+ topic/ph pr-d/codeph ">@clearDataFrame</codeph> to clear a keyframe
     of metadata that has already been set in the stream:
     </p>
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     ns.send("@clearDataFrame", "onMetaData");
     </codeblock>
     
     
     </apiDesc><example conref="examples\NetStream.send.1.as" class="- topic/example "> The following example creates two <codeph class="+ topic/ph pr-d/codeph ">NetStream</codeph> objects.
 One is used to publish a live stream to the server, while the other 
 subscribes to the stream.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
   import flash.display.Sprite;
   import flash.net.NetConnection;
   import flash.net.NetStream;
   import flash.events.NetStatusEvent;
   import flash.media.Video;
   import flash.utils.setTimeout;

 
   public class TestExample extends Sprite
   {
     var nc:NetConnection = new NetConnection();
     var ns1:NetStream;
     var ns2:NetStream;
     var vid:Video = new Video(300,300);
     var obj:Object = new Object();
 
     public function TestExample() {
        nc.objectEncoding = 0;
        nc.addEventListener("netStatus", onNCStatus);
        nc.connect("rtmp://localhost/FlashVideoApp");
        addChild(vid); 
     }
  
     function onNCStatus(event:NetStatusEvent):void {
       switch (event.info.code) {
           case "NetConnection.Connect.Success":
               trace("You've connected successfully");
               ns1 = new NetStream(nc);
               ns2 = new NetStream(nc);
               
               ns1.client = new CustomClient();
               ns1.publish("dummy", "live");
    
               ns2.play("dummy");
               ns2.client = new CustomClient();
               vid.attachNetStream(ns2);
               setTimeout(sendHello, 3000);
               break;
              
           case "NetStream.Publish.BadName":
               trace("Please check the name of the publishing stream" );
               break;
        }   
     }

     function sendHello():void {
         ns1.send("myFunction", "hello");
     }       
   }
 }
 
 class CustomClient {
    public function myFunction(event:String):void {
       trace(event);
    }
 }
</codeblock></example><example conref="examples\NetStream.send.2.as" class="- topic/example "> The following example creates metadata and adds it
 to a live stream:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
private function netStatusHandler(event:NetStatusEvent):void {
     switch (event.info.code) {  
        case "NetStream.Publish.Start":
            var metaData:Object = new Object();
            metaData.title = "myStream";
            metaData.width = 400;
            metaData.height = 200;
            ns.send("&amp;#64;setDataFrame", "onMetaData", metaData);
            ns.attachCamera( Camera.getCamera() );
            ns.attachAudio( Microphone.getMicrophone() );        
    }
}
</codeblock></example><example conref="examples\NetStream.send.3.as" class="- topic/example "> To respond to a data keyframe added to a video, the client needs to define
 an <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> event handler. 
 The <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> event handler is not registered
 with <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>, but instead is a callback function
 with the name <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph>, for example:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 public function onMetaData(info:Object):void {
    trace("width: " + info.width);
    trace("height: " + info.height);
 }
</codeblock></example><example conref="examples\NetStream.send.4.as" class="- topic/example "> This example shows how to create a playlist on the server:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 // Create a NetStream for playing
 var my_ns:NetStream = new NetStream(my_nc);
 my_video.attachNetStream(my_ns);
 
 // Play the stream record1
 my_ns.play("record1", 0, -1, true);
 
 // Switch to the stream live1 and play for 5 seconds.  
 // Since reset is false, live1 will start to play after record1 is done.
 my_ns.play("live1", -1 , 5, false);
</codeblock></example><example conref="examples\NetStream.send.5.as" class="- topic/example "> If the recorded video file contains only data messages, you can either
 play the video file at the speed at which it was originally recorded, or
 you can get the data messages all at once.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 //To play at normal speed
 var my_ns:NetStream = new NetStream(my_nc);
 my_ns.play("log", 0, -1);
 
 //To get the data messages all at once
 my_ns.play("log", 0, -1, 3);
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream/dataReliable" class="- topic/link "><linktext class="- topic/linktext ">dataReliable</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:setDRMAuthenticationCredentials" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setDRMAuthenticationCredentials</apiName><shortdesc class="- topic/shortdesc ">
     Sets the DRM authentication credentials needed for viewing the underlying encrypted content.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream, setDRMAuthenticationCredentials
     
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">userName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A valid user name credential.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">password</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The password credential corresponding to the user name provided.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string that specifies what type of authentication credentials are provided.
     Valid values are <codeph class="+ topic/ph pr-d/codeph ">"drm"</codeph> and <codeph class="+ topic/ph pr-d/codeph ">"proxy"</codeph>. The default value is <codeph class="+ topic/ph pr-d/codeph ">"drm"</codeph>.
     <ul class="- topic/ul "><li class="- topic/li ">With <codeph class="+ topic/ph pr-d/codeph ">"drm"</codeph> authentication type, the credentials provided are authenticated against
     Flash Access.</li><li class="- topic/li ">With <codeph class="+ topic/ph pr-d/codeph ">"proxy"</codeph> authentication type, the credentials provided are authenticated against
     the proxy server and must match those required by the proxy server. For example, the <codeph class="+ topic/ph pr-d/codeph ">"proxy"</codeph>
     option allows the application to authenticate against a proxy server if an enterprise requires such a step
     before the user can access the Internet. Unless anonymous authentication is used, after the proxy authentication,
     the user still needs to authenticate against Flash Access in order to obtain the voucher and play the content.
     You can use <codeph class="+ topic/ph pr-d/codeph ">setDRMAuthenticationcredentials()</codeph> a second time, with <codeph class="+ topic/ph pr-d/codeph ">"drm"</codeph> option,
     to authenticate against Flash Access.</li></ul>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sets the DRM authentication credentials needed for viewing the underlying encrypted content.
     <p class="- topic/p ">
     The <codeph class="+ topic/ph pr-d/codeph ">setDRMAuthenticationCredentials()</codeph> method must provide credentials that
     match those known and accepted by the content provider or the proxy server. These are the same credentials used
     by the user when obtaining the permission to view the content.
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.events.xml#DRMAuthenticateEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.DRMAuthenticateEvent</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:step" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">step</apiName><shortdesc class="- topic/shortdesc ">
    Steps forward or back the specified number of frames, relative to the currently displayed frame.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">frames</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Steps forward or back the specified number of frames, relative to the currently displayed frame.
    Specify a positive number to step forward and a negative number to step in reverse.
    Call this method to create accurate fast forward or rewind functionality.
    
    <p class="- topic/p ">This method is available only when data is streaming from Flash Media Server 3.5.3 or higher
    and when <codeph class="+ topic/ph pr-d/codeph ">NetStream.inBufferSeek</codeph> is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Also, the target frame must be in the buffer.
    For example, if the currently displayed frame is frame number 120 and you specify a value
    of 1000, the method fails if frame number 1120 is not in the buffer.</p>
    
    <p class="- topic/p ">This method is intended to be used with the <codeph class="+ topic/ph pr-d/codeph ">pause()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">togglePause()</codeph> methods. If you
    step 10 frames forward or backward during playback without pausing, you may not notice the steps or they'll look like a glitch.
    Also, when you call <codeph class="+ topic/ph pr-d/codeph ">pause()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">togglePause</codeph> the audio is suppressed.</p>
    
    <p class="- topic/p ">If the call to <codeph class="+ topic/ph pr-d/codeph ">NetStream.step()</codeph> is successful, a NetStatusEvent is sent with "NetStream.Step.Notify"
    as the value of the info object's <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property. </p>
    
    <p class="- topic/p ">  </p>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/inBufferSeek" class="- topic/link "><linktext class="- topic/linktext ">inBufferSeek</linktext></link><link href="flash.net.xml#NetStream/backBufferTime" class="- topic/link "><linktext class="- topic/linktext ">backBufferTime</linktext></link><link href="flash.net.xml#NetStream/backBufferLength" class="- topic/link "><linktext class="- topic/linktext ">backBufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link><link href="flash.net.xml#NetStream/step()" class="- topic/link "><linktext class="- topic/linktext ">step()</linktext></link><link href="flash.net.xml#NetStream/seek()" class="- topic/link "><linktext class="- topic/linktext ">seek()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:togglePause" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">togglePause</apiName><shortdesc class="- topic/shortdesc ">
     Pauses or resumes playback of a stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.resume, resume
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Pauses or resumes playback of a stream.
     The first time you call this method, it pauses play; the next time, it resumes play.
     You could use this method to let users pause or resume playback by pressing
     a single button.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.net.xml#NetStream/pause()" class="- topic/link "><linktext class="- topic/linktext ">pause()</linktext></link><link href="flash.net.xml#NetStream/resume()" class="- topic/link "><linktext class="- topic/linktext ">resume()</linktext></link></related-links></apiOperation><apiValue id="flash.net:NetStream:CONNECT_TO_FMS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CONNECT_TO_FMS</apiName><shortdesc class="- topic/shortdesc ">
     A static object used as a parameter to
     the constructor for a NetStream instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">connectToFMS</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     A static object used as a parameter to
     the constructor for a NetStream instance. It is the default value of the second parameter
     in the NetStream constructor; it is
     not used by the application for progressive media playback. When used, this parameter causes the constructor to
     make a connection to a Flash Media Server instance.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:DIRECT_CONNECTIONS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DIRECT_CONNECTIONS</apiName><shortdesc class="- topic/shortdesc ">
     Creates a peer-to-peer publisher connection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">directConnections</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a peer-to-peer publisher connection. Pass this string for the second (optional) parameter to
     the constructor for a NetStream instance. With this string, an application can create
     a NetStream connection for the purposes of publishing audio and video to clients.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:audioReliable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioReliable</apiName><shortdesc class="- topic/shortdesc ">
     
     For RTMFP connections, specifies whether audio is sent with full reliability.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     For RTMFP connections, specifies whether audio is sent with full reliability.  When TRUE, all audio transmitted over this NetStream is fully reliable.
     When FALSE, the audio transmitted is not fully reliable, but instead is retransmitted for a limited time and then dropped.
     You can use the FALSE value to reduce latency at the expense of audio quality.
     
     <p class="- topic/p ">If you try to set this property to FALSE on a network protocol that does not support partial reliability,
     the attempt is ignored and the property is set to TRUE.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/dataReliable" class="- topic/link "><linktext class="- topic/linktext ">dataReliable</linktext></link><link href="flash.net.xml#NetStream/videoReliable" class="- topic/link "><linktext class="- topic/linktext ">videoReliable</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:audioSampleAccess:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioSampleAccess</apiName><shortdesc class="- topic/shortdesc ">
     
     For RTMFP connections, specifies whether peer-to-peer subscribers on this NetStream are allowed to capture the audio stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     For RTMFP connections, specifies whether peer-to-peer subscribers on this NetStream are allowed to capture the audio stream.
     When FALSE, subscriber attempts to capture the audio stream show permission errors.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/videoSampleAccess" class="- topic/link "><linktext class="- topic/linktext ">videoSampleAccess</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:backBufferLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">backBufferLength</apiName><shortdesc class="- topic/shortdesc ">
    The number of seconds of previously displayed data that currently cached for rewinding and playback.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    The number of seconds of previously displayed data that currently cached for rewinding and playback.
    
    <p class="- topic/p ">This property is available only when data is streaming from Flash Media Server 3.5.3 or higher;
    for more information on Flash Media Server, see the class description.</p>
    
    <p class="- topic/p ">To specify how much previously displayed data is cached, use the <codeph class="+ topic/ph pr-d/codeph ">Netstream.backBufferTime</codeph> property. </p>
    
    <p class="- topic/p "> To prevent data from being cached, set the <codeph class="+ topic/ph pr-d/codeph ">Netstream.inBufferSeek</codeph> property to FALSE.</p>
    
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/backBufferTime" class="- topic/link "><linktext class="- topic/linktext ">backBufferTime</linktext></link><link href="flash.net.xml#NetStream/inBufferSeek" class="- topic/link "><linktext class="- topic/linktext ">inBufferSeek</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:backBufferTime:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">backBufferTime</apiName><shortdesc class="- topic/shortdesc ">
    Specifies how much previously displayed data Flash Player tries to cache for rewinding and playback, in seconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies how much previously displayed data Flash Player tries to cache for rewinding and playback, in seconds.
    The default value is 30 seconds for desktop applications and 3 seconds for mobile applications.
    
    <p class="- topic/p ">This property is available only when data is streaming from Flash Media Server version 3.5.3 or later;
    for more information on Flash Media Server, see the class description.</p>
    
    <p class="- topic/p ">Using this property improves performance for rewind operations, as data that has already been displayed
    isn't retrieved from the server again. Instead, the stream begins replaying from the buffer.
    During playback, data continues streaming from the server until the buffer is full. </p>
    
    <p class="- topic/p ">If the rewind position is farther back than the data in the cache, the buffer is flushed;
    the data then starts streaming from the server at the requested position. </p>
    
    <p class="- topic/p ">To use this property set the <codeph class="+ topic/ph pr-d/codeph ">Netstream.inBufferSeek</codeph> property to TRUE.</p>
    
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/backBufferLength" class="- topic/link "><linktext class="- topic/linktext ">backBufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link><link href="flash.net.xml#NetStream/inBufferSeek" class="- topic/link "><linktext class="- topic/linktext ">inBufferSeek</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:bufferLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bufferLength</apiName><shortdesc class="- topic/shortdesc ">
     The number of seconds of data currently in the buffer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.bufferLength, bufferLength
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The number of seconds of data currently in the buffer. You can use this property with
     the <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> property to estimate how close the buffer is to being full — for example,
     to display feedback to a user who is waiting for data to be loaded into the buffer.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/backBufferLength" class="- topic/link "><linktext class="- topic/linktext ">backBufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link><link href="flash.net.xml#NetStream/bytesLoaded" class="- topic/link "><linktext class="- topic/linktext ">bytesLoaded</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:bufferTimeMax:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bufferTimeMax</apiName><shortdesc class="- topic/shortdesc ">
    Specifies a maximum buffer length for live streaming content, in seconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies a maximum buffer length for live streaming content, in seconds. The default value is 0.
    Buffer length can grow over time due to networking and device issues (such as clock drift between sender and receiver).
    Set this property to cap the buffer length for live applications such as meetings and surveillance.
    
    <p class="- topic/p "> When <codeph class="+ topic/ph pr-d/codeph ">bufferTimeMax &gt; 0</codeph> and <codeph class="+ topic/ph pr-d/codeph ">bufferLength &gt;= bufferTimeMax</codeph>, audio plays faster until
    <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> reaches <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph>. If a live stream is video-only, video plays faster
    until <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> reaches <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph>.</p>
    
    <p class="- topic/p ">Depending on how much playback is lagging (the difference between <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> and <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph>),
    Flash Player controls the rate of catch-up between 1.5% and 6.25%.
    If the stream contains audio, faster playback is achieved by frequency domain downsampling which minimizes audible distortion.</p>
    
    <p class="- topic/p ">Set the <codeph class="+ topic/ph pr-d/codeph ">bufferTimeMax</codeph> property to enable live buffered stream catch-up in the following cases:</p>
    
    <ul class="- topic/ul "><li class="- topic/li ">Streaming live media from Flash Media Server.</li><li class="- topic/li ">Streaming live media in Data Generation Mode (<codeph class="+ topic/ph pr-d/codeph ">NetStream.appendBytes()</codeph>).</li></ul>
    
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:bufferTime:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bufferTime</apiName><shortdesc class="- topic/shortdesc ">
     Specifies how long to buffer messages before starting to display the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.setBufferTime, setBufferTime
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies how long to buffer messages before starting to display the stream.
     
     <p class="- topic/p ">The default value is 0.1 (one-tenth of a second). To determine the number of seconds
     currently in the buffer, use the <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> property.</p>
     
     <p class="- topic/p ">To play a server-side playlist, set <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> to at least 1 second. If
     you experience playback issues, increase the length of <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph>.
     </p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Recorded content</b> To avoid distortion when streaming pre-recorded (not live) content,
     do not set the value of <codeph class="+ topic/ph pr-d/codeph ">Netstream.bufferTime</codeph> to 0. By default, the application
     uses an input buffer for pre-recorded content that queues the media data and plays the media properly.
     For pre-recorded content, use the default setting or increase the buffer time.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Live content</b> When streaming live content, set the <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> property to 0.</p>
     
     <p class="- topic/p ">Starting with Flash Player 9.0.115.0, Flash Player no longer clears the buffer
         when <codeph class="+ topic/ph pr-d/codeph ">NetStream.pause()</codeph> is called. Before Flash Player 9.0.115.0, Flash Player
         waited for the buffer to fill up before resuming playback, which often caused a delay.</p>
         
         <p class="- topic/p ">For a single pause, the <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> property has a limit of either 60 seconds
         or twice the value of <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferTime</codeph>, whichever value is higher. For example, if
         <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> is 20 seconds, Flash Player buffers until <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph>
         is the higher value of either 20~~2 (40), or 60. In this case it buffers until <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> is 60.
         If <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> is 40 seconds, Flash Player buffers until <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> is the higher value
         of 40~~2 (80), or 60. In this case it buffers until <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> is 80 seconds.</p>
         
         <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> property also has an absolute limit.
         If any call to <codeph class="+ topic/ph pr-d/codeph ">pause()</codeph> causes <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph>
         to increase more than 600 seconds or the value of <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> ~~ 2, whichever is higher, Flash Player
         flushes the buffer and resets <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> to 0. For example, if
         <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> is 120 seconds, Flash Player flushes the buffer
         if <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> reaches 600 seconds; if <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> is 360 seconds,
         Flash Player flushes the buffer if <codeph class="+ topic/ph pr-d/codeph ">bufferLength</codeph> reaches 720 seconds.</p>
         
         <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Tip</b>: You can use <codeph class="+ topic/ph pr-d/codeph ">NetStream.pause()</codeph> in code to buffer data while viewers are watching
         a commercial, for example, and then unpause when the main video starts.</p>
         
         <p class="- topic/p ">For more information about the new pause behavior,
         see <xref href="http://www.adobe.com/go/learn_fms_smartpause_en" scope="external" class="- topic/xref ">http://www.adobe.com/go/learn_fms_smartpause_en</xref>.</p>
     <p class="- topic/p ">
     <b class="+ topic/ph hi-d/b ">Flash Media Server</b>. The buffer behavior depends on whether the buffer time is
     set on a publishing stream or a subscribing stream.
     For a publishing stream, <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> specifies how long the outgoing buffer can
     grow before the application starts dropping frames.
     On a high-speed connection, buffer time is not a concern; data is sent
     almost as quickly as the application can buffer it. On a slow connection, however, there can
     be a significant difference between how fast the application buffers the data and how fast it
     is sent to the client.
     </p>
     
     <p class="- topic/p ">
     For a subscribing stream, <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> specifies how long to buffer incoming
     data before starting to display the stream.
     </p>
     
     <p class="- topic/p ">
     When a recorded stream is played, if <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph> is 0, Flash sets it to a small
     value (approximately 10 milliseconds). If live streams are later played
     (for example, from a playlist), this buffer time persists. That is, <codeph class="+ topic/ph pr-d/codeph ">bufferTime</codeph>
     remains nonzero for the stream.
     </p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/backBufferTime" class="- topic/link "><linktext class="- topic/linktext ">backBufferTime</linktext></link><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTimeMax" class="- topic/link "><linktext class="- topic/linktext ">bufferTimeMax</linktext></link><link href="flash.net.xml#NetStream/time" class="- topic/link "><linktext class="- topic/linktext ">time</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:bytesLoaded:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesLoaded</apiName><shortdesc class="- topic/shortdesc ">
     The number of bytes of data that have been loaded into the application.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.bytesLoaded, bytesLoaded
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The number of bytes of data that have been loaded into the application. You can use this property
     with the <codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph> property to estimate how close the buffer is to being full — for example,
     to display feedback to a user who is waiting for data to be loaded into the buffer.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/bytesTotal" class="- topic/link "><linktext class="- topic/linktext ">bytesTotal</linktext></link><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:bytesTotal:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesTotal</apiName><shortdesc class="- topic/shortdesc ">
     The total size in bytes of the file being loaded into the application.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.bytesTotal, bytesTotal
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The total size in bytes of the file being loaded into the application.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/bytesLoaded" class="- topic/link "><linktext class="- topic/linktext ">bytesLoaded</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:checkPolicyFile:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">checkPolicyFile</apiName><shortdesc class="- topic/shortdesc ">
     Specifies whether the application tries to download a cross-domain policy file from the
     loaded video file's server before beginning to load the video file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>: please review at same time: checkPolicyFile property in LoaderContext
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies whether the application tries to download a cross-domain policy file from the
     loaded video file's server before beginning to load the video file. Use this property for progressive video download,
     and to load files that are outside the calling SWF file's own domain.
     This property is ignored when you are using RTMP.
     
     <p class="- topic/p ">Set this property to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> to call <codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph> on a video file loaded from a
     domain outside that of the calling SWF. The <codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph> method provides pixel-level access to the video.
     If you call <codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph> without setting the <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> property
     to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> at loading time, you can get a <codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> exception
     because the required policy file was not downloaded.</p>
     
     <p class="- topic/p ">Do not set this property to true unless you want pixel-level access to the video you are loading.
     Checking for a policy file consumes network bandwidth and can delay the start of your download.</p>
     
     <p class="- topic/p ">When you call the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> method with <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>,
     <ph class="- topic/ph ">Flash Player or</ph> the AIR runtime
     must either successfully download a relevant cross-domain policy file or determine
     that no such policy file exists before it begins downloading. To verify the existence of a policy file,
     <ph class="- topic/ph ">Flash Player or</ph> the AIR runtime
     performs the following actions, in this order:</p>
     
     <ol class="- topic/ol "><li class="- topic/li ">The application considers policy files that have already been downloaded.</li><li class="- topic/li ">The application tries to download any pending policy files specified in calls to the
     <codeph class="+ topic/ph pr-d/codeph ">Security.loadPolicyFile()</codeph> method.</li><li class="- topic/li ">The application tries to download a policy file from the default
     location that corresponds to the URL you passed to <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph>, which is
     <codeph class="+ topic/ph pr-d/codeph ">/crossdomain.xml</codeph> on the same server as that URL.</li></ol>
     
     <p class="- topic/p ">In all cases, <ph class="- topic/ph ">Flash Player or</ph> Adobe AIR
     requires that an appropriate policy file exist on the video's server,
     that it provide access to the object at the URL you passed to <codeph class="+ topic/ph pr-d/codeph ">play()</codeph> based on the
     policy file's location, and that it allow the domain of the calling code's file to access the video,
     through one or more <codeph class="+ topic/ph pr-d/codeph ">&lt;allow-access-from&gt;</codeph> tags.</p>
     
     <p class="- topic/p ">If you set <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the application waits until the policy file
     is verified before downloading the video. Wait to perform any pixel-level
     operations on the video data, such as calling <codeph class="+ topic/ph pr-d/codeph ">BitmapData.draw()</codeph>, until
     you receive <codeph class="+ topic/ph pr-d/codeph ">onMetaData</codeph> or <codeph class="+ topic/ph pr-d/codeph ">NetStatus</codeph> events from your
     NetStream object.</p>
     
     <p class="- topic/p ">If you set <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> but no relevant policy file is found,
     you won't receive an error until you perform an operation that requires a policy file, and then
     the application throws a SecurityError exception.</p>
     
     <p class="- topic/p ">Be careful with <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> if you are downloading a file from a URL that
     uses server-side HTTP redirects. The application tries to retrieve policy files
     that correspond to the initial URL that you specify in <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph>. If the
     final file comes from a different URL because of HTTP redirects, the initially
     downloaded policy files might not be applicable to the file's final URL, which is the URL
     that matters in security decisions.</p>
     
     <p class="- topic/p ">For more information on policy files, see "Website controls (policy files)" in
     the <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i> and the Flash Player Developer Center Topic:
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#BitmapData/draw()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.BitmapData.draw()</linktext></link><link href="flash.system.xml#Security/loadPolicyFile()" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Security.loadPolicyFile()</linktext></link><link href="flash.net.xml#NetStream/event:netStatus" class="- topic/link "><linktext class="- topic/linktext ">netStatus</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData" class="- topic/link "><linktext class="- topic/linktext ">onMetaData</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:client:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">client</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the object on which callback methods are invoked to handle streaming or F4V/FLV
     file data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property must be set to a non-null object.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the object on which callback methods are invoked to handle streaming or F4V/FLV
     file data. The default object is <codeph class="+ topic/ph pr-d/codeph ">this</codeph>, the
     NetStream object being created. If you set the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property to another
     object, callback methods are invoked on that other object. The <codeph class="+ topic/ph pr-d/codeph ">NetStream.client
     </codeph> object can call the following functions and receive an associated data object:
     <codeph class="+ topic/ph pr-d/codeph ">onCuePoint()</codeph>,
     <codeph class="+ topic/ph pr-d/codeph ">onImageData()</codeph>,
     <codeph class="+ topic/ph pr-d/codeph ">onMetaData()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">onPlayStatus()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">onSeekPoint()</codeph>,
     <codeph class="+ topic/ph pr-d/codeph ">onTextData()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">onXMPData()</codeph>.
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">To associate the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property with an event handler:</b></p>
     <p class="- topic/p "><ol class="- topic/ol "><li class="- topic/li ">Create an object and assign it to the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property of the
     NetStream object:
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var customClient:Object = new Object();
     my_netstream.client = customClient;
     </codeblock>
     </li><li class="- topic/li ">Assign a handler function for the desired data event as a property of the client
     object:
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     customClient.onImageData = onImageDataHandler;
     </codeblock>
     </li><li class="- topic/li ">Write the handler function to receive the data event object, such as:
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
      public function onImageDataHandler(imageData:Object):void {
              trace("imageData length: " + imageData.data.length);
      }
     </codeblock></li></ol></p>
     <p class="- topic/p ">When data is passed through the stream or during playback, the data event object (in
     this case the <codeph class="+ topic/ph pr-d/codeph ">imageData</codeph> object) is populated with the data. See the <codeph class="+ topic/ph pr-d/codeph ">onImageData</codeph>
     description, which includes a full example of an object assigned to the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property.</p>
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">To associate the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property with a subclass:</b></p>
     <p class="- topic/p "><ol class="- topic/ol "><li class="- topic/li ">Create a subclass with a handler function to receive the data event object:
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     class CustomClient {
        public function onMetaData(info:Object):void {
            trace("metadata: duration=" + info.duration + " framerate=" + info.framerate);
     }
     </codeblock>
     </li><li class="- topic/li ">Assign an instance of the subclass to the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property  of the
     NetStream object:
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     my_netstream.client = new CustomClient();
     </codeblock>
     </li></ol></p>
     <p class="- topic/p ">When data is passed through the stream or during playback, the data event object (in
     this case the <codeph class="+ topic/ph pr-d/codeph ">info</codeph> object) is populated with the data. See the class example at
     the end of the NetStream class, which shows the assignment of a subclass instance
     to the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:onCuePoint" class="- topic/link "><linktext class="- topic/linktext ">onCuePoint</linktext></link><link href="flash.net.xml#NetStream/event:onImageData" class="- topic/link "><linktext class="- topic/linktext ">onImageData</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData" class="- topic/link "><linktext class="- topic/linktext ">onMetaData</linktext></link><link href="flash.net.xml#NetStream/event:onPlayStatus" class="- topic/link "><linktext class="- topic/linktext ">onPlayStatus</linktext></link><link href="flash.net.xml#NetStream/event:onSeekPoint" class="- topic/link "><linktext class="- topic/linktext ">onSeekPoint</linktext></link><link href="flash.net.xml#NetStream/event:onTextData" class="- topic/link "><linktext class="- topic/linktext ">onTextData</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:currentFPS:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">currentFPS</apiName><shortdesc class="- topic/shortdesc ">
     The number of frames per second being displayed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.currentFPS, currentFPS
     
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The number of frames per second being displayed. If you are exporting video files to be played back on a number
     of systems, you can check this value during testing to help you determine how much compression to apply when
     exporting the file.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:dataReliable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataReliable</apiName><shortdesc class="- topic/shortdesc ">
     
     For RTMFP connections, specifies whether NetStream.send() calls are sent with full reliability.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     For RTMFP connections, specifies whether <codeph class="+ topic/ph pr-d/codeph ">NetStream.send()</codeph> calls are sent with full reliability.
     When TRUE, <codeph class="+ topic/ph pr-d/codeph ">NetStream.send()</codeph> calls
     that are transmitted over this NetStream are fully reliable.
     When FALSE, <codeph class="+ topic/ph pr-d/codeph ">NetStream.send()</codeph> calls are not transmitted with full reliability,
     but instead are retransmitted for a limited time and then dropped.
     You can set this value to FALSE to reduce latency at the expense of data quality.
     
     <p class="- topic/p ">If you try to set this property to FALSE on a network protocol that does not support partial reliability,
     the attempt is ignored and the property is set to TRUE.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/audioReliable" class="- topic/link "><linktext class="- topic/linktext ">audioReliable</linktext></link><link href="flash.net.xml#NetStream/send()" class="- topic/link "><linktext class="- topic/linktext ">send()</linktext></link><link href="flash.net.xml#NetStream/videoReliable" class="- topic/link "><linktext class="- topic/linktext ">videoReliable</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:farID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">farID</apiName><shortdesc class="- topic/shortdesc ">
     For RTMFP connections, the identifier of the far end that is connected to this NetStream instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     For RTMFP connections, the identifier of the far end that is connected to this NetStream instance.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:farNonce:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">farNonce</apiName><shortdesc class="- topic/shortdesc ">
     For RTMFP and RTMPE connections, a value chosen substantially by the other end of this stream, unique to this connection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     For RTMFP and RTMPE connections, a value chosen substantially by the other end of this stream, unique to this connection.
     This value appears to the other end of the stream as its <codeph class="+ topic/ph pr-d/codeph ">nearNonce</codeph> value.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:inBufferSeek:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">inBufferSeek</apiName><shortdesc class="- topic/shortdesc ">
    Specifies whether displayed data is cached for smart seeking (TRUE), or not (FALSE).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>The following links work only if qualified with NetStream. We don't know why.
    </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies whether displayed data is cached for smart seeking (<codeph class="+ topic/ph pr-d/codeph ">TRUE</codeph>), or not (<codeph class="+ topic/ph pr-d/codeph ">FALSE</codeph>).
    The default value is FALSE.
    
    <p class="- topic/p "> Flash Media Server 3.5.3 and Flash Player 10.1 work together to support smart seeking.
    Smart seeking uses back and forward buffers to seek without requesting data from the server.
    Standard seeking flushes buffered data and asks the server to send new data based on the seek time.</p>
    
    <p class="- topic/p ">Call <codeph class="+ topic/ph pr-d/codeph ">NetStream.step()</codeph> to step forward and backward a specified number of frames. Call
    <codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph> to seek forward and backward a specified number of seconds.</p>
    
    <p class="- topic/p ">Smart seeking reduces server load and improves seeking performance. Set <codeph class="+ topic/ph pr-d/codeph ">inBufferSeek=true</codeph> and
    call <codeph class="+ topic/ph pr-d/codeph ">step()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">seek()</codeph> to create:</p>
    
    <ul class="- topic/ul "><li class="- topic/li ">Client-side DVR functionality. Seek within the client-side buffer instead of going to the server for delivery of new video.</li><li class="- topic/li ">Trick modes. Create players that step through frames, fast-forward, fast-rewind, and advance in slow-motion.</li></ul>
    
    <p class="- topic/p ">When <codeph class="+ topic/ph pr-d/codeph ">inBufferSeek=true</codeph> and a call to <codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph> is successful,
    the NetStatusEvent <codeph class="+ topic/ph pr-d/codeph ">info.description</codeph> property contains the string <codeph class="+ topic/ph pr-d/codeph ">"client-inBufferSeek"</codeph>.</p>
    
    <p class="- topic/p ">When a call to <codeph class="+ topic/ph pr-d/codeph ">NetStream.step()</codeph> is successful, the NetStatusEvent <codeph class="+ topic/ph pr-d/codeph ">info.code</codeph> property
    contains the string <codeph class="+ topic/ph pr-d/codeph ">"NetStream.Step.Notify"</codeph>.</p>
    
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/backBufferTime" class="- topic/link "><linktext class="- topic/linktext ">backBufferTime</linktext></link><link href="flash.net.xml#NetStream/backBufferLength" class="- topic/link "><linktext class="- topic/linktext ">backBufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link><link href="flash.net.xml#NetStream/step()" class="- topic/link "><linktext class="- topic/linktext ">step()</linktext></link><link href="flash.net.xml#NetStream/seek()" class="- topic/link "><linktext class="- topic/linktext ">seek()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:info:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">info</apiName><shortdesc class="- topic/shortdesc ">
     Returns a NetStreamInfo object whose properties contain statistics about the quality of service.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:NetStreamInfo</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a NetStreamInfo object whose properties contain statistics about the quality of service.
     The object is a snapshot of the current state.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStreamInfo</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:liveDelay:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">liveDelay</apiName><shortdesc class="- topic/shortdesc ">
     The number of seconds of data in the subscribing stream's
     buffer in live (unbuffered) mode.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><category class="- topic/category ">Property
     
     </category></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The number of seconds of data in the subscribing stream's
     buffer in live (unbuffered) mode. This property specifies the current
     network transmission delay (lag time).
     
     <p class="- topic/p ">This property is intended primarily for use with a server such as Flash Media Server;
     for more information, see the class description.</p>
     
     <p class="- topic/p ">You can get the value of this property to roughly gauge the transmission
     quality of the stream and communicate it to the user. </p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:maxPauseBufferTime:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">maxPauseBufferTime</apiName><shortdesc class="- topic/shortdesc ">
     Specifies how long to buffer messages during pause mode, in seconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies how long to buffer messages during pause mode, in seconds. This property can be used to limit how much buffering is done
     during pause mode. As soon as the value of <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> reaches
     this limit, it stops buffering.
     
     <p class="- topic/p ">If this value is not set, it defaults the limit to 60 seconds or twice the value of  <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferTime</codeph> on each pause,
     whichever is higher.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/bufferTime" class="- topic/link "><linktext class="- topic/linktext ">bufferTime</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:multicastAvailabilitySendToAll:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastAvailabilitySendToAll</apiName><shortdesc class="- topic/shortdesc ">
     For RTMFP connections, specifies whether peer-to-peer multicast fragment availability messages are
     sent to all peers or to just one peer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     For RTMFP connections, specifies whether peer-to-peer multicast fragment availability messages are
     sent to all peers or to just one peer.
     A value of TRUE specifies that the messages are sent to all peers once
     per specified interval. A value of FALSE specifies that the
     messages are sent to just one peer per specified interval. The interval
     is determined by the <codeph class="+ topic/ph pr-d/codeph ">multicastAvailabilityUpdatePeriod</codeph> property.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/multicastAvailabilityUpdatePeriod" class="- topic/link "><linktext class="- topic/linktext ">multicastAvailabilityUpdatePeriod</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:multicastAvailabilityUpdatePeriod:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastAvailabilityUpdatePeriod</apiName><shortdesc class="- topic/shortdesc ">
     For RTMFP connections, specifies the interval in seconds between messages sent to peers informing them that
     the local node has new peer-to-peer multicast media fragments available.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     For RTMFP connections, specifies the interval in seconds between messages sent to peers informing them that
     the local node has new peer-to-peer multicast media fragments available.
     Larger values can increase batching efficiency and reduce control overhead,
     but they can lower quality on the receiving end by reducing the amount of time available to retrieve
     fragments before they are out-of-window. Lower values can reduce latency and
     improve quality, but they increase control overhead.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/multicastAvailabilitySendToAll" class="- topic/link "><linktext class="- topic/linktext ">multicastAvailabilitySendToAll</linktext></link><link href="flash.net.xml#NetStream/multicastFetchPeriod" class="- topic/link "><linktext class="- topic/linktext ">multicastFetchPeriod</linktext></link><link href="flash.net.xml#NetStream/multicastWindowDuration" class="- topic/link "><linktext class="- topic/linktext ">multicastWindowDuration</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:multicastFetchPeriod:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastFetchPeriod</apiName><shortdesc class="- topic/shortdesc ">
     For RTMFP connections, specifies the time in seconds between when the local node learns that a peer-to-peer
     multicast media fragment is available and when it tries to fetch it from a peer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     For RTMFP connections, specifies the time in seconds between when the local node learns that a peer-to-peer
     multicast media fragment is available and when it tries to fetch it from a peer. This value gives an opportunity for the
     fragment to be proactively pushed to the local node before a fetch from a
     peer is attempted. It also allows for more than one peer to announce availability
     of the fragment, so the fetch load can be spread among multiple peers.
     
     <p class="- topic/p ">Larger values can improve load balancing and fairness in the peer-to-peer mesh,
     but reduce the available <codeph class="+ topic/ph pr-d/codeph ">multicastWindowDuration</codeph> and increase latency. Smaller values can
     reduce latency when fetching is required, but might increase duplicate data reception
     and reduce peer-to-peer mesh load balance.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/multicastAvailabilityUpdatePeriod" class="- topic/link "><linktext class="- topic/linktext ">multicastAvailabilityUpdatePeriod</linktext></link><link href="flash.net.xml#NetStream/multicastWindowDuration" class="- topic/link "><linktext class="- topic/linktext ">multicastWindowDuration</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:multicastInfo:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastInfo</apiName><shortdesc class="- topic/shortdesc ">
     For RTMFP connections, returns a NetStreamMulticastInfo object whose properties contain statistics about the quality of service.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:NetStreamMulticastInfo</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     For RTMFP connections, returns a NetStreamMulticastInfo object whose properties contain statistics about the quality of service.
     The object is a snapshot of the current state.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamMulticastInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStreamMulticastInfo</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:multicastPushNeighborLimit:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastPushNeighborLimit</apiName><shortdesc class="- topic/shortdesc ">
     For RTMFP connections, specifies the maximum number of peers to which to proactively push
     multicast media.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     For RTMFP connections, specifies the maximum number of peers to which to proactively push
     multicast media.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:multicastRelayMarginDuration:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastRelayMarginDuration</apiName><shortdesc class="- topic/shortdesc ">
     For RTMFP connections, specifies the duration in seconds that peer-to-peer multicast data remains
     available to send to peers that request it beyond a specified duration.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     For RTMFP connections, specifies the duration in seconds that peer-to-peer multicast data remains
     available to send to peers that request it beyond a specified duration. The duration is specified
     by the <codeph class="+ topic/ph pr-d/codeph ">multicastWindowDuration</codeph> property.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/multicastWindowDuration" class="- topic/link "><linktext class="- topic/linktext ">multicastWindowDuration</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:multicastWindowDuration:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multicastWindowDuration</apiName><shortdesc class="- topic/shortdesc ">
     For RTMFP connections, specifies the duration in seconds of the peer-to-peer multicast reassembly
     window.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     For RTMFP connections, specifies the duration in seconds of the peer-to-peer multicast reassembly
     window. Shorter values reduce latency but may reduce quality by not
     allowing enough time to obtain all of the fragments. Conversely, larger values may increase
     quality by providing more time to obtain all of the fragments, with a corresponding
     increase in latency.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/multicastRelayMarginDuration" class="- topic/link "><linktext class="- topic/linktext ">multicastRelayMarginDuration</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:nearNonce:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">nearNonce</apiName><shortdesc class="- topic/shortdesc ">
     For RTMFP and RTMPE connections, a value chosen substantially by this end of the stream, unique to this connection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     For RTMFP and RTMPE connections, a value chosen substantially by this end of the stream, unique to this connection.
     This value appears to the other end of the stream as its <codeph class="+ topic/ph pr-d/codeph ">farNonce</codeph> value.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:objectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     The object encoding (AMF version) for this NetStream object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The object encoding (AMF version) for this NetStream object. The NetStream object
     inherits its <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> value from the associated NetConnection object.
     It's important to understand this property if your ActionScript 3.0 SWF file needs to
     communicate with servers released prior to Flash Player 9.
     For more information, see the <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property description
     in the NetConnection class.
     
     <p class="- topic/p ">The value of this property depends on whether the stream is local or
     remote. Local streams, where <codeph class="+ topic/ph pr-d/codeph ">null</codeph> was passed to the
     <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> method, return the value of
     <codeph class="+ topic/ph pr-d/codeph ">NetConnection.defaultObjectEncoding</codeph>. Remote streams, where you
     are connecting to a server, return the object encoding of the connection to the server.</p>
     
     <p class="- topic/p ">If you try to read this property when not connected, or if you try to change this property,
     the application throws an exception.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/objectEncoding" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.objectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:peerStreams:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">peerStreams</apiName><shortdesc class="- topic/shortdesc ">
     
     An object that holds all of the subscribing NetStream instances that are listening to this publishing NetStream instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     An object that holds all of the subscribing NetStream instances that are listening to this publishing NetStream instance.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:soundTransform:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">soundTransform</apiName><shortdesc class="- topic/shortdesc ">
     Controls sound in this NetStream object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.media:SoundTransform</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Controls sound in this NetStream object. For more information, see the SoundTransform class.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#SoundTransform" class="- topic/link "><linktext class="- topic/linktext ">flash.media.SoundTransform</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:time:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">time</apiName><shortdesc class="- topic/shortdesc ">
     The position of the playhead, in seconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream.time, time
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The position of the playhead, in seconds.
     <p class="- topic/p ">
     <b class="+ topic/ph hi-d/b ">Flash Media Server</b> For a subscribing stream, the number of seconds
     the stream has been playing. For a publishing stream, the number of
     seconds the stream has been publishing.
     This number is accurate to the thousandths decimal place; multiply
     by 1000 to get the number of milliseconds the stream has been playing.
     </p>
     <p class="- topic/p ">
     For a subscribing stream, if the server stops sending data but the stream remains open,
     the value of the <codeph class="+ topic/ph pr-d/codeph ">time</codeph> property stops advancing. When the server begins sending data again,
     the value continues to advance from the point at which it stopped (when the server stopped sending data).
     </p>
     <p class="- topic/p ">
     The value of <codeph class="+ topic/ph pr-d/codeph ">time</codeph> continues to advance when the stream
     switches from one playlist element to another. This property is set to 0 when
     <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> is called with <codeph class="+ topic/ph pr-d/codeph ">reset</codeph> set to <codeph class="+ topic/ph pr-d/codeph ">1</codeph> or
     <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, or when <codeph class="+ topic/ph pr-d/codeph ">NetStream.close()</codeph> is called.
     </p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/bufferLength" class="- topic/link "><linktext class="- topic/linktext ">bufferLength</linktext></link><link href="flash.net.xml#NetStream/bytesLoaded" class="- topic/link "><linktext class="- topic/linktext ">bytesLoaded</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:videoReliable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoReliable</apiName><shortdesc class="- topic/shortdesc ">
     
     For RTMFP connections, specifies whether video is sent with full reliability.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     For RTMFP connections, specifies whether video is sent with full reliability.  When TRUE, all video transmitted over this NetStream is fully reliable.
     When FALSE, the video transmitted is not fully reliable, but instead is retransmitted for a limited time and then dropped.
     You can use the FALSE value to reduce latency at the expense of video quality.
     
     <p class="- topic/p ">If you try to set this property to FALSE on a network protocol that does not support partial reliability,
     the attempt is ignored and the property is set to TRUE.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/audioReliable" class="- topic/link "><linktext class="- topic/linktext ">audioReliable</linktext></link><link href="flash.net.xml#NetStream/dataReliable" class="- topic/link "><linktext class="- topic/linktext ">dataReliable</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:videoSampleAccess:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoSampleAccess</apiName><shortdesc class="- topic/shortdesc ">
     
     For RTMFP connections, specifies whether peer-to-peer subscribers on this NetStream are allowed to capture the video stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     For RTMFP connections, specifies whether peer-to-peer subscribers on this NetStream are allowed to capture the video stream.
     When FALSE, subscriber attempts to capture the video stream show permission errors.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/audioSampleAccess" class="- topic/link "><linktext class="- topic/linktext ">audioSampleAccess</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetMonitor" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetMonitor</apiName><shortdesc class="- topic/shortdesc ">
 The NetMonitor class allows you to monitor the NetStream objects used by an application.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="2.7" name="Flash" version="AIR" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The NetMonitor class allows you to monitor the NetStream objects used by an application.
 
 <p class="- topic/p ">Use the NetMonitor class to get the current list of NetStream objects in use in an application. An instance of this class 
 dispatches a <codeph class="+ topic/ph pr-d/codeph ">netStreamCreate</codeph> event whenever a new NetStream object is created.</p>
 
 <p class="- topic/p ">You can use the NetMonitor class to help track video playback and related events without regard to the specific
 video player being used. This facility can be helpful when implementing media measurement, analytics, and usage tracking
 libraries.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> NetStream monitoring is not supported by Flash Player in the browser on Android and Blackberry Tablet OS or
 by AIR on iOS.</p>
 
 </apiDesc><example conref="examples\NetMonitorExample.as" class="- topic/example "> This example demonstrates how the NetMonitor class can be used to gain access to 
 NetStream information without intimate knowledge of the specific video player in use.
 Here, the MediaPlayerSprite class from the Open Screen Media Framework (OSMF) project is used,
 but any video player could be substituted.
 
 <p class="- topic/p ">You can use the Space bar to pause and unpause the video in the example and the right and left arrows to seek
 forward or back 30 seconds to see the effects these actions have on the dispatched events.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.display.StageAlign;
    import flash.display.StageScaleMode;
    import flash.events.KeyboardEvent;
    import flash.events.NetDataEvent;
    import flash.events.NetMonitorEvent;
    import flash.events.NetStatusEvent;
    import flash.net.NetMonitor;
    import flash.net.NetStream;
    import flash.ui.Keyboard;
    
    import org.osmf.elements.VideoElement;
    import org.osmf.media.MediaPlayer;
    import org.osmf.media.MediaPlayerSprite;
    import org.osmf.net.DynamicStreamingItem;
    import org.osmf.net.DynamicStreamingResource;

    public class NetMonitorExample extends Sprite
    {
        private var netmon:NetMonitor;
        private var mediaPlayer:MediaPlayer;
        
        public function NetMonitorExample()
        {
            //Configure stage
            this.stage.align = StageAlign.TOP_LEFT;
            this.stage.scaleMode = StageScaleMode.NO_SCALE;
             
            //Create NetMonitor object
            netmon = new flash.net.NetMonitor();
            netmon.addEventListener(NetMonitorEvent.NET_STREAM_CREATE, newNetStream );    
            
            //Setup video player
            var mediaPlayerSprite:MediaPlayerSprite = new MediaPlayerSprite();
            var videoElement:VideoElement = new VideoElement();
            var dynResource:DynamicStreamingResource = new DynamicStreamingResource( "rtmp://cp67126.edgefcs.net/ondemand" );
            
            dynResource.streamItems = Vector.&lt;DynamicStreamingItem&gt;(
                [     new DynamicStreamingItem( "mp4:mediapm/ovp/content/demo/video/elephants_dream/elephants_dream_768x428_24.0fps_408kbps.mp4", 408, 768, 428 )
                    , new DynamicStreamingItem( "mp4:mediapm/ovp/content/demo/video/elephants_dream/elephants_dream_768x428_24.0fps_608kbps.mp4", 608, 768, 428 )
                    , new DynamicStreamingItem( "mp4:mediapm/ovp/content/demo/video/elephants_dream/elephants_dream_1024x522_24.0fps_908kbps.mp4", 908, 1024, 522 )
                    , new DynamicStreamingItem( "mp4:mediapm/ovp/content/demo/video/elephants_dream/elephants_dream_1024x522_24.0fps_1308kbps.mp4", 1308, 1024, 522 )
                    , new DynamicStreamingItem( "mp4:mediapm/ovp/content/demo/video/elephants_dream/elephants_dream_1280x720_24.0fps_1708kbps.mp4", 1708, 1280, 720 )
                ]);
            
            videoElement.resource = dynResource;
            
            addChild( mediaPlayerSprite );
            mediaPlayerSprite.media = videoElement;  
            mediaPlayer = mediaPlayerSprite.mediaPlayer;
            this.stage.addEventListener( KeyboardEvent.KEY_DOWN, keyControl ); 
        }    
        
        //On new NetStream
        private function newNetStream( event:NetMonitorEvent ):void
        {
            trace( "New Netstream object ");
            var stream:NetStream = event.netStream;
            stream.addEventListener(NetDataEvent.MEDIA_TYPE_DATA, onStreamData);
            stream.addEventListener(NetStatusEvent.NET_STATUS, onStatus);
        }
        
        //On data events from a NetStream object 
        private function onStreamData( event:NetDataEvent ):void
        {
            trace( "Data event at " + event.timestamp );
            var netStream:NetStream = event.target as NetStream;
            switch( event.info.handler )
            {
                case "onMetaData":
                    trace( "--MetaData: " +  stringify( netStream.info.metaData ));
                    break;
                case "onXMPData":
                    trace( "--XMPData: " + stringify( netStream.info.xmpData ));
                    break;
                default:
                    trace( "--" + event.info.handler + ": " + stringify(event.info.args[0]) );
                    
            }
        }
        
        //On status events from a NetStream object
        private function onStatus( event:NetStatusEvent ):void
        {
            trace( "Status: " + stringify( event.info ) );
        }
        
        //Utility function to print out object properties
        private function stringify( object:Object ):String
        {
            var string:String = "";
            
            var prop:String;
            var comma:Boolean = false;
            for ( prop in object )
            {
                if( comma ) string += ", ";
                else comma = true;
                
                if( typeof(object[prop]) == "object" ) 
                {
                    stringify( object[prop] )
                } else    string +=  prop + " = " + object[prop];
            }
            return string;
        }
        
        //Simple keyboard control for the video player
        private function keyControl( event:KeyboardEvent ):void
        {
            switch ( event.keyCode )
            {
                case Keyboard.SPACE:
                    if( mediaPlayer.paused ) mediaPlayer.play();
                    else mediaPlayer.pause();
                    break;
                case Keyboard.RIGHT:
                    mediaPlayer.seek( mediaPlayer.currentTime + 30 );
                    break;
                case Keyboard.LEFT:
                    mediaPlayer.seek( mediaPlayer.currentTime - 30 );
                    break;
                default:
                    //do nothing
            }
        }    
    }
} 
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">NetStream</linktext></link></related-links><adobeApiEvent id="flash.net:NetMonitor_flash.events.NetMonitorEvent.NET_STREAM_CREATE_netStreamCreate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">netStreamCreate</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a new NetStream object is created within the security context of this NetMonitor instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="2.7" name="Flash" version="AIR" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.NetMonitorEvent.NET_STREAM_CREATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.NetMonitorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a new NetStream object is created within the security context of this NetMonitor instance.
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> if the NetStream monitoring is not supported on the current platform, <codeph class="+ topic/ph pr-d/codeph ">netStreamCreate</codeph> events
 are not dispatched.</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.net:NetMonitor:listStreams" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">listStreams</apiName><shortdesc class="- topic/shortdesc ">
	 Retrieves all NetStream objects belonging to this NetMonitor object's security context.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="2.7" name="Flash" version="AIR" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vector of NetStream objects
 	</apiDesc><apiType value="Vector$flash.net:NetStream" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Retrieves all NetStream objects belonging to this NetMonitor object's security context.
 	 
 	 <p class="- topic/p ">Avoid caching the list of NetStream objects. Maintaining a reference to these NetStream objects
 	 can introduce memory leaks into an application by preventing the garbage collector from reclaiming 
 	 an object's resources when it is no longer being used.</p>
 	  
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> if the NetStream monitoring is not supported on the current platform, the list returned by 
	 this function is always empty.</p>
	 
 	 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier languages="" id="flash.net:NetStreamInfo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetStreamInfo</apiName><shortdesc class="- topic/shortdesc ">
 
 The NetStreamInfo class specifies the various Quality of Service (QOS) statistics and other information related to a NetStream object
 and the underlying streaming buffer for audio, video, and data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 
 The NetStreamInfo class specifies the various Quality of Service (QOS) statistics and other information related to a NetStream object
 and the underlying streaming buffer for audio, video, and data. A NetStreamInfo object is returned in response
 to the <codeph class="+ topic/ph pr-d/codeph ">NetStream.info</codeph> call, which takes a snapshot of the current QOS state
 and provides the QOS statistics through the NetStreamInfo properties.
 
 </apiDesc></apiClassifierDetail><apiOperation id="flash.net:NetStreamInfo:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
     Returns a text value listing the properties of the NetStreamInfo object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string containing the values of the properties of the NetStreamInfo object
     
     
      </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns a text value listing the properties of this NetStreamInfo object.
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a text value listing the properties of the NetStreamInfo object.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:NetStreamInfo:SRTT:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SRTT</apiName><shortdesc class="- topic/shortdesc ">
     The smoothed round trip time (SRTT) for the NetStream session, in milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The smoothed round trip time (SRTT) for the NetStream session, in milliseconds.
     This property contains a valid value only for RTMFP streams. For RTMP streams, the value is 0.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:audioBufferByteLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioBufferByteLength</apiName><shortdesc class="- topic/shortdesc ">
     Provides the NetStream audio buffer size in bytes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Provides the NetStream audio buffer size in bytes.
     It specifies the buffer size for audio data in streaming media, both live and recorded.
     This property is like <codeph class="+ topic/ph pr-d/codeph ">Netstream.bytesLoaded</codeph>,
     which is used in progressive downloads.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:audioBufferLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioBufferLength</apiName><shortdesc class="- topic/shortdesc ">
     Provides NetStream audio buffer size in seconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Provides NetStream audio buffer size in seconds. This property extends the <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> property
     and provides the buffer length in time specifically for audio data.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:audioByteCount:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioByteCount</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the total number of audio bytes that have arrived in the queue, regardless of how many have been played or flushed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the total number of audio bytes that have arrived in the queue, regardless of how many have been played or flushed.
     You can use this value to calculate the incoming audio data rate, using the metric of your choice, by creating a timer and calculating the difference in values
     in successive timer calls. Alternatively, use <codeph class="+ topic/ph pr-d/codeph ">audioBytesPerSecond</codeph>.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamInfo/audioBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">audioBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:audioBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the rate at which the NetStream audio buffer is filled in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the rate at which the NetStream audio buffer is filled in bytes per second. The value is calculated as a smooth
     average for the audio data received in the last second.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:audioLossRate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">audioLossRate</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the audio loss for the NetStream session.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the audio loss for the NetStream session. This value returns a valid value only for RTMFP streams and would return 0 for RTMP streams.
     Loss rate is defined as the ratio of lost messages to total messages.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:byteCount:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">byteCount</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the total number of bytes that have arrived into the queue, regardless of how many have been played or flushed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the total number of bytes that have arrived into the queue, regardless of how many have been played or flushed.
     You can use this value to calculate the incoming data rate, using the metric of your choice, by creating a timer and calculating the difference in values
     in successive timer calls. Alternatively, use <codeph class="+ topic/ph pr-d/codeph ">currentBytesPerSecond</codeph>.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamInfo/currentBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">currentBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:currentBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">currentBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the rate at which the NetStream buffer is filled in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the rate at which the NetStream buffer is filled in bytes per second. The value is calculated as a smooth
     average for the total data received in the last second.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:dataBufferByteLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataBufferByteLength</apiName><shortdesc class="- topic/shortdesc ">
     Provides the NetStream data buffer size in bytes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Provides the NetStream data buffer size in bytes.
     It specifies the buffer size for data messages in streaming media, both live and recorded.
     This property is like <codeph class="+ topic/ph pr-d/codeph ">Netstream.bytesLoaded</codeph>,
     which is used in progressive downloads.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:dataBufferLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataBufferLength</apiName><shortdesc class="- topic/shortdesc ">
     Provides NetStream data buffer size in seconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Provides NetStream data buffer size in seconds. This property extends the <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> property
     and provides the buffer length in time specifically for data messages.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:dataByteCount:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataByteCount</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the total number of bytes of data messages that have arrived in the queue, regardless of how many have been played or flushed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the total number of bytes of data messages that have arrived in the queue, regardless of how many have been played or flushed.
     You can use this value to calculate the incoming data-messages rate, using the metric of your choice,
     by creating a timer and calculating the difference in values in successive timer calls.
     Alternatively, use <codeph class="+ topic/ph pr-d/codeph ">dataBytesPerSecond</codeph>.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamInfo/dataBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">dataBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:dataBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the rate at which the NetStream data buffer is filled in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the rate at which the NetStream data buffer is filled in bytes per second. The value is calculated as a smooth
     average for the data messages received in the last second.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:droppedFrames:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">droppedFrames</apiName><shortdesc class="- topic/shortdesc ">
     Returns the number of video frames dropped in the current NetStream playback session.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns the number of video frames dropped in the current NetStream playback session.
     <p class="- topic/p ">In recorded streaming or progressive download, if the video is a high-quality or high-resolution, high-bitrate video,
     the decoder can lag behind in decoding the required number of frames per second if it does not have adequate
     system CPU resources. In live streaming, the buffer drops video frames if the latency is too high. This property specifies
     the number of frames that were dropped and not presented normally.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:isLive:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isLive</apiName><shortdesc class="- topic/shortdesc ">
      Whether the media being played is recorded or live.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Whether the media being played is recorded or live. This property is relevant for RTMP streaming only.  For 
      progressive download and HTTP Dynamic Streaming the property is always <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
      
 	  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> This property is always <codeph class="+ topic/ph pr-d/codeph ">false</codeph> in Flash Player in the browser on Android and Blackberry Tablet OS or
 	  in AIR on iOS.</p>
	  
      </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:maxBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">maxBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the maximum rate at which the NetStream buffer is filled in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the maximum rate at which the NetStream buffer is filled in bytes per second. This value provides information about the capacity of the
     client network based on the last messages received by the <codeph class="+ topic/ph pr-d/codeph ">NetStream</codeph> object. Depending on the size of the buffer specified in
     <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferTime</codeph> and the bandwidth available on the client, Flash Media Server fills the buffer in bursts.
     This property provides the maximum rate at which the client buffer is filled.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:metaData:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">metaData</apiName><shortdesc class="- topic/shortdesc ">
      The most recent metadata object associated with the media being played.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      The most recent metadata object associated with the media being played.
      
 	  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> This property is always <codeph class="+ topic/ph pr-d/codeph ">null</codeph> in Flash Player in the browser on Android and Blackberry Tablet OS or
 	  in AIR on iOS.</p>
	  
      </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:playbackBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">playbackBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Returns the stream playback rate in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns the stream playback rate in bytes per second. The playback buffer can contain content of various playlists.
     This property provides the playback rate that closely matches the bit rate of the currently playing stream.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:resourceName:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">resourceName</apiName><shortdesc class="- topic/shortdesc ">
      The resource name used when NetStream.play() was called.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The resource name used when NetStream.play() was called.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      The resource name used when <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> was called. This property contains the full URL for progressive
      download, the resource name for RTMP streaming and <codeph class="+ topic/ph pr-d/codeph ">null</codeph> for HTTP streaming.
      
 	  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> This property is always <codeph class="+ topic/ph pr-d/codeph ">null</codeph> in Flash Player in the browser on Android and Blackberry Tablet OS or
 	  in AIR on iOS.</p>
	  
	  </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="" invalidHref="flash.media.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.NetStream.play()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:uri:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">uri</apiName><shortdesc class="- topic/shortdesc ">
      The URI used when NetConnection.connect() was called.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The URI used when NetConnection.connect() was called.
	  
      </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      The URI used when <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> was called. This is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> for progressive download 
      or HTTP streaming.
      
 	  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> This property is always <codeph class="+ topic/ph pr-d/codeph ">null</codeph> in Flash Player in the browser on Android and Blackberry Tablet OS or
 	  in AIR on iOS.</p>
	  
	  </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="" invalidHref="flash.media.xml#NetConnection/uri" class="- topic/link "><linktext class="- topic/linktext ">flash.media.NetConnection.uri</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:videoBufferByteLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoBufferByteLength</apiName><shortdesc class="- topic/shortdesc ">
     Provides the NetStream video buffer size in bytes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Provides the NetStream video buffer size in bytes.
     It specifies the buffer size for video data in streaming media, both live and recorded.
     This property is like <codeph class="+ topic/ph pr-d/codeph ">Netstream.bytesLoaded</codeph>,
     which is used in progressive downloads.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:videoBufferLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoBufferLength</apiName><shortdesc class="- topic/shortdesc ">
     Provides NetStream video buffer size in seconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Provides NetStream video buffer size in seconds. This property extends the <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferLength</codeph> property
     and provides the buffer length in time specifically for video data.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:videoByteCount:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoByteCount</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the total number of video bytes that have arrived in the queue, regardless of how many have been played or flushed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the total number of video bytes that have arrived in the queue, regardless of how many have been played or flushed.
     You can use this value to calculate the incoming video data rate, using the metric of your choice,
     by creating a timer and calculating the difference in values in successive timer calls.
     Alternatively, use <codeph class="+ topic/ph pr-d/codeph ">videoBytesPerSecond</codeph>,
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamInfo/videoBytesPerSecond" class="- topic/link "><linktext class="- topic/linktext ">videoBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:videoBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the rate at which the NetStream video buffer is filled in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the rate at which the NetStream video buffer is filled in bytes per second. The value is calculated as a smooth
     average for the video data received in the last second.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:videoLossRate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoLossRate</apiName><shortdesc class="- topic/shortdesc ">
     Provides the NetStream video loss rate (ratio of lost messages to total messages).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Provides the NetStream video loss rate (ratio of lost messages to total messages).
     
     <p class="- topic/p ">When the message size is smaller than the maximum transmission unit (MTU), this value corresponds to
     the network packet loss rate.</p>
     
     <p class="- topic/p ">This property returns a valid value only for RTMFP streams. For RTMP streams, it returns a value of zero.
     For more information, see the
     <xref href="http://www.adobe.com/go/learn_fms_docs_en" scope="external" class="- topic/xref ">Flash Media Server documentation</xref>.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:xmpData:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">xmpData</apiName><shortdesc class="- topic/shortdesc ">
      The most recent XMP data object associated with the media being played.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      The most recent XMP data object associated with the media being played. 
      
 	  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> This property is always <codeph class="+ topic/ph pr-d/codeph ">null</codeph> in Flash Player in the browser on Android and Blackberry Tablet OS or
 	  in AIR on iOS.</p>
	  
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLStream</apiName><shortdesc class="- topic/shortdesc ">
 The URLStream class provides low-level access to
 downloading URLs.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseInterface>flash.utils:IDataInput</apiBaseInterface><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The URLStream class provides low-level access to
 downloading URLs. Data is made available to application code
 immediately as it is downloaded, instead of waiting until
 the entire file is complete as with URLLoader.
 The URLStream class also lets you close a stream
 before it finishes downloading. 
 The contents of the downloaded file are made available as raw binary data.
 
 <p class="- topic/p ">The read operations in URLStream are nonblocking.
 This means that you must use the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property to determine
 whether sufficient data is available before reading it.  An
 <codeph class="+ topic/ph pr-d/codeph ">EOFError</codeph> exception is thrown if insufficient
 data is available.</p>
 
 <p class="- topic/p ">All binary data is encoded by default in big-endian format, with the
 most significant byte first.</p>
 
 <p class="- topic/p ">The security rules that apply to URL downloading with the URLStream class are identical
 to the rules applied to URLLoader objects.
 Policy files may be downloaded as needed. Local file security rules are enforced,
 and security warnings are raised as needed.</p>

 
 </apiDesc><example conref="examples\URLStreamExample.as" class="- topic/example "> The following example loads a SWF file and parses the beginning of its header to indicate 
 compression and version number information. 
 <p class="- topic/p ">To run the example, place a file named URLStreamExample.swf in the same directory as your SWF file.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.errors.*;
    import flash.events.*;
    import flash.net.URLRequest;
    import flash.net.URLStream;

    public class URLStreamExample extends Sprite {
        private static const ZLIB_CODE:String = "CWS";
        private var stream:URLStream;

        public function URLStreamExample() {
            stream = new URLStream();
            var request:URLRequest = new URLRequest("URLStreamExample.swf");
            configureListeners(stream);
            try {
                stream.load(request);
            } catch (error:Error) {
                trace("Unable to load requested URL.");
            }
        }

        private function configureListeners(dispatcher:EventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
        }

        private function parseHeader():void {
            trace("parseHeader");
            trace("isCompressed: " + isCompressed());
            trace("version: " + stream.readByte());
        }

        private function isCompressed():Boolean {
            return (stream.readUTFBytes(3) == ZLIB_CODE);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
            parseHeader();
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:Event):void {
            trace("progressHandler: " + event);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLLoader" class="- topic/link "><linktext class="- topic/linktext ">URLLoader</linktext></link><link href="flash.net.xml#URLRequest" class="- topic/link "><linktext class="- topic/linktext ">URLRequest</linktext></link></related-links><adobeApiEvent id="flash.net:URLStream_flash.events.ProgressEvent.PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when data is received as the download operation progresses.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when data is received as the download operation progresses.
 Data that has been received can be read immediately using the methods of the URLStream class.
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/load()" class="- topic/link "><linktext class="- topic/linktext ">URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.Event.OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a load operation starts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a load operation starts.
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/load()" class="- topic/link "><linktext class="- topic/linktext ">URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an input/output error occurs that causes a load operation to fail.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an input/output error occurs that causes a load operation to fail. 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/load()" class="- topic/link "><linktext class="- topic/linktext ">URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched if a call to the URLStream.load() method attempts to access data over HTTP 
 and Adobe AIR is able to detect and return the status code for the request.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched if a call to the <codeph class="+ topic/ph pr-d/codeph ">URLStream.load()</codeph> method attempts to access data over HTTP 
 and Adobe AIR is able to detect and return the status code for the request. 
 
 <p class="- topic/p ">If a URLStream object registers for an <codeph class="+ topic/ph pr-d/codeph ">httpStatusEvent</codeph> event, error responses  
 are delivered as though they are content. So instead of dispatching an <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> 
 event, the URLStream dispatches <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> and <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> events as 
 the error data is loaded into the URLStream.</p>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/load()" class="- topic/link "><linktext class="- topic/linktext ">URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched if a call to URLStream.load() 
 attempts to access data over HTTP, and Flash Player or  Adobe AIR
 is able to detect and return the status code for the request.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched if a call to <codeph class="+ topic/ph pr-d/codeph ">URLStream.load()</codeph> 
 attempts to access data over HTTP, and <ph class="- topic/ph ">Flash Player or </ph> Adobe AIR
 is able to detect and return the status code for the request. (Some browser environments
 may not be able to provide this information.) Note that the <codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> 
 (if any) will be sent before (and in addition to) any <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>
 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/load()" class="- topic/link "><linktext class="- topic/linktext ">URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched if a call to URLStream.load() 
 attempts to load data from a server outside the security sandbox.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched if a call to <codeph class="+ topic/ph pr-d/codeph ">URLStream.load()</codeph> 
 attempts to load data from a server outside the security sandbox.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/load()" class="- topic/link "><linktext class="- topic/linktext ">URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when data has loaded successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when data has loaded successfully. 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.net:URLStream:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Immediately closes the stream and
     cancels the download operation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The stream could not be closed, or the stream was not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Immediately closes the stream and
     cancels the download operation.
     No data can be read from the stream after the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method is called.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:load" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">load</apiName><shortdesc class="- topic/shortdesc ">
     Begins downloading the URL specified in the request parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">URLRequest.requestHeader</codeph> objects may not contain
     certain prohibited HTTP request headers. For more information, see the URLRequestHeader class
     description.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This error can occur for the following reasons:
     
     <ol class="- topic/ol "><li class="- topic/li ">Flash Player or Adobe AIR cannot convert the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.data</codeph> parameter from UTF8 to MBCS. This error is
     applicable if the URLRequest object passed to <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> is set to perform a <codeph class="+ topic/ph pr-d/codeph ">GET</codeph> operation
     and if <codeph class="+ topic/ph pr-d/codeph ">System.useCodePage</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</li><li class="- topic/li ">Flash Player or Adobe AIR cannot allocate memory for
     the <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> data. This error is applicable if the URLRequest object passed to load is set
     to perform a <codeph class="+ topic/ph pr-d/codeph ">POST</codeph> operation.</li></ol>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">MemoryError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:MemoryError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Local untrusted SWF files may not communicate with
     the Internet. This may be worked around by reclassifying this SWF file
     as local-with-networking or trusted.
     
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You are trying to connect to a commonly reserved port. 
      For a complete list of blocked ports, see "Restricting Networking APIs" in the 
      <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">request</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A URLRequest object specifying the URL to download. If the value of
     this parameter or the <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph> property of the URLRequest object
     passed are <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, the application throws a null pointer error.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Begins downloading the URL specified in the <codeph class="+ topic/ph pr-d/codeph ">request</codeph> parameter.
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: If a file being loaded contains non-ASCII characters
     (as found in many non-English languages), it is recommended that you save the file
     with UTF-8 or UTF-16 encoding, as opposed to a non-Unicode format like ASCII.</p>
     
     <p class="- topic/p ">If the loading operation fails immediately, an IOError or SecurityError
     (including the local file security error) exception is thrown describing the failure.
     Otherwise, an <codeph class="+ topic/ph pr-d/codeph ">open</codeph> event is dispatched if the URL download
     starts downloading successfully, or an error event is dispatched if an error occurs.</p>
     
     <p class="- topic/p ">By default, the calling SWF file and the URL you load must be in exactly the same domain.
     For example, a SWF file at www.adobe.com can load data only from sources that are also at www.adobe.com. 
     To load data from a different domain, place a URL policy file on the server hosting the data.</p>
     
     <p class="- topic/p ">In Flash Player, you cannot connect to commonly reserved ports. 
     For a complete list of blocked ports, see "Restricting Networking APIs" in the 
     <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</p>
     
     <p class="- topic/p ">In Flash Player, you can prevent a SWF file from using this method by setting the 
     <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> parameter of the the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> 
     tags in the HTML page that contains the SWF content.</p>
     
     <p class="- topic/p "> In Flash Player 10 and later, and in AIR 1.5 and later, if you use a multipart 
     Content-Type (for example "multipart/form-data") 
     that contains an upload (indicated by a "filename" parameter in a "content-disposition" header within the POST body),
     the POST operation is subject to the security rules applied to uploads:</p>
     <ul class="- topic/ul "><li class="- topic/li ">The POST operation must be performed in response to a user-initiated action, such as a mouse click or key press.</li><li class="- topic/li ">If the POST operation is cross-domain (the POST target is not on the same server as the SWF file 
     that is sending the POST request),
     the target server must provide a URL policy file that permits cross-domain access.</li></ul>
     <p class="- topic/p ">Also, for any multipart Content-Type, the syntax must be valid (according to the RFC2046 standards).
     If the syntax appears to be invalid, the POST operation is subject to the security rules applied to uploads.</p>
     
     <p class="- topic/p ">These rules also apply to AIR content in non-application sandboxes. 
     However, in Adobe AIR, content in the application sandbox (content installed with the AIR application) 
     are not restricted by these security limitations.</p>
     
     <p class="- topic/p ">For more information related to security, see The Flash Player Developer Center Topic: 
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     <p class="- topic/p ">In AIR, a URLRequest object can register for the <codeph class="+ topic/ph pr-d/codeph ">httpResponse</codeph> status event.
     Unlike the <codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> event, the <codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> event is 
     delivered before any response data. Also, the <codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> event includes 
     values for the <codeph class="+ topic/ph pr-d/codeph ">responseHeaders</codeph> and <codeph class="+ topic/ph pr-d/codeph ">responseURL</codeph> properties (which are 
     undefined for an <codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> event. Note that the <codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> event
     (if any) will be sent before (and in addition to) any <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 
     event. 
     </p>
     
     
     <p class="- topic/p ">If there <i class="+ topic/ph hi-d/i ">is</i> an <codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> event listener, the body of the response 
     message is <i class="+ topic/ph hi-d/i ">always</i> sent; and HTTP status code responses always results in a <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event. 
     This is true in spite of whether the HTTP response status code indicates a success or an error.</p> 
     
     <p class="- topic/p "><ph class="- topic/ph ">In AIR, if</ph> there is 
     <i class="+ topic/ph hi-d/i ">no</i> <codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> event listener, the behavior differs
     based on the <ph class="- topic/ph ">SWF</ph> version:</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><ph class="- topic/ph ">For SWF 9 content</ph>, the body of 
     the HTTP response message is sent <i class="+ topic/ph hi-d/i ">only if</i> the HTTP response status code indicates success. 
     Otherwise (if there is an error), no body is sent and the URLRequest object dispatches an IOError event.</li><li class="- topic/li "><ph class="- topic/ph ">For SWF 10 content</ph>, the body of 
     the HTTP response message is <i class="+ topic/ph hi-d/i ">always</i> sent. If there is an error, the URLRequest object dispatches
     an IOError event.</li></ul>
     
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.net:URLStream:load_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched after data has loaded successfully. If there is a <codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph>
     event listener, the URLRequest object also dispatches a <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event whether the HTTP response status code 
     indicates a success <i class="+ topic/ph hi-d/i ">or</i> an error.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched after data has loaded successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If access is by HTTP <ph class="- topic/ph ">and 
     the current environment supports obtaining status codes</ph>, you may
     receive these events in addition to any <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>
     or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">If access is by HTTP and 
     the current environment supports obtaining status codes, you may
     receive these events in addition to any complete
     or error event.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched if a call to the <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> method attempts
     to access data over HTTP and Adobe AIR is able to detect and return the status code for the request. 
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched if a call to the load() method attempts
     to access data over HTTP and Adobe AIR is able to detect and return the status code for the request.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The load operation could not be
     completed.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">The load operation could not be
     completed.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when a load operation starts.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when a load operation starts.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A load operation attempted
     to retrieve data from a server outside the caller's security sandbox.
     This may be worked around using a policy file on the server.
      
      </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">A load operation attempted
     to retrieve data from a server outside the caller's security sandbox.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:URLStream:readBoolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBoolean</apiName><shortdesc class="- topic/shortdesc ">
     Reads a Boolean value from the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">There is insufficient 
     data available to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the stream,
     or the stream is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">True</codeph> is returned if the byte is nonzero, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads a Boolean value from the stream. A single byte is read,
     and <codeph class="+ topic/ph pr-d/codeph ">true</codeph> is returned if the byte is nonzero,
     <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readByte</apiName><shortdesc class="- topic/shortdesc ">
     Reads a signed byte from the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">There is insufficient 
     data available to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the stream,
     or the stream is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Value in the range -128...127.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads a signed byte from the stream.
     <p class="- topic/p ">The returned value is in the range -128...127.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBytes</apiName><shortdesc class="- topic/shortdesc ">
     Reads length bytes of data from the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">There is insufficient 
     data available to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the stream, or the stream is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The ByteArray object to read
                  data into.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The offset into <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> at which data
                   read should begin.  Defaults to 0.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of bytes to read.  The default value
                   of 0 will cause all available data to be read.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads <codeph class="+ topic/ph pr-d/codeph ">length</codeph> bytes of data from the stream.
     The bytes are read into the ByteArray object specified
     by <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph>, starting <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> bytes into
     the ByteArray object.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readDouble" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readDouble</apiName><shortdesc class="- topic/shortdesc ">
     Reads an IEEE 754 double-precision floating-point number from the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">There is insufficient 
     data available to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the stream,
     or the stream is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An IEEE 754 double-precision floating-point number from the stream.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads an IEEE 754 double-precision floating-point number from the stream.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readFloat</apiName><shortdesc class="- topic/shortdesc ">
     Reads an IEEE 754 single-precision floating-point number from the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">There is insufficient 
     data available to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the stream,
     or the stream is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An IEEE 754 single-precision floating-point number from the stream.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads an IEEE 754 single-precision floating-point number from the stream.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readInt</apiName><shortdesc class="- topic/shortdesc ">
     Reads a signed 32-bit integer from the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">There is insufficient 
     data available to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the stream,
     or the stream is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Value in the range -2147483648...2147483647.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads a signed 32-bit integer from the stream.
     <p class="- topic/p ">The returned value is in the range -2147483648...2147483647.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readMultiByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readMultiByte</apiName><shortdesc class="- topic/shortdesc ">
     Reads a multibyte string of specified length from the byte stream using the
     specified character set.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">URLStream, URLStream.readMultiByte, readMultiByte
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">There is insufficient 
     data available to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">UTF-8 encoded string.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of bytes from the byte stream to read.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charSet</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string denoting the character set to use to interpret the bytes. 
     Possible character set strings include <codeph class="+ topic/ph pr-d/codeph ">"shift_jis"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"CN-GB"</codeph>,
     <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph>, and others.
     For a complete list, see <xref href="../../charset-codes.html" class="- topic/xref ">Supported Character Sets</xref>.    
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> If the value for the <codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> parameter is not recognized 
     by the current system, the application uses the system's default code page as the character set. 
     For example, a value for the <codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> parameter, as in 
     <codeph class="+ topic/ph pr-d/codeph ">myTest.readMultiByte(22, "iso-8859-01")</codeph> that uses <codeph class="+ topic/ph pr-d/codeph ">01</codeph> instead of <codeph class="+ topic/ph pr-d/codeph ">1</codeph> 
     might work on your development machine, but not on another machine. On the other machine, 
     the application will use the system's default code page.</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads a multibyte string of specified length from the byte stream using the
     specified character set.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readObject</apiName><shortdesc class="- topic/shortdesc ">
     Reads an object from the socket, encoded in Action Message Format (AMF).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">There is insufficient data available
     to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the stream,
     or the stream is not open.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The deserialized object.
     </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads an object from the socket, encoded in Action Message Format (AMF).
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding</linktext></link></related-links></apiOperation><apiOperation id="flash.net:URLStream:readShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readShort</apiName><shortdesc class="- topic/shortdesc ">
     Reads a signed 16-bit integer from the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">There is insufficient 
     data available to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the stream,
     or the stream is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Value in the range -32768...32767.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads a signed 16-bit integer from the stream.
     <p class="- topic/p ">The returned value is in the range -32768...32767.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUTFBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTFBytes</apiName><shortdesc class="- topic/shortdesc ">
     Reads a sequence of length UTF-8
     bytes from the stream, and returns a string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">There is insufficient 
     data available to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the stream,
     or the stream is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A UTF-8 string produced by the byte representation of characters of specified length.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A sequence of UTF-8 bytes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads a sequence of <codeph class="+ topic/ph pr-d/codeph ">length</codeph> UTF-8
     bytes from the stream, and returns a string.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUTF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTF</apiName><shortdesc class="- topic/shortdesc ">
     Reads a UTF-8 string from the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">There is insufficient 
     data available to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the stream,
     or the stream is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A UTF-8 string.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads a UTF-8 string from the stream.  The string
     is assumed to be prefixed with an unsigned short indicating
     the length in bytes.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUnsignedByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedByte</apiName><shortdesc class="- topic/shortdesc ">
     Reads an unsigned byte from the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">There is insufficient 
     data available to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.</ph>
     

     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the stream,
     or the stream is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Value in the range 0...255.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads an unsigned byte from the stream.
     <p class="- topic/p ">The returned value is in the range 0...255. </p>     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUnsignedInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedInt</apiName><shortdesc class="- topic/shortdesc ">
     Reads an unsigned 32-bit integer from the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">There is insufficient 
     data available to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the stream,
     or the stream is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Value in the range 0...4294967295.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads an unsigned 32-bit integer from the stream.
     <p class="- topic/p ">The returned value is in the range 0...4294967295. </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUnsignedShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedShort</apiName><shortdesc class="- topic/shortdesc ">
     Reads an unsigned 16-bit integer from the stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><ph class="- topic/ph ">There is insufficient 
     data available to read. If a local SWF file triggers a security warning,
     Flash Player prevents the URLStream data from being available to ActionScript.
     When this happens, the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property returns 0 even if data has been
     received, and any of the read methods throws an EOFError exception.</ph>
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An I/O error occurred on the stream,
     or the stream is not open.
      
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Value in the range 0...65535.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reads an unsigned 16-bit integer from the stream.
     <p class="- topic/p ">The returned value is in the range 0...65535. </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:URLStream:bytesAvailable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesAvailable</apiName><shortdesc class="- topic/shortdesc ">
     Returns the number of bytes of data available for reading
     in the input buffer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns the number of bytes of data available for reading
     in the input buffer.
     Your code must call the <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> property to ensure
     that sufficient data is available before you try to read
     it with one of the <codeph class="+ topic/ph pr-d/codeph ">read</codeph> methods.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLStream:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether this URLStream object is
     currently connected.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether this URLStream object is
     currently connected. A call to this property returns a value of <codeph class="+ topic/ph pr-d/codeph ">true</codeph>
     if the URLStream object is connected, or <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLStream:endian:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">endian</apiName><shortdesc class="- topic/shortdesc ">
     Indicates the byte order for the data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiDefaultValue>Endian.BIG_ENDIAN
     </apiDefaultValue></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates the byte order for the data. Possible values are 
     <codeph class="+ topic/ph pr-d/codeph ">Endian.BIG_ENDIAN</codeph> or <codeph class="+ topic/ph pr-d/codeph ">Endian.LITTLE_ENDIAN</codeph>.
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.utils.xml#Endian" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.Endian</linktext></link></related-links></apiValue><apiValue id="flash.net:URLStream:objectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     Controls the version of Action Message Format (AMF) used when writing or reading an object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Property documented; needs review
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Controls the version of Action Message Format (AMF) used when writing or reading an object.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/readObject()" class="- topic/link "><linktext class="- topic/linktext ">readObject()</linktext></link><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding class</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetGroupSendMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetGroupSendMode</apiName><shortdesc class="- topic/shortdesc ">
The NetGroupSendMode class is an enumeration of constant values used for the sendMode parameter of the NetGroup.sendToNeighbor()
method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">An enumeration of constant values used for the sendMode parameter of the sendToNeighbor() method in the NetGroup class.
method of the <codeph class="+ topic/ph pr-d/codeph ">NetGroup</codeph> class

</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
The NetGroupSendMode class is an enumeration of constant values used for the <codeph class="+ topic/ph pr-d/codeph ">sendMode</codeph> parameter of the <codeph class="+ topic/ph pr-d/codeph ">NetGroup.sendToNeighbor()</codeph>
method.

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNeighbor()</linktext></link></related-links><apiValue id="flash.net:NetGroupSendMode:NEXT_DECREASING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NEXT_DECREASING</apiName><shortdesc class="- topic/shortdesc "> 
    Specifies the neighbor with the nearest group address in the decreasing direction.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">nextDecreasing</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Specifies the neighbor with the nearest group address in the decreasing direction.
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetGroupSendMode:NEXT_INCREASING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NEXT_INCREASING</apiName><shortdesc class="- topic/shortdesc "> 
    Specifies the neighbor with the nearest group address in the increasing direction.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">nextIncreasing</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Specifies the neighbor with the nearest group address in the increasing direction.
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:SharedObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SharedObject</apiName><shortdesc class="- topic/shortdesc ">
 The SharedObject class is used to read and store limited amounts of data on a user's computer
 or on a server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">SharedObject, shared object, constructor
 
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The SharedObject class is used to read and store limited amounts of data on a user's computer
 or on a server.
 Shared objects offer real-time data sharing between multiple client SWF files and objects
 that are persistent on the local computer or remote server. Local shared objects are similar 
 to browser cookies and remote shared objects are similar to real-time data transfer devices. 
 To use remote shared objects, you need Adobe Flash Media Server.
 
 <p class="- topic/p ">Use shared objects to do the following:</p>
 
 <ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Maintain local persistence</b>.
 This is the simplest way to use a shared object, and does not require Flash Media Server.
 For example, you can call <codeph class="+ topic/ph pr-d/codeph ">SharedObject.getLocal()</codeph> to create a shared object in an
 application, such as a calculator with memory. When the user closes the calculator,
 Flash Player saves the last value in a shared object on the user's computer.
 The next time the calculator is run, it contains the values it had previously.
 Alternatively, if you set the shared object's properties to <codeph class="+ topic/ph pr-d/codeph ">null</codeph> before the
 calculator application is closed,  the next time the 
 application runs, it opens without any values.
 
 Another example of maintaining local persistence is tracking user preferences or 
 other data for a complex website, such as a record of which
 articles a user read on a news site. Tracking this information allows you to display
 articles that have already been read differently from new, unread articles. 
 Storing this information on the user's computer reduces server load.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Store and share data on Flash Media Server</b>. 
 A shared object can store data on the server for other clients to retrieve.
 For example, call <codeph class="+ topic/ph pr-d/codeph ">SharedObject.getRemote()</codeph> to create a remote shared object, 
 such as a phone list, that is persistent on the server. Whenever a client makes changes
 to the shared object, the revised data is available to all clients currently 
 connected to the object or who later connect to it. If the object is also persistent locally, 
 and a client changes data while not connected to the server, the data is copied to the remote shared 
 object the next time the client connects to the object.</li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Share data in real time</b>.
 A shared object can share data among multiple clients in real time. 
 For example, you can open a remote shared object that stores
 a list of users connected to a chat room that is visible to all clients
 connected to the object. When a user enters or leaves the chat room, the object 
 is updated and all clients that are connected to the object see the revised list
 of chat room users.</li></ul>
 
 <p class="- topic/p "> To create a local shared object, call <codeph class="+ topic/ph pr-d/codeph ">SharedObject.getLocal()</codeph>. To create
 a remote shared object, call <codeph class="+ topic/ph pr-d/codeph ">SharedObject.getRemote()</codeph>.</p> 
 
 <p class="- topic/p "> When an application closes, shared objects are <i class="+ topic/ph hi-d/i ">flushed</i>, or written to a disk.
 You can also call the <codeph class="+ topic/ph pr-d/codeph ">flush()</codeph> method to explicitly write data to a disk.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Local disk space considerations.</b> Local shared objects have some limitations 
 that are important to consider as you design your application.
 Sometimes SWF files may not be allowed to write local shared objects, and sometimes the data
 stored in local shared objects can be deleted without your knowledge. Flash Player users 
 can manage the disk space that is available to individual domains or
 to all domains. When users decrease the amount of disk space available, some local shared
 objects may be deleted. Flash Player users also have privacy controls that can prevent
 third-party domains (domains other than the domain in the current browser address bar) from
 reading or writing local shared objects.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: SWF files that are stored and run on a local computer, not from a remote server,
 can always write third-party shared objects to disk.
 For more information about third-party shared objects, see the
 <xref href="http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager03.html" scope="external" class="- topic/xref ">Global Storage Settings panel</xref> in Flash Player Help.</p>
 
 <p class="- topic/p ">It's a good idea to check for failures related to the amount of disk space and to
 user privacy controls. Perform these checks when you call <codeph class="+ topic/ph pr-d/codeph ">getLocal()</codeph> and
 <codeph class="+ topic/ph pr-d/codeph ">flush()</codeph>:
 
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SharedObject.getLocal()</codeph> — Flash Player throws an exception when 
 a call to this method fails, such as when the user has disabled
 third-party shared objects and the domain of your SWF file does not match the domain in the browser
 address bar.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SharedObject.flush()</codeph> — Flash Player throws an exception
 when a call to this method fails. It returns <codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushStatus.FLUSHED</codeph> when it succeeds.
 It returns <codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushStatus.PENDING</codeph>
 when additional storage space is needed. Flash Player prompts the user to allow an increase
 in storage space for locally saved information. Thereafter, the <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event
 is dispatched with an information object indicating whether the flush failed or succeeded.</li></ul></p>
 
 <p class="- topic/p ">If your SWF file attempts to create or modify local shared objects, make sure
 that your SWF file is at least 215 pixels wide and at least 138 pixels high (the 
 minimum dimensions for displaying the dialog box that prompts users to increase their 
 local shared object storage limit). If your SWF file is smaller than these dimensions and an
 increase in the storage limit is required, <codeph class="+ topic/ph pr-d/codeph ">SharedObject.flush()</codeph> fails,
 returning <codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushedStatus.PENDING</codeph> and dispatching the <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event.</p>
 
 <p class="- topic/p ">
 <b class="+ topic/ph hi-d/b ">Remote shared objects.</b> 
 With Flash Media Server, you can create and use remote shared objects, 
 that are shared in real-time by all clients connected to your application.
 When one client changes a property of a remote shared object, the property 
 is changed for all connected clients.
 You can use remote shared objects to synchronize clients, for example, users
 in a multi-player game.
 </p>
 
 <p class="- topic/p ">
 Each remote shared object has a <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property which is an Object with properties
 that store data. Call <codeph class="+ topic/ph pr-d/codeph ">setProperty()</codeph> 
 to change an property of the data object.
 The server updates the properties, dispatches a <codeph class="+ topic/ph pr-d/codeph ">sync</codeph> event, and
 sends the properties back to the connected clients. 
 </p>
 
 <p class="- topic/p ">
 You can choose to make remote shared objects persistent on the client, the server,
 or both. By default, Flash Player saves locally persistent remote shared objects up to 100K in size. 
 When you try to save a larger object, Flash Player displays the Local Storage dialog box, 
 which lets the user allow or deny local storage for the shared object. 
 Make sure your Stage size is at least 215 by 138 pixels; this is the minimum size Flash 
 requires to display the dialog box.
 </p>
 <p class="- topic/p ">
 If the user selects Allow, the server saves the shared object and 
 dispatches a <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event with a <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property of 
 <codeph class="+ topic/ph pr-d/codeph ">SharedObject.Flush.Success</codeph>.
 If the user select Deny, the server does not save the shared object and dispatches
 a <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event
 with a <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property of <codeph class="+ topic/ph pr-d/codeph ">SharedObject.Flush.Failed</codeph>.
 </p>
 
 </apiDesc><example conref="examples\SharedObjectExample.as" class="- topic/example "> The following code creates (and on subsequent executions, retrieves) a shared object
 object using the ID <codeph class="+ topic/ph pr-d/codeph ">"application-name"</codeph>. When the Save button is clicked, the
 <codeph class="+ topic/ph pr-d/codeph ">saveValue()</codeph> method attempts to save a property named <codeph class="+ topic/ph pr-d/codeph ">savedValue</codeph>
 to the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property of the SharedObject object. If Flash Player must ask for permission to save
 the data, when the user grants or denies permission the <codeph class="+ topic/ph pr-d/codeph ">onFlushStatus()</codeph> method is
 called. When the Clear button is clicked, the <codeph class="+ topic/ph pr-d/codeph ">clearValue()</codeph> method deletes the value
 saved in <codeph class="+ topic/ph pr-d/codeph ">savedValue</codeph>; the next time the SWF file is loaded, the value that is retrieved
 is <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.events.NetStatusEvent;
    import flash.net.SharedObject;
    import flash.net.SharedObjectFlushStatus;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.TextFieldType;
    
    public class SharedObjectExample extends Sprite {
        
        private var mySo:SharedObject;
        
        public function SharedObjectExample() {
            buildUI();
            saveBtn.addEventListener(MouseEvent.CLICK, saveValue);
            clearBtn.addEventListener(MouseEvent.CLICK, clearValue);
            
            mySo = SharedObject.getLocal("application-name");
            output.appendText("SharedObject loaded...\n");
            output.appendText("loaded value: " + mySo.data.savedValue + "\n\n");
        }

         private function saveValue(event:MouseEvent):void {
            output.appendText("saving value...\n");
            mySo.data.savedValue = input.text;
            
            var flushStatus:String = null;
            try {
                flushStatus = mySo.flush(10000);
            } catch (error:Error) {
                output.appendText("Error...Could not write SharedObject to disk\n");
            }
            if (flushStatus != null) {
                switch (flushStatus) {
                    case SharedObjectFlushStatus.PENDING:
                        output.appendText("Requesting permission to save object...\n");
                        mySo.addEventListener(NetStatusEvent.NET_STATUS, onFlushStatus);
                        break;
                    case SharedObjectFlushStatus.FLUSHED:
                        output.appendText("Value flushed to disk.\n");
                        break;
                }
            }
            output.appendText("\n");
        }
        
        private function clearValue(event:MouseEvent):void {
            output.appendText("Cleared saved value...Reload SWF and the value should be \"undefined\".\n\n");
            delete mySo.data.savedValue;
        }
        
        private function onFlushStatus(event:NetStatusEvent):void {
            output.appendText("User closed permission dialog...\n");
            switch (event.info.code) {
                case "SharedObject.Flush.Success":
                    output.appendText("User granted permission -- value saved.\n");
                    break;
                case "SharedObject.Flush.Failed":
                    output.appendText("User denied permission -- value not saved.\n");
                    break;
            }
            output.appendText("\n");

            mySo.removeEventListener(NetStatusEvent.NET_STATUS, onFlushStatus);
        }
        
        // UI elements
        private var inputLbl:TextField;
        private var input:TextField;
        private var output:TextField;
        private var saveBtn:Sprite;
        private var clearBtn:Sprite;
    
        private function buildUI():void {
            // input label
            inputLbl = new TextField();
            addChild(inputLbl);
            inputLbl.x = 10;
            inputLbl.y = 10;
            inputLbl.text = "Value to save:";
            
            // input TextField
            input = new TextField();
            addChild(input);
            input.x = 80;
            input.y = 10;
            input.width = 100;
            input.height = 20;
            input.border = true;
            input.background = true;
            input.type = TextFieldType.INPUT;
            
            // output TextField
            output = new TextField();
            addChild(output);
            output.x = 10;
            output.y = 35;
            output.width = 250;
            output.height = 250;
            output.multiline = true;
            output.wordWrap = true;
            output.border = true;
            output.background = true;
            
            // Save button
            saveBtn = new Sprite();
            addChild(saveBtn);
            saveBtn.x = 190;
            saveBtn.y = 10;
            saveBtn.useHandCursor = true;
            saveBtn.graphics.lineStyle(1);
            saveBtn.graphics.beginFill(0xcccccc);
            saveBtn.graphics.drawRoundRect(0, 0, 30, 20, 5, 5);
            var saveLbl:TextField = new TextField();
            saveBtn.addChild(saveLbl);
            saveLbl.text = "Save";
            saveLbl.selectable = false;
            
            // Clear button
            clearBtn = new Sprite();
            addChild(clearBtn);
            clearBtn.x = 230;
            clearBtn.y = 10;
            clearBtn.useHandCursor = true;
            clearBtn.graphics.lineStyle(1);
            clearBtn.graphics.beginFill(0xcccccc);
            clearBtn.graphics.drawRoundRect(0, 0, 30, 20, 5, 5);
            var clearLbl:TextField = new TextField();
            clearBtn.addChild(clearLbl);
            clearLbl.text = "Clear";
            clearLbl.selectable = false;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/flush()" class="- topic/link "><linktext class="- topic/linktext ">flush()</linktext></link><link href="flash.net.xml#SharedObject/getLocal()" class="- topic/link "><linktext class="- topic/linktext ">getLocal()</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus" class="- topic/link "><linktext class="- topic/linktext ">netStatus</linktext></link></related-links><adobeApiEvent id="flash.net:SharedObject_flash.events.SyncEvent.SYNC_sync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">sync</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a remote shared object has been updated by the server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SyncEvent.SYNC</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SyncEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a remote shared object has been updated by the server.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/getRemote()" class="- topic/link "><linktext class="- topic/linktext ">getRemote()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:SharedObject_flash.events.NetStatusEvent.NET_STATUS_netStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">netStatus</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a SharedObject instance is reporting its status or error condition.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.NetStatusEvent.NET_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.NetStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a SharedObject instance is reporting its status or error condition. 
 The <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event contains an <codeph class="+ topic/ph pr-d/codeph ">info</codeph> property,
 which is an information object 
 that contains specific information about the event, such as whether a connection
 attempt succeeded or whether the shared object was successfully written to the local disk. 
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:SharedObject_flash.events.AsyncErrorEvent.ASYNC_ERROR_asyncError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">asyncError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an exception is thrown asynchronously &amp;#x2014; that is, 
 from native asynchronous code.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.AsyncErrorEvent.ASYNC_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.AsyncErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an exception is thrown asynchronously — that is, 
 from native asynchronous code. 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.net:SharedObject:clear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clear</apiName><shortdesc class="- topic/shortdesc ">
     For local shared objects, purges all of the data and deletes the shared object from the disk.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">SharedObject, SharedObject.clear, clear
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     For local shared objects, purges all of the data and deletes the shared object from the disk.
     The reference to the shared object is still active, but its data properties are deleted.
     
     <p class="- topic/p ">
     For remote shared objects used with Flash Media Server,
     <codeph class="+ topic/ph pr-d/codeph ">clear()</codeph> disconnects the object and purges 
     all of the data. If the shared object is locally persistent, this method also deletes the shared object
     from the disk. The reference to the shared object is still active, but its data properties
     are deleted.
     </p>
      
     
     </apiDesc><example conref="examples\SharedObject_clear.as" class="- topic/example "> The following code creates (and on subsequent executions, retrieves) a SharedObject
 object using an id with the value of <codeph class="+ topic/ph pr-d/codeph ">hostName</codeph>. A property named <codeph class="+ topic/ph pr-d/codeph ">username</codeph>
 is added to the data property of the SharedObject object.
 The <codeph class="+ topic/ph pr-d/codeph ">clear()</codeph> method is finally called, which wipes out all information that was added
 to the data object (in this case was a single property named <codeph class="+ topic/ph pr-d/codeph ">username</codeph>).
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.net.SharedObject;

    public class SharedObject_clear {
        private var hostName:String = "yourDomain";
        private var username:String = "yourUsername";

        public function SharedObject_clear() {
            var mySo:SharedObject = SharedObject.getLocal(hostName);
            if(mySo.data.username == null) {
                mySo.data.username = username;
                trace("set: " + mySo.data.username); // yourUsername
            }
            else {
                mySo.clear();
                trace("cleared: " + mySo.data.username); // undefined
            }
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.net:SharedObject:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Closes the connection between a remote shared object and the server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>server-specific: This info is relevant for Flash Media Server, but not Flex Data Services.
     
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Closes the connection between a remote shared object and the server.
     If a remote shared object is locally persistent, the user can make changes
     to the local copy of the object after this method is called. Any changes made
     to the local object are sent to the server the next time the user connects
     to the remote shared object.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:SharedObject:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     Connects to a remote shared object on a server through a specified NetConnection object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>server-specific: On FMS, can connect to a shared object, but cannot pass a message as a second param.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Flash Player could not connect to the specified remote shared object.
     Verify that the NetConnection instance is valid and connected and that the 
     remote shared object was successfully created on the server.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">myConnection</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetConnection</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A NetConnection object that uses the Real-Time Messaging Protocol (RTMP), 
     such as a NetConnection object used to communicate with Flash Media Server.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">params</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string defining a message to pass to the remote shared object on the server.
     Cannot be used with Flash Media Server.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Connects to a remote shared object on a server through a specified NetConnection object.
     Use this method after calling <codeph class="+ topic/ph pr-d/codeph ">getRemote()</codeph>.
     When a connection is successful, the <codeph class="+ topic/ph pr-d/codeph ">sync</codeph> event is dispatched.
     
     <p class="- topic/p ">Before attempting to work with a remote shared object, 
     first check for any errors using a <codeph class="+ topic/ph pr-d/codeph ">try..catch..finally</codeph> statement.
     Then, listen for and handle the <codeph class="+ topic/ph pr-d/codeph ">sync</codeph> event before 
     you make changes to the shared object. Any changes made
     locally — before the <codeph class="+ topic/ph pr-d/codeph ">sync</codeph> event is dispatched — might be lost.
     </p>
     
     <p class="- topic/p ">
     Call the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method 
     to connect to a remote shared object, for example:
     </p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var myRemoteSO:SharedObject = SharedObject.getRemote("mo", myNC.uri, false);
     myRemoteSO.connect(myNC);
     </codeblock>
     
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/getRemote()" class="- topic/link "><linktext class="- topic/linktext ">getRemote()</linktext></link><link href="flash.net.xml#SharedObject/event:sync" class="- topic/link "><linktext class="- topic/linktext ">sync</linktext></link><link href="../../statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">try..catch..finally</linktext></link><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">NetConnection</linktext></link></related-links></apiOperation><apiOperation id="flash.net:SharedObject:flush" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">flush</apiName><shortdesc class="- topic/shortdesc ">
     Immediately writes a locally persistent shared object to a local file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">SharedObject, SharedObject.flush, flush
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Flash Player cannot write the shared object to disk. This error might 
     occur if the user has permanently disallowed local information storage for 
     objects from this domain.
      
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> Local content can always write shared objects
     from third-party domains (domains other than the domain in the current browser address bar)
     to disk, even if writing of third-party shared objects to disk is disallowed.</p>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Either of the following values:
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushStatus.PENDING</codeph>: The user has permitted local information 
     storage for objects from this domain, but the 
     amount of space allotted is not sufficient to store the object. Flash Player prompts
     the user to allow more space. 
     To allow space for the shared object to grow when it is saved, thus avoiding
     a <codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushStatus.PENDING</codeph> return value, pass a value
     for <codeph class="+ topic/ph pr-d/codeph ">minDiskSpace</codeph>.
     </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushStatus.FLUSHED</codeph>: The shared object has been
     successfully written to a file on the local disk.</li></ul>
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minDiskSpace</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The minimum disk space, in bytes, 
     that must be allotted for this object.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Immediately writes a locally persistent shared object to a local file. If you don't use this 
     method, Flash Player writes the shared object to a file when the shared object session ends — 
     that is, when the SWF file is closed, when the shared object is garbage-collected 
     because it no longer has any references to it, or when you call <codeph class="+ topic/ph pr-d/codeph ">SharedObject.clear()</codeph>
     or <codeph class="+ topic/ph pr-d/codeph ">SharedObject.close()</codeph>. 
     
     <p class="- topic/p ">If this method returns <codeph class="+ topic/ph pr-d/codeph ">SharedObjectFlushStatus.PENDING</codeph>,
     Flash Player displays a dialog box asking 
     the user to increase the amount of disk space available to objects from this domain. To allow 
     space for the shared object to  grow when it is saved in the future, which avoids return values 
     of <codeph class="+ topic/ph pr-d/codeph ">PENDING</codeph>, pass a value for <codeph class="+ topic/ph pr-d/codeph ">minDiskSpace</codeph>. When Flash Player
     tries to write the file, it looks for the number of bytes passed to 
     <codeph class="+ topic/ph pr-d/codeph ">minDiskSpace</codeph>, instead of looking for enough space to save the shared 
     object at its current size. </p>
     
     <p class="- topic/p ">For example, if you expect a shared object to grow to a maximum size of 500 bytes, even 
     though it might start out much smaller, pass 500 for <codeph class="+ topic/ph pr-d/codeph ">minDiskSpace</codeph>. If 
     Flash asks the user to allot disk space for the shared object, it asks for 500 bytes. After 
     the user allots the requested amount of space, Flash won't have to ask for more space on future 
     attempts to flush the object (as long as its size doesn't exceed 500 bytes). </p>
     
     <p class="- topic/p ">After the user responds to the dialog box, this method is called again. A
     <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event is dispatched with a <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property of
     <codeph class="+ topic/ph pr-d/codeph ">SharedObject.Flush.Success</codeph> or <codeph class="+ topic/ph pr-d/codeph ">SharedObject.Flush.Failed</codeph>.
     </p>
     
     </apiDesc><example conref="examples\SharedObject_flush.as" class="- topic/example "> The following code creates (and on subsequent executions, retrieves) a SharedObject
 object using an id with the value of <codeph class="+ topic/ph pr-d/codeph ">hostName</codeph>. A property named <codeph class="+ topic/ph pr-d/codeph ">username</codeph>
 is added to the data property of the SharedObject object. The <codeph class="+ topic/ph pr-d/codeph ">flush()</codeph> method is
 then called, followed by a check to see if the string <codeph class="+ topic/ph pr-d/codeph ">pending</codeph>, or a boolean value
 of <codeph class="+ topic/ph pr-d/codeph ">true</codeph> or <codeph class="+ topic/ph pr-d/codeph ">false</codeph> was returned.
 One should be aware that all open SharedObject instances will automatically be flushed whenever the
 current instance of the Flash Player is closed.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.net.SharedObject;

    public class SharedObject_flush {
        private var hostName:String = "yourDomain";
        private var username:String = "yourUsername";

        public function SharedObject_flush() {
            var mySo:SharedObject = SharedObject.getLocal(hostName);
            mySo.data.username = username;
            var flushResult:Object = mySo.flush();
            trace("flushResult: " + flushResult);
            trace(mySo.data.username); // yourUsername
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/clear()" class="- topic/link "><linktext class="- topic/linktext ">clear()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:SharedObject:getLocal" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getLocal</apiName><shortdesc class="- topic/shortdesc ">
  Returns a reference to a locally persistent shared object that is only available to the current client.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">SharedObject, constructor, SharedObject.getLocal, getLocal, get
  
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Flash Player cannot create the shared object for whatever reason.
  This error might occur is if persistent shared object creation
  and storage by third-party Flash content is prohibited (does not apply to local content).
  Users can prohibit third-party persistent shared objects on the Global Storage Settings panel of the 
  Settings Manager, located at
  <xref href="http://www.adobe.com/support/documentation/en/flashplayer/help/settings_manager03.html" scope="external" class="- topic/xref ">http://www.adobe.com/support/documentation/en/flashplayer/help/settings_manager03.html</xref>.
  
  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A reference to a shared object that is persistent locally and is available only to the
  current client. If Flash Player can't create or find the shared object (for example, if
  <codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> was
  specified but no such directory exists), this method throws an exception.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:SharedObject</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the object. The name can include forward slashes (<codeph class="+ topic/ph pr-d/codeph ">/</codeph>); for example,
  <codeph class="+ topic/ph pr-d/codeph ">work/addresses</codeph> is a legal name. Spaces are not allowed in a shared 
  object name, nor are the following characters:   
  <pre xml:space="preserve" class="- topic/pre ">
  ~ % &amp; \ ; : " ' , &lt; &gt; ? # 
  </pre>
  
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localPath</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The full or partial path to the SWF file that created the shared object, and that 
  determines where the shared object will be stored locally. If you do not specify this parameter, the 
  full path is used. 
   
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">secure</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Determines whether access to this shared object 
  is restricted to SWF files that are delivered over an HTTPS connection.  
  If your SWF file is delivered over HTTPS, this parameter's value has the following effects:
  <ul class="- topic/ul "><li class="- topic/li ">If this parameter is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, Flash Player creates a new secure shared object or
  gets a reference to an existing secure shared object. This secure shared object
  can be read from or written to only by SWF files delivered over HTTPS that call 
  <codeph class="+ topic/ph pr-d/codeph ">SharedObject.getLocal()</codeph> with the <codeph class="+ topic/ph pr-d/codeph ">secure</codeph> parameter set to
  <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</li><li class="- topic/li ">If this parameter is set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, Flash Player creates a new shared object or
  gets a reference to an existing shared object that can be read from 
  or written to by SWF files delivered over non-HTTPS connections.</li></ul>
  <p class="- topic/p ">If your SWF file is delivered over a non-HTTPS connection and you try to set this parameter
  to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the creation of a new shared object (or the access of a previously 
  created secure shared object) fails and <codeph class="+ topic/ph pr-d/codeph ">null</codeph> is returned. Regardless of the 
  value of this parameter, the created shared objects count toward the total amount
  of disk space allowed for a domain.</p>
  
  <p class="- topic/p ">The following diagram shows the use of the <codeph class="+ topic/ph pr-d/codeph ">secure</codeph> parameter:</p>
  <p class="- topic/p "><adobeimage alt="secure shared object diagram" href="../../images/secureParam.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
  
  </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Returns a reference to a locally persistent shared object that is only available to the current client. 
  If the shared object does not already exist, this method creates one. If any values
  passed to <codeph class="+ topic/ph pr-d/codeph ">getLocal()</codeph> are invalid or if the call fails, Flash Player throws an exception.
  
  <p class="- topic/p ">The following code shows how you assign the returned shared object reference to a variable:</p>
  <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">var so:SharedObject = SharedObject.getLocal("savedData");</codeph></p>
  
  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> If the user has chosen to never allow local storage for this domain, 
  the object is not saved locally, even if a value for <codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> is specified. The
  exception to this rule is local content. Local content can always write shared objects
  from third-party domains (domains other than the domain in the current browser address bar)
  to disk, even if writing of third-party shared objects to disk is disallowed.
  </p>
  
  <p class="- topic/p ">To avoid name conflicts, Flash looks at the location of the SWF file creating the 
  shared object. For example, if a SWF file at www.myCompany.com/apps/stockwatcher.swf creates a 
  shared object named <codeph class="+ topic/ph pr-d/codeph ">portfolio</codeph>, that shared object does not conflict with another 
  object named <codeph class="+ topic/ph pr-d/codeph ">portfolio</codeph> that was created by a SWF file at 
  www.yourCompany.com/photoshoot.swf because the SWF files originate from different directories. </p>
  
  <p class="- topic/p ">Although the <codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> parameter is optional, you should give some 
  thought to its use, especially if other SWF files need to access the shared object. If the 
  data in the shared object is specific to one SWF file that will not be moved to another location, 
  then use of the default value makes sense. If other SWF files need access to the shared object, or 
  if the SWF file that creates the shared object will later be moved, then the value of this parameter
  affects how accessible the shared object will be. For example, if you create a shared object with 
  <codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> set to the default value of the full path to the SWF file, no other SWF 
  file can access that shared object. If you later move the original SWF file to another location, 
  not even that SWF file can access the data already stored in the shared object.</p>
  
  <p class="- topic/p ">To avoid inadvertently restricting access to a shared object, use
  the <codeph class="+ topic/ph pr-d/codeph ">localpath</codeph> parameter. The most permissive approach is to set 
  <codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> to <codeph class="+ topic/ph pr-d/codeph ">/</codeph> (slash), which makes the shared object available to all SWF files 
  in the domain, but increases the likelihood of name conflicts with other shared objects in 
  the domain. A more restrictive approach is to append <codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> with folder names that are in 
  the full path to the SWF file. For example, for a <codeph class="+ topic/ph pr-d/codeph ">portfolio</codeph> shared object created by the SWF 
  file at www.myCompany.com/apps/stockwatcher.swf, you could set the <codeph class="+ topic/ph pr-d/codeph ">localPath</codeph> parameter to
  <codeph class="+ topic/ph pr-d/codeph ">/</codeph>, <codeph class="+ topic/ph pr-d/codeph ">/apps</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">/apps/stockwatcher.swf</codeph>. You must determine which 
  approach provides optimal flexibility for your application.</p>
  
  <p class="- topic/p ">When using this method, consider the following security model:
  
  <ul class="- topic/ul "><li class="- topic/li ">You cannot access shared objects across sandbox boundaries.</li><li class="- topic/li ">Users can restrict shared object access by using the Flash Player Settings dialog box 
      or the Settings Manager. By default, an application can create shared objects of up 100 KB of data per domain.
      Administrators and users can also place restrictions on the ability to write to the file system.</li></ul></p>
  
  <p class="- topic/p ">Suppose you publish SWF file content to be played back as local files (either locally installed SWF files or 
  EXE files), and you need to access a specific shared object from more than one local SWF file. In this situation, 
  be aware that for local files, two different locations might be used to store shared objects. The domain that is 
  used depends on the security permissions granted to the local file that created the shared object. Local files 
  can have three different levels of permissions:
  
  <ol class="- topic/ol "><li class="- topic/li ">Access to the local filesystem only.</li><li class="- topic/li ">Access to the network only.</li><li class="- topic/li ">Access to both the network and the local filesystem.</li></ol></p>
  
  <p class="- topic/p ">Local files with access to the local filesystem (level 1 or 3) store their shared objects in one location. 
  Local files without access to the local filesystem (level 2) store their shared objects in another location.</p>
  
  <p class="- topic/p ">You can prevent a SWF file from using this method by setting the 
  <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> parameter of the the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> 
  tags in the HTML page that contains the SWF content.</p>
  
  <p class="- topic/p ">For more information, see the Flash Player Developer Center Topic: 
  <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:SharedObject:getRemote" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getRemote</apiName><shortdesc class="- topic/shortdesc ">
     Returns a reference to a shared object on Flash Media Server that multiple
     clients can access.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>server-specific: This info is relevant for Flash Media Server, but not Flex Data Services.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Flash Player can't create or find the shared object. This might occur if nonexistent paths were 
     specified for the <codeph class="+ topic/ph pr-d/codeph ">remotePath</codeph> and <codeph class="+ topic/ph pr-d/codeph ">persistence</codeph> parameters.
     
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A reference to an object that can be shared across multiple clients.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:SharedObject</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the remote shared object. The name can include forward slashes (/); 
     for example, work/addresses is a legal name. Spaces are not allowed in a shared object name,
     nor are the following characters:
     <pre xml:space="preserve" class="- topic/pre ">    ~ % &amp; \ ; :  " ' , &gt; ? ? #</pre>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">remotePath</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The URI of the server on which the shared object will be stored. 
     This URI must be identical to the URI of the NetConnection object passed to the
     <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">persistence</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies whether the attributes of the shared
     object's data property are persistent locally, remotely, or both. This parameter can also specify 
     where the shared object will be stored locally. Acceptable values are as follows:
     <ul class="- topic/ul "><li class="- topic/li ">A value of <codeph class="+ topic/ph pr-d/codeph ">false</codeph> specifies that the shared object is not persistent
     on the client or server.</li><li class="- topic/li ">A value of <codeph class="+ topic/ph pr-d/codeph ">true</codeph> specifies that the shared object is persistent only on the server.</li><li class="- topic/li ">A full or partial local path to the shared object indicates that the shared 
     object is persistent on the client and the server. On the client, it is stored in the
     specified path; on the server, it is stored in a subdirectory within the application
     directory.</li></ul>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> If the user has chosen to never allow local storage
     for this domain, the object will not be saved locally, even if a local path is 
     specified for persistence. For more information, see the class description.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">secure</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Determines whether access to this shared object is restricted to SWF
     files that are delivered over an HTTPS connection. For more information, see the
     description of the <codeph class="+ topic/ph pr-d/codeph ">secure</codeph> parameter in the 
     <codeph class="+ topic/ph pr-d/codeph ">getLocal</codeph> method entry.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a reference to a shared object on Flash Media Server that multiple
     clients can access.
     If the remote shared object does not already exist, this method creates one. 
     
     <p class="- topic/p ">
     To create a remote shared object, call <codeph class="+ topic/ph pr-d/codeph ">getRemote()</codeph> the call
     <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> to connect the remote shared object to the server, as in 
     the following:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var nc:NetConnection = new NetConnection();
     nc.connect("rtmp://somedomain.com/applicationName");
     var myRemoteSO:SharedObject = SharedObject.getRemote("mo", nc.uri, false);
     myRemoteSO.connect(nc);
     </codeblock>
     
     
     
     <p class="- topic/p ">
     To confirm that the local and remote copies of the shared object are synchronized,
     listen for and handle the <codeph class="+ topic/ph pr-d/codeph ">sync</codeph> event.
     All clients that want to share this object must pass the same values for 
     the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> and <codeph class="+ topic/ph pr-d/codeph ">remotePath</codeph> parameters. 
     </p> 
     
     <p class="- topic/p ">To create a shared object that is available only to the current client, 
     use <codeph class="+ topic/ph pr-d/codeph ">SharedObject.getLocal()</codeph>.
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link><link href="flash.net.xml#SharedObject/getLocal()" class="- topic/link "><linktext class="- topic/linktext ">getLocal()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:SharedObject:send" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">send</apiName><shortdesc class="- topic/shortdesc ">
     Broadcasts a message to all clients connected to a remote shared object, 
     including the client that sent the message.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Needs better documentation, examples.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">One or more arguments: A string that identifies the message, 
     the name of one or more handler functions to attach to the shared object,
     and optional parameters of any type. 
     The handler name can be only one level deep (that is, it can't be of the 
     form parent/child) and is relative to the shared object. 
     The arguments are serialized and sent over the connection, and the 
     receiving handler receives them in the same order. If a parameter is a 
     circular object (for example, a linked list that is circular), the 
     serializer handles the references correctly.
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: Do not use a reserved term for the function names. 
     For example, <codeph class="+ topic/ph pr-d/codeph ">myRemoteSO.send("close")</codeph> will fail.</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Broadcasts a message to all clients connected to a remote shared object, 
     including the client that sent the message. To process and respond to the message,
     create a callback function attached to the shared object.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:SharedObject:setDirty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setDirty</apiName><shortdesc class="- topic/shortdesc ">
     Indicates to the server that the value of a property
     in the shared object has changed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>The AS2 player automatically marks properties dirty as they are changed.
          The FMS server, however, requires an explicit setProperty() call to indicate when a property
          of data has changed.
     
          AS3 does not support auto-dirtying the properties, so we are introducing setDirty() to explicitly
          indicate when a property has changed, and setProperty() to match the method provided with the server.
     
          It's probably best to read the FMS Actionscript reference (search for SharedObject.setProperty at
          www.adobe.com) before writing this documentation, as the details should be similar.
     
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">propertyName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the property that has changed.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates to the server that the value of a property
     in the shared object has changed.
     This method marks properties as <i class="+ topic/ph hi-d/i ">dirty</i>, which means changed.
     
     <p class="- topic/p ">
     Call the <codeph class="+ topic/ph pr-d/codeph ">SharedObject.setProperty()</codeph> to create properties for a shared object. 
     </p>
      
     <p class="- topic/p ">
     The <codeph class="+ topic/ph pr-d/codeph ">SharedObject.setProperty()</codeph> method implements <codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph>.
     In most cases, such as when the value of a property is a primitive type like String or Number,
     you can call <codeph class="+ topic/ph pr-d/codeph ">setProperty()</codeph> instead of calling <codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph>. 
     However, when the value of a property is an object that contains its own properties, 
     call <codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph> to indicate when a value within the object has changed.
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/data" class="- topic/link "><linktext class="- topic/linktext ">SharedObject.data (client-side property)</linktext></link><link href="flash.net.xml#SharedObject/setProperty()" class="- topic/link "><linktext class="- topic/linktext ">setProperty()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:SharedObject:setProperty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setProperty</apiName><shortdesc class="- topic/shortdesc ">
     Updates the value of a property in a shared object and indicates to the server
     that the value of the property has changed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">propertyName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the property in the shared object.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value of the property (an ActionScript object), or <codeph class="+ topic/ph pr-d/codeph ">null</codeph> to delete the property. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Updates the value of a property in a shared object and indicates to the server
     that the value of the property has changed. The <codeph class="+ topic/ph pr-d/codeph ">setProperty()</codeph> method
     explicitly marks properties as changed, or dirty.
     
     <p class="- topic/p ">For more information about remote shared objects see the
     <xref href="http://www.adobe.com/go/learn_fms_docs_en" class="- topic/xref ">
     Flash Media Server documentation</xref>.</p>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> The <codeph class="+ topic/ph pr-d/codeph ">SharedObject.setProperty()</codeph> method implements the <codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph> method.
     In most cases, such as when the value of a property is a primitive type like String or Number,
     you would use <codeph class="+ topic/ph pr-d/codeph ">setProperty()</codeph> instead of <codeph class="+ topic/ph pr-d/codeph ">setDirty</codeph>. 
     However, when the value of a property is an object that contains its own properties, 
     use <codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph> to indicate when a value within the object has changed. 
     In general, it is a good idea to call <codeph class="+ topic/ph pr-d/codeph ">setProperty()</codeph> rather than <codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph>, because 
     <codeph class="+ topic/ph pr-d/codeph ">setProperty()</codeph> updates a property value only when that value has changed, whereas <codeph class="+ topic/ph pr-d/codeph ">setDirty()</codeph>
     forces synchronization on all subscribed clients.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/data" class="- topic/link "><linktext class="- topic/linktext ">SharedObject.data (client-side property)</linktext></link></related-links></apiOperation><apiValue id="flash.net:SharedObject:client:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">client</apiName><shortdesc class="- topic/shortdesc ">
     Indicates the object on which
     callback methods are invoked.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Property documented; needs review.
      
      </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property must be set to a non-null object.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates the object on which
     callback methods are invoked. The default object is <codeph class="+ topic/ph pr-d/codeph ">this</codeph>. 
     You can set the client property to another object, and callback methods will be 
     invoked on that other object.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:SharedObject:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
     The collection of attributes assigned to the data property of the object; these attributes can 
     be shared and stored.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">SharedObject, SharedObject.data, data
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The collection of attributes assigned to the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property of the object; these attributes can 
     be shared and stored. Each attribute can be an object of any ActionScript or JavaScript 
     type — Array, Number, Boolean, ByteArray, XML, and so on. For example, the following lines assign values to various aspects 
     of a shared object:
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var items_array:Array = new Array(101, 346, 483);
     var currentUserIsAdmin:Boolean = true;
     var currentUserName:String = "Ramona";
     
     var my_so:SharedObject = SharedObject.getLocal("superfoo");
     my_so.data.itemNumbers = items_array;
     my_so.data.adminPrivileges = currentUserIsAdmin;
     my_so.data.userName = currentUserName;
     
     for (var prop in my_so.data) {
       trace(prop+": "+my_so.data[prop]);
     }
     </codeblock>
     
     
     
     <p class="- topic/p ">All attributes of a shared object's <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property are saved if the object is persistent, and
     the shared object contains the following information:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     userName: Ramona
     adminPrivileges: true
     itemNumbers: 101,346,483
     </codeblock>
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> Do not assign values directly to the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property of a shared 
     object, as in <codeph class="+ topic/ph pr-d/codeph ">so.data = someValue</codeph>; Flash Player ignores these assignments.</p>
     
     <p class="- topic/p ">To delete attributes for local shared objects, use code such as 
     <codeph class="+ topic/ph pr-d/codeph ">delete so.data.attributeName</codeph>; setting an attribute to 
     <codeph class="+ topic/ph pr-d/codeph ">null</codeph> or <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> for a local shared object does not 
     delete the attribute.</p>
     
     <p class="- topic/p ">To create <i class="+ topic/ph hi-d/i ">private</i> values for a shared object — values that are available only to the client 
     instance while the object is in use and are not stored with the object when it is closed — create properties 
     that are not named <codeph class="+ topic/ph pr-d/codeph ">data</codeph> to store them, as shown in the following example:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var my_so:SharedObject = SharedObject.getLocal("superfoo");
     my_so.favoriteColor = "blue";
     my_so.favoriteNightClub = "The Bluenote Tavern";
     my_so.favoriteSong = "My World is Blue";
     
     for (var prop in my_so) {
       trace(prop+": "+my_so[prop]);
     }
     </codeblock>
     
     
     
     <p class="- topic/p ">The shared object contains the following data:</p>
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     favoriteSong: My World is Blue
     favoriteNightClub: The Bluenote Tavern
     favoriteColor: blue
     data: [object Object]
     </codeblock>
     
     <p class="- topic/p ">
     For remote shared objects used with a server, all attributes of the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> 
     property are available to all clients connected to the shared object, and all attributes 
     are saved if the object is persistent. 
     If one client changes the value of an attribute, all clients now see the new value.
     </p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/getLocal()" class="- topic/link "><linktext class="- topic/linktext ">getLocal()</linktext></link></related-links></apiValue><apiValue id="flash.net:SharedObject:defaultObjectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">defaultObjectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     The default object encoding (AMF version) for all local shared objects created in the SWF file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The default object encoding (AMF version) for all local shared objects created in the SWF file.
     When local shared objects are written to disk, the 
     <codeph class="+ topic/ph pr-d/codeph ">SharedObject.defaultObjectEncoding</codeph> property
     indicates which Action Message Format version should be used: the ActionScript 3.0 format (AMF3) or the ActionScript 1.0 or 2.0 format (AMF0).
     
     <p class="- topic/p ">For more information about object encoding, including the difference between
     encoding in local and remote shared objects, see the description of the 
     <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property.</p>
     
     <p class="- topic/p ">The default value of <codeph class="+ topic/ph pr-d/codeph ">SharedObject.defaultObjectEncoding</codeph> is set to use the
     ActionScript 3.0 format, AMF3. 
     If you need to write local shared objects that ActionScript 2.0 or 1.0 SWF files can read,
     set <codeph class="+ topic/ph pr-d/codeph ">SharedObject.defaultObjectEncoding</codeph> to use the 
     ActionScript 1.0 or ActionScript 2.0 format, <codeph class="+ topic/ph pr-d/codeph ">flash.net.ObjectEncoding.AMF0</codeph>,
     at the beginning of your script, before you create any local shared objects. 
     All local shared objects
     created thereafter will use AMF0 encoding and can interact with older content.
     You cannot change the <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> value of existing local shared objects 
     by setting <codeph class="+ topic/ph pr-d/codeph ">SharedObject.defaultObjectEncoding</codeph> after the local shared 
     objects have been created.</p>
     
     <p class="- topic/p ">To set the object encoding on a per-object basis, rather than for all shared objects
     created by the SWF file, set the <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property of the local shared object instead.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/objectEncoding" class="- topic/link "><linktext class="- topic/linktext ">objectEncoding property</linktext></link><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding class</linktext></link></related-links></apiValue><apiValue id="flash.net:SharedObject:objectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     The object encoding (AMF version) for this shared object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You attempted to set the value of the <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph>
     property on a remote shared object. This property is read-only for remote shared objects because
     its value is determined by the associated NetConnection instance.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ReferenceError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ReferenceError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The object encoding (AMF version) for this shared object. When a local shared object is written to disk, 
     the <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property indicates which Action
     Message Format version should be used: the ActionScript 3.0 format (AMF3)
     or the ActionScript 1.0 or 2.0 format (AMF0). 
     
     <p class="- topic/p ">Object encoding is handled differently depending if the shared object
     is local or remote.</p>
     <ul class="- topic/ul "><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Local shared objects</b>. You can get or set the value of the 
     <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property for local shared objects. 
     The value of <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> 
     affects what formatting is used for <i class="+ topic/ph hi-d/i ">writing</i> this local shared object.
     If this local shared object must be readable by 
     ActionScript 2.0 or 1.0 SWF files, set <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> to 
     <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF0</codeph>.
     Even if object encoding is set to write AMF3, Flash Player can still read AMF0 local shared objects. 
     That is, if you use the default value of this property, <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph>, 
     your SWF file can still read shared objects created by ActionScript 2.0 or 1.0 SWF files.
     </li><li class="- topic/li "><b class="+ topic/ph hi-d/b ">Remote shared objects</b>. When connected to the server, a remote shared object
     inherits its <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> setting from the associated NetConnection
     instance (the instance used to connect to the remote shared object). When not connected
     to the server, a remote shared object inherits the <codeph class="+ topic/ph pr-d/codeph ">defaultObjectEncoding</codeph> 
     setting from the associated NetConnection instance. 
     Because the value of a remote shared object's <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property is 
     determined by the NetConnection instance, this property is read-only for remote shared objects.
     </li></ul>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/defaultObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">defaultObjectEncoding</linktext></link><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">flash.net.ObjectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.net:SharedObject:size:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">size</apiName><shortdesc class="- topic/shortdesc ">
     The current size of the shared object, in bytes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">SharedObject, SharedObject.getSize, getSize
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The current size of the shared object, in bytes.
     
     <p class="- topic/p ">Flash calculates the size of a shared object by stepping through all of its data 
     properties; the more data properties the object has, the longer it takes to estimate its size. 
     Estimating object size can take significant processing time, so you 
     may want to avoid using this method unless you have a specific need for it.</p>
     
     </apiDesc><example conref="examples\SharedObject.size.1.as" class="- topic/example "> The following code creates a SharedObject object using an id <codeph class="+ topic/ph pr-d/codeph ">"thehobbit"</codeph>.
 A property named <codeph class="+ topic/ph pr-d/codeph ">username</codeph> is added to the data property of the SharedObject object.
 The <codeph class="+ topic/ph pr-d/codeph ">size</codeph> property is then traced, which returns the value indicated.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

import flash.net.SharedObject;

// if these get copied or not
var mySo:SharedObject = SharedObject.getLocal("thehobbit");
mySo.data.username = "bilbobaggins";
trace(mySo.size); // 55
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.net:SharedObject:fps:set" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fps</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the number of times per second that a client's changes to a
     shared object are sent to the server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>server-specific: The info is relevant for Flash Media Server, but not Flex.
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="write" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the number of times per second that a client's changes to a
     shared object are sent to the server. 
     
     <p class="- topic/p ">Use this method when you want to control the amount of traffic between
     the client and the server. For example, if the connection between the client
     and server is relatively slow, you may want to set <codeph class="+ topic/ph pr-d/codeph ">fps</codeph>
     to a relatively low value. Conversely, if the client is connected to a multiuser
     application in which timing is important, you may want to set <codeph class="+ topic/ph pr-d/codeph ">fps</codeph>
     to a relatively high value.</p>
     
     <p class="- topic/p ">Setting <codeph class="+ topic/ph pr-d/codeph ">fps</codeph> will trigger a <codeph class="+ topic/ph pr-d/codeph ">sync</codeph> event and update all changes to the server.
     If you only want to update the server manually, set <codeph class="+ topic/ph pr-d/codeph ">fps</codeph> to 0.</p>
     
     <p class="- topic/p ">Changes are not sent to the server until the <codeph class="+ topic/ph pr-d/codeph ">sync</codeph> event has been dispatched. 
     That is, if the response time from the server is slow, updates may be sent to
     the server less frequently than the value specified in this property. </p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetGroupInfo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetGroupInfo</apiName><shortdesc class="- topic/shortdesc ">
The NetGroupInfo class specifies various Quality of Service (QoS) statistics
related to a NetGroup object's underlying RTMFP Peer-to-Peer data transport.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
The NetGroupInfo class specifies various Quality of Service (QoS) statistics
related to a NetGroup object's underlying RTMFP Peer-to-Peer data transport.
The <codeph class="+ topic/ph pr-d/codeph ">NetGroup.info</codeph> property returns a NetGroupInfo object which is
a snapshot of the current QoS state.

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/info" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.info</linktext></link><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link><link href="flash.net.xml#NetGroup/sendToNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNeighbor()</linktext></link><link href="flash.net.xml#NetGroup/sendToAllNeighbors()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToAllNeighbors()</linktext></link><link href="flash.net.xml#NetGroup/addWantObjects()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.addWantObjects()</linktext></link><link href="flash.net.xml#NetGroup/writeRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.writeRequestedObject()</linktext></link></related-links><apiOperation id="flash.net:NetGroupInfo:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
     Returns a string containing the values of the properties of the NetGroupInfo object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string containing the values of the properties of the NetGroupInfo object
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns a text value listing the properties of this NetGroupInfo object.
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a string containing the values of the properties of the NetGroupInfo object.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:NetGroupInfo:objectReplicationReceiveBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectReplicationReceiveBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the rate at which the local node is receiving objects from
     peers via the Object Replication system, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the rate at which the local node is receiving objects from
     peers via the Object Replication system, in bytes per second.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/writeRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.writeRequestedObject()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:objectReplicationSendBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectReplicationSendBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the rate at which objects are being copied from the local node to peers
     by the Object Replication system, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the rate at which objects are being copied from the local node to peers
     by the Object Replication system, in bytes per second.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/writeRequestedObject()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.writeRequestedObject()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:postingReceiveControlBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">postingReceiveControlBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the rate at which the local node is receiving posting control overhead messages from peers, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the rate at which the local node is receiving posting control overhead messages from peers, in bytes per second.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:postingReceiveDataBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">postingReceiveDataBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the rate at which the local node is receiving posting data from
     peers, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the rate at which the local node is receiving posting data from
     peers, in bytes per second.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:postingSendControlBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">postingSendControlBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the rate at which the local node is sending posting control overhead messages to peers, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the rate at which the local node is sending posting control overhead messages to peers, in bytes per second.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:postingSendDataBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">postingSendDataBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the rate at which the local node is sending posting data to
     peers, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the rate at which the local node is sending posting data to
     peers, in bytes per second.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/post()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.post()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:routingReceiveBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">routingReceiveBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the rate at which the local node is receiving directed routing messages 
     from peers, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the rate at which the local node is receiving directed routing messages 
     from peers, in bytes per second.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link><link href="flash.net.xml#NetGroup/sendToNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNeighbor()</linktext></link><link href="flash.net.xml#NetGroup/sendToAllNeighbors()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToAllNeighbors()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetGroupInfo:routingSendBytesPerSecond:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">routingSendBytesPerSecond</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the rate at which the local node is sending directed routing messages to
     peers, in bytes per second.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the rate at which the local node is sending directed routing messages to
     peers, in bytes per second.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetGroup/sendToNearest()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNearest()</linktext></link><link href="flash.net.xml#NetGroup/sendToNeighbor()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToNeighbor()</linktext></link><link href="flash.net.xml#NetGroup/sendToAllNeighbors()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetGroup.sendToAllNeighbors()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:URLLoaderDataFormat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URLLoaderDataFormat</apiName><shortdesc class="- topic/shortdesc ">
 The URLLoaderDataFormat class provides values that specify how downloaded data is received.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The URLLoaderDataFormat class provides values that specify how downloaded data is received.
 
 </apiDesc><example conref="examples\URLLoaderDataFormatExample.as" class="- topic/example "> The following example uses the URLLoaderDataFormatExample class to display 
 data format and status information for a file loaded at runtime.  This is accomplished 
 using the following steps:
 <ol class="- topic/ol "><li class="- topic/li ">The class constructor creates a URLLoader instance named <codeph class="+ topic/ph pr-d/codeph ">loader</codeph> and a URLRequest
  instance named <codeph class="+ topic/ph pr-d/codeph ">request</codeph>, which is the location and name of the file to be loaded.</li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">loader</codeph> object is passed to the <codeph class="+ topic/ph pr-d/codeph ">configureListeners()</codeph> method, which adds 
  listeners for each of the supported URLLoader events:
  <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">completeHandler()</codeph>: listens for the <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> event, which is dispatched
      after TextFile.txt has successfully loaded.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">openHandler()</codeph>: listens for the <codeph class="+ topic/ph pr-d/codeph ">open</codeph> event, dispatched upon start of the
      download (to the player) of TextFile.txt.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">progressHandler()</codeph>: listens for the <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> events, dispatched when data 
      is received as the download operation progresses.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">securityErrorHandler()</codeph>: listens for <codeph class="+ topic/ph pr-d/codeph ">securityError</codeph> events, which would be
      dispatched if the text file was accessed with the wrong local playback security setting.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">httpStatusHandler()</codeph>: listens for <codeph class="+ topic/ph pr-d/codeph ">httpStatusHandler</codeph> events, which will not be
      dispatched in this case since TextFile.txt is local.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ioErrorHandler()</codeph>: listens for <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> events, which would happen only
      if there were a serious problem with the file, such as if it were missing.</li></ul></li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">request</codeph> object is then passed to the <codeph class="+ topic/ph pr-d/codeph ">loader.load()</codeph> method, which loads the text file
  into memory using a <codeph class="+ topic/ph pr-d/codeph ">DisplayObject</codeph> object.</li></ol>
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">Notes:</b>
 <ul class="- topic/ul "><li class="- topic/li ">You will need to compile the SWF file with "Local playback security" set to "Access local files only".
  </li><li class="- topic/li ">This example requires that a file named TextFile.txt be placed in the same directory as your SWF file.
  If you would like to see this example identify binary or URL-encoded data files, you will need to
  provide the file in the proper data format and change TextFile.txt to the name and location of the new
  file.</li></ul>
 </p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.*;

    public class URLLoaderDataFormatExample extends Sprite {
        private var source:String = "TextFile.txt";
        private var dataFormat:String = URLLoaderDataFormat.TEXT;
        
        public function URLLoaderDataFormatExample () {
            var loader:URLLoader = new URLLoader();
            loader.dataFormat = dataFormat;
            configureListeners(loader);
            var request:URLRequest = new URLRequest(source);
            try {
                loader.load(request);
            } catch (error:Error) {
                trace("Error loading requested document: " + source);
            }
        }

        private function configureListeners(dispatcher:URLLoader):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            switch(loader.dataFormat) {
                case URLLoaderDataFormat.TEXT :
                    trace("completeHandler (text): " + loader.data);
                    break;
                case URLLoaderDataFormat.BINARY :
                    trace("completeHandler (binary): " + loader.data);
                    break;
                case URLLoaderDataFormat.VARIABLES :
                    trace("completeHandler (variables): " + loader.data);
                    break;
            }
        }

        private function httpStatusHandler(event:Event):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiValue id="flash.net:URLLoaderDataFormat:BINARY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">BINARY</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies that downloaded data is received as raw binary data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">binary</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies that downloaded data is received as raw binary data.
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLLoaderDataFormat:TEXT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TEXT</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies that downloaded data is received as text.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">text</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies that downloaded data is received as text.
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLLoaderDataFormat:VARIABLES" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">VARIABLES</apiName><shortdesc class="- topic/shortdesc ">
	 Specifies that downloaded data is received as URL-encoded variables.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">variables</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Specifies that downloaded data is received as URL-encoded variables.
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetStreamPlayTransitions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetStreamPlayTransitions</apiName><shortdesc class="- topic/shortdesc ">
 
 The NetStreamPlayTransitions class specifies the valid strings that you can use with the 
 NetStreamPlayOptions.transition property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 
 The NetStreamPlayTransitions class specifies the valid strings that you can use with the 
 <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.transition</codeph> property. These strings control the 
 behavior that is used to transition to a new stream or to play a stream, depending on the
 transition mode that is used.
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayOptions" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links><apiValue id="flash.net:NetStreamPlayTransitions:APPEND_AND_WAIT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">APPEND_AND_WAIT</apiName><shortdesc class="- topic/shortdesc ">
     
    Builds a playlist without starting to play it from the first stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">appendAndWait</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
    Builds a playlist without starting to play it from the first stream. 
    
    <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">APPEND_AND_WAIT</codeph> transition mode is used with the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> method to build a playlist without 
    immediately starting to play it from the first stream. Use this mode to load each item in the playlist except the last one. 
    When you load the last stream in the playlist, set the transition mode to <codeph class="+ topic/ph pr-d/codeph ">RESUME</codeph>. 
    At this point, Flash Player begins to stream and play the playlist.</p>
    
    <p class="- topic/p ">You can use this mode to build a playlist from scratch, or to rebuild a playlist after a lost connection is recovered. 
    For a new playlist, when <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> is called with <codeph class="+ topic/ph pr-d/codeph ">RESUME</codeph>, Flash Player begins streaming 
    and playing from the first stream, or from the start position specified.
    To recover from a lost connection, when you call the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> method with 
    <codeph class="+ topic/ph pr-d/codeph ">RESUME</codeph>, Flash Player determines where the stream was interrupted and instructs the server to start streaming from that location.
    The server in turn is able to determine which stream in the playlist corresponds to that location, and starts streaming from that location.</p>
    
    <p class="- topic/p ">This transition mode is in contrast to the <codeph class="+ topic/ph pr-d/codeph ">APPEND</codeph> mode, where playback starts immediately with the first stream.</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayTransitions/APPEND" class="- topic/link "><linktext class="- topic/linktext ">APPEND</linktext></link><link href="flash.net.xml#NetStreamPlayTransitions/RESUME" class="- topic/link "><linktext class="- topic/linktext ">RESUME</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:APPEND" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">APPEND</apiName><shortdesc class="- topic/shortdesc ">
     
    Adds the stream to a playlist and begins playback with the first stream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">append</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
    Adds the stream to a playlist and begins playback with the first stream. This mode does the same thing as the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> 
    method with the <codeph class="+ topic/ph pr-d/codeph ">reset</codeph> flag set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
    
    <p class="- topic/p ">In this mode, Flash Media Server queues up the stream specified in <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.streamName</codeph> 
    at the end of the playlist and ignores the <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.oldStreamName</codeph> parameter.</p> 
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayTransitions/APPEND_AND_WAIT" class="- topic/link "><linktext class="- topic/linktext ">APPEND_AND_WAIT</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/oldStreamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.oldStreamName</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/streamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.streamName</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:RESET" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RESET</apiName><shortdesc class="- topic/shortdesc ">
    
    Clears any previous play calls and plays the specified stream immediately.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">reset</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    
    Clears any previous play calls and plays the specified stream immediately.
    This mode does the same thing as the <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> method with the <codeph class="+ topic/ph pr-d/codeph ">reset</codeph> flag set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>
    (the default behavior for <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph>).
    
    <p class="- topic/p ">In this mode, the currently playing stream is flushed and the stream specified in <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.streamName</codeph> starts to play.
    The <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.oldStreamName</codeph> parameter is ignored.</p> 
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/oldStreamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.oldStreamName</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/streamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.streamName</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:RESUME" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RESUME</apiName><shortdesc class="- topic/shortdesc ">
     
    Requests data from the new connection starting from the point at which the previous connection ended.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">resume</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
    Requests data from the new connection starting from the point at which the previous connection ended.
    The <codeph class="+ topic/ph pr-d/codeph ">RESUME</codeph> mode aligns the stream across the two connections so no artifacts or jumps are observed 
    in the video playback. Use this mode when you reconnect a stream that was dropped due to server issues 
    or other connection problems.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayTransitions/APPEND_AND_WAIT" class="- topic/link "><linktext class="- topic/linktext ">APPEND_AND_WAIT</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:STOP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STOP</apiName><shortdesc class="- topic/shortdesc ">
     
    Stops playing the streams in a playlist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">stop</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
    Stops playing the streams in a playlist. This mode does the same thing as calling <codeph class="+ topic/ph pr-d/codeph ">NetStream.play(false)</codeph>. 
    It stops and resets the playlist.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()" class="- topic/link "><linktext class="- topic/linktext ">NetStream.play2()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:SWAP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SWAP</apiName><shortdesc class="- topic/shortdesc ">
    Replaces a content stream with a different content stream and maintains the rest of the playlist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">swap</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Replaces a content stream with a different content stream and maintains the rest of the playlist.
    
    <p class="- topic/p ">This mode replaces the stream specified in <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.oldStreamName</codeph> 
    with the stream specified in <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.streamName</codeph>. The rest of the playlist is maintained. 
    In this mode, Flash Media Server does not make assumptions about the content of the streams and treats 
    them like different content. </p>
    
    <p class="- topic/p ">If <codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> has not yet been sent, the server performs the switch
    at the stream boundary and sends the bits for <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> from the beginning.
    If the server has already started sending the bits for <codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph>, it doesn't switch to <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph>,
    and a <codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.Failed</codeph> event is sent.</p>
    
    <p class="- topic/p ">Use this mode if the streams you want to switch are not related to each other and have different content or lengths. For example,
    use this mode when you want to swap one commercial for another based on user tracking and past commercial-viewing statistics.</p>
    
    <p class="- topic/p ">To switch from one stream to another with the same content, use the <codeph class="+ topic/ph pr-d/codeph ">SWITCH</codeph> mode instead.</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayTransitions/SWITCH" class="- topic/link "><linktext class="- topic/linktext ">SWITCH</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/oldStreamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.oldStreamName</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/streamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.streamName</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:SWITCH" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SWITCH</apiName><shortdesc class="- topic/shortdesc ">
    Switches from playing one stream to another stream, typically with streams of the same content.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">switch</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Switches from playing one stream to another stream, typically with streams of the same content.
    Specify the streams to switch in <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.oldStreamName</codeph> and <codeph class="+ topic/ph pr-d/codeph ">NetStreamPlayOptions.streamName</codeph>. 
    
    <p class="- topic/p ">Use this mode when you want to switch to a stream that has the same content but is encoded 
    at a different bit rate or resolution. For example, use this mode when the application queues up streams in a playlist
    or is playing a single stream at a particular bit rate, then calculates that the bandwidth availability 
    or the CPU capability is either lower or higher than the stream requirements. The application can then 
    update the streams with their higher or lower bit rate versions.</p>
    
    <p class="- topic/p ">In this mode, Flash Media Server makes certain assumptions about the relationship between the 
    <codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> and <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> streams.
    The server assumes that the streams contain the same content and have the same keyframe interval but have different 
    resolutions or bit rates.</p>
    
    <p class="- topic/p ">When a playlist has been queued up and <codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> is one of the streams in the playlist or is currently playing, 
    <codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> is replaced by <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph>.</p>
    
    <p class="- topic/p ">If <codeph class="+ topic/ph pr-d/codeph ">oldStreamName</codeph> is null or undefined, or if it is not found in the playlist,
    the server switches to <codeph class="+ topic/ph pr-d/codeph ">streamName</codeph> at the next logical point, to ensure a smooth switch.</p>
    
    <p class="- topic/p ">To switch from one stream to another with different content, use the <codeph class="+ topic/ph pr-d/codeph ">SWAP</codeph> mode instead.</p>
    
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStreamPlayTransitions/SWAP" class="- topic/link "><linktext class="- topic/linktext ">SWAP</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/oldStreamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.oldStreamName</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/streamName" class="- topic/link "><linktext class="- topic/linktext ">NetStreamPlayOptions.streamName</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.net:NetConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetConnection</apiName><shortdesc class="- topic/shortdesc ">
 The NetConnection class creates a two-way connection between a client and a server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetConnection, Video
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The NetConnection class creates a two-way connection between a client and a server.
 The client can be <ph class="- topic/ph ">a Flash Player or AIR</ph>  application.
 The server can be a web server, Flash Media Server, an application server running Flash Remoting,
 or the <xref href="http://labs.adobe.com/technologies/stratus/" scope="external" class="- topic/xref ">Adobe Stratus</xref> service. Call <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> to
 establish the connection. Use the NetStream class to send streams of media and data over the connection.
 
 <p class="- topic/p ">For security information about loading content and data into Flash Player and AIR, see the following:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">To load content and data into Flash Player from a web server or from a local location, see
 <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Flash Player Developer Center: Security</xref>.</li><li class="- topic/li ">To load content and data into Flash Player and AIR from Flash Media Server, see the
 <xref href="http://www.adobe.com/support/flashmediaserver" scope="external" class="- topic/xref ">Flash Media Server documentation</xref>.</li><li class="- topic/li ">To load content and data into AIR, see the
 <xref href="http://www.adobe.com/devnet/air/" scope="external" class="- topic/xref ">Adobe AIR Developer Center</xref>.</li></ul>
 
 <p class="- topic/p ">
 To write callback methods for this class, extend the class and define the
 callback methods in the subclass, or assign the <codeph class="+ topic/ph pr-d/codeph ">client</codeph>
 property to an object and define the callback methods on that object.</p>
 
 </apiDesc><example conref="examples\NetConnectionExample.as" class="- topic/example "> The following example uses a Video object with the NetConnection and 
 NetStream classes to load and play an FLV file. 
 <p class="- topic/p ">In this example, the code that creates the Video and NetStream objects and calls the
 <codeph class="+ topic/ph pr-d/codeph ">Video.attachNetStream()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> methods is placed 
 in a handler function. The handler is called only if the
 attempt to connect to the NetConnection object is successful; that is, 
 when the <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event returns an <codeph class="+ topic/ph pr-d/codeph ">info</codeph> object with a <codeph class="+ topic/ph pr-d/codeph ">code</codeph>
 property that indicates success. 
 It is recommended that you wait for a successful connection before you call
 <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph>. </p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.NetStatusEvent;
    import flash.events.SecurityErrorEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;
    import flash.events.Event;

    public class NetConnectionExample extends Sprite {
        private var videoURL:String = "http://www.helpexamples.com/flash/video/cuepoints.flv";
        private var connection:NetConnection;
        private var stream:NetStream;
        private var video:Video = new Video();        

        public function NetConnectionExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Stream not found: " + videoURL);
                    break;
            }
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function connectStream():void {
            var stream:NetStream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.client = new CustomClient();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }
    }
}

class CustomClient {
    public function onMetaData(info:Object):void {
        trace("metadata: duration=" + info.duration + " width=" + info.width + " height=" + info.height + " framerate=" + info.framerate);
    }
    public function onCuePoint(info:Object):void {
        trace("cuepoint: time=" + info.time + " name=" + info.name + " type=" + info.type);
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/client" class="- topic/link "><linktext class="- topic/linktext ">client</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">NetStream</linktext></link><link href="flash.net.xml#NetConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">connect()</linktext></link><link href="flash.net.xml#Responder" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Responder</linktext></link></related-links><adobeApiEvent id="flash.net:NetConnection_flash.events.NetStatusEvent.NET_STATUS_netStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">netStatus</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a NetConnection object is reporting its status or error condition.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.NetStatusEvent.NET_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.NetStatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a NetConnection object is reporting its status or error condition.
 The <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event contains an <codeph class="+ topic/ph pr-d/codeph ">info</codeph> property,
 which is an information object that contains specific information about the event,
 such as whether a connection attempt succeeded or failed.
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetConnection_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched if a call to NetConnection.call()
 attempts to connect to a server outside the caller's security sandbox.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched if a call to NetConnection.call()
 attempts to connect to a server outside the caller's security sandbox.
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/call()" class="- topic/link "><linktext class="- topic/linktext ">NetConnection.call()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetConnection_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an input or output error occurs that causes a network operation to fail.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an input or output error occurs that causes a network operation to fail.
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:NetConnection_flash.events.AsyncErrorEvent.ASYNC_ERROR_asyncError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">asyncError</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an exception is thrown asynchronously &amp;#x2014; that is,
 from native asynchronous code.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.AsyncErrorEvent.ASYNC_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.AsyncErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an exception is thrown asynchronously — that is,
 from native asynchronous code.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:NetConnection:NetConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NetConnection</apiName><shortdesc class="- topic/shortdesc ">
     Creates a NetConnection object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>See the example for <code>connect()</code>.
     
     </oldexample></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a NetConnection object. Call the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method to make a connection.
     
     <p class="- topic/p ">If an application needs to communicate with servers released prior
     to Flash Player 9, set the NetConnection object's
     <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property.</p>
     
     <p class="- topic/p ">The following code creates a NetConnection object:</p>
     
     <pre xml:space="preserve" class="- topic/pre ">
     var nc:NetConnection = new NetConnection();
     </pre>
     
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.connect()</linktext></link><link href="flash.net.xml#NetConnection/objectEncoding" class="- topic/link "><linktext class="- topic/linktext ">objectEncoding</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:NetConnection:addHeader" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addHeader</apiName><shortdesc class="- topic/shortdesc ">
     Adds a context header to the Action Message Format (AMF) packet structure.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>IMD: This method can be used in the client Flash Player for Flash Remoting
     and Flex apps. It is also a server side method used by Flash Media Server apps.
     
     
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">operation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Identifies the header and the ActionScript object data associated with it.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">mustUnderstand</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value of <codeph class="+ topic/ph pr-d/codeph ">true</codeph> indicates that the server must understand
     and process this header before it handles any of the following headers or messages.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">param</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Any ActionScript object.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Adds a context header to the Action Message Format (AMF) packet structure. This header is sent with
     every future AMF packet. If you call <codeph class="+ topic/ph pr-d/codeph ">NetConnection.addHeader()</codeph>
     using the same name, the new header replaces the existing header, and the new header
     persists for the duration of the NetConnection object. You can remove a header by
     calling <codeph class="+ topic/ph pr-d/codeph ">NetConnection.addHeader()</codeph> with the name of the header to remove
     an undefined object.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetConnection:call" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">call</apiName><shortdesc class="- topic/shortdesc ">
     Calls a command or method on Flash Media Server or on an application server running Flash Remoting.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">command</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A method specified in the form <codeph class="+ topic/ph pr-d/codeph ">[objectPath/]method</codeph>. For example,
     the <codeph class="+ topic/ph pr-d/codeph ">someObject/doSomething</codeph> command tells the remote server
     to call the <codeph class="+ topic/ph pr-d/codeph ">clientObject.someObject.doSomething()</codeph> method, with all the optional
     <codeph class="+ topic/ph pr-d/codeph ">... arguments</codeph> parameters. If the object path is missing,
     <codeph class="+ topic/ph pr-d/codeph ">clientObject.doSomething()</codeph> is invoked on the remote server.
     <p class="- topic/p ">
     With Flash Media Server, <codeph class="+ topic/ph pr-d/codeph ">command</codeph> is the name of a function
     defined in an application's server-side script.
     You do not need to use an object path before <codeph class="+ topic/ph pr-d/codeph ">command</codeph>
     if the server-side script is placed at the root level of
     the application directory.
     </p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An optional object that is used to handle return values from the server.
     The Responder object can have two defined methods to handle the returned result:
     <codeph class="+ topic/ph pr-d/codeph ">result</codeph> and <codeph class="+ topic/ph pr-d/codeph ">status</codeph>. If an error is returned as the result,
     <codeph class="+ topic/ph pr-d/codeph ">status</codeph> is invoked; otherwise, <codeph class="+ topic/ph pr-d/codeph ">result</codeph> is invoked. The Responder object
     can process errors related to specific operations, while the NetConnection object responds to
     errors related to the connection status.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Optional arguments that can be of any ActionScript type,
     including a reference to another ActionScript object. These arguments are passed
     to the method specified in the <codeph class="+ topic/ph pr-d/codeph ">command</codeph> parameter when the method is executed on the
     remote application server.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Calls a command or method on Flash Media Server or on an application server running Flash Remoting.
     
     Before calling <codeph class="+ topic/ph pr-d/codeph ">NetConnection.call()</codeph> you must call <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph>
     to connect to the server. You must create a server-side function to pass to this method.
     
     <p class="- topic/p ">You cannot connect to commonly reserved ports.
     For a complete list of blocked ports, see "Restricting Networking APIs" in the
     <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Responder" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Responder</linktext></link></related-links><adobeApiEvent id="flash.net:NetConnection:call_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A call attempted
     to communicate with a server outside the caller's security sandbox.
     You can avoid this problem by using a policy file on the server.
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">A call attempted
     to communicate with a server outside the caller's security sandbox.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:NetConnection:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Closes the connection that was opened locally or to the server and dispatches
     a netStatus event
     with a code property of NetConnection.Connect.Closed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>server-specific: Documented this method with server-specific info in span tags. The
     info is relevant for Flex servers, as well as Flash Media Server.
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Closes the connection that was opened locally or to the server and dispatches
     a <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event
     with a <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property of <codeph class="+ topic/ph pr-d/codeph ">NetConnection.Connect.Closed</codeph>.
     
     <p class="- topic/p ">
     This method disconnects all NetStream objects running over the connection.
     Any queued data that has not been sent is discarded. (To terminate
     local or server streams without closing the connection, use <codeph class="+ topic/ph pr-d/codeph ">NetStream.close()</codeph>.)
     If you close the connection and then want to create a new one,
     you must create a new NetConnection object and call the <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph> method again.
     </p>
     
     <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method also disconnects all remote shared objects running
     over this connection.
     However, you don't need to recreate the shared object to reconnect. Instead, you can just
     call <codeph class="+ topic/ph pr-d/codeph ">SharedObject.connect()</codeph> to reestablish the connection to the shared object.
     Also, any data in the shared object that was queued when you issued
     <codeph class="+ topic/ph pr-d/codeph ">NetConnection.close()</codeph> is sent after you reestablish a connection
     to the shared object.</p>
     
     <p class="- topic/p ">
     With Flash Media Server, the best development practice is to call <codeph class="+ topic/ph pr-d/codeph ">close()</codeph>
     when the client no longer needs the connection to the server. Calling <codeph class="+ topic/ph pr-d/codeph ">close()</codeph>
     is the fastest way to clean up unused connections. You can configure the server to close idle connections
     automatically as a back-up measure. For more information, see
     the <i class="+ topic/ph hi-d/i "><xref href="http://www.adobe.com/support/documentation" scope="external" class="- topic/xref ">Flash Media Server Configuration and Administration Guide</xref></i>.
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">NetStream</linktext></link><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetConnection:connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><shortdesc class="- topic/shortdesc ">
     Creates a two-way connection to an application on Flash Media Server or to Flash Remoting, or creates a two-way network
     endpoint for RTMFP peer-to-peer group communication.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetConnection.connect, connect
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The URI passed to the <codeph class="+ topic/ph pr-d/codeph ">command</codeph> parameter is
     improperly formatted.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The connection failed. This can happen if you call <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph>
     from within a <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event handler, which is not allowed.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Local-with-filesystem SWF files cannot communicate with the Internet.
     You can avoid this problem by reclassifying the SWF file as local-with-networking or trusted.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You cannot connect to commonly reserved ports.
     For a complete list of blocked ports, see "Restricting Networking APIs" in the
     <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">command</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Use one of the following values for the <codeph class="+ topic/ph pr-d/codeph ">command</codeph> parameter:
     <ul class="- topic/ul "><li class="- topic/li ">To play video and mp3 files from a local file system or from a web server, pass <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</li><li class="- topic/li ">To connect to an application server running Flash Remoting, pass a URL that uses the <codeph class="+ topic/ph pr-d/codeph ">http</codeph> protocol.</li><li class="- topic/li ">(Flash Player 10.1 or AIR 2 or later) To create a serverless network endpoint for RTMFP IP multicast communication,
     pass the string <codeph class="+ topic/ph pr-d/codeph ">"rtmfp:"</codeph>. Use this connection type to receive an IP multicast stream from a publisher without using a server.
     You can also use this connection type to use IP multicast to discover peers on the same local area network (LAN).</li><p class="- topic/p ">This connection type has the following limitations:</p><p class="- topic/p ">Only peers on the same LAN can discover each other.</p><p class="- topic/p ">Using IP multicast, Flash Player can receive streams, it cannot send them.</p><p class="- topic/p ">Flash Player and AIR can send and receive streams in a peer-to-peer group, but the peers
     must be discovered on the same LAN using IP multicast.</p><p class="- topic/p ">This technique cannot be used for one-to-one communication.</p><p class="- topic/p "/><li class="- topic/li ">To connect to Flash Media Server, pass the URI of the
     application on the server. Use the following
     syntax (items in brackets are optional):
     
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">protocol:[//host][:port]/appname[/instanceName]</codeph></p>
     
     <p class="- topic/p ">Use one of the following protocols: <codeph class="+ topic/ph pr-d/codeph ">rtmp</codeph>,
     <codeph class="+ topic/ph pr-d/codeph ">rtmpe</codeph>, <codeph class="+ topic/ph pr-d/codeph ">rtmps</codeph>, <codeph class="+ topic/ph pr-d/codeph ">rtmpt</codeph>, <codeph class="+ topic/ph pr-d/codeph ">rtmpte</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">rtmfp</codeph>.
     If the connection is successful, a
     <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event with a <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property of
     <codeph class="+ topic/ph pr-d/codeph ">NetConnection.Connect.Success</codeph> is returned.
     See the <codeph class="+ topic/ph pr-d/codeph ">NetStatusEvent.info</codeph> property for a list of
     all event codes returned in response to calling <codeph class="+ topic/ph pr-d/codeph ">connect()</codeph>. </p>
     
     <p class="- topic/p ">If the file is served from the same host where the server is installed,
     you can omit the <codeph class="+ topic/ph pr-d/codeph ">//host</codeph> parameter. If you omit the <codeph class="+ topic/ph pr-d/codeph ">/instanceName</codeph> parameter,
     <ph class="- topic/ph ">Flash Player or </ph>AIR connects to the application's default instance.</p>
     
     <p class="- topic/p ">(Flash Player 10.1 or AIR 2 or later)To create peer-to-peer applications, use the <codeph class="+ topic/ph pr-d/codeph ">rtmfp</codeph> protocol.</p>
     
     </li></ul>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Optional parameters of any type passed to the application
     specified in <codeph class="+ topic/ph pr-d/codeph ">command</codeph>.
     With Flash Media Server, the additional arguments are passed to the
     <codeph class="+ topic/ph pr-d/codeph ">application.onConnect()</codeph> event handler in the application's server-side
     code. You must define and handle the arguments in <codeph class="+ topic/ph pr-d/codeph ">onConnect()</codeph>.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a two-way connection to an application on Flash Media Server or to Flash Remoting, or creates a two-way network
     endpoint for RTMFP peer-to-peer group communication. To report its status or an error condition, a
     call to <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> dispatches a <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event.
     
     <p class="- topic/p ">Call <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> to do the following:</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">Pass "null" to play video and mp3 files from a local file system or from a web server.</li><li class="- topic/li ">Pass an "http" URL to connect to an application server running Flash Remoting. Use the NetServices class to call functions on and
     return results from application servers over a NetConnection object.
     For more information, see the <xref href="http://www.adobe.com/support/documentation" scope="external" class="- topic/xref ">Flash Remoting documentation</xref>. </li><li class="- topic/li ">Pass an "rtmp/e/s" URL to connect to a Flash Media Server application.</li><li class="- topic/li ">Pass an "rtmfp" URL to create a two-way network endpoint for RTMFP client-server, peer-to-peer, and IP multicast communication.</li><li class="- topic/li ">Pass the string "rtmfp:" to create a serverless two-way network endpoint for RTMFP IP multicast communication.</li></ul>
     
     <p class="- topic/p ">Consider the following security model:</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">By default, <ph class="- topic/ph ">Flash Player or</ph> AIR denies access between sandboxes.
     A website can enable access to a resource by using a URL policy file. </li><li class="- topic/li ">Your application can deny access to a resource on the server.
     In a Flash Media Server application, use Server-Side ActionScript code to deny access.
     See the <xref href="http://www.adobe.com/go/learn_fms_docs_en" scope="external" class="- topic/xref ">Flash Media Server documentation</xref>.</li><li class="- topic/li ">You cannot call <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> if the calling file is in the
     local-with-file-system sandbox.</li><li class="- topic/li "> You cannot connect to commonly reserved ports.
     For a complete list of blocked ports, see "Restricting Networking APIs" in the
     <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</li><li class="- topic/li ">To prevent a SWF file from calling this method, set the <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph>
     parameter of the the <codeph class="+ topic/ph pr-d/codeph ">object</codeph> and <codeph class="+ topic/ph pr-d/codeph ">embed</codeph> tags in the HTML
     page that contains the SWF content.</li></ul>
     
     <p class="- topic/p ">However, in Adobe AIR, content in the <codeph class="+ topic/ph pr-d/codeph ">application</codeph> security sandbox (content
     installed with the AIR application) are not restricted by these security limitations.</p>
     
     <p class="- topic/p ">For more information about security, see the Adobe Flash Player Developer Center:
     <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Security</xref>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link></related-links></apiOperation><apiValue id="flash.net:NetConnection:client:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">client</apiName><shortdesc class="- topic/shortdesc ">
     Indicates the object on which callback methods are invoked.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Property documented; needs review.
     
      </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property must be set to a non-null object.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates the object on which callback methods are invoked. The default is
     this NetConnection instance. If you set the <codeph class="+ topic/ph pr-d/codeph ">client</codeph> property to another object,
     callback methods will be invoked on that object.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:connectedProxyType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connectedProxyType</apiName><shortdesc class="- topic/shortdesc ">
     The proxy type used to make a successful connection to Flash Media Server.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>This property is used in Breeze 5.5.
     
      </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An attempt was made to access this property when the NetConnection instance
     was not connected.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The proxy type used to make a successful connection to Flash Media Server. Possible values are:
      <codeph class="+ topic/ph pr-d/codeph ">"none"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"HTTP"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"HTTPS"</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">"CONNECT"</codeph>.
     
     <p class="- topic/p ">The value is <codeph class="+ topic/ph pr-d/codeph ">"none"</codeph> if the connection is not tunneled or is a native SSL connection.</p>
     
     <p class="- topic/p ">The value is <codeph class="+ topic/ph pr-d/codeph ">"HTTP"</codeph> if the connection is tunneled over HTTP.</p>
     
     <p class="- topic/p ">The value is <codeph class="+ topic/ph pr-d/codeph ">"HTTPS"</codeph> if the connection is tunneled over HTTPS,</p>
     
     <p class="- topic/p ">The value is <codeph class="+ topic/ph pr-d/codeph ">"CONNECT"</codeph> if the connection is tunneled using the CONNECT method through a proxy server.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether the application is connected to a server through
     a persistent RTMP connection (true) or not (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether the application is connected to a server through
     a persistent RTMP connection (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or not (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     When connected through HTTP, this property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, except
     when connected to Flash Remoting services on an application server,
     in which case it is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:defaultObjectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">defaultObjectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     The default object encoding for NetConnection objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The default object encoding for NetConnection objects.
     When an object is written to or read from binary data, the <codeph class="+ topic/ph pr-d/codeph ">defaultObjectEncoding</codeph>
     property indicates which Action Message Format (AMF) version is used to serialize the data:
     the ActionScript 3.0 format (<codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph>)
     or the ActionScript 1.0 and ActionScript 2.0 format (<codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF0</codeph>).
     
     <p class="- topic/p ">The default value is <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph>.
     Changing <codeph class="+ topic/ph pr-d/codeph ">NetConnection.defaultObjectEncoding</codeph>
     does not affect existing NetConnection instances; it affects only instances that
     are created subsequently.</p>
     
     <p class="- topic/p ">To set an object's encoding separately (rather than setting object encoding for the entire
     application), set the <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property of the NetConnection object instead.</p>
     
     <p class="- topic/p ">For more detailed information, see the description of the <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph>
     property.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/objectEncoding" class="- topic/link "><linktext class="- topic/linktext ">NetConnection.objectEncoding</linktext></link><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">flash.net.ObjectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:farID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">farID</apiName><shortdesc class="- topic/shortdesc ">
     The identifier of the Flash Media Server instance to which this Flash Player or Adobe AIR instance is connected.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The identifier of the Flash Media Server instance to which this Flash Player or Adobe AIR instance is connected.
     This property is meaningful only for RTMFP connections. The value of this property is available only after an RTMFP connection is established.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/nearID" class="- topic/link "><linktext class="- topic/linktext ">nearID</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:farNonce:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">farNonce</apiName><shortdesc class="- topic/shortdesc ">
     A value chosen substantially by Flash Media Server, unique to this connection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     A value chosen substantially by Flash Media Server, unique to this connection. This value appears to the server
     as its <codeph class="+ topic/ph pr-d/codeph ">client.nearNonce</codeph> value. This value is defined only for RTMFP, RTMPE, and RTMPTE connections.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:httpIdleTimeout:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">httpIdleTimeout</apiName><shortdesc class="- topic/shortdesc "> 
        The time, in milliseconds, to wait for an HTTP response.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The time in milliseconds to wait for an HTTP response.
        </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
        The time, in milliseconds, to wait for an HTTP response. The default value is zero.
	
	<ul class="- topic/ul "><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">httpIdleTimeout</codeph> value is a <codeph class="+ topic/ph pr-d/codeph ">Number</codeph>.</li><li class="- topic/li ">When using an HTTP connection, a positive value indicates the number of milliseconds an inactive connection should remain
	open.</li><li class="- topic/li ">A value of zero indicates that the default networking idle timeout value for the platform should be used.</li><li class="- topic/li ">A negative value will result in a <codeph class="+ topic/ph pr-d/codeph ">RangeError</codeph>.</li><li class="- topic/li ">If the <codeph class="+ topic/ph pr-d/codeph ">httpIdleTimeout</codeph> value is exceeded, a <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event is dispatched.</li><li class="- topic/li ">This property will only affect <codeph class="+ topic/ph pr-d/codeph ">NetConnection</codeph> objects created with HTTP connections.
	<codeph class="+ topic/ph pr-d/codeph ">NetConnection</codeph> objects created with RTMP, RTMFP, or other HTTP channels remain unaffected by this property.</li></ul>
	<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	//Set the timeout to 5 seconds
	connection = new NetConnection();
	connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
	connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
	connection.httpIdleTimeout = 5000;
	</codeblock>
	
	In Linux-based systems, the <codeph class="+ topic/ph pr-d/codeph ">NetConnection</codeph> may take more seconds to timeout than what is specified using the 
	<codeph class="+ topic/ph pr-d/codeph ">httpIdleTimeout</codeph> value.
	
        </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:maxPeerConnections:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">maxPeerConnections</apiName><shortdesc class="- topic/shortdesc ">
     The total number of inbound and outbound peer connections that this instance of Flash Player or Adobe AIR allows.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The total number of inbound and outbound peer connections that this instance of Flash Player or Adobe AIR allows.
     The default value is 8.
     <p class="- topic/p ">This value does not distinguish between publisher and subscriber connections. If this value is reduced while
     peer connections are present, the new value affects new incoming connections only. Existing connections are not dropped.</p>
     
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:nearID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">nearID</apiName><shortdesc class="- topic/shortdesc ">
     The identifier of this Flash Player or Adobe AIR instance for this NetConnection instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The identifier of this Flash Player or Adobe AIR instance for this NetConnection instance. This property is meaningful only for RTMFP connections.
     
     <p class="- topic/p ">Every NetConnection instance has a unique <codeph class="+ topic/ph pr-d/codeph ">nearID</codeph> property. No Flash Player or Adobe AIR instance
     or NetConnection instance has the same identifier.</p>
     
     <p class="- topic/p ">Other Flash Player or Adobe AIR instances
     use this identifier as the <codeph class="+ topic/ph pr-d/codeph ">peerID</codeph> for new NetStream connections to this client.
     Subsequently, this identifier is the <codeph class="+ topic/ph pr-d/codeph ">farID</codeph> in any peer NetStream that connects to this instance.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/farID" class="- topic/link "><linktext class="- topic/linktext ">farID</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:nearNonce:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">nearNonce</apiName><shortdesc class="- topic/shortdesc ">
     A value chosen substantially by this Flash Player or Adobe AIR instance, unique to this connection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     A value chosen substantially by this Flash Player or Adobe AIR instance, unique to this connection. This value appears to the server
     as its <codeph class="+ topic/ph pr-d/codeph ">client.farNonce</codeph> value. This value is defined only for RTMFP, RTMPE, and RTMPTE connections.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:objectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     The object encoding for this NetConnection instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An attempt was made to set the value of the <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph>
     property while the NetConnection instance was connected.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ReferenceError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ReferenceError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This property was set to a value other than <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF0</codeph>
     or <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The object encoding for this NetConnection instance.
     
     <p class="- topic/p ">
     When an object is written to or read from binary data, the <codeph class="+ topic/ph pr-d/codeph ">defaultObjectEncoding</codeph>
     property indicates which Action Message Format (AMF) version is used to serialize the data: the ActionScript 3.0 format (<codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph>)
     or the ActionScript 1.0 and ActionScript 2.0 format (<codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF0</codeph>).
     Set the <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property to set an AMF version for a NetConnection instance.
     </p>
     
     <p class="- topic/p ">It's important to understand this property if your application needs to
     communicate with servers released prior to Flash Player 9. The following three scenarios are possible:
     </p>
     
     <ul class="- topic/ul "><li class="- topic/li ">Connecting to a server that supports AMF3 (for example, Flex Data Services 2 or Flash Media Server 3).
     The default value of <codeph class="+ topic/ph pr-d/codeph ">defaultObjectEncoding</codeph> is
     <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph>. All NetConnection instances created in this
     file use AMF3 serialization, so you don't need to set the
     <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property.</li><li class="- topic/li ">Connecting to a server that doesn't support AMF3 (for example, Flash Media Server 2).
     In this scenario, set the static <codeph class="+ topic/ph pr-d/codeph ">NetConnection.defaultObjectEncoding</codeph> property to
     <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF0</codeph>. All NetConnection instances created in this
     SWF file use AMF0 serialization. You don't need to set the
     <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property. </li><li class="- topic/li ">Connecting to multiple servers that use different encoding versions. Instead of
     using <codeph class="+ topic/ph pr-d/codeph ">defaultObjectEncoding</codeph>, set the object encoding on a per-connection
     basis using the <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph> property for each connection.
     Set it to <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF0</codeph> to connect to
     servers that use AMF0 encoding, such as Flash Media Server 2,
     and set it to <codeph class="+ topic/ph pr-d/codeph ">ObjectEncoding.AMF3</codeph> to connect to
     servers that use AMF3 encoding, such as Flex Data Services 2.</li></ul>
     
     <p class="- topic/p ">Once a NetConnection instance is connected, its <codeph class="+ topic/ph pr-d/codeph ">objectEncoding</codeph>
     property is read-only.</p>
     
     <p class="- topic/p ">If you use the wrong encoding to connect to a server, the NetConnection object
     dispatches the <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> event. The <codeph class="+ topic/ph pr-d/codeph ">NetStatusEvent.info</codeph>
     property contains an information object with a <codeph class="+ topic/ph pr-d/codeph ">code</codeph> property value of
     <codeph class="+ topic/ph pr-d/codeph ">NetConnection.Connect.Failed</codeph>, and a description explaining that the object
     encoding is incorrect.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection/defaultObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">defaultObjectEncoding</linktext></link><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">flash.net.ObjectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:protocol:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">protocol</apiName><shortdesc class="- topic/shortdesc ">
     The protocol used to establish the connection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An attempt was made to access this property when the NetConnection instance
     was not connected.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The protocol used to establish the connection. This property is relevant when using
     Flash Media Server. Possible values are as follows:
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"rtmp"</codeph>: Real-Time Messaging Protocol (RTMP)</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"rtmpe"</codeph>: Encrypted RTMP</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"rtmpt"</codeph>: HTTP tunneling RTMP</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"rtmpte"</codeph>: HTTP tunneling encrypted RTMP</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"rtmps"</codeph>: HTTPS-based RTMP</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"rtmfp"</codeph>: Real-Time Media Flow Protocol (RTMFP)</li></ul>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:proxyType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">proxyType</apiName><shortdesc class="- topic/shortdesc ">
     Determines which fallback methods are tried if an
     initial connection attempt to Flash Media Server fails.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>This property is used in Breeze 5.5. In the Breeze Add-in, the default value is <code>"best"</code>; if this value
     is not changed, native SSL sockets are used by default, and a fallback
     to other methods is used if necessary.
     
      </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Determines which fallback methods are tried if an
     initial connection attempt to Flash Media Server fails. Set the <codeph class="+ topic/ph pr-d/codeph ">proxyType</codeph> property before
     calling the <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> method.
     
     <p class="- topic/p ">Acceptable values are <codeph class="+ topic/ph pr-d/codeph ">"none"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"HTTP"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"CONNECT"</codeph>,
     and <codeph class="+ topic/ph pr-d/codeph ">"best"</codeph>.The default value is <codeph class="+ topic/ph pr-d/codeph ">"none"</codeph>.</p>
     
     <p class="- topic/p ">To use native SSL, set the property to <codeph class="+ topic/ph pr-d/codeph ">"best"</codeph>. If the player cannot make a direct connection
     to the server (over the default port of 443 or over another port that you specify)
     and a proxy server is in place, the player tries to use the CONNECT method. If that attempt fails, the player tunnels over HTTPS.
     </p>
     
     <p class="- topic/p ">If the property is set to <codeph class="+ topic/ph pr-d/codeph ">"HTTP"</codeph> and a direct connection fails, HTTP tunneling is used.
     If the property is set to <codeph class="+ topic/ph pr-d/codeph ">"CONNECT"</codeph> and a direct connection fails,
     the <codeph class="+ topic/ph pr-d/codeph ">CONNECT</codeph> method of tunneling is used. If that fails, the connection does
     not fall back to HTTP tunneling.</p>
     
     <p class="- topic/p ">This property is applicable only when using RTMP, RTMPS, or RTMPT. The <codeph class="+ topic/ph pr-d/codeph ">CONNECT</codeph>
     method is applicable only to users who are connected to the network by a proxy server.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:unconnectedPeerStreams:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">unconnectedPeerStreams</apiName><shortdesc class="- topic/shortdesc ">
     
     An object that holds all of the peer subscriber NetStream objects that are not associated with publishing NetStream objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     An object that holds all of the peer subscriber NetStream objects that are not associated with publishing NetStream objects.
     Subscriber NetStream objects that are associated with publishing NetStream objects are in the <codeph class="+ topic/ph pr-d/codeph ">NetStream.peerStreams</codeph>
     array.
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/peerStreams" class="- topic/link "><linktext class="- topic/linktext ">NetStream.peerStreams</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:uri:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">uri</apiName><shortdesc class="- topic/shortdesc ">
     The URI passed to the NetConnection.connect() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>server-specific: Documented this method with server-specific info in span tags. The
     info is relevant for Flex servers, as well as Flash Media Server.
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The URI passed to the NetConnection.connect() method.
     If <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> hasn't been called or if no URI was passed,
     this property is <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:usingTLS:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">usingTLS</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether a secure connection was made using native Transport Layer Security (TLS)
     rather than HTTPS.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An attempt was made to access this property when the NetConnection instance
     was not connected.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether a secure connection was made using native Transport Layer Security (TLS)
     rather than HTTPS. This property is valid only when a NetConnection object is connected.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>