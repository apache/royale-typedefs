<?xml version="1.0" encoding="UTF-8"?><apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="__Global__" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">__Global__</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="globalClassifier:VerifyError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">VerifyError</apiName><shortdesc class="- topic/shortdesc ">
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
 The VerifyError class represents an error that occurs when a malformed 
 or corrupted SWF file is encountered.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">An VerifyError is thrown when a malformed or corrupted SWF File is encountered.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The VerifyError class represents an error that occurs when a malformed 
 or corrupted SWF file is encountered. 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader" class="- topic/link "><linktext class="- topic/linktext ">Loader class</linktext></link></related-links><apiConstructor id="VerifyError:VerifyError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">VerifyError</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new VerifyError object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Contains the message associated with the VerifyError object.      
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new VerifyError object.
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:ArgumentError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ArgumentError</apiName><shortdesc class="- topic/shortdesc ">
 The ArgumentError class represents an error that occurs when the arguments 
 supplied in a function do not match the arguments defined for 
 that function.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">An ArgumentError is thrown when the parameter values supplied during a 
 function call do not match the parameters defined for that function.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The ArgumentError class represents an error that occurs when the arguments 
 supplied in a function do not match the arguments defined for 
 that function. This error occurs, for example, when a function is called with
 the wrong number of arguments, an argument of the incorrect type, or an invalid argument.
 
 </apiDesc><example conref="examples\ArgumentErrorExample.as" class="- topic/example "> The following example shows how an <codeph class="+ topic/ph pr-d/codeph ">ArgumentError</codeph> error is 
 generated and handled within a <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph> statement. The
 <codeph class="+ topic/ph pr-d/codeph ">println()</codeph> function takes one argument, a single string, but because two strings are supplied, 
 the error is thrown. 
 Typically, the compiler might catch such an error, but the <codeph class="+ topic/ph pr-d/codeph ">this[]</codeph> syntax in the <codeph class="+ topic/ph pr-d/codeph ">try</codeph>
 statement bypasses the compiler's syntax checking for the function.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    
    public class ArgumentErrorExample extends Sprite {
        public function ArgumentErrorExample() {
                println("Hello World");
                
                try {
                    this["println"]("Hello", "World");
                }
                catch(e:ArgumentError) {
                    trace(e);
                }
        }
        
        public function println(str:String):void {
            trace(str);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="ArgumentError:ArgumentError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ArgumentError</apiName><shortdesc class="- topic/shortdesc ">
	 Creates an ArgumentError object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string associated with the error.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates an ArgumentError object.
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:QName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">QName</apiName><shortdesc class="- topic/shortdesc ">

QName objects represent qualified names of XML elements and attributes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">

QName objects represent qualified names of XML elements and attributes. Each
QName object has a local name and a namespace Uniform Resource Identifier (URI). 
When the value of the namespace URI is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, the QName object matches any namespace.
Use the QName constructor to create a new QName object that is either a copy of another QName 
object or a new QName object with a <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> from a Namespace object and a 
<codeph class="+ topic/ph pr-d/codeph ">localName</codeph> from a QName object. 
 

<p class="- topic/p ">Methods specific to E4X can use QName objects interchangeably with strings. 
E4X methods are in the QName, Namespace, XML, and XMLList classes.
These E4X methods, which take a string, can also take a QName object. 
This interchangeability is how namespace support works with, for example, 
the <codeph class="+ topic/ph pr-d/codeph ">XML.child()</codeph> method. </p>

<p class="- topic/p ">The QName class (along with the XML, XMLList, and Namespace classes) implements 
powerful XML-handling standards defined in ECMAScript for XML 
(E4X) specification (ECMA-357 edition 2).</p>

<p class="- topic/p ">A qualified identifier evaluates to a QName object. If the QName object of an XML element is 
specified without identifying a namespace, the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> 
property of the associated QName object is set to the global default namespace. If the QName object of an XML  
attribute is specified without identifying a namespace, the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> property is set to 
an empty string.</p>

</apiDesc><example conref="examples\QNameExample.as" class="- topic/example "> The following example shows how to create a QName instance and use it to select XML elements.
 Two ways of creating a QName are shown:
 <ol class="- topic/ol "><li class="- topic/li ">Creating a Namespace instance and then using it as input to the QName constructor. 
      This approach is best if you want to use the <codeph class="+ topic/ph pr-d/codeph ">Namespace.prefix</codeph> property for other 
      purposes later.</li><li class="- topic/li ">Creating a QName instance using a simple string value for the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> 
      parameter in the QName constructor.</li></ol>
 <p class="- topic/p ">
 This code does the following things:
 </p>
 <ol class="- topic/ol "><li class="- topic/li ">Defines an XML variable named <codeph class="+ topic/ph pr-d/codeph ">rssXML</codeph>.</li><li class="- topic/li ">Creates a new Namespace object with the prefix <codeph class="+ topic/ph pr-d/codeph ">dc</codeph>.</li><li class="- topic/li ">Creates a new QName object using the Namespace object and the local name <codeph class="+ topic/ph pr-d/codeph ">creator</codeph>.</li><li class="- topic/li ">Calls the <codeph class="+ topic/ph pr-d/codeph ">showDescendants()</codeph> method, which uses the <codeph class="+ topic/ph pr-d/codeph ">XML.descendants()</codeph> method to get an XMLList instance 
      containing all the descendant elements whose qualified name matches the given QName instance.</li><li class="- topic/li ">Displays the qualified name and the text value of each element in the list using a <codeph class="+ topic/ph pr-d/codeph ">for each</codeph> loop.</li><li class="- topic/li ">Creates another QName object using a string value for the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> parameter and the local name <codeph class="+ topic/ph pr-d/codeph ">date</codeph>.</li><li class="- topic/li ">Calls the <codeph class="+ topic/ph pr-d/codeph ">showDescendants()</codeph> method again to display the name and text value of the descendant elements.</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    
    public class QNameExample extends Sprite
    {
        public function QNameExample()
        {
            var rssXML:XML =  &lt;rdf:RDF
              xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
              xmlns="http://purl.org/rss/1.0/"
              xmlns:dc="http://purl.org/dc/elements/1.1/"&gt;
              &lt;channel rdf:about="http://www.xml.com/cs/xml/query/q/19"&gt;
                &lt;title&gt;Test RSS&lt;/title&gt;
                &lt;link&gt;http://www.adobe.com/&lt;/link&gt;
                &lt;description&gt;This is a test RSS document.&lt;/description&gt;
                &lt;language&gt;en-us&lt;/language&gt;
                &lt;items&gt;
                  &lt;rdf:Seq&gt;
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flash/"/&gt;
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flex/"/&gt;
                  &lt;/rdf:Seq&gt;
                &lt;/items&gt;
              &lt;/channel&gt;
              &lt;item rdf:about="http://www.adobe.com/devnet/flash/"&gt;
                &lt;title&gt;Flash Developer Center&lt;/title&gt;
                &lt;link&gt;http://www.adobe.com/devnet/flash/&lt;/link&gt;
                &lt;description&gt;Welcome to the Flash Developer Center&lt;/description&gt;
                &lt;dc:creator&gt;Adobe&lt;/dc:creator&gt;
                &lt;dc:date&gt;2005-08-08&lt;/dc:date&gt;    
              &lt;/item&gt;
              &lt;item rdf:about="http://www.adobe.com/devnet/flex/"&gt;
                &lt;title&gt;Flex Developer Center&lt;/title&gt;
                &lt;link&gt;http://www.adobe.com/devnet/flex/&lt;/link&gt;
                &lt;description&gt;Welcome to the Flex Developer Center&lt;/description&gt;
                &lt;dc:creator&gt;Adobe&lt;/dc:creator&gt;
                &lt;dc:date&gt;2005-10-16&lt;/dc:date&gt;    
              &lt;/item&gt;
            &lt;/rdf:RDF&gt;;
            
            var dcNamespace:Namespace = new Namespace("dc", "http://purl.org/dc/elements/1.1/");
            var creatorQName:QName = new QName(dcNamespace, "creator");
            trace(creatorQName.uri); // http://purl.org/dc/elements/1.1/
            trace(creatorQName.localName); // creator
            
            showDescendants(rssXML, creatorQName);
            
            var dateQName:QName = new QName("http://purl.org/dc/elements/1.1/", "date");
            trace(dateQName.uri); // http://purl.org/dc/elements/1.1/
            trace(dateQName.localName); // date
            
            showDescendants(rssXML, dateQName);
        }
        
        public function showDescendants(xmlData:XML, qualifiedName:QName):void
        {
            var decendantList:XMLList = xmlData.descendants(qualifiedName);
            
            for each (var element:XML in decendantList)
            {
                trace(element.name()); // the fully qualified name, 
                                       // like "http://purl.org/dc/elements/1.1/::creator"
                trace(element); // the simple text value of each element, like "Adobe"
            }                
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#XML" class="- topic/link "><linktext class="- topic/linktext ">XML</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList</linktext></link><link href="#Namespace" class="- topic/link "><linktext class="- topic/linktext ">Namespace</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-357.htm" class="- topic/link "><linktext class="- topic/linktext ">ECMAScript for XML (E4X) specification (ECMA-357 edition 2)</linktext></link></related-links><apiConstructor id="QName:QName_0" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">QName</apiName><shortdesc class="- topic/shortdesc "> 
    Creates a QName object that is a copy of another QName object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>(pdehaan) i changed first param from "name" to "uri" as the previous naming was very confusing
    </internal></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">qname</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">QName</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The QName object to be copied. Objects of any other type are 
    converted to a string that is assigned to the <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> property
    of the new QName object.
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Creates a QName object that is a copy of another QName object. If the parameter passed 
    to the constructor is a QName object, a copy of the QName object is created. If the parameter 
    is not a QName object, the parameter is converted to a string and assigned to the
    <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> property of the new QName instance. 
    If the parameter is <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> or unspecified, a new QName object
    is created with the <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> property set to the empty string.
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> This class shows two constructor entries because each form accepts 
    different parameters. The constructor behaves differently depending on the type and number of 
    parameters passed, as detailed in each entry. ActionScript 3.0 does not support method or constructor overloading.</p>
    
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiConstructor id="QName:QName_1" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">QName</apiName><shortdesc class="- topic/shortdesc "> 
    Creates a QName object with a URI object from a Namespace object and a localName from a QName object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName
    </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Namespace</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A Namespace object from which to copy the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> value. A parameter of any other type is converted to a string.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">QName</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A QName object from which to copy the <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> value. A parameter of any other type is converted to a string.
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Creates a QName object with a URI object from a Namespace object and a <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> from a QName object.
    If either parameter is not the expected data type, the parameter is converted to a string and 
    assigned to the corresponding property of the new QName object.
    For example, if both parameters are strings, a new QName object is returned with a <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> property set
    to the first parameter and a <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> property set to the second parameter.
    In other words, the following permutations, along with many others, are valid forms of the constructor:
<pre xml:space="preserve" class="- topic/pre ">
QName (uri:Namespace, localName:String);
QName (uri:String, localName: QName);
QName (uri:String, localName: String);
</pre>
    <p class="- topic/p ">If you pass <codeph class="+ topic/ph pr-d/codeph ">null</codeph> for the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> parameter, 
    the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> property of the new QName object is set to <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    </p>
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> This class shows two constructor entries because each form accepts 
    different parameters. The constructor behaves differently depending on the type and number of 
    parameters passed, as detailed in each entry. ActionScript 3.0 does not support method or constructor overloading.</p>
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="QName:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	Returns a string composed of the URI, and the local name for the 
	QName object, separated by "::".</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName, QName.toString, toString
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The qualified name, as a string.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Returns a string composed of the URI, and the local name for the 
	QName object, separated by "::".
	
	<p class="- topic/p ">The format depends on the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> property of the QName object:</p>
	<pre xml:space="preserve" class="- topic/pre ">If <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> == "" 
		<codeph class="+ topic/ph pr-d/codeph ">toString</codeph> returns <codeph class="+ topic/ph pr-d/codeph ">localName</codeph>
	else if <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> == null
		<codeph class="+ topic/ph pr-d/codeph ">toString</codeph> returns ~~::<codeph class="+ topic/ph pr-d/codeph ">localName</codeph> 
	else
		<codeph class="+ topic/ph pr-d/codeph ">toString</codeph> returns <codeph class="+ topic/ph pr-d/codeph ">uri</codeph>::<codeph class="+ topic/ph pr-d/codeph ">localName</codeph></pre>
	
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="QName:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
    Returns the QName object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName, QName.toString, toString
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The primitive value of a QName instance.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">QName</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns the QName object.
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="QName:localName:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localName</apiName><shortdesc class="- topic/shortdesc ">
	The local name of the QName object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName, QName.localName, localName
	</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The local name of the QName object.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="QName:uri:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">uri</apiName><shortdesc class="- topic/shortdesc ">
	The Uniform Resource Identifier (URI) of the QName object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName, QName.uri, uri
	</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The Uniform Resource Identifier (URI) of the QName object.
 	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:EvalError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">EvalError</apiName><shortdesc class="- topic/shortdesc ">
 The EvalError class represents an error that occurs when user code
 calls the eval() function or attempts to use the new
 operator with the Function object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
  
  </helpid></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">An EvalError is thrown when code attempts to call eval() or use new with
 the Function object.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The EvalError class represents an error that occurs when user code
 calls the <codeph class="+ topic/ph pr-d/codeph ">eval()</codeph> function or attempts to use the <codeph class="+ topic/ph pr-d/codeph ">new</codeph>
 operator with the Function object. Calling <codeph class="+ topic/ph pr-d/codeph ">eval()</codeph> and 
 calling <codeph class="+ topic/ph pr-d/codeph ">new</codeph> with the Function object are not supported.
 
 </apiDesc></apiClassifierDetail><apiConstructor id="EvalError:EvalError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">EvalError</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new EvalError object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string associated with the error.     
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new EvalError object.
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:Math" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Math</apiName><shortdesc class="- topic/shortdesc ">
 The Math class contains methods and constants that represent common mathematical
 functions and values.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math, math object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The Math class is a top-level class consisting of static properties and 
 methods that define common mathematical constants and functions.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The Math class contains methods and constants that represent common mathematical
 functions and values. 
 <p class="- topic/p ">Use the methods and properties of this class to access and manipulate mathematical constants and functions.
 All the properties and methods of the Math class are static and must be called using the syntax 
 <codeph class="+ topic/ph pr-d/codeph ">Math.method(</codeph><codeph class="+ topic/ph pr-d/codeph "><i class="+ topic/ph hi-d/i ">parameter</i></codeph><codeph class="+ topic/ph pr-d/codeph ">)</codeph> or <codeph class="+ topic/ph pr-d/codeph ">Math.constant</codeph>. 
 In ActionScript, constants are defined with the maximum precision of double-precision IEEE-754 floating-point numbers.</p>
 <p class="- topic/p ">Several Math class methods use the measure of an angle in radians as a parameter. You can use the following equation 
 to calculate radian values before calling the method and then provide the calculated value as the parameter, or you can 
 provide the entire right side of the equation (with the angle's measure in degrees in place of <codeph class="+ topic/ph pr-d/codeph ">degrees</codeph>) as 
 the radian parameter.</p>
 <p class="- topic/p ">To calculate a radian value, use the following formula:</p>
 <pre xml:space="preserve" class="- topic/pre ">
 radians = degrees ~~ Math.PI/180
 </pre>
 <p class="- topic/p ">To calculate degrees from radians, use the following formula:</p>
 <pre xml:space="preserve" class="- topic/pre ">
 degrees = radians ~~ 180/Math.PI
 </pre>
 <p class="- topic/p ">The following is an example of passing the equation as a parameter to calculate the sine of a 45° angle:</p>
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Math.sin(45 ~~ Math.PI/180)</codeph> is the same as <codeph class="+ topic/ph pr-d/codeph ">Math.sin(.7854)</codeph></p>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> The Math functions acos, asin, atan, atan2, cos, exp, log, pow, sin, and sqrt may 
 result in slightly different values depending on the algorithms 
 used by the CPU or operating system. Flash runtimes call on the CPU (or operating system if the CPU doesn't support 
 floating point calculations) when performing the calculations for the listed functions, and results have shown
 slight variations depending upon the CPU or operating system in use.
 </p>
 
 
 </apiDesc></apiClassifierDetail><apiOperation id="Math:abs" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">abs</apiName><shortdesc class="- topic/shortdesc ">
  Computes and returns an absolute value for the number specified by the 
  parameter val.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.abs, abs, absolute
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The absolute value of the specified paramater.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number whose absolute value is returned.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the absolute value of the specified Number.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Computes and returns an absolute value for the number specified by the 
  parameter <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:acos" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">acos</apiName><shortdesc class="- topic/shortdesc ">
  Computes and returns the arc cosine of the number specified in the 
  parameter val, in radians.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.acos, acos, arc cosine
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The arc cosine of the parameter <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number from -1.0 to 1.0.  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the arc cosine, in radians, of the specified 
  Number. 
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Computes and returns the arc cosine of the number specified in the 
  parameter <codeph class="+ topic/ph pr-d/codeph ">val</codeph>, in radians.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:asin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">asin</apiName><shortdesc class="- topic/shortdesc ">
  Computes and returns the arc sine for the number specified in the 
  parameter val, in radians.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.asin, asin, arc sine
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number between negative pi divided by 2 and positive pi 
  divided by 2.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number from -1.0 to 1.0.  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the value, in radians, of the arc sine of the specified 
  Number parameter.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Computes and returns the arc sine for the number specified in the 
  parameter <codeph class="+ topic/ph pr-d/codeph ">val</codeph>, in radians.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:atan2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">atan2</apiName><shortdesc class="- topic/shortdesc ">
  Computes and returns the angle of the point y/x in 
  radians, when measured counterclockwise from a circle's x axis 
  (where 0,0 represents the center of the circle).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.atan2, atan2, arc tangent
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">y</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The <i class="+ topic/ph hi-d/i ">y</i> coordinate of the point.
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">x</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The <i class="+ topic/ph hi-d/i ">x</i> coordinate of the point.  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the angle of the point y/x in radians, when measured 
  counterclockwise from a circle's x axis.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Computes and returns the angle of the point <codeph class="+ topic/ph pr-d/codeph ">y</codeph>/<codeph class="+ topic/ph pr-d/codeph ">x</codeph> in 
  radians, when measured counterclockwise from a circle's <i class="+ topic/ph hi-d/i ">x</i> axis 
  (where 0,0 represents the center of the circle). The return value is between 
  positive pi and negative pi. Note that the first parameter to atan2 is always the <i class="+ topic/ph hi-d/i ">y</i> coordinate.
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/acos()" class="- topic/link "><linktext class="- topic/linktext ">Math.acos()</linktext></link><link href="#Math/asin()" class="- topic/link "><linktext class="- topic/linktext ">Math.asin()</linktext></link><link href="#Math/atan()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan()</linktext></link><link href="#Math/cos()" class="- topic/link "><linktext class="- topic/linktext ">Math.cos()</linktext></link><link href="#Math/sin()" class="- topic/link "><linktext class="- topic/linktext ">Math.sin()</linktext></link><link href="#Math/tan()" class="- topic/link "><linktext class="- topic/linktext ">Math.tan()</linktext></link></related-links></apiOperation><apiOperation id="Math:atan" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">atan</apiName><shortdesc class="- topic/shortdesc ">
  Computes and returns the value, in radians, of the angle whose tangent is 
  specified in the parameter val.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.atan, atan, arc tangent
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number between negative pi divided by 2 and positive 
  pi divided by 2.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number that represents the tangent of an angle.  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the angle, in radians, whose tangent is specified by 
  parameter val.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Computes and returns the value, in radians, of the angle whose tangent is 
  specified in the parameter <codeph class="+ topic/ph pr-d/codeph ">val</codeph>. The return value is between
  negative pi divided by 2 and positive pi divided by 2.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:ceil" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">ceil</apiName><shortdesc class="- topic/shortdesc ">
  Returns the ceiling of the specified number or expression.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.ceil, ceil, ceiling
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer that is both closest to, and greater than or equal to, the parameter 
  <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number or expression.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the ceiling of the specified number or expression.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Returns the ceiling of the specified number or expression. The ceiling of a 
  number is the closest integer that is greater than or equal to the number.
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/floor()" class="- topic/link "><linktext class="- topic/linktext ">Math.floor()</linktext></link><link href="#Math/round()" class="- topic/link "><linktext class="- topic/linktext ">Math.round()</linktext></link></related-links></apiOperation><apiOperation id="Math:cos" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cos</apiName><shortdesc class="- topic/shortdesc ">
  Computes and returns the cosine of the specified angle in radians.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.cos, cos, cosine
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number from -1.0 to 1.0.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">angleRadians</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number that represents an angle measured in radians. 
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the cosine of the specified angle.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Computes and returns the cosine of the specified angle in radians. To 
  calculate a radian, see the overview of the Math class.
  
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/acos()" class="- topic/link "><linktext class="- topic/linktext ">Math.acos()</linktext></link><link href="#Math/asin()" class="- topic/link "><linktext class="- topic/linktext ">Math.asin()</linktext></link><link href="#Math/atan()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan()</linktext></link><link href="#Math/atan2()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan2()</linktext></link><link href="#Math/sin()" class="- topic/link "><linktext class="- topic/linktext ">Math.sin()</linktext></link><link href="#Math/tan()" class="- topic/link "><linktext class="- topic/linktext ">Math.tan()</linktext></link></related-links></apiOperation><apiOperation id="Math:exp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">exp</apiName><shortdesc class="- topic/shortdesc ">
  Returns the value of the base of the natural logarithm (e), to the 
  power of the exponent specified in the parameter x.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.exp, exp, exponent
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><i class="+ topic/ph hi-d/i ">e</i> to the power of the parameter <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The exponent; a number or expression.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the value of the base of the natural logarithm 
  (e), to the power of the exponent specified in the parameter val.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Returns the value of the base of the natural logarithm (<i class="+ topic/ph hi-d/i ">e</i>), to the 
  power of the exponent specified in the parameter <codeph class="+ topic/ph pr-d/codeph ">x</codeph>. The 
  constant <codeph class="+ topic/ph pr-d/codeph ">Math.E</codeph> can provide the value of <i class="+ topic/ph hi-d/i ">e</i>.
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/E" class="- topic/link "><linktext class="- topic/linktext ">Math.E</linktext></link></related-links></apiOperation><apiOperation id="Math:floor" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">floor</apiName><shortdesc class="- topic/shortdesc ">
  Returns the floor of the number or expression specified in the parameter 
  val.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.floor, floor
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The integer that is both closest to, and less than or equal to, the parameter 
  <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number or expression.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the floor of the number or expression specified in the 
  parameter val.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Returns the floor of the number or expression specified in the parameter 
  <codeph class="+ topic/ph pr-d/codeph ">val</codeph>. The floor is the closest integer that is less than or equal
  to the specified number or expression.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:log" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">log</apiName><shortdesc class="- topic/shortdesc ">
  Returns the natural logarithm of the parameter val.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.log, log, logarithm
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The natural logarithm of parameter <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number or expression with a value greater than 0.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the natural logarithm of parameter val. 
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Returns the natural logarithm of the parameter <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:max" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">max</apiName><shortdesc class="- topic/shortdesc ">
  Evaluates val1 and val2 (or more values) and returns the largest value.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.max, max, maximum
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The largest of the parameters <codeph class="+ topic/ph pr-d/codeph ">val1</codeph> and <codeph class="+ topic/ph pr-d/codeph ">val2</codeph> (or more values).
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number or expression.
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number or expression.
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rest</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number or expression. <codeph class="+ topic/ph pr-d/codeph ">Math.max()</codeph> can accept multiple arguments.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Evaluates parameters val1 and val2 and 
  returns the larger value.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Evaluates <codeph class="+ topic/ph pr-d/codeph ">val1</codeph> and <codeph class="+ topic/ph pr-d/codeph ">val2</codeph> (or more values) and returns the largest value.
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/min()" class="- topic/link "><linktext class="- topic/linktext ">Math.min()</linktext></link></related-links></apiOperation><apiOperation id="Math:min" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">min</apiName><shortdesc class="- topic/shortdesc ">
  Evaluates val1 and val2 (or more values) and returns the smallest value.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.min, min, minimum
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The smallest of the parameters <codeph class="+ topic/ph pr-d/codeph ">val1</codeph> and <codeph class="+ topic/ph pr-d/codeph ">val2</codeph> (or more values).
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number or expression.
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number or expression.
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rest</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number or expression. <codeph class="+ topic/ph pr-d/codeph ">Math.min()</codeph> can accept multiple arguments.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Evaluates parameters val1 and val2 and returns the smaller value.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Evaluates <codeph class="+ topic/ph pr-d/codeph ">val1</codeph> and <codeph class="+ topic/ph pr-d/codeph ">val2</codeph> (or more values) and returns the smallest value.
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/max()" class="- topic/link "><linktext class="- topic/linktext ">Math.max()</linktext></link></related-links></apiOperation><apiOperation id="Math:pow" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pow</apiName><shortdesc class="- topic/shortdesc ">
  Computes and returns base to the power of pow.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.pow, pow, power
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value of <codeph class="+ topic/ph pr-d/codeph ">base</codeph> raised to the power of <codeph class="+ topic/ph pr-d/codeph ">pow</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">base</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number to be raised by the power of the parameter <codeph class="+ topic/ph pr-d/codeph ">pow</codeph>.
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pow</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number specifying the power that the parameter <codeph class="+ topic/ph pr-d/codeph ">base</codeph> is raised by.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns val1 to the power of val2.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Computes and returns <codeph class="+ topic/ph pr-d/codeph ">base</codeph> to the power of <codeph class="+ topic/ph pr-d/codeph ">pow</codeph>.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:random" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">random</apiName><shortdesc class="- topic/shortdesc ">
  Returns a pseudo-random number n, where 0 &amp;lt;= n &amp;lt; 1.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.random, random
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A pseudo-random number.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns a pseudo-random number n, where 0 &lt;= n &lt; 1.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Returns a pseudo-random number n, where 0 &lt;= n &lt; 1. The number returned is calculated in an undisclosed manner, and is "pseudo-random" because the calculation inevitably contains some element of non-randomness.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:round" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">round</apiName><shortdesc class="- topic/shortdesc ">
  Rounds the value of the parameter val up or down to the nearest
  integer and returns the value.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.round, round
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The parameter <codeph class="+ topic/ph pr-d/codeph ">val</codeph> rounded to the nearest whole number.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number to round.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the value of parameter val rounded up or down to the 
  nearest integer.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Rounds the value of the parameter <codeph class="+ topic/ph pr-d/codeph ">val</codeph> up or down to the nearest
  integer and returns the value. If <codeph class="+ topic/ph pr-d/codeph ">val</codeph> is equidistant 
  from its two nearest integers (that is, if the number ends in .5), the value 
  is rounded up to the next higher integer.
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/ceil()" class="- topic/link "><linktext class="- topic/linktext ">Math.ceil()</linktext></link><link href="#Math/floor()" class="- topic/link "><linktext class="- topic/linktext ">Math.floor()</linktext></link></related-links></apiOperation><apiOperation id="Math:sin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sin</apiName><shortdesc class="- topic/shortdesc ">
  Computes and returns the sine of the specified angle in radians.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.sin, sin, sine
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number; the sine of the specified angle (between -1.0 and 1.0).
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">angleRadians</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number that represents an angle measured in radians.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the sine of the specified angle.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Computes and returns the sine of the specified angle in radians. To 
  calculate a radian, see the overview of the Math class.
  
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/acos()" class="- topic/link "><linktext class="- topic/linktext ">Math.acos()</linktext></link><link href="#Math/asin()" class="- topic/link "><linktext class="- topic/linktext ">Math.asin()</linktext></link><link href="#Math/atan()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan()</linktext></link><link href="#Math/atan2()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan2()</linktext></link><link href="#Math/cos()" class="- topic/link "><linktext class="- topic/linktext ">Math.cos()</linktext></link><link href="#Math/tan()" class="- topic/link "><linktext class="- topic/linktext ">Math.tan()</linktext></link></related-links></apiOperation><apiOperation id="Math:sqrt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sqrt</apiName><shortdesc class="- topic/shortdesc ">
  Computes and returns the square root of the specified number.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.sqrt, sqrt, square root 
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the parameter <codeph class="+ topic/ph pr-d/codeph ">val</codeph> is greater than or equal to zero, a number; otherwise <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> (not a number).
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number or expression greater than or equal to 0. 
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the square root of the specified number.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Computes and returns the square root of the specified number.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:tan" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">tan</apiName><shortdesc class="- topic/shortdesc ">
  Computes and returns the tangent of the specified angle.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.tan, tan, tangent
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The tangent of the parameter <codeph class="+ topic/ph pr-d/codeph ">angleRadians</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">angleRadians</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number that represents an angle measured in radians.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the tangent of the specified angle.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Computes and returns the tangent of the specified angle. To calculate a 
  radian, see the overview of the Math class.
  
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/acos()" class="- topic/link "><linktext class="- topic/linktext ">Math.acos()</linktext></link><link href="#Math/asin()" class="- topic/link "><linktext class="- topic/linktext ">Math.asin()</linktext></link><link href="#Math/atan()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan()</linktext></link><link href="#Math/atan2()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan2()</linktext></link><link href="#Math/cos()" class="- topic/link "><linktext class="- topic/linktext ">Math.cos()</linktext></link><link href="#Math/sin()" class="- topic/link "><linktext class="- topic/linktext ">Math.sin()</linktext></link></related-links></apiOperation><apiValue id="Math:E" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">E</apiName><shortdesc class="- topic/shortdesc ">
  A mathematical constant for the base of natural logarithms, expressed as e.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.e, e
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">2.71828182845905</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">A mathematical constant for the base of natural logarithms, expressed as e.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  A mathematical constant for the base of natural logarithms, expressed as <i class="+ topic/ph hi-d/i ">e</i>.
  The approximate value of <i class="+ topic/ph hi-d/i ">e</i><codeph class="+ topic/ph pr-d/codeph "> </codeph>is 2.71828182845905.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LN10" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LN10</apiName><shortdesc class="- topic/shortdesc ">
  A mathematical constant for the natural logarithm of 10, expressed as loge10,
  with an approximate value of 2.302585092994046.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.ln10, ln10, logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">2.302585092994046</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">A mathematical constant for the natural logarithm of 10, expressed 
  as loge10, with an approximate value of 2.302585092994046.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  A mathematical constant for the natural logarithm of 10, expressed as log<sub class="+ topic/ph hi-d/sub ">e</sub>10,
  with an approximate value of 2.302585092994046.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LN2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LN2</apiName><shortdesc class="- topic/shortdesc ">
  A mathematical constant for the natural logarithm of 2, expressed as loge2,
  with an approximate value of 0.6931471805599453.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.ln2, ln2, natural logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0.6931471805599453</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">A mathematical constant for the natural logarithm of 2, expressed 
  as loge2, with an approximate value of 0.6931471805599453.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  A mathematical constant for the natural logarithm of 2, expressed as log<sub class="+ topic/ph hi-d/sub ">e</sub>2,
  with an approximate value of 0.6931471805599453.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LOG10E" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOG10E</apiName><shortdesc class="- topic/shortdesc ">
  A mathematical constant for the base-10 logarithm of the constant e (Math.E),
  expressed as log10e, with an approximate value of 0.4342944819032518.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.log10e, log10e, logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0.4342944819032518</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">A mathematical constant for the base-10 logarithm of the constant 
  e, expressed as log10e, with an approximate value of 0.4342944819032518.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  A mathematical constant for the base-10 logarithm of the constant <i class="+ topic/ph hi-d/i ">e</i> (<codeph class="+ topic/ph pr-d/codeph ">Math.E</codeph>),
  expressed as log<sub class="+ topic/ph hi-d/sub ">10</sub>e, with an approximate value of 0.4342944819032518. 
  <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">Math.log()</codeph> method computes the natural logarithm of a number. Multiply the 
  result of <codeph class="+ topic/ph pr-d/codeph ">Math.log()</codeph> by <codeph class="+ topic/ph pr-d/codeph ">Math.LOG10E</codeph> to obtain the base-10 logarithm.</p>
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LOG2E" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOG2E</apiName><shortdesc class="- topic/shortdesc ">
  A mathematical constant for the base-2 logarithm of the constant e, expressed 
  as log2e, with an approximate value of 1.442695040888963387.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.log2e, log2e, logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">1.442695040888963387</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">A mathematical constant for the base-2 logarithm of the constant 
  e, expressed as log2e, with an approximate value of 1.442695040888963387.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  A mathematical constant for the base-2 logarithm of the constant <i class="+ topic/ph hi-d/i ">e</i>, expressed 
  as log2e, with an approximate value of 1.442695040888963387.
  
  <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">Math.log</codeph> method computes the natural logarithm of a number. Multiply the 
  result of <codeph class="+ topic/ph pr-d/codeph ">Math.log()</codeph> by <codeph class="+ topic/ph pr-d/codeph ">Math.LOG2E</codeph> to obtain the base-2 logarithm.</p>
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:PI" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">PI</apiName><shortdesc class="- topic/shortdesc ">
  A mathematical constant for the ratio of the circumference of a circle to its diameter,
  expressed as pi, with a value of 3.141592653589793.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.pi, pi
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">3.141592653589793</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">A mathematical constant for the ratio of the circumference of a 
  circle to its diameter, expressed as pi, with a value of 3.141592653589793.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  A mathematical constant for the ratio of the circumference of a circle to its diameter,
  expressed as pi, with a value of 3.141592653589793.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:SQRT1_2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SQRT1_2</apiName><shortdesc class="- topic/shortdesc "> 
  A mathematical constant for the square root of one-half, with an approximate  
  value of 0.7071067811865476.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.sqrt1_2, sqrt1_2, square root
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0.7071067811865476</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">A mathematical constant for the square root of one-half, with an 
  approximate value of 0.7071067811865476.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
  A mathematical constant for the square root of one-half, with an approximate  
  value of 0.7071067811865476.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:SQRT2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SQRT2</apiName><shortdesc class="- topic/shortdesc ">
  A mathematical constant for the square root of 2, with an approximate 
  value of 1.4142135623730951.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.sqrt2, sqrt2, square root
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">1.4142135623730951</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">A mathematical constant for the square root of 2, with an 
  approximate value of 1.4142135623730951.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  A mathematical constant for the square root of 2, with an approximate 
  value of 1.4142135623730951.
  
  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Array" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Array</apiName><shortdesc class="- topic/shortdesc ">
 The Array class lets you access and manipulate arrays.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Array, Array object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Lets you access and manipulate indexed arrays.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The Array class lets you access and manipulate arrays. Array indices are zero-based, which means that the first element in the array is <codeph class="+ topic/ph pr-d/codeph ">[0]</codeph>, the second element is <codeph class="+ topic/ph pr-d/codeph ">[1]</codeph>, and so on. To create an Array object, you use the <codeph class="+ topic/ph pr-d/codeph ">new Array()</codeph> constructor . <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> can also be
 invoked as a function. In addition, you can use the array access (<codeph class="+ topic/ph pr-d/codeph ">[]</codeph>) operator to initialize an array or access the elements of an array. 
 <p class="- topic/p ">You can store a wide variety of data types in an array element, including numbers, strings, objects, and even other arrays. You can create a <i class="+ topic/ph hi-d/i ">multidimensional</i> array by creating an indexed array and assigning to each of its elements a different indexed array. Such an array is considered multidimensional because it can be used to represent data in a table.</p>
 <p class="- topic/p "> Arrays are <i class="+ topic/ph hi-d/i ">sparse arrays</i>, meaning there might be an element at index 0 and another at index 5, but nothing in the index positions between those two elements. In such a case, the elements in positions 1 through 4 are undefined, which indicates the absence of an element, not necessarily the presence of an element with the value <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.</p>
 
 <p class="- topic/p ">Array assignment is by reference rather than by value. When you assign one array variable to another array variable, both refer to the same array:</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var oneArray:Array = new Array("a", "b", "c");
 var twoArray:Array = oneArray; // Both array variables refer to the same array.
 twoArray[0] = "z";             
 trace(oneArray);               // Output: z,b,c.
 </codeblock>
 <p class="- topic/p ">Do not use the Array class to create <i class="+ topic/ph hi-d/i ">associative arrays</i> (also called <i class="+ topic/ph hi-d/i ">hashes</i>), which are data 
 structures that contain named elements instead of numbered elements. To create associative arrays, use the Object class.
 Although ActionScript permits you to create associative arrays using the Array class, you cannot use any of the Array class methods or properties with associative arrays. </p>
 <p class="- topic/p ">You can extend the Array class and override or add methods. However, you must specify the subclass as <codeph class="+ topic/ph pr-d/codeph ">dynamic</codeph> 
 or you will lose the ability to store data in an array.</p>
 
 </apiDesc><example conref="examples\ArrayExample.as" class="- topic/example "> The following example creates a new Array object <codeph class="+ topic/ph pr-d/codeph ">myArr</codeph> with no arguments
 and an initial length of 0:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class ArrayExample extends Sprite {
        public function ArrayExample() {
            var myArr:Array = new Array();
            trace(myArr.length); // 0
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="operators.html#array_access" class="- topic/link "><linktext class="- topic/linktext ">[] (array access)</linktext></link><link href="#Object" class="- topic/link "><linktext class="- topic/linktext ">Object class</linktext></link></related-links><apiConstructor id="Array:Array_0" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Array</apiName><shortdesc class="- topic/shortdesc ">
     Lets you create an array that contains the specified elements.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The argument is a number that is not an integer greater than or equal to 0.    
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">values</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A comma-separated list of one or more arbitrary values. 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note: </b>If only a single numeric parameter is passed to the Array constructor, 
     it is assumed to specify the array's <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property.</p>
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Lets you create an array that contains the specified elements.
     You can specify values of any type. 
     The first element in an array always has an index (or position) of 0.
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> This class shows two constructor entries because the constructor accepts 
     variable types of arguments. The constructor behaves differently depending on the type and number of 
     arguments passed, as detailed in each entry. ActionScript 3.0 does not support method or constructor overloading.</p>
     </apiDesc><example conref="examples\Array_Array_3.as" class="- topic/example "> The following example creates a new Array object with an initial length of 3,
 populates the array with the string elements <codeph class="+ topic/ph pr-d/codeph ">one</codeph>, <codeph class="+ topic/ph pr-d/codeph ">two</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">three</codeph>,
 and then converts the elements to a string.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class Array_Array_3 extends Sprite {

        public function Array_Array_3() {
            var myArr:Array = new Array("one", "two", "three");
            trace(myArr.length); // 3
            trace(myArr);          // one,two,three
        }
    }
}
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="operators.html#array_access" class="- topic/link "><linktext class="- topic/linktext ">[] array access</linktext></link><link href="#Array/length" class="- topic/link "><linktext class="- topic/linktext ">Array.length</linktext></link></related-links></apiConstructor><apiConstructor id="Array:Array_1" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Array</apiName><shortdesc class="- topic/shortdesc ">
     Lets you create an array of the specified number of elements.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The argument is a number that is not an integer greater than or equal to 0.    
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">numElements</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer that specifies the number of elements in the array.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Lets you create an array of the specified number of elements. 
     If you don't specify any parameters, an array containing 0 elements is created. 
     If you specify a number of elements, an array is created with <codeph class="+ topic/ph pr-d/codeph ">numElements</codeph> number of elements. 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> This class shows two constructor method entries because the constructor accepts 
     variable types of arguments. The constructor behaves differently depending on the type and number of 
     arguments passed, as detailed in each entry. ActionScript 3.0 does not support method or constructor overloading.</p>
     
     
     </apiDesc><example conref="examples\Array_Array.as" class="- topic/example "> The following example creates the Array object <codeph class="+ topic/ph pr-d/codeph ">myArr</codeph> with no arguments
 and an initial length of 0:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class Array_Array extends Sprite {

        public function Array_Array() {
            var myArr:Array = new Array();
            trace(myArr.length); // 0
        }
    }
}
</codeblock></example><example conref="examples\Array_Array_2.as" class="- topic/example "> The following example creates an Array object with 5 initial elements, with a length of 5, and populates
 the first element with the string <codeph class="+ topic/ph pr-d/codeph ">"one"</codeph>, and adds the string element <codeph class="+ topic/ph pr-d/codeph ">"six"</codeph> to the end
 of the array by using the <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> method:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class Array_Array_2 extends Sprite {

        public function Array_Array_2() {
            var myArr:Array = new Array(5);
            trace(myArr.length); // 5
            myArr[0] = "one";
            myArr.push("six");
            trace(myArr);         // one,,,,,six
            trace(myArr.length); // 6
        }
    }
}
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="operators.html#array_access" class="- topic/link "><linktext class="- topic/linktext ">[] array access</linktext></link><link href="#Array/length" class="- topic/link "><linktext class="- topic/linktext ">Array.length</linktext></link></related-links></apiConstructor><apiOperation id="Array:AS3:concat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">concat</apiName><shortdesc class="- topic/shortdesc ">
     Concatenates the elements specified in the parameters with the elements in an array and creates a new array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.concat, concat, concatenate
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array that contains the elements from this array followed by elements from
     the parameters.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value of any data type (such as numbers, elements, or strings) to be concatenated in a new array. 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Concatenates the elements specified in the parameters.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Concatenates the elements specified in the parameters with the elements in an array and creates a new array. 
     If the parameters specify an array, the elements of that array are concatenated. If you don't 
     pass any parameters, the new array is a duplicate (shallow clone) of the original array.
     
     </apiDesc><example conref="examples\Array.concat.1.as" class="- topic/example "> The following code creates four Array objects:
 <ul class="- topic/ul "><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">numbers</codeph> array, which contains the numbers <codeph class="+ topic/ph pr-d/codeph ">1</codeph>, <codeph class="+ topic/ph pr-d/codeph ">2</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">3</codeph>. </li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> array, which contains the letters <codeph class="+ topic/ph pr-d/codeph ">a</codeph>, <codeph class="+ topic/ph pr-d/codeph ">b</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">c</codeph>. </li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">numbersAndLetters</codeph> array, which calls the <codeph class="+ topic/ph pr-d/codeph ">concat()</codeph> method to produce the array <codeph class="+ topic/ph pr-d/codeph ">[1,2,3,a,b,c]</codeph>. </li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">lettersAndNumbers</codeph> array, which calls the <codeph class="+ topic/ph pr-d/codeph ">concat()</codeph> method to produce the array <codeph class="+ topic/ph pr-d/codeph ">[a,b,c,1,2,3]</codeph>. </li></ul>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var numbers:Array = new Array(1, 2, 3);
var letters:Array = new Array("a", "b", "c");
var numbersAndLetters:Array = numbers.concat(letters);
var lettersAndNumbers:Array = letters.concat(numbers);

trace(numbers);       // 1,2,3
trace(letters);       // a,b,c
trace(numbersAndLetters); // 1,2,3,a,b,c
trace(lettersAndNumbers); // a,b,c,1,2,3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:every" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">every</apiName><shortdesc class="- topic/shortdesc ">
     Executes a test function on each item in the array until an item is reached that returns false for the 
     specified function.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A Boolean value of <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if all items in the array return <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for the specified function; otherwise, <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The function to run on each item in the array. This function can contain a simple comparison (for example, <codeph class="+ topic/ph pr-d/codeph ">item &lt; 20</codeph>) or a more complex operation, and is invoked with three arguments; the
     value of an item, the index of an item, and the Array object:
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:*, index:int, array:Array):Boolean;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object to use as <codeph class="+ topic/ph pr-d/codeph ">this</codeph> for the function.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Executes a test function on each item in the array until an item is reached that returns <codeph class="+ topic/ph pr-d/codeph ">false</codeph> for the 
     specified function. You use this method to determine whether all items in an array meet a criterion, such as having values
     less than a particular number.
     
     <p product="flash" class="- topic/p ">For this method, the second parameter, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if the
     first parameter, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, is a method closure. Suppose you create a function in a movie clip
     called <codeph class="+ topic/ph pr-d/codeph ">me</codeph>:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">Suppose you then use the <codeph class="+ topic/ph pr-d/codeph ">every()</codeph> method on an array called <codeph class="+ topic/ph pr-d/codeph ">myArray</codeph>:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myArray.every(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p ">Because <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> is a member of the Timeline class, which cannot be overridden 
     by <codeph class="+ topic/ph pr-d/codeph ">me</codeph>, the Flash runtime will throw an exception.
     You can avoid this runtime error by assigning the function to a variable, as follows:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
     };
     myArray.every(myFunction, me);
     </pre>
     
     </apiDesc><example conref="examples\Array_every.as" class="- topic/example "> The following example tests two arrays to determine whether every item in each array is a number. It also outputs the results of the test, showing that <codeph class="+ topic/ph pr-d/codeph ">isNumeric</codeph> is <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for the first array and <codeph class="+ topic/ph pr-d/codeph ">false</codeph> for the second:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_every extends Sprite {
        public function Array_every() {
            var arr1:Array = new Array(1, 2, 4);
            var res1:Boolean = arr1.every(isNumeric);
            trace("isNumeric:", res1); // true
 
            var arr2:Array = new Array(1, 2, "ham");
            var res2:Boolean = arr2.every(isNumeric);
            trace("isNumeric:", res2); // false
        }
        private function isNumeric(element:*, index:int, arr:Array):Boolean {
            return (element is Number);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/some()" class="- topic/link "><linktext class="- topic/linktext ">Array.some()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:filter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">filter</apiName><shortdesc class="- topic/shortdesc ">
     Executes a test function on each item in the array and constructs a new array for all items that return true for the specified function.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A new array that contains all items from the original array that returned <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The function to run on each item in the array. This function can contain a simple comparison (for example, <codeph class="+ topic/ph pr-d/codeph ">item &lt; 20</codeph>) or a more complex operation, and is invoked with three arguments; the
     value of an item, the index of an item, and the Array object:
     <pre xml:space="preserve" class="- topic/pre ">    function callback(item:*, index:int, array:Array):Boolean;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object to use as <codeph class="+ topic/ph pr-d/codeph ">this</codeph> for the function.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Executes a test function on each item in the array and constructs a new array for all items that return <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for the specified function. If an item returns <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, it is not included in the new array.
     
     <p product="flash" class="- topic/p ">For this method, the second parameter, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if the
     first parameter, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, is a method closure. Suppose you create a function in a movie clip
     called <codeph class="+ topic/ph pr-d/codeph ">me</codeph>:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">Suppose you then use the <codeph class="+ topic/ph pr-d/codeph ">filter()</codeph> method on an array called <codeph class="+ topic/ph pr-d/codeph ">myArray</codeph>:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre "> 
     myArray.filter(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p ">Because <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> is a member of the Timeline class, which cannot be overridden 
     by <codeph class="+ topic/ph pr-d/codeph ">me</codeph>, the Flash runtime will throw an exception.
     You can avoid this runtime error by assigning the function to a variable, as follows:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.filter(myFunction, me);
     </pre>
     
     </apiDesc><example conref="examples\Array.filter.as" class="- topic/example "> The following example creates an array of all employees who are managers:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_filter extends Sprite {
        public function Array_filter() {
            var employees:Array = new Array();
            employees.push({name:"Employee 1", manager:false});
            employees.push({name:"Employee 2", manager:true});
            employees.push({name:"Employee 3", manager:false});
            trace("Employees:");
            employees.forEach(traceEmployee);
            
            var managers:Array = employees.filter(isManager);
            trace("Managers:");
            managers.forEach(traceEmployee);
        }
        private function isManager(element:*, index:int, arr:Array):Boolean {
            return (element.manager == true);
        }
        private function traceEmployee(element:*, index:int, arr:Array):void {
            trace("\t" + element.name + ((element.manager) ? " (manager)" : ""));
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/map()" class="- topic/link "><linktext class="- topic/linktext ">Array.map()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:forEach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">forEach</apiName><shortdesc class="- topic/shortdesc ">
     Executes a function on each item in the array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The function to run on each item in the array. This function can contain a simple command 
     (for example, a <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> statement) or a more complex operation, and is invoked with three arguments; the
     value of an item, the index of an item, and the Array object:
     <pre xml:space="preserve" class="- topic/pre ">    function callback(item:*, index:int, array:Array):void;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object to use as <codeph class="+ topic/ph pr-d/codeph ">this</codeph> for the function.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Executes a function on each item in the array.
     
     <p product="flash" class="- topic/p ">For this method, the second parameter, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if the
     first parameter, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, is a method closure. Suppose you create a function in a movie clip
     called <codeph class="+ topic/ph pr-d/codeph ">me</codeph>:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">Suppose you then use the <codeph class="+ topic/ph pr-d/codeph ">forEach()</codeph> method on an array called <codeph class="+ topic/ph pr-d/codeph ">myArray</codeph>:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myArray.forEach(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p ">Because <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> is a member of the Timeline class, which cannot be overridden 
     by <codeph class="+ topic/ph pr-d/codeph ">me</codeph>, the Flash runtime will throw an exception.
     You can avoid this runtime error by assigning the function to a variable, as follows:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.forEach(myFunction, me);
     </pre>
     </apiDesc><example conref="examples\Array_forEach.as" class="- topic/example "> The following example runs the <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> statement in the <codeph class="+ topic/ph pr-d/codeph ">traceEmployee()</codeph> function on each item in the array:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_forEach extends Sprite {
        public function Array_forEach() {
            var employees:Array = new Array();
            employees.push({name:"Employee 1", manager:false});
            employees.push({name:"Employee 2", manager:true});
            employees.push({name:"Employee 3", manager:false});
            trace(employees);
            employees.forEach(traceEmployee);
        }
        private function traceEmployee(element:*, index:int, arr:Array):void {
            trace(element.name + " (" + element.manager + ")");
        }
    }
}
</codeblock></example><example conref="examples\Array_forEach_2.as" class="- topic/example "> The following example also runs the <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> statement in a slightly altered <codeph class="+ topic/ph pr-d/codeph ">traceEmployee()</codeph> function on each item in the array:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_forEach_2 extends Sprite {
        public function Array_forEach_2() {
            var employeeXML:XML = &lt;employees&gt;
                    &lt;employee name="Steven" manager="false" /&gt;
                    &lt;employee name="Bruce" manager="true" /&gt;
                    &lt;employee name="Rob" manager="false" /&gt;
                &lt;/employees&gt;;
            var employeesList:XMLList = employeeXML.employee;
            var employeesArray:Array = new Array();
            for each (var tempXML:XML in employeesList) {
                employeesArray.push(tempXML);
            }
            employeesArray.sortOn("@name");
            employeesArray.forEach(traceEmployee);
        }
        private function traceEmployee(element:*, index:Number, arr:Array):void {
            trace(element.@name + ((element.@manager == "true") ? " (manager)" : ""));
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:indexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">indexOf</apiName><shortdesc class="- topic/shortdesc ">
     Searches for an item in an array by using strict equality (===) and returns the index 
     position of the item.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A zero-based index position of the item in the array. If the <codeph class="+ topic/ph pr-d/codeph ">searchElement</codeph> argument
     is not found, the return value is -1.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">searchElement</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The item to find in the array.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fromIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The location in the array from which to start searching for the item.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Searches for an item in an array by using strict equality (<codeph class="+ topic/ph pr-d/codeph ">===</codeph>) and returns the index 
     position of the item.
     </apiDesc><example conref="examples\Array_indexOf.as" class="- topic/example "> The following example displays the position of the specified array:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_indexOf extends Sprite {
        public function Array_indexOf() {
            var arr:Array = new Array(123,45,6789);
            arr.push("123-45-6789");
            arr.push("987-65-4321");
            
            var index:int = arr.indexOf("123");
            trace(index); // -1
            
            var index2:int = arr.indexOf(123);
            trace(index2); // 0
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/lastIndexOf()" class="- topic/link "><linktext class="- topic/linktext ">Array.lastIndexOf()</linktext></link><link href="operators.html#strict_equality" class="- topic/link "><linktext class="- topic/linktext ">=== (strict equality)</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:join" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">join</apiName><shortdesc class="- topic/shortdesc ">
     Converts the elements in an array to strings, inserts the specified separator between the 
     elements, concatenates them, and returns the resulting string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.join, join
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string consisting of the elements of an array
     converted to strings and separated by the specified parameter.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sep</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A character or string that separates array elements in 
     the returned string. If you omit this parameter, a comma is used as the default 
     separator. 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Converts the elements in an array to strings.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Converts the elements in an array to strings, inserts the specified separator between the 
     elements, concatenates them, and returns the resulting string. A nested array is always 
     separated by a comma (,), not by the separator passed to the <codeph class="+ topic/ph pr-d/codeph ">join()</codeph> method.
     
     </apiDesc><example conref="examples\Array.join.1.as" class="- topic/example "> The following code creates an Array object <codeph class="+ topic/ph pr-d/codeph ">myArr</codeph> with elements <codeph class="+ topic/ph pr-d/codeph ">one</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">two</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">three</codeph> and then a string containing <codeph class="+ topic/ph pr-d/codeph ">one and two and three</codeph>
 using the <codeph class="+ topic/ph pr-d/codeph ">join()</codeph> method.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var myArr:Array = new Array("one", "two", "three");
var myStr:String = myArr.join(" and ");
trace(myArr); // one,two,three
trace(myStr); // one and two and three
</codeblock></example><example conref="examples\Array.join.2.as" class="- topic/example "> The following code creates an Array object <codeph class="+ topic/ph pr-d/codeph ">specialChars</codeph> with elements <codeph class="+ topic/ph pr-d/codeph ">(</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">)</codeph>, <codeph class="+ topic/ph pr-d/codeph ">-</codeph>, and a blank space and then creates a string containing <codeph class="+ topic/ph pr-d/codeph ">(888) 867-5309</codeph>.
 Then, using a <codeph class="+ topic/ph pr-d/codeph ">for</codeph> loop, it removes each type of special character listed in <codeph class="+ topic/ph pr-d/codeph ">specialChars</codeph> to
 produce a string (<codeph class="+ topic/ph pr-d/codeph ">myStr</codeph>) that contains only the digits of the phone number remaining: <codeph class="+ topic/ph pr-d/codeph ">888675309</codeph>.
 Note that other characters, such as <codeph class="+ topic/ph pr-d/codeph ">+</codeph>, could have been added to <codeph class="+ topic/ph pr-d/codeph ">specialChars</codeph> and then this
 routine would work with international phone number formats.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var phoneString:String = "(888) 867-5309";

var specialChars:Array = new Array("(", ")", "-", " ");
var myStr:String = phoneString;

var ln:uint = specialChars.length;
for(var i:uint; i &lt; ln; i++) {
    myStr = myStr.split(specialChars[i]).join("");
}

var phoneNumber:Number = new Number(myStr);

trace(phoneString); // (888) 867-5309
trace(phoneNumber); // 8888675309
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/split()" class="- topic/link "><linktext class="- topic/linktext ">String.split()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:lastIndexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">lastIndexOf</apiName><shortdesc class="- topic/shortdesc ">
     Searches for an item in an array, working backward from the last item, and returns the index position of the matching item using strict equality (===).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A zero-based index position of the item in the array. If the <codeph class="+ topic/ph pr-d/codeph ">searchElement</codeph> argument is 
     not found, the return value is -1.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">searchElement</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The item to find in the array.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fromIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The location in the array from which to start searching for the item. The default is the maximum
     value allowed for an index. If you do not specify <codeph class="+ topic/ph pr-d/codeph ">fromIndex</codeph>, the search starts at the last item
     in the array.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Searches for an item in an array, working backward from the last item, and returns the index position of the matching item using strict equality (<codeph class="+ topic/ph pr-d/codeph ">===</codeph>).
     </apiDesc><example conref="examples\Array_lastIndexOf.as" class="- topic/example "> The following example displays the position of the specified array:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_lastIndexOf extends Sprite {
        public function Array_lastIndexOf() {
            var arr:Array = new Array(123,45,6789,123,984,323,123,32);
            
            var index:int = arr.indexOf(123);
            trace(index); // 0
            
            var index2:int = arr.lastIndexOf(123);
            trace(index2); // 6
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/indexOf()" class="- topic/link "><linktext class="- topic/linktext ">Array.indexOf()</linktext></link><link href="operators.html#strict_equality" class="- topic/link "><linktext class="- topic/linktext ">=== (strict equality)</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:map" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">map</apiName><shortdesc class="- topic/shortdesc ">
     Executes a function on each item in an array, and constructs a new array of items corresponding to the results of the function on 
     each item in the original array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A new array that contains the results of the function on each item in the original array.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The function to run on each item in the array. This function can contain a simple command (such as changing the case of an array of strings) or a more complex operation, and is invoked with three arguments; the
     value of an item, the index of an item, and the Array object:
     <pre xml:space="preserve" class="- topic/pre ">    function callback(item:*, index:int, array:Array):String;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object to use as <codeph class="+ topic/ph pr-d/codeph ">this</codeph> for the function.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Executes a function on each item in an array, and constructs a new array of items corresponding to the results of the function on 
     each item in the original array.
     
     <p product="flash" class="- topic/p ">For this method, the second parameter, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if the
     first parameter, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, is a method closure. Suppose you create a function in a movie clip
     called <codeph class="+ topic/ph pr-d/codeph ">me</codeph>:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">Suppose you then use the <codeph class="+ topic/ph pr-d/codeph ">map()</codeph> method on an array called <codeph class="+ topic/ph pr-d/codeph ">myArray</codeph>:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myArray.map(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p ">Because <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> is a member of the Timeline class, which cannot be overridden 
     by <codeph class="+ topic/ph pr-d/codeph ">me</codeph>, the Flash runtime will throw an exception.
     You can avoid this runtime error by assigning the function to a variable, as follows:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.map(myFunction, me);
     </pre>
     </apiDesc><example conref="examples\Array_map.as" class="- topic/example "> The following example changes all items in the array to use uppercase letters:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_map extends Sprite {
        public function Array_map() {
            var arr:Array = new Array("one", "two", "Three");
            trace(arr); // one,two,Three

            var upperArr:Array = arr.map(toUpper);
            trace(upperArr); // ONE,TWO,THREE
        }
        private function toUpper(element:*, index:int, arr:Array):String {
            return String(element).toUpperCase();
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/filter()" class="- topic/link "><linktext class="- topic/linktext ">Array.filter()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:pop" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pop</apiName><shortdesc class="- topic/shortdesc ">
      Removes the last element from an array and returns the value of that element.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.pop, pop
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value of the last element (of any data type) in the specified array.
     
     </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Removes the last element from an array and returns the value of that element.
     
     </apiDesc><example conref="examples\Array.pop.1.as" class="- topic/example "> The following code creates an Array object <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> with elements <codeph class="+ topic/ph pr-d/codeph ">a</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">b</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">c</codeph>. The last element (<codeph class="+ topic/ph pr-d/codeph ">c</codeph>) is then removed from the array using the
 <codeph class="+ topic/ph pr-d/codeph ">pop()</codeph> method and assigned to the String object <codeph class="+ topic/ph pr-d/codeph ">letter</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c");
trace(letters); // a,b,c
var letter:String = letters.pop();
trace(letters); // a,b
trace(letter);     // c
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/push()" class="- topic/link "><linktext class="- topic/linktext ">Array.push()</linktext></link><link href="#Array/shift()" class="- topic/link "><linktext class="- topic/linktext ">Array.shift()</linktext></link><link href="#Array/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Array.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:push" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">push</apiName><shortdesc class="- topic/shortdesc ">
     Adds one or more elements to the end of an array and returns the new length of the array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.push, push
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer representing the length of the new array.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">One or more values to append to the array.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Adds one or more elements to the end of an array and returns the new length of the array.
     
     </apiDesc><example conref="examples\Array.push.1.as" class="- topic/example "> The following code creates an empty Array object <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> and then populates the array
 with the elements <codeph class="+ topic/ph pr-d/codeph ">a</codeph>, <codeph class="+ topic/ph pr-d/codeph ">b</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">c</codeph> 
 using the <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> method.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array();

letters.push("a");
letters.push("b");
letters.push("c");

trace(letters.toString()); // a,b,c
</codeblock></example><example conref="examples\Array.push.2.as" class="- topic/example "> The following code creates an Array object <codeph class="+ topic/ph pr-d/codeph ">letters</codeph>, which is initially
 populated with the element <codeph class="+ topic/ph pr-d/codeph ">a</codeph>. The <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> method
 is then used once to add the elements <codeph class="+ topic/ph pr-d/codeph ">b</codeph> and <codeph class="+ topic/ph pr-d/codeph ">c</codeph> to the end of the array,
 which is three elements after the push.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a");
var count:uint = letters.push("b", "c");

trace(letters); // a,b,c
trace(count);   // 3
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/pop()" class="- topic/link "><linktext class="- topic/linktext ">Array.pop()</linktext></link><link href="#Array/shift()" class="- topic/link "><linktext class="- topic/linktext ">Array.shift()</linktext></link><link href="#Array/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Array.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:reverse" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reverse</apiName><shortdesc class="- topic/shortdesc ">
      Reverses the array in place.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.reverse, reverse
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new array.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Reverses the array in place.
     
     </apiDesc><example conref="examples\Array.reverse.1.as" class="- topic/example "> The following code creates an Array object <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> with elements <codeph class="+ topic/ph pr-d/codeph ">a</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">b</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">c</codeph>. The order of the array elements is then reversed using the
 <codeph class="+ topic/ph pr-d/codeph ">reverse()</codeph> method to produce the array <codeph class="+ topic/ph pr-d/codeph ">[c,b,a]</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c");
trace(letters); // a,b,c
letters.reverse();
trace(letters); // c,b,a
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:shift" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">shift</apiName><shortdesc class="- topic/shortdesc ">
     Removes the first element from an array and returns that element.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.shift, shift
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The first element (of any data type) in an array.
     
     </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Removes the first element from an array and returns that element. The remaining array elements are moved
     from their original position, i, to i-1.
     
     </apiDesc><example conref="examples\Array.shift.1.as" class="- topic/example "> The following code creates the Array object <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> with elements <codeph class="+ topic/ph pr-d/codeph ">a</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">b</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">c</codeph>. The <codeph class="+ topic/ph pr-d/codeph ">shift()</codeph> method is then used to remove the first
 element (<codeph class="+ topic/ph pr-d/codeph ">a</codeph>) from <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> and assign it to the string <codeph class="+ topic/ph pr-d/codeph ">firstLetter</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c");
var firstLetter:String = letters.shift();
trace(letters);     // b,c
trace(firstLetter); // a
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/pop()" class="- topic/link "><linktext class="- topic/linktext ">Array.pop()</linktext></link><link href="#Array/push()" class="- topic/link "><linktext class="- topic/linktext ">Array.push()</linktext></link><link href="#Array/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Array.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:slice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">slice</apiName><shortdesc class="- topic/shortdesc ">
     Returns a new array that consists of a range of elements from the original array, without modifying the original array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.slice, slice
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array that consists of a range of elements from the original array.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number specifying the index of the starting point 
     for the slice. If <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> is a negative number, the starting 
     point begins at the end of the array, where -1 is the last element.  
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">16777215</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number specifying the index of the ending point for 
     the slice. If you omit this parameter, the slice includes all elements from the 
     starting point to the end of the array. If <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> is a negative 
     number, the ending point is specified from the end of the array, where -1 is the 
     last element.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns a new array that consists of a range of elements from the original array.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a new array that consists of a range of elements from the original array, without modifying the original array. 
     The returned array includes the <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> element and all elements up to, but not including, the <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> element.
     
     <p class="- topic/p ">If you don't pass any parameters, the new array is a duplicate (shallow clone) of the original array.</p>
     
     </apiDesc><example conref="examples\Array.slice.1.as" class="- topic/example "> The following code creates an Array object <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> with elements
 <codeph class="+ topic/ph pr-d/codeph ">[a,b,c,d,e,f]</codeph>. The array <codeph class="+ topic/ph pr-d/codeph ">someLetters</codeph> is then created by calling the
 <codeph class="+ topic/ph pr-d/codeph ">slice()</codeph> method on elements one (<codeph class="+ topic/ph pr-d/codeph ">b</codeph>) through three (<codeph class="+ topic/ph pr-d/codeph ">d</codeph>),
 resulting in an array with elements <codeph class="+ topic/ph pr-d/codeph ">b</codeph> and <codeph class="+ topic/ph pr-d/codeph ">c</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c", "d", "e", "f");
var someLetters:Array = letters.slice(1,3);

trace(letters);     // a,b,c,d,e,f
trace(someLetters); // b,c
</codeblock></example><example conref="examples\Array.slice.2.as" class="- topic/example "> The following code creates an Array object <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> with elements
 <codeph class="+ topic/ph pr-d/codeph ">[a,b,c,d,e,f]</codeph>.The array <codeph class="+ topic/ph pr-d/codeph ">someLetters</codeph> is then created by calling the
 <codeph class="+ topic/ph pr-d/codeph ">slice()</codeph> method on element two (<codeph class="+ topic/ph pr-d/codeph ">c</codeph>), resulting in an array with elements
 <codeph class="+ topic/ph pr-d/codeph ">[c,d,e,f]</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c", "d", "e", "f");
var someLetters:Array = letters.slice(2);

trace(letters);     // a,b,c,d,e,f
trace(someLetters); // c,d,e,f
</codeblock></example><example conref="examples\Array.slice.3.as" class="- topic/example "> The following code creates an Array object <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> with elements
 <codeph class="+ topic/ph pr-d/codeph ">[a,b,c,d,e,f]</codeph>. The array <codeph class="+ topic/ph pr-d/codeph ">someLetters</codeph> is then created by calling the
 <codeph class="+ topic/ph pr-d/codeph ">slice()</codeph> method on the second to last element from the end (<codeph class="+ topic/ph pr-d/codeph ">e</codeph>), resulting
 in an array with elements <codeph class="+ topic/ph pr-d/codeph ">e</codeph> and <codeph class="+ topic/ph pr-d/codeph ">f</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c", "d", "e", "f");
var someLetters:Array = letters.slice(-2);

trace(letters);     // a,b,c,d,e,f
trace(someLetters); // e,f
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:some" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">some</apiName><shortdesc class="- topic/shortdesc ">
     Executes a test function on each item in the array until an item is reached that returns true.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A Boolean value of <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if any items in the array return <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for the specified function; otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The function to run on each item in the array. This function can contain a simple comparison (for example
     <codeph class="+ topic/ph pr-d/codeph ">item &lt; 20</codeph>) or a more complex operation, and is invoked with three arguments; the
     value of an item, the index of an item, and the Array object:
     <pre xml:space="preserve" class="- topic/pre ">    function callback(item:*, index:int, array:Array):Boolean;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object to use as <codeph class="+ topic/ph pr-d/codeph ">this</codeph> for the function.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Executes a test function on each item in the array until an item is reached that returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Use this method to determine whether any items in an array meet a criterion, such as having a value less than a particular number.
     
     <p product="flash" class="- topic/p ">For this method, the second parameter, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if the
     first parameter, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, is a method closure. Suppose you create a function in a movie clip
     called <codeph class="+ topic/ph pr-d/codeph ">me</codeph>:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">Suppose you then use the <codeph class="+ topic/ph pr-d/codeph ">some()</codeph> method on an array called <codeph class="+ topic/ph pr-d/codeph ">myArray</codeph>:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myArray.some(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p ">Because <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> is a member of the Timeline class, which cannot be overridden 
     by <codeph class="+ topic/ph pr-d/codeph ">me</codeph>, the Flash runtime will throw an exception.
     You can avoid this runtime error by assigning the function to a variable, as follows:</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.some(myFunction, me);
     </pre>   
     </apiDesc><example conref="examples\Array_some.as" class="- topic/example "> The following example displays which values are undefined:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_some extends Sprite {
        public function Array_some() {
            var arr:Array = new Array();
            arr[0] = "one";
            arr[1] = "two";
            arr[3] = "four";
            var isUndef:Boolean = arr.some(isUndefined);
            if (isUndef) {
                trace("array contains undefined values: " + arr);
            } else {
                trace("array contains no undefined values.");
            }
        }
        private function isUndefined(element:*, index:int, arr:Array):Boolean {
            return (element == undefined);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/every()" class="- topic/link "><linktext class="- topic/linktext ">every()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:sortOn" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sortOn</apiName><shortdesc class="- topic/shortdesc ">
     Sorts the elements in an array according to one or more fields in the array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.sortOn, sortOn
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The return value depends on whether you pass any parameters:
     <ul class="- topic/ul "><li class="- topic/li ">If you specify a value of 4 or <codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph> for the <codeph class="+ topic/ph pr-d/codeph ">options</codeph> parameter, and two or more elements being sorted have identical sort fields, a value of 0 is returned and the array is not modified. </li><li class="- topic/li ">If you specify a value of 8 or <codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> for the <codeph class="+ topic/ph pr-d/codeph ">options</codeph> parameter, an array is returned that reflects the results of the sort and the array is not modified.</li><li class="- topic/li ">Otherwise, nothing is returned and the array is modified to reflect the sort order.</li></ul>
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fieldName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string that identifies a field to be used as the sort value, or an 
     array in which the first element represents the primary sort field, the  second represents 
     the secondary sort field, and so on.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">options</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">One or more numbers or names of defined constants, separated by the <codeph class="+ topic/ph pr-d/codeph ">bitwise OR (|)</codeph> operator, that change the sorting behavior. The following values are acceptable for the <codeph class="+ topic/ph pr-d/codeph ">options</codeph> parameter:
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.CASEINSENSITIVE</codeph> or 1</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.DESCENDING</codeph> or 2</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph> or 4</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> or 8</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.NUMERIC</codeph> or 16</li></ul>
     <p product="flash" class="- topic/p ">Code hinting is enabled if you use the string form of the flag (for example, <codeph class="+ topic/ph pr-d/codeph ">DESCENDING</codeph>) rather than the numeric form (2).</p>
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sorts the elements in an array according to one or more fields in the array. 
     The array should have the following characteristics:
     <ul class="- topic/ul "><li class="- topic/li ">The array is an indexed array, not an associative array.</li><li class="- topic/li ">Each element of the array holds an object with one or more properties.</li><li class="- topic/li ">All of the objects have at least one property in common, the values of which can be used
           to sort the array. Such a property is called a <i class="+ topic/ph hi-d/i ">field</i>.</li></ul>
     <p class="- topic/p ">If you pass multiple <codeph class="+ topic/ph pr-d/codeph ">fieldName</codeph> parameters, the first field represents the primary sort field, the second represents the next sort field, and so on. Flash sorts according to Unicode values. (ASCII is a subset of Unicode.) If either of the elements being compared does not contain the field that is specified in the <codeph class="+ topic/ph pr-d/codeph ">fieldName</codeph> parameter, the field is assumed to be set to <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>, and the elements are placed consecutively in the sorted array in no particular order.</p>
     <p class="- topic/p ">By default, <codeph class="+ topic/ph pr-d/codeph ">Array</codeph>.<codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> works in the following way:</p>
     <ul class="- topic/ul "><li class="- topic/li ">Sorting is case-sensitive (<i class="+ topic/ph hi-d/i ">Z</i> precedes <i class="+ topic/ph hi-d/i ">a</i>).</li><li class="- topic/li ">Sorting is ascending (<i class="+ topic/ph hi-d/i ">a</i> precedes <i class="+ topic/ph hi-d/i ">b</i>). </li><li class="- topic/li ">The array is modified to reflect the sort order; multiple elements that have identical sort fields are placed consecutively in the sorted array in no particular order.</li><li class="- topic/li ">Numeric fields are sorted as if they were strings, so 100 precedes 99, because "1" is a lower string value than "9".</li></ul>
     <p class="- topic/p ">Flash Player 7 added the <codeph class="+ topic/ph pr-d/codeph ">options</codeph> parameter, which you can use to override the default sort behavior. To sort a simple array (for example, an array with only one field), or to specify a sort order that the <codeph class="+ topic/ph pr-d/codeph ">options</codeph> parameter doesn't support, use <codeph class="+ topic/ph pr-d/codeph ">Array.sort()</codeph>.</p>
     <p class="- topic/p ">To pass multiple flags, separate them with the bitwise OR (<codeph class="+ topic/ph pr-d/codeph ">|</codeph>) operator:</p>
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     my_array.sortOn(someFieldName, Array.DESCENDING | Array.NUMERIC);
     </codeblock>
     <p class="- topic/p ">Flash Player 8 added the ability to specify a different sorting option for each field when you sort by more than one field. In Flash Player 8 and later, the <codeph class="+ topic/ph pr-d/codeph ">options</codeph> parameter accepts an array of sort options such that each sort option corresponds to a sort field in the <codeph class="+ topic/ph pr-d/codeph ">fieldName</codeph> parameter. The following example sorts the primary sort field, <codeph class="+ topic/ph pr-d/codeph ">a</codeph>, using a descending sort; the secondary sort field, <codeph class="+ topic/ph pr-d/codeph ">b</codeph>, using a numeric sort; and the tertiary sort field, <codeph class="+ topic/ph pr-d/codeph ">c</codeph>, using a case-insensitive sort:</p>
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     Array.sortOn (["a", "b", "c"], [Array.DESCENDING, Array.NUMERIC, Array.CASEINSENSITIVE]);
     </codeblock>
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note: </b>The <codeph class="+ topic/ph pr-d/codeph ">fieldName</codeph> and <codeph class="+ topic/ph pr-d/codeph ">options</codeph> arrays must have the same number of elements; otherwise, the <codeph class="+ topic/ph pr-d/codeph ">options</codeph> array is ignored. Also, the <codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph> and <codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> options can be used only as the first element in the array; otherwise, they are ignored.</p>
     
     </apiDesc><example conref="examples\Array.sortOn.1.as" class="- topic/example "> The following code creates an empty Array object <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> and the array
 is then populated using five calls to <codeph class="+ topic/ph pr-d/codeph ">push()</codeph>.  Each time <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> is
 called, a new <codeph class="+ topic/ph pr-d/codeph ">Vegetable</codeph> object is created by calling the <codeph class="+ topic/ph pr-d/codeph ">Vegetable()</codeph>
 constructor, which accepts a String (<codeph class="+ topic/ph pr-d/codeph ">name</codeph>) and Number (<codeph class="+ topic/ph pr-d/codeph ">price</codeph>) object.
 Calling <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> five times with the values shown results in the following
 array: <codeph class="+ topic/ph pr-d/codeph ">[lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44]</codeph>. The
 <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> method is then used with the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter to produce the following array:
 <codeph class="+ topic/ph pr-d/codeph ">[asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44]</codeph>. The
 <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> method is then called again with the price parameter, and the
 NUMERIC and DESCENDING constants to produce an array sorted by numbers in descending order:
 <codeph class="+ topic/ph pr-d/codeph ">[asparagus:3.99, spinach:1.89, lettuce:1.49, squash:1.44, celery:1.29]</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array();
vegetables.push(new Vegetable("lettuce", 1.49));
vegetables.push(new Vegetable("spinach", 1.89));
vegetables.push(new Vegetable("asparagus", 3.99));
vegetables.push(new Vegetable("celery", 1.29));
vegetables.push(new Vegetable("squash", 1.44));

trace(vegetables);
// lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44

vegetables.sortOn("name");
trace(vegetables);
// asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44

vegetables.sortOn("price", Array.NUMERIC | Array.DESCENDING);
trace(vegetables);
// asparagus:3.99, spinach:1.89, lettuce:1.49, squash:1.44, celery:1.29

class Vegetable {
    public var name:String;
    public var price:Number;

    public function Vegetable(name:String, price:Number) {
        this.name = name;
        this.price = price;
    }

    public function toString():String {
        return " " + name + ":" + price;
    }
}
</codeblock></example><example conref="examples\Array.sortOn.2.as" class="- topic/example "> The following code creates an empty Array object <codeph class="+ topic/ph pr-d/codeph ">records</codeph> and the
 array is then populated using three calls to <codeph class="+ topic/ph pr-d/codeph ">push()</codeph>.  Each time <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> is 
 called, the strings <codeph class="+ topic/ph pr-d/codeph ">name</codeph> and <codeph class="+ topic/ph pr-d/codeph ">city</codeph> and a <codeph class="+ topic/ph pr-d/codeph ">zip</codeph> number are
 added to <codeph class="+ topic/ph pr-d/codeph ">records</codeph>. Three <codeph class="+ topic/ph pr-d/codeph ">for</codeph> loops are used to print the array elements. The 
 first <codeph class="+ topic/ph pr-d/codeph ">for</codeph> loop prints the elements in the order in which they were added. The second <codeph class="+ topic/ph pr-d/codeph ">for</codeph>
 loop is run after <codeph class="+ topic/ph pr-d/codeph ">records</codeph> has been sorted by name and then city using the
 <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> method. The third <codeph class="+ topic/ph pr-d/codeph ">for</codeph> loop produces different output because 
 <codeph class="+ topic/ph pr-d/codeph ">records</codeph> is re-sorted by city then by name.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


var records:Array = new Array();
records.push({name:"john", city:"omaha", zip:68144});
records.push({name:"john", city:"kansas city", zip:72345});
records.push({name:"bob", city:"omaha", zip:94010});

for(var i:uint = 0; i &lt; records.length; i++) {
    trace(records[i].name + ", " + records[i].city);
}
// Results:
// john, omaha
// john, kansas city
// bob, omaha

trace("records.sortOn('name', 'city');");
records.sortOn(["name", "city"]);
for(var i:uint = 0; i &lt; records.length; i++) {
    trace(records[i].name + ", " + records[i].city);
}
// Results:
// bob, omaha
// john, kansas city
// john, omaha

trace("records.sortOn('city', 'name');");
records.sortOn(["city", "name"]);
for(var i:uint = 0; i &lt; records.length; i++) {
    trace(records[i].name + ", " + records[i].city);
}
// Results:
// john, kansas city
// bob, omaha
// john, omaha
</codeblock></example><example conref="examples\Array.sortOn.3.as" class="- topic/example "> The following code creates an empty Array object <codeph class="+ topic/ph pr-d/codeph ">users</codeph> and the
 array is then populated using four calls to <codeph class="+ topic/ph pr-d/codeph ">push()</codeph>.  Each time <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> is
 called, a User object is created with the <codeph class="+ topic/ph pr-d/codeph ">User()</codeph> constructor and a <codeph class="+ topic/ph pr-d/codeph ">name</codeph>
 string and <codeph class="+ topic/ph pr-d/codeph ">age</codeph> uint are added to users.  The resulting array set is
 <codeph class="+ topic/ph pr-d/codeph ">[Bob:3,barb:35,abcd:3,catchy:4]</codeph>.
 <p class="- topic/p ">The array is then sorted in the following ways:
 <ol class="- topic/ol "><li class="- topic/li ">By name only, producing the array <codeph class="+ topic/ph pr-d/codeph ">[Bob:3,abcd:3,barb:35,catchy:4]</codeph></li><li class="- topic/li ">By name and using the <codeph class="+ topic/ph pr-d/codeph ">CASEINSENSITIVE</codeph> constant,
     producing the array <codeph class="+ topic/ph pr-d/codeph ">[abcd:3,barb:35,Bob:3,catchy:4]</codeph></li><li class="- topic/li ">By name and using the <codeph class="+ topic/ph pr-d/codeph ">CASEINSENSITIVE</codeph> and <codeph class="+ topic/ph pr-d/codeph ">DESCENDING</codeph> constants,
     producing the array <codeph class="+ topic/ph pr-d/codeph ">[catchy:4,Bob:3,barb:35,abcd:3]</codeph></li><li class="- topic/li ">By age only, producing the array <codeph class="+ topic/ph pr-d/codeph ">[abcd:3,Bob:3,barb:35,catchy:4]</codeph></li><li class="- topic/li ">By age and using the <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> constant,
     producing the array <codeph class="+ topic/ph pr-d/codeph ">[Bob:3,abcd:3,catchy:4,barb:35]</codeph></li><li class="- topic/li ">By age and using the <codeph class="+ topic/ph pr-d/codeph ">DESCENDING</codeph> and <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> constants,
     producing the array <codeph class="+ topic/ph pr-d/codeph ">[barb:35,catchy:4,Bob:3,abcd:3]</codeph></li></ol>
 </p>
 <p class="- topic/p ">An array called <codeph class="+ topic/ph pr-d/codeph ">indices</codeph> is then created and assigned the results of a sort
 by age and using the <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> and <codeph class="+ topic/ph pr-d/codeph ">RETURNINDEXEDARRAY</codeph> constants,
 resulting in the array <codeph class="+ topic/ph pr-d/codeph ">[Bob:3,abcd:3,catchy:4,barb:35]</codeph>, which is then printed out
 using a <codeph class="+ topic/ph pr-d/codeph ">for</codeph> loop.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

class User {
    public var name:String;
    public var age:Number;
    public function User(name:String, age:uint) {
        this.name = name;
        this.age = age;
    }

    public function toString():String {
        return this.name + ":" + this.age;
    }
}

var users:Array = new Array();
users.push(new User("Bob", 3));
users.push(new User("barb", 35));
users.push(new User("abcd", 3));
users.push(new User("catchy", 4));

trace(users); // Bob:3,barb:35,abcd:3,catchy:4

users.sortOn("name");
trace(users); // Bob:3,abcd:3,barb:35,catchy:4

users.sortOn("name", Array.CASEINSENSITIVE);
trace(users); // abcd:3,barb:35,Bob:3,catchy:4

users.sortOn("name", Array.CASEINSENSITIVE | Array.DESCENDING);
trace(users); // catchy:4,Bob:3,barb:35,abcd:3

users.sortOn("age");
trace(users); // abcd:3,Bob:3,barb:35,catchy:4

users.sortOn("age", Array.NUMERIC);
trace(users); // Bob:3,abcd:3,catchy:4,barb:35

users.sortOn("age", Array.DESCENDING | Array.NUMERIC);
trace(users); // barb:35,catchy:4,Bob:3,abcd:3

var indices:Array = users.sortOn("age", Array.NUMERIC | Array.RETURNINDEXEDARRAY);
var index:uint;
for(var i:uint = 0; i &lt; indices.length; i++) {
    index = indices[i];
    trace(users[index].name, ": " + users[index].age);
}

// Results:
// Bob : 3
// abcd : 3
// catchy : 4
// barb : 35
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#bitwise_OR" class="- topic/link "><linktext class="- topic/linktext ">| (bitwise OR)</linktext></link><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:sort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sort</apiName><shortdesc class="- topic/shortdesc ">
     Sorts the elements in an array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.sort, sort
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The return value depends on whether you pass any arguments, as described in 
     the following list:
     <ul class="- topic/ul "><li class="- topic/li ">If you specify a value of 4 or <codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph> for the <codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> argument
     of the <codeph class="+ topic/ph pr-d/codeph ">...args</codeph> parameter and two or more elements being sorted have identical sort fields,
     Flash returns a value of 0 and does not modify the array. </li><li class="- topic/li ">If you specify a value of 8 or <codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> for 
     the <codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> argument of the <codeph class="+ topic/ph pr-d/codeph ">...args</codeph> parameter, Flash returns a sorted numeric
     array of the indices that reflects the results of the sort and does not modify the array. </li><li class="- topic/li ">Otherwise, Flash returns nothing and modifies the array to reflect the sort order.</li></ul>
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The arguments specifying a comparison function and one or more values that determine the behavior of the sort.
     <p class="- topic/p ">This method uses the syntax and argument order <codeph class="+ topic/ph pr-d/codeph ">Array.sort(compareFunction, sortOptions)</codeph> with the arguments defined as follows:</p>
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph> - A comparison function used to determine the sorting order of elements in an array. This argument is optional. A comparison function should take two arguments to compare. Given the elements A and B, the result of <codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph> can have a negative, 0, or positive value:
     <ul class="- topic/ul "><li class="- topic/li ">A negative return value specifies that A appears before B in the sorted sequence.</li><li class="- topic/li ">A return value of 0 specifies that A and B have the same sort order.</li><li class="- topic/li ">A positive return value specifies that A appears after B in the sorted sequence.</li></ul>
     </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> - One or more numbers or defined constants, separated by the <codeph class="+ topic/ph pr-d/codeph ">|</codeph> (bitwise OR) operator, that change the behavior of the sort from the default. This argument is optional. The following values are acceptable for <codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph>: 
      <ul class="- topic/ul "><li class="- topic/li ">1 or <codeph class="+ topic/ph pr-d/codeph ">Array.CASEINSENSITIVE</codeph></li><li class="- topic/li ">2 or <codeph class="+ topic/ph pr-d/codeph ">Array.DESCENDING</codeph></li><li class="- topic/li ">4 or <codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph></li><li class="- topic/li ">8 or <codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> </li><li class="- topic/li ">16 or <codeph class="+ topic/ph pr-d/codeph ">Array.NUMERIC</codeph></li></ul>
     For more information, see the <codeph class="+ topic/ph pr-d/codeph ">Array.sortOn()</codeph> method.</li></ul>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sorts the elements in an array. This method sorts according to Unicode values. (ASCII is a subset of Unicode.)
     <p class="- topic/p ">By default, <codeph class="+ topic/ph pr-d/codeph ">Array</codeph>.<codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> works in the following way:</p>
     <ul class="- topic/ul "><li class="- topic/li ">Sorting is case-sensitive (<i class="+ topic/ph hi-d/i ">Z</i> precedes <i class="+ topic/ph hi-d/i ">a</i>).</li><li class="- topic/li ">Sorting is ascending (<i class="+ topic/ph hi-d/i ">a</i> precedes <i class="+ topic/ph hi-d/i ">b</i>). </li><li class="- topic/li ">The array is modified to reflect the sort order; multiple elements that have identical sort fields are placed consecutively in the sorted array in no particular order.</li><li class="- topic/li ">All elements, regardless of data type, are sorted as if they were strings, so 100 precedes 99, because "1" is a lower string value than "9".</li></ul>
     <p class="- topic/p ">
     To sort an array by using settings that deviate from the default settings, 
     you can either use one of the sorting options described in the <codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> portion of the <codeph class="+ topic/ph pr-d/codeph ">...args</codeph> parameter description, or you can create your own custom function to do the sorting. 
     If you create a custom function, you call the <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> method, and use the name
     of your custom function as the first argument (<codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph>) 
     </p>
     
     </apiDesc><example conref="examples\Array.sort.1.as" class="- topic/example "> The following code creates the Array object <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> with elements
 <codeph class="+ topic/ph pr-d/codeph ">[spinach, green pepper, cilantro, onion, avocado]</codeph>. The array is then sorted by
 the <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> method, which is called with no parameters.  The result is <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> sorted in
 alphabetical order (<codeph class="+ topic/ph pr-d/codeph ">[avocado, cilantro, green pepper, onion, spinach]</codeph>).
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "cilantro",
                 "onion",
                 "avocado");

trace(vegetables); // spinach,green pepper,cilantro,onion,avocado
vegetables.sort();
trace(vegetables); // avocado,cilantro,green pepper,onion,spinach
</codeblock></example><example conref="examples\Array.sort.2.as" class="- topic/example "> The following code creates the Array object <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> with elements
 <codeph class="+ topic/ph pr-d/codeph ">[spinach, green pepper, Cilantro, Onion, and Avocado]</codeph>. The array is then sorted by
 the <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> method, which is called with no parameters the first time; the result is
 <codeph class="+ topic/ph pr-d/codeph ">[Avocado,Cilantro,Onion,green pepper,spinach]</codeph>. Then <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> is called on
 <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> again with the <codeph class="+ topic/ph pr-d/codeph ">CASEINSENSITIVE</codeph> constant as a parameter.
 The result is <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> sorted in alphabetical order
 (<codeph class="+ topic/ph pr-d/codeph ">[Avocado, Cilantro, green pepper, Onion, spinach]</codeph>).
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "Cilantro",
                 "Onion",
                 "Avocado");

vegetables.sort();
trace(vegetables); // Avocado,Cilantro,Onion,green pepper,spinach
vegetables.sort(Array.CASEINSENSITIVE);
trace(vegetables); // Avocado,Cilantro,green pepper,Onion,spinach
</codeblock></example><example conref="examples\Array.sort.3.as" class="- topic/example "> The following code creates the empty Array object <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph>, which is then
 populated through five calls to <codeph class="+ topic/ph pr-d/codeph ">push()</codeph>.  Each time <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> is
 called, a new <codeph class="+ topic/ph pr-d/codeph ">Vegetable</codeph> object is created by a call to the <codeph class="+ topic/ph pr-d/codeph ">Vegetable()</codeph>
 constructor, which accepts a String (<codeph class="+ topic/ph pr-d/codeph ">name</codeph>) and Number (<codeph class="+ topic/ph pr-d/codeph ">price</codeph>) object.
 Calling <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> five times with the values shown results in the following
 array: <codeph class="+ topic/ph pr-d/codeph ">[lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44]</codeph>.  The
 <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> method is then used to sort the array, resulting in the array
 <codeph class="+ topic/ph pr-d/codeph ">[asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44]</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var vegetables:Array = new Array();
vegetables.push(new Vegetable("lettuce", 1.49));
vegetables.push(new Vegetable("spinach", 1.89));
vegetables.push(new Vegetable("asparagus", 3.99));
vegetables.push(new Vegetable("celery", 1.29));
vegetables.push(new Vegetable("squash", 1.44));

trace(vegetables);
// lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44

vegetables.sort();

trace(vegetables);
// asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44

//The following code defines the Vegetable class
class Vegetable {
    private var name:String;
    private var price:Number;

    public function Vegetable(name:String, price:Number) {
        this.name = name;
        this.price = price;
    }

    public function toString():String {
        return " " + name + ":" + price;
    }
}
</codeblock></example><example conref="examples\Array.sort.4.as" class="- topic/example "> The following example is exactly the same as the previous one, except
 that the <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> method is used with a custom sort function
 (<codeph class="+ topic/ph pr-d/codeph ">sortOnPrice</codeph>), which sorts according to price instead of alphabetically.  Note that the
 new function <codeph class="+ topic/ph pr-d/codeph ">getPrice()</codeph> extracts the price.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array();
vegetables.push(new Vegetable("lettuce", 1.49));
vegetables.push(new Vegetable("spinach", 1.89));
vegetables.push(new Vegetable("asparagus", 3.99));
vegetables.push(new Vegetable("celery", 1.29));
vegetables.push(new Vegetable("squash", 1.44));

trace(vegetables);
// lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44

vegetables.sort(sortOnPrice);

trace(vegetables);
// celery:1.29, squash:1.44, lettuce:1.49, spinach:1.89, asparagus:3.99

function sortOnPrice(a:Vegetable, b:Vegetable):Number {
    var aPrice:Number = a.getPrice();
    var bPrice:Number = b.getPrice();

    if(aPrice &gt; bPrice) {
        return 1;
    } else if(aPrice &lt; bPrice) {
        return -1;
    } else  {
        //aPrice == bPrice
        return 0;
    }
}

// The following code defines the Vegetable class and should be in a separate package.
class Vegetable {
    private var name:String;
    private var price:Number;

    public function Vegetable(name:String, price:Number) {
        this.name = name;
        this.price = price;
    }

    public function getPrice():Number {
        return price;
    }

    public function toString():String {
        return " " + name + ":" + price;
    }
}
</codeblock></example><example conref="examples\Array.sort.5.as" class="- topic/example "> The following code creates the Array object <codeph class="+ topic/ph pr-d/codeph ">numbers</codeph> with elements
 <codeph class="+ topic/ph pr-d/codeph ">[3,5,100,34,10]</codeph>. A call to <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> without any parameters sorts
 alphabetically, producing the undesired result <codeph class="+ topic/ph pr-d/codeph ">[10,100,3,34,5]</codeph>.  To properly
 sort numeric values, you must pass the constant <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> to the <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph>
 method, which sorts <codeph class="+ topic/ph pr-d/codeph ">numbers</codeph> as follows: <codeph class="+ topic/ph pr-d/codeph ">[3,5,10,34,100]</codeph>.
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> The default behavior of the <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> function 
 is to handle each entity as a string.
 If you use the <codeph class="+ topic/ph pr-d/codeph ">Array.NUMERIC</codeph> argument, the Flash runtime attempts to convert 
 any non-numeric values to integers for sorting purposes. If it fails, the runtime throws an error. 
 For example, the runtime can successfully convert a String value of <codeph class="+ topic/ph pr-d/codeph ">"6"</codeph> 
 to an integer, but will throw an error if it encounters a String value of <codeph class="+ topic/ph pr-d/codeph ">"six"</codeph>.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var numbers:Array = new Array(3,5,100,34,10);

trace(numbers); // 3,5,100,34,10
numbers.sort();
trace(numbers); // 10,100,3,34,5
numbers.sort(Array.NUMERIC);
trace(numbers); // 3,5,10,34,100
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#bitwise_OR" class="- topic/link "><linktext class="- topic/linktext ">| (bitwise OR)</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:splice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">splice</apiName><shortdesc class="- topic/shortdesc ">
     Adds elements to and removes elements from an array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.splice, splice
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array containing the elements that were removed from the original array.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer that specifies the index of the element in the array where the insertion or 
     deletion begins. You can use a negative integer to specify a position relative to the end of the array
     (for example, -1 is the last element of the array).
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deleteCount</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer that specifies the number of elements to be deleted. This number includes the 
     element specified in the <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> parameter. If you do not specify a value for the 
     <codeph class="+ topic/ph pr-d/codeph ">deleteCount</codeph> parameter, the method deletes all of the values from the <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph>
     element to the last element in the array. If the value is 0, no elements are deleted.     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">values</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An optional list of one or more comma-separated values
     to insert into the array at the position specified in the <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> parameter.
     If an inserted value is of type Array, the array is kept intact and inserted as a single element.
     For example, if you splice an existing array of length three with another array of length three,
     the resulting array will have only four elements. One of the elements, however, will be an array of length three.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Adds elements to and removes elements from an array. This method modifies the array without 
     making a copy.
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> To override this method in a subclass of Array, use <codeph class="+ topic/ph pr-d/codeph ">...args</codeph> for the parameters,
     as this example shows:</p>
     <pre xml:space="preserve" class="- topic/pre ">
     public override function splice(...args) {
       // your statements here
     }
     </pre>
     </apiDesc><example conref="examples\Array.splice.1.as" class="- topic/example "> The following code creates the Array object <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> with the elements
 <codeph class="+ topic/ph pr-d/codeph ">[spinach, green pepper, cilantro, onion, avocado]</codeph>. The <codeph class="+ topic/ph pr-d/codeph ">splice()</codeph>
 method is then called with the parameters 2 and 2, which assigns
 <codeph class="+ topic/ph pr-d/codeph ">cilantro</codeph> and <codeph class="+ topic/ph pr-d/codeph ">onion</codeph> to the <codeph class="+ topic/ph pr-d/codeph ">spliced</codeph> array. The
 <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> array then contains <codeph class="+ topic/ph pr-d/codeph ">[spinach,green pepper,avocado]</codeph>. The
 <codeph class="+ topic/ph pr-d/codeph ">splice()</codeph> method is called a second time using the parameters 1, 0,
 and the <codeph class="+ topic/ph pr-d/codeph ">spliced</codeph> array to assign
 <codeph class="+ topic/ph pr-d/codeph ">[cilantro,onion]</codeph> as the second element in <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "cilantro",
                 "onion",
                 "avocado");

var spliced:Array = vegetables.splice(2, 2);
trace(vegetables); // spinach,green pepper,avocado
trace(spliced);    // cilantro,onion

vegetables.splice(1, 0, spliced);
trace(vegetables); // spinach,cilantro,onion,green pepper,avocado

</codeblock></example><example conref="examples\Array.splice.2.as" class="- topic/example "> Notice that <codeph class="+ topic/ph pr-d/codeph ">cilantro</codeph> and <codeph class="+ topic/ph pr-d/codeph ">onion</codeph> trace out as if <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph>
 has 5 elements, even though it actually has four (and the second element is another array containing
 two elements). To add <codeph class="+ topic/ph pr-d/codeph ">cilantro</codeph> and <codeph class="+ topic/ph pr-d/codeph ">onion</codeph> individually, you would use:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 
var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "cilantro",
                 "onion",
                 "avocado");
 
 var spliced:Array = vegetables.splice(2, 2);
 trace(vegetables); // spinach,green pepper,avocado
 trace(spliced);    // cilantro,onion
 
 vegetables.splice(1, 0, "cilantro", "onion");
 trace(vegetables); // spinach,cilantro,onion,green pepper,avocado
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:toLocaleString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleString</apiName><shortdesc class="- topic/shortdesc ">
     Returns a string that represents the elements in the specified array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string of array elements.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a string that represents the elements in the specified array. Every element in the array, starting with index 0 and ending with the highest index, is converted to a concatenated string and separated by commas. In the ActionScript 3.0 implementation, this method returns the same value as the <codeph class="+ topic/ph pr-d/codeph ">Array.toString()</codeph> method.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/toString()" class="- topic/link "><linktext class="- topic/linktext ">Array.toString()</linktext></link></related-links></apiOperation><apiOperation id="Array:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
     Returns a string that represents the elements in the specified array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.toString, toString
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string of array elements.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a string that represents the elements in the specified array. Every element in the array, starting with index 0 and ending with the highest index, is converted to a concatenated string and separated by commas. To specify a custom separator, use the <codeph class="+ topic/ph pr-d/codeph ">Array.join()</codeph> method.
     
     
     </apiDesc><example conref="examples\Array.toString.1.as" class="- topic/example "> The following code creates an Array, converts the values to strings, and stores them in
 the <codeph class="+ topic/ph pr-d/codeph ">vegnums</codeph> variable of the String data type.

<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array();
vegetables.push(1);
vegetables.push(2);
vegetables.push(3);
vegetables.push(4);
vegetables.push(5);
var vegnums:String = vegetables.toString();
trace(vegnums+",6");
// 1,2,3,4,5,6
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/split()" class="- topic/link "><linktext class="- topic/linktext ">String.split()</linktext></link><link href="#Array/join()" class="- topic/link "><linktext class="- topic/linktext ">Array.join()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:unshift" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">unshift</apiName><shortdesc class="- topic/shortdesc ">
     Adds one or more elements to the beginning of an array and returns the new length of the array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.unshift, unshift
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer representing the new length of the array.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">One or more numbers, elements, or variables to be inserted at the beginning of the array.  
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Adds one or more elements to the beginning of an array and returns the new length of the array. The other
     elements in the array are moved from their original position, i, to i+1.
     
     </apiDesc><example conref="examples\Array.unshift.1.as" class="- topic/example "> The following code creates the empty Array object <codeph class="+ topic/ph pr-d/codeph ">names</codeph>.
 The strings <codeph class="+ topic/ph pr-d/codeph ">Bill</codeph> and <codeph class="+ topic/ph pr-d/codeph ">Jeff</codeph> are added by the <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> method,
 and then the strings <codeph class="+ topic/ph pr-d/codeph ">Alfred</codeph> and <codeph class="+ topic/ph pr-d/codeph ">Kyle</codeph> are added to the beginning of
 <codeph class="+ topic/ph pr-d/codeph ">names</codeph> by two calls to the <codeph class="+ topic/ph pr-d/codeph ">unshift()</codeph> method.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var names:Array = new Array();
names.push("Bill");
names.push("Jeff");

trace(names); // Bill,Jeff

names.unshift("Alfred");
names.unshift("Kyle");

trace(names); // Kyle,Alfred,Bill,Jeff
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/pop()" class="- topic/link "><linktext class="- topic/linktext ">Array.pop()</linktext></link><link href="#Array/push()" class="- topic/link "><linktext class="- topic/linktext ">Array.push()</linktext></link><link href="#Array/shift()" class="- topic/link "><linktext class="- topic/linktext ">Array.shift()</linktext></link></related-links></apiOperation><apiValue id="Array:CASEINSENSITIVE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CASEINSENSITIVE</apiName><shortdesc class="- topic/shortdesc ">
     Specifies case-insensitive sorting for the Array class sorting methods.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217F6
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">1</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies case-insensitive sorting for the Array class sorting methods. You can use this constant
     for the <codeph class="+ topic/ph pr-d/codeph ">options</codeph> parameter in the <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> method. 
     <p class="- topic/p ">The value of this constant is 1.</p>
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:DESCENDING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DESCENDING</apiName><shortdesc class="- topic/shortdesc ">
     Specifies descending sorting for the Array class sorting methods.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217F7
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">2</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies descending sorting for the Array class sorting methods. 
     You can use this constant for the <codeph class="+ topic/ph pr-d/codeph ">options</codeph> parameter in the <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph>
     or <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> method. 
     <p class="- topic/p ">The value of this constant is 2.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:NUMERIC" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NUMERIC</apiName><shortdesc class="- topic/shortdesc ">
     Specifies numeric (instead of character-string) sorting for the Array class sorting methods.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217F8
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">16</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies numeric (instead of character-string) sorting for the Array class sorting methods. 
     Including this constant in the <codeph class="+ topic/ph pr-d/codeph ">options</codeph>
     parameter causes the <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> methods 
     to sort numbers as numeric values, not as strings of numeric characters.  
     Without the <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> constant, sorting treats each array element as a 
     character string and produces the results in Unicode order. 
     
     <p class="- topic/p ">For example, given the array of values <codeph class="+ topic/ph pr-d/codeph ">[2005, 7, 35]</codeph>, if the <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> 
     constant is <b class="+ topic/ph hi-d/b ">not</b> included in the <codeph class="+ topic/ph pr-d/codeph ">options</codeph> parameter, the 
     sorted array is <codeph class="+ topic/ph pr-d/codeph ">[2005, 35, 7]</codeph>, but if the <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> constant <b class="+ topic/ph hi-d/b ">is</b> included, 
     the sorted array is <codeph class="+ topic/ph pr-d/codeph ">[7, 35, 2005]</codeph>. </p>
     
     <p class="- topic/p ">This constant applies only to numbers in the array; it does 
     not apply to strings that contain numeric data such as <codeph class="+ topic/ph pr-d/codeph ">["23", "5"]</codeph>.</p>
     
     <p class="- topic/p ">The value of this constant is 16.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:RETURNINDEXEDARRAY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RETURNINDEXEDARRAY</apiName><shortdesc class="- topic/shortdesc ">
     Specifies that a sort returns an array that consists of array indices.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217F9
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">8</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies that a sort returns an array that consists of array indices. You can use this constant
     for the <codeph class="+ topic/ph pr-d/codeph ">options</codeph> parameter in the <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> 
     method, so you have access to multiple views of the array elements while the original array is unmodified. 
     <p class="- topic/p ">The value of this constant is 8.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:UNIQUESORT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UNIQUESORT</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the unique sorting requirement for the Array class sorting methods.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217FA
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">4</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the unique sorting requirement for the Array class sorting methods. 
     You can use this constant for the <codeph class="+ topic/ph pr-d/codeph ">options</codeph> parameter in the <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> 
     method. The unique sorting option terminates the sort if any two elements
     or fields being sorted have identical values. 
     <p class="- topic/p ">The value of this constant is 4.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:length:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
     A non-negative integer specifying the number of elements in the array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.length, length
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     A non-negative integer specifying the number of elements in the array. This property is automatically updated when new elements are added to the array. When you assign a value to an array element (for example, <codeph class="+ topic/ph pr-d/codeph ">my_array[index] = value</codeph>), if <codeph class="+ topic/ph pr-d/codeph ">index</codeph> is a number, and <codeph class="+ topic/ph pr-d/codeph ">index+1</codeph> is greater than the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property, the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property is updated to <codeph class="+ topic/ph pr-d/codeph ">index+1</codeph>.
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note: </b>If you assign a value to the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property that is shorter than the existing length, the array will be truncated.</p>
     
     </apiDesc><example conref="examples\Array.length.1.as" class="- topic/example "> The following code creates an Array object <codeph class="+ topic/ph pr-d/codeph ">names</codeph> with the string element <codeph class="+ topic/ph pr-d/codeph ">Bill</codeph>.
 It then uses the <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> method to add another string element <codeph class="+ topic/ph pr-d/codeph ">Kyle</codeph>.  The length of the array, as
 determined by the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property, was one element before the use of <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> and is two
 elements after <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> is called.  Another string, <codeph class="+ topic/ph pr-d/codeph ">Jeff</codeph>,
 is added to make the length of <codeph class="+ topic/ph pr-d/codeph ">names</codeph> three elements.  The <codeph class="+ topic/ph pr-d/codeph ">shift()</codeph> method is then called twice
 to remove <codeph class="+ topic/ph pr-d/codeph ">Bill</codeph> and <codeph class="+ topic/ph pr-d/codeph ">Kyle</codeph>, making the final array of <codeph class="+ topic/ph pr-d/codeph ">length</codeph> one.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var names:Array = new Array("Bill");
names.push("Kyle");
trace(names.length); // 2

names.push("Jeff");
trace(names.length); // 3

names.shift();
names.shift();
trace(names.length); // 1
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:RegExp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">RegExp</apiName><shortdesc class="- topic/shortdesc ">
     
     The RegExp class lets you work with regular expressions, which are patterns that you can use 
     to perform searches in strings and to replace text in strings.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp
     </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     The RegExp class lets you work with regular expressions, which are patterns that you can use 
     to perform searches in strings and to replace text in strings.
     
     <p class="- topic/p ">You can create a new RegExp object by using the <codeph class="+ topic/ph pr-d/codeph ">new RegExp()</codeph> constructor or by
     assigning a RegExp literal to a variable:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> var pattern1:RegExp = new RegExp("test-\\d", "i");
     var pattern2:RegExp = /test-\d/i;
     </codeblock>
     
     <p class="- topic/p ">For more information, see "Using Regular Expressions" in the <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Developer's Guide</i>.</p>
     
     </apiDesc><example conref="examples\RegExpExample.as" class="- topic/example "> The following example shows how you can use regular expressions to parse
 strings and return a new string or a Boolean value, based on the string passed in.  The 
 <codeph class="+ topic/ph pr-d/codeph ">informalizeGreeting()</codeph> method simply replaces the word <codeph class="+ topic/ph pr-d/codeph ">Hello</codeph> with <codeph class="+ topic/ph pr-d/codeph ">Hi</codeph>, 
 regardless of case.  It also strips out the surname in the name in the string 
 (assuming that name matches the specified pattern). In the <codeph class="+ topic/ph pr-d/codeph ">validateEmail()</codeph> and 
 <codeph class="+ topic/ph pr-d/codeph ">validatePhoneNumber()</codeph> methods, the string passed is checked to see if its pattern matches a valid 
 email address or a specific phone number pattern, and the methods return Boolean values based on the results. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class RegExpExample extends Sprite {        
        public function RegExpExample() {            
            var formalGreeting:String = "Hello, John Smith.";
            trace(informalizeGreeting(formalGreeting));    // Hi, John.

            var validEmail:String = "name@domain.com";
            trace(validateEmail(validEmail));        // true
            
            var invalidEmail:String = "foo";
            trace(validateEmail(invalidEmail));  // false
            
            var validPhoneNumber:String = "415-555-1212";
            trace(validatePhoneNumber(validPhoneNumber));    // true
            
            var invalidPhoneNumber:String = "312-867-530999";
            trace(validatePhoneNumber(invalidPhoneNumber));  // false
        }
        private function informalizeGreeting(str:String):String {
            var pattern:RegExp = new RegExp("hello, (\\w+) \\w+", "i");
            return str.replace(pattern, "Hi, $1");
        }
        private function validateEmail(str:String):Boolean {
            var pattern:RegExp = /(\w|[_.\-])+@((\w|-)+\.)+\w{2,4}+/;
            var result:Object = pattern.exec(str);
            if(result == null) {
                return false;
            }
            return true;
        }
        private function validatePhoneNumber(str:String):Boolean {
            var pattern:RegExp = /^\d{3}-\d{3}-\d{4}$/;
            var result:Object = pattern.exec(str);
            if(result == null) {
                return false;
            }
            return true;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#String/match()" class="- topic/link "><linktext class="- topic/linktext ">String.match()</linktext></link><link href="#String/replace()" class="- topic/link "><linktext class="- topic/linktext ">String.replace()</linktext></link><link href="#String/search()" class="- topic/link "><linktext class="- topic/linktext ">String.search()</linktext></link></related-links><apiConstructor id="RegExp:RegExp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">RegExp</apiName><shortdesc class="- topic/shortdesc ">
        Lets you construct a regular expression from two strings.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.attribute, attribute
        </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">re</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The pattern of the regular expression (also known as the <i class="+ topic/ph hi-d/i ">constructor string</i>). This is the 
        main part  of the regular expression (the part that goes within the "/" characters). 
        
        <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Notes:</b> </p>
        
        <ul class="- topic/ul "><li class="- topic/li ">Do not include the starting and trailing "/" characters; use these only when defining a regular expression
        literal without using the constructor. For example, the following two regular expressions are equivalent:
        
        <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> var re1:RegExp = new RegExp("bob", "i"); 
        var re2:RegExp = /bob/i;</codeblock>
        
        </li><li class="- topic/li ">In a regular expression that is defined with the <codeph class="+ topic/ph pr-d/codeph ">RegExp()</codeph> constructor method, to use a 
        metasequence that begins with the backslash (\) character, such as <codeph class="+ topic/ph pr-d/codeph ">\d</codeph> (which matches any digit), 
        type the backslash character twice. For example, the following two regular expressions are equivalent:
        
        <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> var re1:RegExp = new RegExp("\\d+", ""); 
        var re2:RegExp = /\d/;</codeblock>
        
        <p class="- topic/p ">In the first expression, you must type the backlash character twice in this case, because the first parameter of the <codeph class="+ topic/ph pr-d/codeph ">RegExp() </codeph>
        constructor method is a string, and in a string literal you must type a backslash character twice to have it 
        recognized as a single  backslash character.</p>
        
        </li></ul>
        
        </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">flags</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The modifiers of the regular expression. These can include the following:
        
        <ul class="- topic/ul "><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">g</codeph> &#151; When using the <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> method of the String class, 
          specify this modifier to replace all matches, rather than only the first one. 
          This modifier corresponds to the <codeph class="+ topic/ph pr-d/codeph ">global</codeph> property of the RegExp instance.</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">i</codeph> &#151; The regular expression is evaluated <i class="+ topic/ph hi-d/i ">without</i> case 
          sensitivity. This modifier corresponds to the <codeph class="+ topic/ph pr-d/codeph ">ignoreCase</codeph> property of the RegExp instance.</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">s</codeph> &#151; The dot (<codeph class="+ topic/ph pr-d/codeph ">.</codeph>) character matches new-line characters. Note 
              This modifier corresponds to the <codeph class="+ topic/ph pr-d/codeph ">dotall</codeph> property of the RegExp instance.</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">m</codeph> &#151; The caret (<codeph class="+ topic/ph pr-d/codeph ">^</codeph>) character and dollar sign (<codeph class="+ topic/ph pr-d/codeph ">$</codeph>) match 
          before <i class="+ topic/ph hi-d/i ">and</i> after new-line characters. This modifier corresponds to the 
          <codeph class="+ topic/ph pr-d/codeph ">multiline</codeph> property of the RegExp instance.</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">x</codeph> &#151; White space characters in the <codeph class="+ topic/ph pr-d/codeph ">re</codeph> string are ignored, 
          so that you can write more readable constructors. This modifier corresponds to the
              <codeph class="+ topic/ph pr-d/codeph ">extended</codeph> property of the RegExp instance.</li></ul>
        
        <p class="- topic/p ">All other characters in the <codeph class="+ topic/ph pr-d/codeph ">flags</codeph> string are ignored. </p>
        
        </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        Lets you construct a regular expression from two strings. One string defines the pattern of the
        regular expression, and the other defines the flags used in the regular expression. 
        
        </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="RegExp:AS3:exec" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">exec</apiName><shortdesc class="- topic/shortdesc ">
         Performs a search for the regular expression on the given string str.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.exec, exec
         </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If there is no match, <codeph class="+ topic/ph pr-d/codeph ">null</codeph>; otherwise, an object with the following properties: 
         
         <ul class="- topic/ul "><li class="- topic/li ">An array, in which element 0 contains the complete matching substring, and  
         other elements of the array (1 through <i class="+ topic/ph hi-d/i ">n</i>) contain substrings that match parenthetical groups  
         in the regular expression </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">index</codeph> &#151; The character position of the matched substring within 
              the string</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">input</codeph> &#151; The string (<codeph class="+ topic/ph pr-d/codeph ">str</codeph>)</li></ul>
         
         
         </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string to search.  
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Performs a search for the regular expression on the given string <codeph class="+ topic/ph pr-d/codeph ">str</codeph>. 
         
         <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) flag is <i class="+ topic/ph hi-d/i ">not</i> set for the regular 
         expression, then the search starts 
         at the beginning of the string (at index position 0); the search ignores
         the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> property of the regular expression.</p>
         
         <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) flag <i class="+ topic/ph hi-d/i ">is</i> set for the regular 
         expression, then the search starts 
         at the index position specified by the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> property of the regular expression. 
         If the search matches a substring, the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> property changes to match the position 
         of the end of the match. </p>
         
         </apiDesc><example class="- topic/example ">When the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) flag is <i class="+ topic/ph hi-d/i ">not</i> set in the regular expression, then you can 
         use <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> to find the first match in the string: 
         
         <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
         var myPattern:RegExp = /(\w~~)sh(\w~~)/ig;   
         var str:String = "She sells seashells by the seashore";
         var result:Object = myPattern.exec(str);
         trace(result);
         </codeblock>
         
         <p class="- topic/p "> The <codeph class="+ topic/ph pr-d/codeph ">result</codeph> object is set to the following:</p>
         
         <ul class="- topic/ul "><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result[0]</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">"She"</codeph> (the complete
              match). </li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result[1]</codeph> is set to an empty string (the first matching  
              parenthetical group). </li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result[2]</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">"e"</codeph> (the second matching  
              parenthetical group). </li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result.index</codeph> is set to 0.</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result.input</codeph> is set to the input string: <codeph class="+ topic/ph pr-d/codeph ">"She sells seashells 
          by the seashore"</codeph>.</li></ul> 
         
         
         
         <p class="- topic/p "> In the following example, the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) flag <i class="+ topic/ph hi-d/i ">is</i> set in the regular 
         expression, so you can use <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> repeatedly to find multiple matches:</p>
         
         <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
         var myPattern:RegExp = /(\w~~)sh(\w~~)/ig;  
         var str:String = "She sells seashells by the seashore";
         var result:Object = myPattern.exec(str);
         
         while (result != null) {
             trace ( result.index, "\t", result);
             result = myPattern.exec(str);
         }
         </codeblock>
         
         <p class="- topic/p "> This code results in the following output:</p>
         
         <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
            0      She,,e
            10     seashells,sea,ells
            27     seashore,sea,ore
         </codeph></pre>
         
         </example></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/match()" class="- topic/link "><linktext class="- topic/linktext ">String.match()</linktext></link><link href="#String/search()" class="- topic/link "><linktext class="- topic/linktext ">String.search()</linktext></link></related-links></apiOperation><apiOperation id="RegExp:AS3:test" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">test</apiName><shortdesc class="- topic/shortdesc ">
         Tests for the match of the regular expression in the given string str.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.test, test
          
          </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If there is a match, <codeph class="+ topic/ph pr-d/codeph ">true</codeph>; otherwise, <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
         
         </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string to test.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Tests for the match of the regular expression in the given string <codeph class="+ topic/ph pr-d/codeph ">str</codeph>. 
         
         <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) flag is <i class="+ topic/ph hi-d/i ">not</i> set for the regular expression, 
         then the search starts at the beginning of the string (at index position 0); the search ignores
         the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> property of the regular expression.</p>
         
         <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) flag <i class="+ topic/ph hi-d/i ">is</i> set for the regular expression, then the search starts 
         at the index position specified by the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> property of the regular expression. 
         If the search matches a substring, the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> property changes to match the 
         position of the end of the match. </p>
         
         </apiDesc><example conref="examples\RegExp.test.1.as" class="- topic/example "> The following example shows the use of the <codeph class="+ topic/ph pr-d/codeph ">test()</codeph> method on a regular
 expression in which the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) flag is set: 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var re1:RegExp = /\w/g;
var str:String = "a b c";
trace (re1.lastIndex); // 0
trace (re1.test(str)); // true
trace (re1.lastIndex); // 1
trace (re1.test(str)); // true
trace (re1.lastIndex); // 3
trace (re1.test(str)); // true
trace (re1.lastIndex); // 5
trace (re1.test(str)); // false
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="RegExp:dotall:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dotall</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether the dot character (.) in a regular expression pattern matches 
         new-line characters.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.dotall, dotall
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether the dot character (.) in a regular expression pattern matches 
         new-line characters. Use the <codeph class="+ topic/ph pr-d/codeph ">s</codeph> flag when constructing 
         a regular expression to set <codeph class="+ topic/ph pr-d/codeph ">dotall = true</codeph>.
         
         </apiDesc><example conref="examples\RegExp.dotall.1.as" class="- topic/example "> The following example shows the effect of the <codeph class="+ topic/ph pr-d/codeph ">s</codeph> (<codeph class="+ topic/ph pr-d/codeph ">dotall</codeph>) 
 flag on a regular expression: 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var str:String = "&lt;p&gt;Hello\n"
        + "again&lt;/p&gt;"
        + "&lt;p&gt;Hello&lt;/p&gt;";

var pattern:RegExp = /&lt;p&gt;.*?&lt;\/p&gt;/;
trace(pattern.dotall) // false
trace(pattern.exec(str)); // &lt;p&gt;Hello&lt;/p&gt;

pattern = /&lt;p&gt;.*?&lt;\/p&gt;/s;
trace(pattern.dotall) // true
trace(pattern.exec(str)); 
   </codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:extended:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">extended</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether to use extended mode for the regular expression.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.extended, extended
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether to use extended mode for the regular expression. 
         When a RegExp object is in extended mode, white space characters in the constructor  
         string are ignored. This is done to allow more readable constructors.
         
         <p class="- topic/p ">Use the <codeph class="+ topic/ph pr-d/codeph ">x</codeph> flag when constructing a regular expression to set 
         <codeph class="+ topic/ph pr-d/codeph ">extended = true</codeph>. </p>
         
         </apiDesc><example conref="examples\RegExp.extended.1.as" class="- topic/example "> The following example shows different ways to construct the same regular
 expression. In each, the regular expression is to match a phone number pattern of 
 xxx-xxx-xxxx or (xxx) xxx-xxxx or (xxx)xxx-xxxx.
 The second regular expression uses the <codeph class="+ topic/ph pr-d/codeph ">x</codeph> flag, causing the white spaces in  
 the string to be ignored. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var rePhonePattern1:RegExp = /\d{3}-\d{3}-\d{4}|\(\d{3}\)\s?\d{3}-\d{4}/; 
var str:String = "The phone number is (415)555-1212.";

trace(rePhonePattern1.extended) // false
trace(rePhonePattern1.exec(str)); // (415)555-1212

var rePhonePattern2:RegExp = / \d{3}-\d{3}-\d{4}  |   \( \d{3} \) \ ? \d{3}-\d{4}  /x; 
trace(rePhonePattern2.extended) // true
trace(rePhonePattern2.exec(str)); // (415)555-1212
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:global:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">global</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether to use global matching for the regular expression.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.global, global
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether to use global matching for the regular expression. When 
         <codeph class="+ topic/ph pr-d/codeph ">global == true</codeph>, the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> property is set after a match is 
         found. The next time a match is requested, the regular expression engine starts from 
         the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> position in the string. Use the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> flag when 
         constructing a regular expression  to set <codeph class="+ topic/ph pr-d/codeph ">global</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. 
         
         </apiDesc><example conref="examples\RegExp.global.1.as" class="- topic/example "> The following example shows the effect setting the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> 
 (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) flag on the <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> method:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var pattern:RegExp = /foo\d/; 
var str:String = "foo1 foo2";
trace(pattern.global); // false
trace(pattern.exec(str)); // foo1
trace(pattern.lastIndex); // 0
trace(pattern.exec(str)); // foo1

pattern = /foo\d/g;
trace(pattern.global); // true
trace(pattern.exec(str)); // foo1
trace(pattern.lastIndex); // 4
trace(pattern.exec(str)); // foo2
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:ignoreCase:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ignoreCase</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether the regular expression ignores case sensitivity.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.ignoreCase, ignoreCase
         </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether the regular expression ignores case sensitivity. Use the 
         <codeph class="+ topic/ph pr-d/codeph ">i</codeph> flag when constructing a regular expression to set 
         <codeph class="+ topic/ph pr-d/codeph ">ignoreCase = true</codeph>. 
         
         </apiDesc><example conref="examples\RegExp.ignoreCase.1.as" class="- topic/example "> The following example shows the effect of setting the <codeph class="+ topic/ph pr-d/codeph ">i</codeph> 
 (<codeph class="+ topic/ph pr-d/codeph ">ignoreCase</codeph>) flag:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var pattern:RegExp = /bob/; 
var str:String = "Bob bob";
trace(pattern.ignoreCase); // false
trace(pattern.exec(str)); // bob

pattern = /bob/i;
trace(pattern.ignoreCase); // true
trace(pattern.exec(str)); // Bob
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:lastIndex:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lastIndex</apiName><shortdesc class="- topic/shortdesc ">
         Specifies the index position in the string at which to start the next search.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.lastIndex, lastIndex
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies the index position in the string at which to start the next search. This property 
         affects the <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">test()</codeph> methods of the RegExp class. 
         However, the <codeph class="+ topic/ph pr-d/codeph ">match()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">search()</codeph> methods
         of the String class ignore the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> property and start all searches from
         the beginning of the string.
         
         <p class="- topic/p ">When the <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">test()</codeph> method finds a match and the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> 
         (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) flag is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for the regular expression, the method
         automatically sets the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> property to the index position of the character 
         <i class="+ topic/ph hi-d/i ">after</i> the last character in the matching substring of the last match. If the 
         <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) flag is set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, the method does not 
         set the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph>property.</p>
         
         <p class="- topic/p ">You can set the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> property to adjust the starting position
         in the string for regular expression matching. </p>
         
         </apiDesc><example conref="examples\RegExp.lastIndex.1.as" class="- topic/example "> The following example shows the effect of setting the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph>
 property, and it shows how it is updated after a call to the <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> method on a
 regular expression in which the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) flag is set:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var pattern:RegExp = /\w\d/g; 
var str:String = "a1 b2 c3 d4";
pattern.lastIndex = 2; 
trace(pattern.exec(str)); // b2
trace(pattern.lastIndex); // 5
trace(pattern.exec(str)); // c3
trace(pattern.lastIndex); // 8
trace(pattern.exec(str)); // d4
trace(pattern.lastIndex); // 11
trace(pattern.exec(str)); // null
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:multiline:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multiline</apiName><shortdesc class="- topic/shortdesc ">
         Specifies whether the m (multiline) flag is set.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.multiline, multiline
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies whether the <codeph class="+ topic/ph pr-d/codeph ">m</codeph> (<codeph class="+ topic/ph pr-d/codeph ">multiline</codeph>) flag is set. If it is set,
         the caret (<codeph class="+ topic/ph pr-d/codeph ">^</codeph>) and dollar sign (<codeph class="+ topic/ph pr-d/codeph ">$</codeph>) in a regular expression 
         match before and after new lines. 
         Use the <codeph class="+ topic/ph pr-d/codeph ">m</codeph> flag when constructing a regular expression to set 
         <codeph class="+ topic/ph pr-d/codeph ">multiline = true</codeph>.
         
         </apiDesc><example conref="examples\RegExp.multiline.1.as" class="- topic/example "> The following example shows the effect setting the <codeph class="+ topic/ph pr-d/codeph ">m</codeph> (<codeph class="+ topic/ph pr-d/codeph ">multiline</codeph>) flag:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var pattern:RegExp = /^bob/; 
var str:String = "foo\n"
                + "bob";
trace(pattern.multiline); // false
trace(pattern.exec(str)); // null

pattern = /^bob/m;
trace(pattern.multiline); // true
trace(pattern.exec(str)); // bob
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:source:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">source</apiName><shortdesc class="- topic/shortdesc ">
         Specifies the pattern portion of the regular expression.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.source, source
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Specifies the pattern portion of the regular expression.
         
         </apiDesc><example conref="examples\RegExp.source.1.as" class="- topic/example "> The following code outputs the <codeph class="+ topic/ph pr-d/codeph ">source</codeph> parameter for two regular expressions:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var re1:RegExp = /aabb/gi;
trace (re1.source); // aabb

var re2:RegExp = new RegExp("x+y*", "i");
trace(re2.source); // x+y*
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Date" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Date</apiName><shortdesc class="- topic/shortdesc ">
 The Date class represents date and time information.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Date object, built-in class, date 
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The Date class represents date and time information. An instance of the Date class represents a particular point 
 in time for which the properties such as month, day, hours, and seconds can be queried or modified. The Date 
 class lets you retrieve date and time values relative to universal time (Greenwich mean time, now called universal 
 time or UTC) or relative to local time, which is determined by the local time zone setting on the operating system 
 that is running Flash Player. The methods of the Date class are not static but apply only to the individual Date 
 object specified when the method is called. The <codeph class="+ topic/ph pr-d/codeph ">Date.UTC()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">Date.parse()</codeph> methods are 
 exceptions; they are static methods.
 <p product="flash" class="- topic/p ">The Date class handles daylight saving time differently, depending on the operating system and 
 runtime version. Flash Player 6 and later versions handle daylight saving time on the following operating 
 systems in these ways:</p>
 <ul product="flash" class="- topic/ul "><li class="- topic/li ">Windows - the Date object automatically adjusts its output for daylight saving time. The Date object detects 
 whether daylight saving time is employed in the current locale, and if so, it detects the standard-to-daylight 
 saving time transition date and times. However, the transition dates currently in effect are applied to dates in 
 the past and the future, so the daylight saving time bias might calculate incorrectly for dates in the past when 
 the locale had different transition dates.</li><li class="- topic/li ">Mac OS X - the Date object automatically adjusts its output for daylight saving time. The time zone information 
 database in Mac OS X is used to determine whether any date or time in the present or past should have a daylight 
 saving time bias applied.</li><li class="- topic/li ">Mac OS 9 - the operating system provides only enough information to determine whether the current date and 
 time should have a daylight saving time bias applied. Accordingly, the date object assumes that the current 
 daylight saving time bias applies to all dates and times in the past or future.</li></ul>
 <p product="flash" class="- topic/p ">Flash Player 5 handles daylight saving time on the following operating systems as follows:</p>
 <ul product="flash" class="- topic/ul "><li class="- topic/li ">Windows - the U.S. rules for daylight saving time are always applied, which leads to incorrect transitions 
 in Europe and other areas that employ daylight saving time but have different transition times than the U.S. Flash 
 correctly detects whether daylight saving time is used in the current locale.</li></ul>
 <p class="- topic/p ">To use the Date class, construct a Date instance using the <codeph class="+ topic/ph pr-d/codeph ">new</codeph> operator.</p>
 <p class="- topic/p ">ActionScript 3.0 adds several new accessor properties that can be used in place of many Date class methods 
 that access or modify Date instances. ActionScript 3.0 also includes several new variations of the 
 <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method that are included for ECMA-262 3rd Edition compliance, including: 
 <codeph class="+ topic/ph pr-d/codeph ">Date.toLocaleString()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Date.toTimeString()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Date.toLocaleTimeString()</codeph>, 
 <codeph class="+ topic/ph pr-d/codeph ">Date.toDateString()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">Date.toLocaleDateString()</codeph>.</p>
 <p class="- topic/p ">To compute relative time or time elapsed, see the <codeph class="+ topic/ph pr-d/codeph ">getTimer()</codeph> method in the flash.utils package.</p>
 
 </apiDesc><example conref="examples\DateExample.as" class="- topic/example "> The following example shows various uses of the <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> constructor to assign the
 following variables:
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">myDate1</codeph> calls <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> with no parameters, which sets <codeph class="+ topic/ph pr-d/codeph ">myDate1</codeph> to the
     current date and time (according to your current system's date and time). </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">myDate2</codeph> calls <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> with the <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">2000</codeph>), month
     (<codeph class="+ topic/ph pr-d/codeph ">0</codeph> = January), and <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) parameters passed to it.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">myDate3</codeph> calls <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> with the <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">65</codeph> = 1965),
     <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">2</codeph> = March), the <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">6</codeph>), the <codeph class="+ topic/ph pr-d/codeph ">hour</codeph>
     (<codeph class="+ topic/ph pr-d/codeph ">9</codeph>), the <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), the <codeph class="+ topic/ph pr-d/codeph ">second</codeph> (<codeph class="+ topic/ph pr-d/codeph ">15</codeph>)
     and the <codeph class="+ topic/ph pr-d/codeph ">millisecond</codeph>-+ (<codeph class="+ topic/ph pr-d/codeph ">0</codeph>) passed as parameters.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">myDate4</codeph> calls <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> with the time value representing the number of milliseconds
     <b class="+ topic/ph hi-d/b ">before</b> (since the value is negative) 0:00:00 GMT January 1, 1970.</li></ul>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    
    public class DateExample extends Sprite{
        public function DateExample() {
            var myDate1:Date = new Date();
            trace(myDate1); // [NOW]

            var myDate2:Date = new Date(2000, 0, 1);
            trace(myDate2); // Sat Jan 1 00:00:00 GMT-0800 2000

            var myDate3:Date = new Date(65, 2, 6, 9, 30, 15, 0);
            trace(myDate3); // Sat Mar 6 09:30:15 GMT-0800 1965

            var myDate4:Date = new Date(-14159025000);
            trace(myDate4); // Sun Jul 20 19:56:15 GMT-0700 1969
        }        
    }    
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.utils.xml#/getTimer()" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.getTimer()</linktext></link></related-links><apiConstructor id="Date:Date" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Date</apiName><shortdesc class="- topic/shortdesc ">
	 Constructs a new Date object that holds the specified date and time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new Date, constructor, date
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">yearOrTimevalue</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If other parameters are specified, this number represents a 
	 year (such as 1965); otherwise, it represents a time value. If the number represents a year, a 
	 value of 0 to 99 indicates 1900 through 1999; otherwise all four digits of the year must be 
	 specified. If the number represents a time value (no other parameters are specified), it is the
	 number of milliseconds before or after 0:00:00 GMT January 1, 1970; a negative values represents  
	 a time <i class="+ topic/ph hi-d/i ">before</i> 0:00:00 GMT January 1, 1970, and a positive value represents a time after.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 (January) to 11 (December).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">date</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 1 to 31. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 (midnight) to 23 (11 p.m.).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 999 of milliseconds. 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Constructs a new Date object that holds the specified date and time.  
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> constructor takes up to seven parameters (year, month,  
	 ..., millisecond) to specify a date and time to the millisecond. The date that
	 the newly constructed Date object contains depends on the number, and data type, of arguments passed. </p>
	 <ul class="- topic/ul "><li class="- topic/li ">If you pass no arguments, the Date object is assigned the current date and time.</li><li class="- topic/li ">If you pass one argument of data type Number, the Date object is assigned a time value based on the number of milliseconds since January 1, 1970 0:00:000 GMT, as specified by the lone argument.</li><li class="- topic/li ">If you pass one argument of data type String, and the string contains a valid date, the Date object  contains a time value based on that date.</li><li class="- topic/li ">If you pass two or more arguments, the Date object is assigned a time value based on the argument values passed, which represent the date's year, month, date, hour, minute, second, and milliseconds.</li></ul>
	 <p class="- topic/p ">If you pass a string to the Date class constructor, the date can be in a variety of formats, but must at least include the month, date, and year. For example, <codeph class="+ topic/ph pr-d/codeph ">Feb 1 2005</codeph> is valid, but <codeph class="+ topic/ph pr-d/codeph ">Feb 2005</codeph> is not. The following list indicates some of the valid formats:</p>
	 <ul class="- topic/ul "><li class="- topic/li ">Day Month Date Hours:Minutes:Seconds GMT Year (for instance, "Tue Feb 1 00:00:00 GMT-0800 2005", which matches <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph>)</li><li class="- topic/li ">Day Month Date Year Hours:Minutes:Seconds AM/PM (for instance, "Tue Feb 1 2005 12:00:00 AM", which matches <codeph class="+ topic/ph pr-d/codeph ">toLocaleString()</codeph>)</li><li class="- topic/li ">Day Month Date Year (for instance, "Tue Feb 1 2005", which matches <codeph class="+ topic/ph pr-d/codeph ">toDateString()</codeph>)</li><li class="- topic/li ">Month/Day/Year (for instance, "02/01/2005")</li><li class="- topic/li ">Month/Year (for instance, "02/2005")</li></ul>
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="#Date/getMonth()" class="- topic/link "><linktext class="- topic/linktext ">getMonth()</linktext></link><link href="#Date/getDate()" class="- topic/link "><linktext class="- topic/linktext ">getDate()</linktext></link><link href="#Date/getFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getFullYear()</linktext></link></related-links></apiConstructor><apiOperation id="Date:UTC" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">UTC</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the number of milliseconds between midnight on January 1, 1970, universal time, 
	 and the time specified in the parameters.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.utc, utc, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of milliseconds since January 1, 1970 and the specified date and time.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">year</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A four-digit integer that represents the year (for example, 2000).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 (January) to 11 (December).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">date</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 1 to 31. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 (midnight) to 23 (11 p.m.).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 999. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the number of milliseconds between midnight on January 1, 1970, universal time, 
	 and the time specified in the parameters. This method uses universal time, whereas the 
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> constructor uses local time.
	 <p class="- topic/p ">This method is useful if you want to pass a UTC date to the Date class constructor.
	 Because the Date class constructor accepts the millisecond offset as an argument, you
	 can use the Date.UTC() method to convert your UTC date into the corresponding millisecond 
	 offset, and send that offset as an argument to the Date class constructor:</p>
	 
	 </apiDesc><example conref="examples\Date.UTC.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>) using local
 time.  Then a call to <codeph class="+ topic/ph pr-d/codeph ">UTC()</codeph> within a <codeph class="+ topic/ph pr-d/codeph ">setTime()</codeph> method resets the same parameters
 to universal time.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 20);
trace(someBirthday.toString());

someBirthday.setTime(Date.UTC(1974, 10, 30, 15, 20));
trace(someBirthday.toString());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getDate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDate</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the day of the month (an integer from 1 to 31) specified by a Date object
	 according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getdate, getdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The day of the month (1 - 31) a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object represents.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the day of the month (an integer from 1 to 31) specified by a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to local time. Local time is determined by the operating system on which 
	 the Flash runtimes are running.
	 
 	 </apiDesc><example conref="examples\Date.getDate.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).
 The <codeph class="+ topic/ph pr-d/codeph ">getDate()</codeph> method is then called, which retrieves the day of the month.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class DateExample extends Sprite {

        public function DateExample() {
            var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
            trace(someBirthday);            // Sat Nov 30 01:20:00 GMT-0800 1974
            trace(someBirthday.getDate()); // 30
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getMonth()" class="- topic/link "><linktext class="- topic/linktext ">getMonth()</linktext></link><link href="#Date/getFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getFullYear()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getDay" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDay</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the day of the week (0 for Sunday, 1 for Monday, and so on) specified by this
	 Date according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getday, getday, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A numeric version of the day of the week (0 - 6) a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 represents.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the day of the week (0 for Sunday, 1 for Monday, and so on) specified by this
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> according to local time. Local time is determined by the operating 
	 system on which the Flash runtimes are running.
	 
 	 </apiDesc><example conref="examples\Date.getDay.1.as" class="- topic/example "> The following example creates a new Array object <codeph class="+ topic/ph pr-d/codeph ">weekDayLabels</codeph>, with elements
 <codeph class="+ topic/ph pr-d/codeph ">[Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday]</codeph> and a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).
 The <codeph class="+ topic/ph pr-d/codeph ">getDay()</codeph> method is then called twice, which first shows the day of the month
 as 6 and then shows the day of the week using <codeph class="+ topic/ph pr-d/codeph ">weekDayLabels</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var weekDayLabels:Array = new Array("Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday");

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);                       // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getDay());            // 6
trace(weekDayLabels[someBirthday.getDay()]); // Saturday
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getFullYear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getFullYear</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the full year (a four-digit number, such as 2000) of a Date object 
	 according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getfullyear, getfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The full year a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object represents.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the full year (a four-digit number, such as 2000) of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object 
	 according to local time. Local time is determined by the operating system on which 
	 the Flash runtimes are running.
	 
	 </apiDesc><example conref="examples\Date.getFullYear.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).
 The <codeph class="+ topic/ph pr-d/codeph ">getFullYear()</codeph> method is then called, which retrieves the four-digit year.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);           // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getFullYear()); // 1974
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getHours" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getHours</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the hour (an integer from 0 to 23) of the day portion of a Date object
	 according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.gethours, gethours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The hour (0 - 23) of the day a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object represents.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the hour (an integer from 0 to 23) of the day portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to local time. Local time is determined by the operating system on which 
	 the Flash runtimes are running. 
	 
	 </apiDesc><example conref="examples\Date.getHours.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).
 The <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> methods are then called, which
 retrieves the hours and the minutes in 24-hour format.  Finally, a string <codeph class="+ topic/ph pr-d/codeph ">localTime</codeph>
 is created and assigned to the result of a call to the function <codeph class="+ topic/ph pr-d/codeph ">getUSClockTime()</codeph>, which, in turn calls
 <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> again, resulting in the time <codeph class="+ topic/ph pr-d/codeph ">03:05 PM</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 5);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 15:5

var localTime:String = getUSClockTime(someBirthday.getHours(), someBirthday.getMinutes());
trace(localTime);    // 03:05 PM

function getUSClockTime(hrs:uint, mins:uint):String {
    var modifier:String = "PM";
    var minLabel:String = doubleDigitFormat(mins);

    if(hrs &gt; 12) {
        hrs = hrs-12;
    } else if(hrs == 0) {
        modifier = "AM";
        hrs = 12;
    } else if(hrs &lt; 12) {
        modifier = "AM";
    }

    return (doubleDigitFormat(hrs) + ":" + minLabel + " " + modifier);
}

function doubleDigitFormat(num:uint):String {
    if(num &lt; 10) {
        return ("0" + num);
    }
    return num;
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getMilliseconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getMilliseconds</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the milliseconds (an integer from 0 to 999) portion of a Date object
	 according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getmilliseconds, getmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The milliseconds portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the milliseconds (an integer from 0 to 999) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to local time. Local time is determined by the operating system on which 
	 the Flash runtimes are running.
	 
	 </apiDesc><example conref="examples\Date.getMilliseconds.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The <codeph class="+ topic/ph pr-d/codeph ">getMilliseconds()</codeph> method is then called, which retrieves the milliseconds of the
 Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> at the time it was created.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getMinutes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getMinutes</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the minutes (an integer from 0 to 59) portion of a Date object
	 according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getminutes, getminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The minutes portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the minutes (an integer from 0 to 59) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to local time. Local time is determined by the operating system on which 
	 the Flash runtimes are running.
	 
	 </apiDesc><example conref="examples\Date.getMinutes.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> method is then called, which retrieves the minutes of the
 Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> at the time it was created.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.getMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getMonth" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getMonth</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the month (0 for January, 1 for February, and so on) portion of this 
	 Date according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getmonth, getmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The month (0 - 11) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the month (0 for January, 1 for February, and so on) portion of this <codeph class="+ topic/ph pr-d/codeph ">
	 Date</codeph> according to local time. Local time is determined by the operating system 
	 on which the Flash runtimes are running.
	 
	 </apiDesc><example conref="examples\Date.getMonth.1.as" class="- topic/example "> The following example creates a new Array object <codeph class="+ topic/ph pr-d/codeph ">monthLabels</codeph>, with elements
 <codeph class="+ topic/ph pr-d/codeph ">January</codeph> through <codeph class="+ topic/ph pr-d/codeph ">December</codeph> and a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The <codeph class="+ topic/ph pr-d/codeph ">getMonth()</codeph> method is then called twice, which first returns the month number and
 then the month name of the month the Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var monthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getMonth());
trace(monthLabels[now.getMonth()]);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getSeconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getSeconds</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the seconds (an integer from 0 to 59) portion of a Date object
	 according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getseconds, getseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The seconds (0 to 59) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the seconds (an integer from 0 to 59) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to local time. Local time is determined by the operating system on which 
	 the Flash runtimes are running.
	 
	 </apiDesc><example conref="examples\Date.getSeconds.1.as" class="- topic/example "> The following example creates a new  Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The <codeph class="+ topic/ph pr-d/codeph ">getSeconds()</codeph> method is then called, which retrieves the seconds of the
 Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> at the time it was created.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getSeconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getTime" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getTime</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the number of milliseconds since midnight January 1, 1970, universal time, 
	 for a Date object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.gettime, gettime, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of milliseconds since Jan 1, 1970 that a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object represents.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the number of milliseconds since midnight January 1, 1970, universal time, 
	 for a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object. Use this method to represent a specific instant in time 
	 when comparing two or more <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> objects.
	 
	 </apiDesc><example conref="examples\Date.getTime.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">mlk</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1929</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">0</codeph> = January), and 
 <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">15</codeph>). The <codeph class="+ topic/ph pr-d/codeph ">getTime()</codeph> method is then called, which 
 retrieves the milliseconds since midnight January 1, 1970, which is negative since the year is 
 set to 1929.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var mlk:Date = new Date(1929, 0, 15);
trace(mlk);           // Tue Jan 15 00:00:00 GMT-0800 1929
trace(mlk.getTime()); // -1292601600000
</codeblock></example><example conref="examples\Date.getTime.2.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters
 and then uses the following DateMath (created below) class methods to add time to the original Date
 object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> from the time it was created:
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addSeconds()</codeph>: adds 30 seconds to <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addMinutes()</codeph>: adds 30 minutes to  <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addHours()</codeph>: adds 6 hours to the Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addDays()</codeph>: adds 30 days to the Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addWeeks()</codeph>: adds 4 weeks to <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.</li></ul>

<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(DateMath.addSeconds(now, 30));
trace(DateMath.addMinutes(now, 30));
trace(DateMath.addHours(now, 6));
trace(DateMath.addDays(now, 30));
trace(DateMath.addWeeks(now, 4));

class DateMath {
    public static function addWeeks(date:Date, weeks:Number):Date {
        return addDays(date, weeks*7);
    }

    public static function addDays(date:Date, days:Number):Date {
        return addHours(date, days*24);
    }

    public static function addHours(date:Date, hrs:Number):Date {
        return addMinutes(date, hrs*60);
    }

    public static function addMinutes(date:Date, mins:Number):Date {
        return addSeconds(date, mins*60);
    }

    public static function addSeconds(date:Date, secs:Number):Date {
        var mSecs:Number = secs * 1000;
        var sum:Number = mSecs + date.getTime();
        return new Date(sum);
    }
}
</codeblock> <b class="+ topic/ph hi-d/b ">Note</b>: it's important to use getTime when performing Date arithmetic because it will continue
 to work during leap years and doesn't require a bunch of if logic like following pseudo-code:
 <pre xml:space="preserve" class="- topic/pre ">
 function addMonths(num:Number):void {
     currentMonth = currentMonth + num;
     if(currentMonth &gt; 12) {
         currentYear++;
         currentMonth = currentMonth - 12;
     }
 }
 </pre>
</example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getTimezoneOffset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getTimezoneOffset</apiName><shortdesc class="- topic/shortdesc ">
     Returns the difference, in minutes, between universal 
     time (UTC) and the computer's local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.gettimezoneoffset, gettimezoneoffset, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The minutes you need to add to the computer's local time value to equal UTC. If
     your computer's time is set later than UTC, the return value will be negative.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns the difference, in minutes, between universal 
     time (UTC) and the computer's local time. 
	 
	 </apiDesc><example conref="examples\Date.getTimezoneOffset.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The <codeph class="+ topic/ph pr-d/codeph ">getTimezoneOffset()</codeph> method is then called, which retrieves the difference (in minutes) of the
 time <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created and Universal Time.  The time zone offset is then converted to hours by
 dividing the result by 60.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var date:Date = new Date();
trace(date.getTimezoneOffset() / 60);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getUTCDate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCDate</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the day of the month (an integer from 1 to 31) of a Date object, 
	 according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcdate, getutcdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The UTC day of the month (1 to 31) that a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object represents.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the day of the month (an integer from 1 to 31) of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object, 
	 according to universal time (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCDate.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).
 The <codeph class="+ topic/ph pr-d/codeph ">getUTCDate()</codeph> method is then called, which retrieves the day of the month, according to the UTC.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);             // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCDate()); // 30
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getDate()" class="- topic/link "><linktext class="- topic/linktext ">getDate()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCDay" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCDay</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the day of the week (0 for Sunday, 1 for Monday, and so on) of this Date
	  according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcday, getutcday, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The UTC day of the week (0 to 6) that a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object represents.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the day of the week (0 for Sunday, 1 for Monday, and so on) of this <codeph class="+ topic/ph pr-d/codeph ">Date
	 </codeph> according to universal time (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCDay.1.as" class="- topic/example "> The following example creates a new Array object <codeph class="+ topic/ph pr-d/codeph ">weekDayLabels</codeph>, with elements
 <codeph class="+ topic/ph pr-d/codeph ">[Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday]</codeph> and a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).
 The <codeph class="+ topic/ph pr-d/codeph ">getUTCDay()</codeph> method is then called twice, which first shows the day of the month
 as 6 and then shows the day of the week using <codeph class="+ topic/ph pr-d/codeph ">weekDayLabels</codeph>, according to the UTC.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var weekDayLabels:Array = new Array("Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday");

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);           // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCDay()); // 6
trace(weekDayLabels[someBirthday.getUTCDay()]); // Saturday
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCFullYear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCFullYear</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the four-digit year of a Date object according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcfullyear, getutcfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The UTC four-digit year a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object represents.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the four-digit year of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object according to universal time (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCFullYear.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).
 The <codeph class="+ topic/ph pr-d/codeph ">getUTCFullYear()</codeph> method is then called, which retrieves the four-digit year, according to the UTC.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);                 // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCFullYear()); // 1974
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getFullYear()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCHours" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCHours</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the hour (an integer from 0 to 23) of the day of a Date object
	 according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutchours, getutchours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The UTC hour of the day (0 to 23) a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object represents.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the hour (an integer from 0 to 23) of the day of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to universal time (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCHours.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).
 The <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> methods are then called, which retrieves
 the hours and the minutes in 24-hour format.  Finally, a string <codeph class="+ topic/ph pr-d/codeph ">localTime</codeph> is created and
 assigned to the result of a call to the function <codeph class="+ topic/ph pr-d/codeph ">getUSClockTime()</codeph>, which, in turn calls
 <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> again, resulting in the time <codeph class="+ topic/ph pr-d/codeph ">03:05 PM</codeph>.
 Lastly, a String variable <codeph class="+ topic/ph pr-d/codeph ">utcTime</codeph> is created in the same manner as <codeph class="+ topic/ph pr-d/codeph ">localTime</codeph>,
 and in this case, the result is the same.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 5);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 15:5

var localTime:String = getUSClockTime(someBirthday.getHours(), someBirthday.getMinutes());
trace(localTime);    // 03:05 PM

var utcTime:String = getUSClockTime(someBirthday.getUTCHours(), someBirthday.getUTCMinutes());
trace(utcTime);      // 11:05 PM

function getUSClockTime(hrs:uint, mins:uint):String {
    var modifier:String = "PM";
    var minLabel:String = doubleDigitFormat(mins);

    if(hrs &gt; 12) {
        hrs = hrs-12;
    } else if(hrs == 0) {
        modifier = "AM";
        hrs = 12;
    } else if(hrs &lt; 12) {
        modifier = "AM";
    }

    return (doubleDigitFormat(hrs) + ":" + minLabel + " " + modifier);
}

function doubleDigitFormat(num:uint):String {
    if(num &lt; 10) {
        return ("0" + num);
    }
    return num;
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getHours()" class="- topic/link "><linktext class="- topic/linktext ">getHours()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCMilliseconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCMilliseconds</apiName><shortdesc class="- topic/shortdesc ">
	  Returns the milliseconds (an integer from 0 to 999) portion of a Date object
	 according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcmilliseconds, getutcmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The UTC milliseconds portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	  Returns the milliseconds (an integer from 0 to 999) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to universal time (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCMilliseconds.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The <codeph class="+ topic/ph pr-d/codeph ">getUTCMilliseconds()</codeph> method is then called, which retrieves the milliseconds of the
 Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> at the time it was created, according to the UTC
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getUTCMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getUTCMinutes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCMinutes</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the minutes (an integer from 0 to 59) portion of a Date object
	 according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcminutes, getutcminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The UTC minutes portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the minutes (an integer from 0 to 59) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to universal time (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCMinutes.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The <codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> method is then called, which retrieves the minutes of the
 Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> at the time it was created, according to the UTC
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getUTCMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getUTCMonth" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCMonth</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the month (0 [January] to 11 [December]) portion of a Date object
	 according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcmonth, getutcmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The UTC month portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the month (0 [January] to 11 [December]) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to universal time (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCMonth.1.as" class="- topic/example "> The following example creates a new Array object <codeph class="+ topic/ph pr-d/codeph ">monthLabels</codeph>, with elements
 <codeph class="+ topic/ph pr-d/codeph ">January</codeph> through <codeph class="+ topic/ph pr-d/codeph ">December</codeph> and a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The <codeph class="+ topic/ph pr-d/codeph ">getUTCMonth()</codeph> method is then called twice, which first returns the month number and
 then the month name of the month the Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created, according to the UTC
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var monthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getMonth());
trace(now.getUTCMonth());
trace(monthLabels[now.getUTCMonth()]);
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getMonth()" class="- topic/link "><linktext class="- topic/linktext ">getMonth()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCSeconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCSeconds</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the seconds (an integer from 0 to 59) portion of a Date object
	 according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcseconds, getutcseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The UTC seconds portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the seconds (an integer from 0 to 59) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to universal time (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCSeconds.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The <codeph class="+ topic/ph pr-d/codeph ">getUTCSeconds()</codeph> method is then called, which retrieves the seconds of the
 Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> at the time it was created, according to the UTC
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getUTCSeconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:parse" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parse</apiName><shortdesc class="- topic/shortdesc ">
	 Converts a string representing a date into a number equaling the number of milliseconds 
	 elapsed since January 1, 1970, UTC.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number representing the milliseconds elapsed since January 1, 1970, UTC.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">date</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string representation of a date, which conforms to the format for the output of
     <codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph>. The date format for the output of <codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph> is: 
     <pre xml:space="preserve" class="- topic/pre ">
     Day Mon DD HH:MM:SS TZD YYYY
     </pre>
     <p class="- topic/p ">For example: </p>
     <pre xml:space="preserve" class="- topic/pre ">
     Wed Apr 12 15:30:17 GMT-0700 2006
     </pre>
     <p class="- topic/p ">The Time Zone Designation (TZD) is always in the form <codeph class="+ topic/ph pr-d/codeph ">GMT-HHMM</codeph> or <codeph class="+ topic/ph pr-d/codeph ">UTC-HHMM</codeph> indicating the 
     hour and minute offset relative to Greenwich Mean Time (GMT), which is now also called universal time (UTC).
     The year month and day terms can be separated by a forward slash (<codeph class="+ topic/ph pr-d/codeph ">/</codeph>) or by spaces, but never by a
     dash (<codeph class="+ topic/ph pr-d/codeph ">-</codeph>). Other supported formats include the following (you can include partial representations of these 
     formats; that is, just the month, day, and year):</p>
     <pre xml:space="preserve" class="- topic/pre ">
     MM/DD/YYYY HH:MM:SS TZD
     HH:MM:SS TZD Day Mon/DD/YYYY 
     Mon DD YYYY HH:MM:SS TZD
     Day Mon DD HH:MM:SS TZD YYYY
     Day DD Mon HH:MM:SS TZD YYYY
     Mon/DD/YYYY HH:MM:SS TZD
     YYYY/MM/DD HH:MM:SS TZD
     </pre>
     
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Converts a string representing a date into a number equaling the number of milliseconds 
	 elapsed since January 1, 1970, UTC.
	 
     </apiDesc><example conref="examples\Date.parse.1.as" class="- topic/example "> The following example assigns a date string to <codeph class="+ topic/ph pr-d/codeph ">dateParsed</codeph> for November 30, 1974.  
 The <codeph class="+ topic/ph pr-d/codeph ">Date.parse()</codeph> method is then called, which converts the date into milliseconds since January 1, 1970.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var dateParsed:String = "Sat Nov 30 1974";

var milliseconds:Number = Date.parse(dateParsed);
trace(milliseconds); // 155030400000
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toString()" class="- topic/link "><linktext class="- topic/linktext ">Date.toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setDate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setDate</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the day of the month, according to local time, and returns the new time in 
	 milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setdate, setdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 1 to 31.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the day of the month, according to local time, and returns the new time in 
	 milliseconds. Local time is determined by the operating system on which the Flash runtimes are
	 running.
	 
	 </apiDesc><example conref="examples\Date.setDate.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).  The
 method <codeph class="+ topic/ph pr-d/codeph ">getDate()</codeph> is then called, which retrieves the day of the month.  Next
 <codeph class="+ topic/ph pr-d/codeph ">setDate()</codeph> is called with the <codeph class="+ topic/ph pr-d/codeph ">day</codeph> parameter set to <codeph class="+ topic/ph pr-d/codeph ">20</codeph> and
 then <codeph class="+ topic/ph pr-d/codeph ">getDate()</codeph> is called again, which retrieves the newly set day of month.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);            // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getDate()); // 30

someBirthday.setDate(20);
trace(someBirthday.getDate()); // 20
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setFullYear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setFullYear</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the year, according to local time, and returns the new time in milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setfullyear, setfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">year</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A four-digit number specifying a year. Two-digit numbers do not represent 
	 four-digit years; for example, 99 is not the year 1999, but the year 99.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 (January) to 11 (December). 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number from 1 to 31. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the year, according to local time, and returns the new time in milliseconds. If 
	 the <codeph class="+ topic/ph pr-d/codeph ">month</codeph> and <codeph class="+ topic/ph pr-d/codeph ">day</codeph> parameters are specified, 
	 they are set to local time. Local time is determined by the operating system on which 
	 the Flash runtimes are running.
	 <p class="- topic/p ">
	 Calling this method does not modify the other fields of the <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> but 
	 <codeph class="+ topic/ph pr-d/codeph ">Date.getUTCDay()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">Date.getDay()</codeph> can report a new value 
	 if the day of the week changes as a result of calling this method.
	 </p>
	 
	 </apiDesc><example conref="examples\Date.setFullYear.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).  The
 method <codeph class="+ topic/ph pr-d/codeph ">getFullYear()</codeph> is then called, which retrieves the four-digit year.
 Next <codeph class="+ topic/ph pr-d/codeph ">setFullYear()</codeph> is called with the <codeph class="+ topic/ph pr-d/codeph ">year</codeph> parameter set to
 <codeph class="+ topic/ph pr-d/codeph ">2000</codeph> and then <codeph class="+ topic/ph pr-d/codeph ">getFullYear()</codeph> is called again, which retrieves the newly set year.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);           // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getFullYear()); // 1974

someBirthday.setFullYear(2000);
trace(someBirthday.getFullYear()); // 2000
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDay()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDay()</linktext></link><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setHours" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setHours</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the hour, according to local time, and returns the new time in milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.sethours, sethours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 (midnight) to 23 (11 p.m.).
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59. 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59. 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 999. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the hour, according to local time, and returns the new time in milliseconds. 
	 Local time is determined by the operating system on which the Flash runtimes are running.
	 
	 </apiDesc><example conref="examples\Date.setHours.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).  The methods
 <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> and
 <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> are then called, which retrieves the hours and minutes.  Next <codeph class="+ topic/ph pr-d/codeph ">setHours()</codeph>
 is called with the <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> parameter set to <codeph class="+ topic/ph pr-d/codeph ">12</codeph> and then <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> and
 <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> are called again, which retrieves the newly set hours and minutes.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 20);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 15:20

someBirthday.setHours(12);
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 12:20
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setMilliseconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setMilliseconds</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the milliseconds, according to local time, and returns the new time in 
	 milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setmilliseconds, setmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 999.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the milliseconds, according to local time, and returns the new time in 
	 milliseconds. Local time is determined by the operating system on which the Flash runtimes are 
	 running.
	 
	 </apiDesc><example conref="examples\Date.setMilliseconds.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The method <codeph class="+ topic/ph pr-d/codeph ">getMilliseconds()</codeph> is then called, which retrieves the milliseconds when
 <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created.  Then another new Date object <codeph class="+ topic/ph pr-d/codeph ">before</codeph> with an additional
 call to <codeph class="+ topic/ph pr-d/codeph ">setMilliseconds()</codeph> with the <codeph class="+ topic/ph pr-d/codeph ">millisecond</codeph> parameter set to <codeph class="+ topic/ph pr-d/codeph ">4</codeph> and
 <codeph class="+ topic/ph pr-d/codeph ">getMilliseconds()</codeph> is called again, which retrieves the newly set milliseconds.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.getMilliseconds());

var before:Date = new Date(now.setMilliseconds(4));
trace(before);
trace(before.getMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setMinutes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setMinutes</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the minutes, according to local time, and returns the new time in milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setminutes, setminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 999.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the minutes, according to local time, and returns the new time in milliseconds. 
	 Local time is determined by the operating system on which the Flash runtimes are running.
	 
	 </apiDesc><example conref="examples\Date.setMinutes.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The method <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> is then called, which retrieves the minutes when
 <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created.  Then another new Date object <codeph class="+ topic/ph pr-d/codeph ">before</codeph> with an additional
 call to <codeph class="+ topic/ph pr-d/codeph ">setMinutes()</codeph> with the <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> parameter set to <codeph class="+ topic/ph pr-d/codeph ">0</codeph> and
 <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> is called again, which retrieves the newly set minutes.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.getMinutes());

var before:Date = new Date(now.setMinutes(0));
trace(before);
trace(before.getMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setMonth" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setMonth</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the month and optionally the day of the month, according to local time, and 
	 returns the new time in milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setmonth, setmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 (January) to 11 (December).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 1 to 31. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the month and optionally the day of the month, according to local time, and 
	 returns the new time in milliseconds. Local time is determined by the operating 
	 system on which the Flash runtimes are running.
	 
	 </apiDesc><example conref="examples\Date.setMonth.1.as" class="- topic/example "> The following example creates a new Array object <codeph class="+ topic/ph pr-d/codeph ">monthLabels</codeph>, with elements
 <codeph class="+ topic/ph pr-d/codeph ">January</codeph> through <codeph class="+ topic/ph pr-d/codeph ">December</codeph> and a new month object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The method <codeph class="+ topic/ph pr-d/codeph ">getMonth()</codeph> is then called, which retrieves the month in which
 <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created.  Next <codeph class="+ topic/ph pr-d/codeph ">setMonth()</codeph> is called with the <codeph class="+ topic/ph pr-d/codeph ">month</codeph> parameter set to
 <codeph class="+ topic/ph pr-d/codeph ">0</codeph> and then <codeph class="+ topic/ph pr-d/codeph ">getMonth()</codeph> is called again, which retrieves the newly set month..
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var monthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getMonth());
trace(monthLabels[now.getMonth()]);

now.setMonth(0);
trace(now.getMonth());             // 0
trace(monthLabels[now.getMonth()]); // January
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setSeconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setSeconds</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the seconds, according to local time, and returns the new time in milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setseconds, setseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 999.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the seconds, according to local time, and returns the new time in milliseconds. 
	 Local time is determined by the operating system on which the Flash runtimes are running.
	 
	 </apiDesc><example conref="examples\Date.setSeconds.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.  
 The method <codeph class="+ topic/ph pr-d/codeph ">getseconds()</codeph> is then called, which retrieves the seconds when
 <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created.  Then the <codeph class="+ topic/ph pr-d/codeph ">setSeconds()</codeph> is called with the <codeph class="+ topic/ph pr-d/codeph ">second</codeph>
 parameter set to <codeph class="+ topic/ph pr-d/codeph ">0</codeph> and 
 <codeph class="+ topic/ph pr-d/codeph ">getSeconds()</codeph> is called again, which retrieves the newly set seconds.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getSeconds());

now.setSeconds(0);
trace(now.getSeconds()); // 0
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setTime" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setTime</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the date in milliseconds since midnight on January 1, 1970, and returns the new 
	 time in milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.settime, settime, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer value where 0 is midnight on January 1, universal time (UTC).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the date in milliseconds since midnight on January 1, 1970, and returns the new 
	 time in milliseconds. 
	 
	 </apiDesc><example conref="examples\Date.setTime.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The <codeph class="+ topic/ph pr-d/codeph ">setTime()</codeph> method is then called, with the <codeph class="+ topic/ph pr-d/codeph ">millisecond</codeph> parameter set
 to <codeph class="+ topic/ph pr-d/codeph ">-1292601600000</codeph>, which sets the time to <codeph class="+ topic/ph pr-d/codeph ">Tue Jan 15 00:00:00 GMT-0800 1929</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);

now.setTime(-1292601600000);
trace(now); // Tue Jan 15 00:00:00 GMT-0800 1929
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCDate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCDate</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the day of the month, in universal time (UTC), and returns the new time in 
	 milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcdate, setutcdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number; an integer from 1 to 31.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the day of the month, in universal time (UTC), and returns the new time in 
	 milliseconds. Calling this method does not modify the other fields of a <codeph class="+ topic/ph pr-d/codeph ">Date
	 </codeph> object, but the <codeph class="+ topic/ph pr-d/codeph ">Date.getUTCDay()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">Date.getDay()</codeph> methods can report 
	 a new value if the day of the week changes as a result of calling this method.
	 
	 </apiDesc><example conref="examples\Date.setUTCDate.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).  The method
 <codeph class="+ topic/ph pr-d/codeph ">getUTCDate()</codeph> is called and correctly returns the day of the month.  Next <codeph class="+ topic/ph pr-d/codeph ">setUTCDate()</codeph>
 is called with the <codeph class="+ topic/ph pr-d/codeph ">day</codeph> parameter set to <codeph class="+ topic/ph pr-d/codeph ">1</codeph> and a <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> statement
 confirms the date was correctly set.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday); // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCDate()); // 30

someBirthday.setUTCDate(1);
trace(someBirthday); // Fri Nov 1 01:20:00 GMT-0800 1974
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDay()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDay()</linktext></link><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setUTCFullYear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCFullYear</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the year, in universal time (UTC), and returns the new time in milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcfullyear, setutcfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">year</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer that represents the year specified as a full four-digit year, 
	 such as 2000.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 (January) to 11 (December). 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 1 to 31. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the year, in universal time (UTC), and returns the new time in milliseconds. 
	 <p class="- topic/p ">
	 Optionally, this method can also set the month and day of the month. Calling 
	 this method does not modify the other fields, but the <codeph class="+ topic/ph pr-d/codeph ">Date.getUTCDay()</codeph> and 
	 <codeph class="+ topic/ph pr-d/codeph ">Date.getDay()</codeph> methods can report a new value if the day of the week changes as a 
	 result of calling this method. 
	 </p>
	 
 	 </apiDesc><example conref="examples\Date.setUTCFullYear.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).  The method
 <codeph class="+ topic/ph pr-d/codeph ">getUTCFullYear()</codeph> is called and correctly returns the four-digit year.  Next <codeph class="+ topic/ph pr-d/codeph ">setUTCFullYear()</codeph>
 is called with the <codeph class="+ topic/ph pr-d/codeph ">year</codeph> parameter set to <codeph class="+ topic/ph pr-d/codeph ">1975</codeph> and a <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> statement
 confirms the year was correctly set.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday); // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCFullYear()); // 1974

someBirthday.setUTCFullYear(1975);
trace(someBirthday); // Thu Nov 30 01:20:00 GMT-0800 1975
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDay()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDay()</linktext></link><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setUTCHours" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCHours</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the hour, in universal time (UTC), and returns the new time in milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutchours, setutchours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 (midnight) to 23 (11 p.m.).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 999. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the hour, in universal time (UTC), and returns the new time in milliseconds. 
	 Optionally, the minutes, seconds, and milliseconds can be specified.
	 
	 </apiDesc><example conref="examples\Date.setUTCHours.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> with parameters
 <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph>
 (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) and <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>).  The methods
 <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">getUTCHours()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph>
 are then called, which retrieves the hours and minutes. Next <codeph class="+ topic/ph pr-d/codeph ">setUTCHours()</codeph> is called with the
 <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> parameter set to <codeph class="+ topic/ph pr-d/codeph ">12</codeph> and then the methods <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">getUTCHours()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> are re-called and
 correctly display the updated hour.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 20);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes());     // 15:20
trace(someBirthday.getUTCHours() + ":" + someBirthday.getUTCMinutes()); // 23:20

someBirthday.setUTCHours(12);
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes());     // 4:20
trace(someBirthday.getUTCHours() + ":" + someBirthday.getUTCMinutes()); // 12:20
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCMilliseconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCMilliseconds</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the milliseconds, in universal time (UTC), and returns the new time in milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcmilliseconds, setutcmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 999.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the milliseconds, in universal time (UTC), and returns the new time in milliseconds.
	 
	 </apiDesc><example conref="examples\Date.setUTCMilliseconds.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The method <codeph class="+ topic/ph pr-d/codeph ">getUTCMilliseconds()</codeph> is then called, which retrieves the UTCMilliseconds when
 <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created.  Then another new Date object <codeph class="+ topic/ph pr-d/codeph ">before</codeph> with an additional
 call to <codeph class="+ topic/ph pr-d/codeph ">setUTCMilliseconds()</codeph> with the <codeph class="+ topic/ph pr-d/codeph ">millisecond</codeph> parameter set to <codeph class="+ topic/ph pr-d/codeph ">4</codeph> and
 <codeph class="+ topic/ph pr-d/codeph ">getUTCMilliseconds()</codeph> is called again, which retrieves the newly set milliseconds.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


var now:Date = new Date();
trace(now);
trace(now.getUTCMilliseconds());

var before:Date = new Date(now.setUTCMilliseconds(4));
trace(before);
trace(before.getUTCMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCMinutes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCMinutes</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the minutes, in universal time (UTC), and returns the new time in milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcminutes, setutcminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 999. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the minutes, in universal time (UTC), and returns the new time in milliseconds.
	 Optionally, you can specify the seconds and milliseconds.
	 
	 </apiDesc><example conref="examples\Date.setUTCMinutes.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The method <codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> is then called, which retrieves the UTCMinutes when
 <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created.  Then another new Date object <codeph class="+ topic/ph pr-d/codeph ">before</codeph> with an additional
 call to <codeph class="+ topic/ph pr-d/codeph ">setUTCMinutes()</codeph> with the <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> parameter set to <codeph class="+ topic/ph pr-d/codeph ">0</codeph> and
 <codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> is called again, which retrieves the newly set minutes.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.getUTCMinutes());

var before:Date = new Date(now.setUTCMinutes(0));
trace(before);
trace(before.getUTCMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCMonth" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCMonth</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the month, and optionally the day, in universal time(UTC) and returns the new 
	 time in milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcmonth, setutcmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 (January) to 11 (December).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 1 to 31. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the month, and optionally the day, in universal time(UTC) and returns the new 
	 time in milliseconds. Calling this method does not modify the other fields, but the
	 <codeph class="+ topic/ph pr-d/codeph ">Date.getUTCDay()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">Date.getDay()</codeph> methods might report a new 
	 value if the day of the week changes as a result of calling this method.
	 
	 </apiDesc><example conref="examples\Date.setUTCMonth.1.as" class="- topic/example "> The following example creates a new Array object <codeph class="+ topic/ph pr-d/codeph ">UTCMonthLabels</codeph>, with elements
 <codeph class="+ topic/ph pr-d/codeph ">January</codeph> through <codeph class="+ topic/ph pr-d/codeph ">December</codeph> and a new UTCMonth object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.
 The method <codeph class="+ topic/ph pr-d/codeph ">getUTCMonth()</codeph> is then called, which retrieves the UTCMonth in which
 <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created.  Next <codeph class="+ topic/ph pr-d/codeph ">setUTCMonth()</codeph> is called with the <codeph class="+ topic/ph pr-d/codeph ">month</codeph> parameter set to
 <codeph class="+ topic/ph pr-d/codeph ">0</codeph> and then <codeph class="+ topic/ph pr-d/codeph ">getUTCMonth()</codeph> is called again, which retrieves the newly set month..
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var UTCMonthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getUTCMonth());
trace(UTCMonthLabels[now.getUTCMonth()]);

now.setUTCUTCMonth(0);
trace(now.getUTCMonth());              // 0
trace(UTCMonthLabels[now.getUTCMonth()]); // January
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setUTCSeconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCSeconds</apiName><shortdesc class="- topic/shortdesc ">
	 Sets the seconds, and optionally the milliseconds, in universal time (UTC) and 
	 returns the new time in milliseconds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcseconds, setutcseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new time, in milliseconds.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 59.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer from 0 to 999. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Sets the seconds, and optionally the milliseconds, in universal time (UTC) and 
	 returns the new time in milliseconds.
	 
	 </apiDesc><example conref="examples\Date.setUTCSeconds.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters.  
 The method <codeph class="+ topic/ph pr-d/codeph ">getUTCSeconds()</codeph> is then called, which retrieves the seconds when
 <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created.  Then the <codeph class="+ topic/ph pr-d/codeph ">setUTCSeconds()</codeph> is called with the <codeph class="+ topic/ph pr-d/codeph ">second</codeph>
 parameter set to <codeph class="+ topic/ph pr-d/codeph ">0</codeph> and <codeph class="+ topic/ph pr-d/codeph ">getUTCSeconds()</codeph> is called again, which retrieves the 
 newly set seconds.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getUTCSeconds());

now.setUTCSeconds(0);
trace(now.getUTCSeconds()); // 0
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:toDateString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toDateString</apiName><shortdesc class="- topic/shortdesc ">
	 Returns a string representation of the day and date only, and does not include the time or timezone.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string representation of day and date only.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns a string representation of the day and date only, and does not include the time or timezone.
	 Contrast with the following methods:
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Date.toTimeString()</codeph>, which returns only the time and timezone</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph>, which returns not only the day and date, but also the time and timezone.</li></ul>
	 
	 </apiDesc><example conref="examples\Date.toDateString.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters
 and then the following methods are called within a <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> statement
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">toString</codeph>: displays all parameters for <codeph class="+ topic/ph pr-d/codeph ">now</codeph> at the time <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">toDateString()</codeph>: displays the <codeph class="+ topic/ph pr-d/codeph ">day</codeph>, <codeph class="+ topic/ph pr-d/codeph ">month</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">year</codeph> parameters
     for the time <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created.</li></ul>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.toDateString());
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toLocaleDateString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleDateString</apiName><shortdesc class="- topic/shortdesc ">
	 Returns a String representation of the day and date only, and does not include the time or timezone.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The <codeph class="+ topic/ph pr-d/codeph ">String</codeph> representation of day and date only.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns a String representation of the day and date only, and does not include the time or timezone.
	 This method returns the same value as <codeph class="+ topic/ph pr-d/codeph ">Date.toDateString</codeph>.
	 Contrast with the following methods:
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Date.toTimeString()</codeph>, which returns only the time and timezone</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph>, which returns not only the day and date, but also the
	 time and timezone.</li></ul>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toDateString()" class="- topic/link "><linktext class="- topic/linktext ">toDateString()</linktext></link><link href="#Date/toTimeString()" class="- topic/link "><linktext class="- topic/linktext ">toTimeString()</linktext></link><link href="#Date/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toLocaleString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleString</apiName><shortdesc class="- topic/shortdesc ">
	 Returns a String representation of the day, date, time, given in local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string representation of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object in the local timezone.
	 
	  
	  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns a String representation of the day, date, time, given in local time.
	 Contrast with the <codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph> method, which returns the same information (plus the timezone)
	 with the year listed at the end of the string.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:toLocaleTimeString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleTimeString</apiName><shortdesc class="- topic/shortdesc ">
	 Returns a String representation of the time only, and does not include the day, date, year, or timezone.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string representation of time and timezone only.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns a String representation of the time only, and does not include the day, date, year, or timezone.
	 Contrast with the <codeph class="+ topic/ph pr-d/codeph ">Date.toTimeString()</codeph> method, which returns the time and timezone.
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toTimeString()" class="- topic/link "><linktext class="- topic/linktext ">toTimeString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 Returns a String representation of the day, date, time, and timezone.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.tostring, tostring, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string representation of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns a String representation of the day, date, time, and timezone.
     The date format for the output is: 
     <pre xml:space="preserve" class="- topic/pre ">
     Day Mon Date HH:MM:SS TZD YYYY
     </pre>
     <p class="- topic/p ">For example:</p>
     <pre xml:space="preserve" class="- topic/pre ">
     Wed Apr 12 15:30:17 GMT-0700 2006
     </pre>
	 
	 </apiDesc><example conref="examples\Date.toString.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters
 and then <codeph class="+ topic/ph pr-d/codeph ">toString</codeph> is called within a <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> statement, which
 displays all parameters for <codeph class="+ topic/ph pr-d/codeph ">now</codeph> at the time <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


var now:Date = new Date();
trace(now);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:toTimeString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toTimeString</apiName><shortdesc class="- topic/shortdesc ">
	 Returns a String representation of the time and timezone only, and does not include the day and date.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string representation of time and timezone only.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns a String representation of the time and timezone only, and does not include the day and date.
	 Contrast with the <codeph class="+ topic/ph pr-d/codeph ">Date.toDateString()</codeph> method, which returns only the day and date.
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toDateString()" class="- topic/link "><linktext class="- topic/linktext ">toDateString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toUTCString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toUTCString</apiName><shortdesc class="- topic/shortdesc ">
	 Returns a String representation of the day, date, and time in universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string representation of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object in UTC time.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns a String representation of the day, date, and time in universal time (UTC).
	 For example, the date February 1, 2005 is returned as <codeph class="+ topic/ph pr-d/codeph ">Tue Feb 1 00:00:00 2005 UTC</codeph>.
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the number of milliseconds since midnight January 1, 1970, universal time, 
	 for a Date object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.valueof, valueof, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of milliseconds since January 1, 1970 that a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object represents.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the number of milliseconds since midnight January 1, 1970, universal time, 
	 for a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object.
	 
	 </apiDesc><example conref="examples\Date.valueOf.1.as" class="- topic/example "> The following example creates a new Date object <codeph class="+ topic/ph pr-d/codeph ">now</codeph> with no parameters
 The <codeph class="+ topic/ph pr-d/codeph ">getTime()</codeph> method is then called, which retrieves the number of milliseconds between
 the time <codeph class="+ topic/ph pr-d/codeph ">now</codeph> was created and midnight on
 January 1, 1970, and then <codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> is called, which retrieves the same thing.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


var now:Date = new Date();
trace(now.getTime());
trace(now.valueOf());
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="Date:AS3:dateUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dateUTC</apiName><shortdesc class="- topic/shortdesc ">
	 The day of the month (an integer from 1 to 31) of a Date object 
	 according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The day of the month (an integer from 1 to 31) of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object 
	 according to universal time (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDate()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDate()</linktext></link><link href="#Date/setUTCDate()" class="- topic/link "><linktext class="- topic/linktext ">setUTCDate()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:date:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">date</apiName><shortdesc class="- topic/shortdesc ">
	 The day of the month (an integer from 1 to 31) specified by a Date object
	 according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The day of the month (an integer from 1 to 31) specified by a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to local time. Local time is determined by the operating system on which 
	 the Flash runtimes are running.
	 
 	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getDate()" class="- topic/link "><linktext class="- topic/linktext ">getDate()</linktext></link><link href="#Date/setDate()" class="- topic/link "><linktext class="- topic/linktext ">setDate()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:dayUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dayUTC</apiName><shortdesc class="- topic/shortdesc ">
	 The day of the week (0 for Sunday, 1 for Monday, and so on) of this Date
	  according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The day of the week (0 for Sunday, 1 for Monday, and so on) of this <codeph class="+ topic/ph pr-d/codeph ">Date
	 </codeph> according to universal time (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDay()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDay()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:day:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">day</apiName><shortdesc class="- topic/shortdesc ">
	 The day of the week (0 for Sunday, 1 for Monday, and so on) specified by this
	 Date according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The day of the week (0 for Sunday, 1 for Monday, and so on) specified by this
	 <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> according to local time. Local time is determined by the operating 
	 system on which the Flash runtimes are running.
	 
 	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:fullYearUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fullYearUTC</apiName><shortdesc class="- topic/shortdesc ">
	 The four-digit year of a Date object according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The four-digit year of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object according to universal time (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getUTCFullYear()</linktext></link><link href="#Date/setUTCFullYear()" class="- topic/link "><linktext class="- topic/linktext ">setUTCFullYear()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:fullYear:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fullYear</apiName><shortdesc class="- topic/shortdesc ">
	 The full year (a four-digit number, such as 2000) of a Date object
	 according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The full year (a four-digit number, such as 2000) of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to local time. Local time is determined by the operating system on which 
	 the Flash runtimes are running.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getFullYear()</linktext></link><link href="#Date/setFullYear()" class="- topic/link "><linktext class="- topic/linktext ">setFullYear()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:hoursUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hoursUTC</apiName><shortdesc class="- topic/shortdesc ">
	 The hour (an integer from 0 to 23) of the day of a Date object
	 according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The hour (an integer from 0 to 23) of the day of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to universal time (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCHours()" class="- topic/link "><linktext class="- topic/linktext ">getUTCHours()</linktext></link><link href="#Date/setUTCHours()" class="- topic/link "><linktext class="- topic/linktext ">setUTCHours()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:hours:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hours</apiName><shortdesc class="- topic/shortdesc ">
	 The hour (an integer from 0 to 23) of the day portion of a Date object
	 according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The hour (an integer from 0 to 23) of the day portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to local time. Local time is determined by the operating system on which 
	 the Flash runtimes are running. 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getHours()" class="- topic/link "><linktext class="- topic/linktext ">getHours()</linktext></link><link href="#Date/setHours()" class="- topic/link "><linktext class="- topic/linktext ">setHours()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:millisecondsUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">millisecondsUTC</apiName><shortdesc class="- topic/shortdesc ">
	 The milliseconds (an integer from 0 to 999) portion of a Date object
	 according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The milliseconds (an integer from 0 to 999) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to universal time (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCMilliseconds()" class="- topic/link "><linktext class="- topic/linktext ">getUTCMilliseconds()</linktext></link><link href="#Date/setUTCMilliseconds()" class="- topic/link "><linktext class="- topic/linktext ">setUTCMilliseconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:milliseconds:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">milliseconds</apiName><shortdesc class="- topic/shortdesc ">
	 The milliseconds (an integer from 0 to 999) portion of a Date object
	 according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The milliseconds (an integer from 0 to 999) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to local time. Local time is determined by the operating system on which 
	 the Flash runtimes are running.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getMilliseconds()" class="- topic/link "><linktext class="- topic/linktext ">getMilliseconds()</linktext></link><link href="#Date/setMilliseconds()" class="- topic/link "><linktext class="- topic/linktext ">setMilliseconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:minutesUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">minutesUTC</apiName><shortdesc class="- topic/shortdesc ">
	 The minutes (an integer from 0 to 59) portion of a Date object
	 according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The minutes (an integer from 0 to 59) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to universal time (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCMinutes()" class="- topic/link "><linktext class="- topic/linktext ">getUTCMinutes()</linktext></link><link href="#Date/setUTCMinutes()" class="- topic/link "><linktext class="- topic/linktext ">setUTCMinutes()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:minutes:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">minutes</apiName><shortdesc class="- topic/shortdesc ">
	 The minutes (an integer from 0 to 59) portion of a Date object
	 according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The minutes (an integer from 0 to 59) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to local time. Local time is determined by the operating system on which 
	 the Flash runtimes are running.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getMinutes()" class="- topic/link "><linktext class="- topic/linktext ">getMinutes()</linktext></link><link href="#Date/setMinutes()" class="- topic/link "><linktext class="- topic/linktext ">setMinutes()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:monthUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">monthUTC</apiName><shortdesc class="- topic/shortdesc ">
	 The month (0 [January] to 11 [December]) portion of a Date object
	 according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The month (0 [January] to 11 [December]) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to universal time (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCMonth()" class="- topic/link "><linktext class="- topic/linktext ">getUTCMonth()</linktext></link><link href="#Date/setUTCMonth()" class="- topic/link "><linktext class="- topic/linktext ">setUTCMonth()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:month:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">month</apiName><shortdesc class="- topic/shortdesc ">
	 The month (0 for January, 1 for February, and so on) portion of a 
	 Date object according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The month (0 for January, 1 for February, and so on) portion of a <codeph class="+ topic/ph pr-d/codeph ">
	 Date</codeph> object according to local time. Local time is determined by the operating system 
	 on which the Flash runtimes are running.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getMonth()" class="- topic/link "><linktext class="- topic/linktext ">getMonth()</linktext></link><link href="#Date/setMonth()" class="- topic/link "><linktext class="- topic/linktext ">setMonth()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:secondsUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">secondsUTC</apiName><shortdesc class="- topic/shortdesc ">
	 The seconds (an integer from 0 to 59) portion of a Date object
	 according to universal time (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The seconds (an integer from 0 to 59) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to universal time (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCSeconds()" class="- topic/link "><linktext class="- topic/linktext ">getUTCSeconds()</linktext></link><link href="#Date/setUTCSeconds()" class="- topic/link "><linktext class="- topic/linktext ">setUTCSeconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:seconds:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">seconds</apiName><shortdesc class="- topic/shortdesc ">
	 The seconds (an integer from 0 to 59) portion of a Date object
	 according to local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The seconds (an integer from 0 to 59) portion of a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object
	 according to local time. Local time is determined by the operating system on which 
	 the Flash runtimes are running.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getSeconds()" class="- topic/link "><linktext class="- topic/linktext ">getSeconds()</linktext></link><link href="#Date/setSeconds()" class="- topic/link "><linktext class="- topic/linktext ">setSeconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:time:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">time</apiName><shortdesc class="- topic/shortdesc ">
	 The number of milliseconds since midnight January 1, 1970, universal time, 
	 for a Date object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The number of milliseconds since midnight January 1, 1970, universal time, 
	 for a <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> object. Use this method to represent a specific instant in time 
	 when comparing two or more <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> objects.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getTime()" class="- topic/link "><linktext class="- topic/linktext ">getTime()</linktext></link><link href="#Date/setTime()" class="- topic/link "><linktext class="- topic/linktext ">setTime()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:timezoneOffset:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">timezoneOffset</apiName><shortdesc class="- topic/shortdesc ">
     The difference, in minutes, between universal time (UTC) and the computer's local time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The difference, in minutes, between universal time (UTC) and the computer's local time. 
     Specifically, this value is the number of minutes you need to add to the computer's local
     time to equal UTC. If your computer's time is set later than UTC, the value will be negative.
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getTimezoneOffset()" class="- topic/link "><linktext class="- topic/linktext ">getTimezoneOffset()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Object" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Object</apiName><shortdesc class="- topic/shortdesc ">
 The Object class is at the root of the ActionScript
 runtime class hierarchy.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">object, object object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The Object class is at the root of the <ph class="- topic/ph ">ActionScript</ph>
  class hierarchy. Objects are created by constructors using the
 <codeph class="+ topic/ph pr-d/codeph ">new</codeph> operator syntax, and can have properties assigned to them dynamically. 
 <ph class="- topic/ph ">Objects can also be created by 
 assigning an object literal, as in:</ph>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var obj:Object = {a:"foo", b:"bar"}</codeblock>
 
 <p class="- topic/p ">All classes that don't declare an explicit base class extend the built-in Object class.</p>
 
 
 
 <p class="- topic/p ">You can use the Object class to create <i class="+ topic/ph hi-d/i ">associative arrays</i>. At its core, an associative array is an instance of the Object class, and each key-value pair is represented by a property and its value. Another reason to declare an associative array using the Object data type is that you can then use an object literal to populate your associative array (but only at the time you declare it). The following example creates an associative array using an object literal, accesses items using both the dot operator and the array access operator, and then adds a new key-value pair by creating a new property:</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var myAssocArray:Object = {fname:"John", lname:"Public"};
 trace(myAssocArray.fname);     // John
 trace(myAssocArray["lname"]);  // Public
 myAssocArray.initial = "Q";
 trace(myAssocArray.initial);   // Q</codeblock> 
 
 <p class="- topic/p ">ActionScript 3.0 has two types of inheritance: class inheritance and prototype inheritance:</p>
 <ul class="- topic/ul "><li class="- topic/li ">Class inheritance - is the primary inheritance mechanism and supports inheritance of fixed properties. A fixed property is a variable, constant or method declared as part of a class definition. Every class definition is now represented by a special class object that stores information about the class. </li><li class="- topic/li ">Prototype inheritance - is the only inheritance mechanism in previous versions of ActionScript and serves as an alternate form of inheritance in ActionScript 3.0. Each class has an associated prototype object, and the properties of the prototype object are shared by all instances of the class. When a class instance is created, it has a reference to its class's prototype object, which serves as a link between the instance and its associated class prototype object. At run time, when a property is not found on a class instance, the delegate, which is the class prototype object, is checked for that property. If the prototype object does not contain the property, the process continues with the prototype object's delegate checking in consecutively higher levels in the hierarchy until the Flash runtime finds the property. </li></ul>
 
 <p class="- topic/p ">Both class inheritance and prototype inheritance can exist simultaneously, as shown in the following example:</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 class A {
     var x = 1
     prototype.px = 2
 }
 dynamic class B extends A {
     var y = 3
     prototype.py = 4
 }
  
 var b = new B()
 b.x // 1 via class inheritance
 b.px // 2 via prototype inheritance from A.prototype
 b.y // 3
 b.py // 4 via prototype inheritance from B.prototype
  
 B.prototype.px = 5
 b.px // now 5 because B.prototype hides A.prototype
  
 b.px = 6
 b.px // now 6 because b hides B.prototype</codeblock>
 
 <p class="- topic/p ">Using functions instead of classes, you can construct custom prototype inheritance trees. With classes, the prototype inheritance tree mirrors the class inheritance tree. However, since the prototype objects are dynamic, you can add and delete prototype-based properties at run time.</p>
 
 </apiDesc><example conref="examples\ObjectExample.as" class="- topic/example "> The following example uses the classes <codeph class="+ topic/ph pr-d/codeph ">ObjectExample</codeph> and <codeph class="+ topic/ph pr-d/codeph ">Circle</codeph>
 to demonstrate the dynamic nature of the Object class, and how value objects can be transformed into 
 Shape objects and then added to the stage at the specified x/y coordinates.
 
 <p class="- topic/p ">The example creates the value objects <codeph class="+ topic/ph pr-d/codeph ">firstInitObj</codeph> and <codeph class="+ topic/ph pr-d/codeph ">secondInitObj</codeph>. The custom
 class <codeph class="+ topic/ph pr-d/codeph ">Circle</codeph> accepts the value object and loops over it while setting its matching internal
 properties to those defined in the value object.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class ObjectExample extends Sprite {
        public function ObjectExample() {
            var firstInitObj:Object = new Object();
            firstInitObj.bgColor = 0xFF0000;
            firstInitObj.radius = 25;
            firstInitObj.xCenter = 25;
            firstInitObj.yCenter = 25;
                        
            var firstCircle:Circle = new Circle(firstInitObj);
            addChild(firstCircle);
            firstCircle.x = 50;
            firstCircle.y = 50;

            var secondInitObj:Object = {bgColor:0xCCCCCC, radius:50, xCenter:50, yCenter:50};

            var secondCircle:Circle = new Circle(secondInitObj);            
            addChild(secondCircle);
            secondCircle.x = 100;
            secondCircle.y = 100;
        }
        
    }
}

import flash.display.Shape;
    
class Circle extends Shape {
    public var bgColor:Number = 0xFFFFFF;
    public var radius:Number = 0;
    public var xCenter:Number = 0;
    public var yCenter:Number = 0;
        
    public function Circle(initObj:Object) {
        for(var i:String in initObj) {
            this[i] = initObj[i];
        }
        draw();
    }
        
    public function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawCircle(xCenter, yCenter, radius);
        graphics.endFill();
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#Object/prototype" class="- topic/link "><linktext class="- topic/linktext ">prototype</linktext></link></related-links><apiConstructor id="Object:Object" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Object</apiName><shortdesc class="- topic/shortdesc ">
	 Creates an Object object and stores a reference to the object's constructor method in the object's constructor property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates an Object object and stores a reference to the object's constructor method in the object's <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> property.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Object:AS3:hasOwnProperty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasOwnProperty</apiName><shortdesc class="- topic/shortdesc ">
	 Indicates whether an object has a specified property defined.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><category class="- topic/category ">Method
	 </category></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the target object has the property specified by the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> 
	 parameter this value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The property of the object.	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indicates whether an object has a specified property defined. This method returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the target object has
	 a property that matches the string specified by the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter, and <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise. 
	 The following types of properties cause this method to return <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for objects that are instances of a class (as opposed to class objects):
	 <ul class="- topic/ul "><li class="- topic/li ">Fixed instance properties—variables, constants, or methods defined by the object's class that are not static;</li><li class="- topic/li ">Inherited fixed instance properties—variables, constants, or methods inherited by the object's class;</li><li class="- topic/li ">Dynamic properties—properties added to an object after it is instantiated (outside of its class definition). To add dynamic properties, the object's defining class must be declared with the <codeph class="+ topic/ph pr-d/codeph ">dynamic</codeph> keyword.</li></ul>
	 <p class="- topic/p ">The following types of properties cause this method to return <codeph class="+ topic/ph pr-d/codeph ">false</codeph> for objects that are instances of a class:</p>
	 <ul class="- topic/ul "><li class="- topic/li ">Static properties—variables, constants, or methods defined with the static keyword in an object's defining class or any of its superclasses;</li><li class="- topic/li ">Prototype properties—properties defined on a prototype object that is part of the object's prototype chain. In ActionScript 3.0, the prototype chain is not used for class inheritance, but still exists as an alternative form of inheritance. For example, an instance of the Array class can access the <codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> method because it exists on <codeph class="+ topic/ph pr-d/codeph ">Object.prototype</codeph>, which is part of the prototype chain for the Array class. Although you can use <codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> on an instance of Array, the return value of <codeph class="+ topic/ph pr-d/codeph ">hasOwnProperty("valueOf")</codeph> for that instance is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</li></ul>
	 
	 <p class="- topic/p ">ActionScript 3.0 also has class objects, which are direct representations of class definitions. 
	 When called on class objects, the <codeph class="+ topic/ph pr-d/codeph ">hasOwnProperty()</codeph> method returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph> only if a property 
	 is a static property defined on that class object. For example, if you create a subclass of Array named 
	 CustomArray, and define a static property in CustomArray named <codeph class="+ topic/ph pr-d/codeph ">foo</codeph>, a call to 
	 <codeph class="+ topic/ph pr-d/codeph ">CustomArray.hasOwnProperty("foo")</codeph> returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
	 For the static property <codeph class="+ topic/ph pr-d/codeph ">DESCENDING</codeph> defined in the Array class, however, a call to 
	 <codeph class="+ topic/ph pr-d/codeph ">CustomArray.hasOwnProperty("DESCENDING")</codeph> returns <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</p>
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> Methods of the Object class are dynamically created on Object's prototype. To redefine this method in a subclass of Object, do not use the <codeph class="+ topic/ph pr-d/codeph ">override</codeph> keyword. For example, A subclass of Object implements <codeph class="+ topic/ph pr-d/codeph ">function hasOwnProperty():Boolean</codeph> instead of using an override of the base class.</p>
     
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:AS3:isPrototypeOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isPrototypeOf</apiName><shortdesc class="- topic/shortdesc ">
	 Indicates whether an instance of the Object class is in the prototype chain of the object specified 
	 as the parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the object is in the prototype chain of the object 
	 specified by the <codeph class="+ topic/ph pr-d/codeph ">theClass</codeph> parameter this value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">theClass</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The class to which the specified object may refer.  
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indicates whether an instance of the Object class is in the prototype chain of the object specified 
	 as the parameter. This method returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the object is in the prototype chain of the 
	 object specified by the <codeph class="+ topic/ph pr-d/codeph ">theClass</codeph> parameter. The method returns <codeph class="+ topic/ph pr-d/codeph ">false</codeph> 
	 if the target object is absent from the prototype chain of the <codeph class="+ topic/ph pr-d/codeph ">theClass</codeph> object, 
	 and also if the <codeph class="+ topic/ph pr-d/codeph ">theClass</codeph> parameter is not an object.
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> Methods of the Object class are dynamically created on Object's prototype. To redefine this method in a subclass of Object, do not use the <codeph class="+ topic/ph pr-d/codeph ">override</codeph> keyword. For example, A subclass of Object implements <codeph class="+ topic/ph pr-d/codeph ">function isPrototypeOf():Boolean</codeph> instead of using an override of the base class.</p>
     
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:AS3:propertyIsEnumerable" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">propertyIsEnumerable</apiName><shortdesc class="- topic/shortdesc ">
	 Indicates whether the specified property exists and is enumerable.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a generic object, adds a property to the object, then checks whether the object is enumerable. By way of contrast, the example also shows that a built-in property, the <code>Array.length</code> property, is not enumerable.
	 <listing>
	 var myObj:Object = new Object();
	 myObj.prop1 = "hello";
	 trace(myObj.propertyIsEnumerable("prop1")); // true
	 
	 var myArray = new Array();
	 trace(myArray.propertyIsEnumerable("length")); // false
	 </listing> 
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the property specified by the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter is enumerable this value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The property of the object.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indicates whether the specified property exists and is enumerable. If <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, then the property exists and 
	 can be enumerated in a <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> loop. The property must exist on the target object because this method does not 
	 check the target object's prototype chain.
	 
	 <p class="- topic/p ">Properties that you create are enumerable, but built-in properties are generally not enumerable.</p>
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> Methods of the Object class are dynamically created on Object's prototype. To redefine this method in a subclass of Object, do not use the <codeph class="+ topic/ph pr-d/codeph ">override</codeph> keyword. For example, A subclass of Object implements <codeph class="+ topic/ph pr-d/codeph ">function propertyIsEnumerable():Boolean</codeph> instead of using an override of the base class.</p>
     
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:setPropertyIsEnumerable" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setPropertyIsEnumerable</apiName><shortdesc class="- topic/shortdesc ">
     Sets the availability of a dynamic property for loop operations.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The property of the object.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">isEnum</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> If set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, the dynamic property does not show up in <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> loops, and the method <codeph class="+ topic/ph pr-d/codeph ">propertyIsEnumerable()</codeph> returns <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sets the availability of a dynamic property for loop operations. The property must exist on the target object because this method does not check the target object's prototype chain.
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Object/propertyIsEnumerable()" class="- topic/link "><linktext class="- topic/linktext ">propertyIsEnumerable()</linktext></link></related-links></apiOperation><apiOperation id="Object:toLocaleString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleString</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the string representation of this object, formatted according to locale-specific conventions.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">object, object.tolocalestring, tolocalestring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string representation of this object formatted according to local conventions.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the string representation of this object, formatted according to locale-specific conventions.
	 
	 <p class="- topic/p ">The default implementation of this method does not perform locale-specific formatting and returns the 
	 same string as <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph>. Subclasses should provided their own locale-aware implementation when appropriate.</p>
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> Methods of the Object class are dynamically created on Object's prototype. 
     To redefine this method in a subclass of Object, do not use the <codeph class="+ topic/ph pr-d/codeph ">override</codeph> keyword. For example, 
     a subclass of Object implements <codeph class="+ topic/ph pr-d/codeph ">function toLocaleString():String</codeph> instead of using an override of the base class.</p>
     
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Object/toString()" class="- topic/link "><linktext class="- topic/linktext ">Object.toString()</linktext></link></related-links></apiOperation><apiOperation id="Object:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the string representation of the specified object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">object, object.tostring, tostring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string representation of the object.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the string representation of the specified object.
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> Methods of the Object class are dynamically created on Object's prototype. To redefine this method in a subclass of Object, do not use the <codeph class="+ topic/ph pr-d/codeph ">override</codeph> keyword. For example, a subclass of Object implements <codeph class="+ topic/ph pr-d/codeph ">function toString():String</codeph> instead of using an override of the base class.</p>
     
  	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the primitive value of the specified object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">object, object.valueof, valueof
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The primitive value of this object or the object itself.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the primitive value of the specified object. If this object
	 does not have a primitive value, the object itself is returned.
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> Methods of the Object class are dynamically created on Object's prototype. To redefine this method in a subclass of Object, do not use the <codeph class="+ topic/ph pr-d/codeph ">override</codeph> keyword. For example, A subclass of Object implements <codeph class="+ topic/ph pr-d/codeph ">function valueOf():Object</codeph> instead of using an override of the base class.</p>
     
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Object/toString()" class="- topic/link "><linktext class="- topic/linktext ">Object.toString()</linktext></link></related-links></apiOperation><apiValue id="Object:constructor" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">constructor</apiName><shortdesc class="- topic/shortdesc ">
	 A reference to the class object or constructor function for a given object instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Object, Object.constructor, constructor
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 A reference to the class object or constructor function for a given object instance. 
	 If an object is an instance of a class, the <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> 
	 property holds a reference to the class object. 
	 If an object is created with a constructor function, the <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph>   
	 property holds a reference to the constructor function.
	 Do not confuse a constructor function with a constructor method of a class.
	 A constructor function is a Function object used to create objects, and is an
	 alternative to using the <codeph class="+ topic/ph pr-d/codeph ">class</codeph> keyword for defining classes.
	 
	 <p class="- topic/p ">If you use the <codeph class="+ topic/ph pr-d/codeph ">class</codeph> keyword to define a class, the class's prototype object
	 is assigned a property named <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> that holds a reference to the class object.
	 An instance of the class inherits this property from the prototype object. For example,
	 the following code creates a new class, <codeph class="+ topic/ph pr-d/codeph ">A</codeph>, and a class instance named <codeph class="+ topic/ph pr-d/codeph ">myA</codeph>:</p>
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 dynamic class A {}
	 trace(A.prototype.constructor);      // [class A]
	 trace(A.prototype.constructor == A); // true
	 var myA:A = new A();
	 trace(myA.constructor == A);         // true</codeblock>
	 
	 <p class="- topic/p ">Advanced users may choose to use the <codeph class="+ topic/ph pr-d/codeph ">function</codeph> keyword instead of the <codeph class="+ topic/ph pr-d/codeph ">class</codeph>
	 keyword to define a Function object that can be used as a template for creating objects. Such a
	 function is called a constructor function because you can use it in conjunction with the <codeph class="+ topic/ph pr-d/codeph ">new</codeph>
	 operator to create objects. 
	 If you use the <codeph class="+ topic/ph pr-d/codeph ">function</codeph> keyword to create a constructor function, its prototype object is assigned
	 a property named <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> that holds a reference to the constructor function. 
	 If you then use the constructor function to create an object, the object inherits the  
	 <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> property from the constructor function's prototype object. For example,
	 the following code creates a new constructor function, <codeph class="+ topic/ph pr-d/codeph ">f</codeph>, and an object named <codeph class="+ topic/ph pr-d/codeph ">myF</codeph>:</p>
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 function f() {}
	 trace(f.prototype.constructor);      // function Function() {}
	 trace(f.prototype.constructor == f); // true
	 var myF = new f();
	 trace(myF.constructor == f);         // true</codeblock>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: The <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> property is writable, which means that user code can change
	 its value with an assignment statement. Changing the value of the <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> property is not 
	 recommended, but if you write code that depends on the value of the <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> property, you should
	 ensure that the value is not reset. The value can be changed only when the property is accessed through the prototype
	 object (for example, <codeph class="+ topic/ph pr-d/codeph ">className.prototype.constructor</codeph>).</p>
     <p class="- topic/p ">If you access the <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> property and compile in strict mode, you will get an error at compile
     time because the constructor property depends on the protoype object, which is a runtime entity.
     If you use standard mode or if the class description specifies "dynamic", the code runs without generating
     an error.</p>     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Class" class="- topic/link "><linktext class="- topic/linktext ">Class</linktext></link><link href="#Function" class="- topic/link "><linktext class="- topic/linktext ">Function</linktext></link><link href="#Object/prototype" class="- topic/link "><linktext class="- topic/linktext ">prototype</linktext></link></related-links></apiValue><apiValue id="Object:prototype" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prototype</apiName><shortdesc class="- topic/shortdesc ">
	 A reference to the prototype object of a class or function object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a class named Shape and a subclass of Shape named Circle.
	 <listing version="2.0">
	 // Shape class defined in external file named Shape.as
	 class Shape {
	 	function Shape() {}
	 }
	 
	 // Circle class defined in external file named Circle.as
	 class Circle extends Shape{
	 	function Circle() {}
	 }
	 </listing>
	 The Circle class can be used to create two instances of Circle:
	 <listing version="2.0">
	 var oneCircle:Circle = new Circle();
	 var twoCircle:Circle = new Circle();
	 </listing>
	 The following trace statement shows that the <code>prototype</code> property of the Circle class points to its superclass Shape. The identifier <code>Shape</code> refers to the constructor function of the Shape class.
	 <listing version="2.0">
	 trace(Circle.prototype.constructor == Shape); // true
	 </listing>
	 The following trace statement shows how you can use the <code>prototype</code> property and the <code>__proto__</code> property together to move two levels up the inheritance hierarchy (or prototype chain). The <code>Circle.prototype.__proto__</code> property contains a reference to the superclass of the Shape class.
	 <listing version="2.0">
	 trace(Circle.prototype.__proto__ == Shape.prototype); // true
	 </listing>
	 
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 A reference to the prototype object of a class or function object. The <codeph class="+ topic/ph pr-d/codeph ">prototype</codeph> property 
	 is automatically created and attached to any class or function object that you create. This property is 
	 static in that it is specific to the class or function that you create. For example, if you create a  
	 class, the value of the <codeph class="+ topic/ph pr-d/codeph ">prototype</codeph> property is shared by all instances of the class and is
	 accessible only as a class property. Instances of your class cannot directly access 
	 the <codeph class="+ topic/ph pr-d/codeph ">prototype</codeph> property. 
	 
     <p class="- topic/p ">A class's prototype object is a special instance of that class that provides a mechanism for sharing state across all instances of a class. At run time, when a property is not found on a class instance, the delegate, which is the class prototype object, is checked for that property. If the prototype object does not contain the property, the process continues with the prototype object's delegate checking in consecutively higher levels in the hierarchy until 
	 the Flash runtime finds the property. </p>
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> In ActionScript 3.0, prototype inheritance is not the primary mechanism for inheritance. Class inheritance, which drives the inheritance of fixed properties in class definitions, is the primary inheritance mechanism in ActionScript 3.0.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:URIError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URIError</apiName><shortdesc class="- topic/shortdesc ">
 A URIError exception is thrown when one of the global URI handling functions is used 
 in a way that is incompatible with its definition.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, URIError
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A URIError exception is thrown when one of the global URI handling functions is used 
 in a way that is incompatible with its definition. This exception is thrown when an invalid 
 URI is specified to a function that expects a valid URI, such as the <codeph class="+ topic/ph pr-d/codeph ">Socket.connect()</codeph> 
 method.
 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Socket.connect()</linktext></link></related-links><apiConstructor id="URIError:URIError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">URIError</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new URIError object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Contains the message associated with the URIError object.  
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new URIError object.
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:SecurityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SecurityError</apiName><shortdesc class="- topic/shortdesc ">
 The SecurityError exception is thrown when some type of security violation 
 takes place.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, SecurityError
 
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The <codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> exception is thrown when some type of security violation 
 takes place.
 <p class="- topic/p ">
 Examples of security errors:</p>
 <ul class="- topic/ul "><li class="- topic/li ">An unauthorized property access or method call is made across a security sandbox 
 boundary.</li><li class="- topic/li ">An attempt was made to access a URL not permitted by the security sandbox.</li><li class="- topic/li ">A socket connection was attempted to an unauthorized port number, e.g. a port above 
 65535.</li><li class="- topic/li ">An attempt was made to access the user's camera or microphone, and the request to 
 access the device was denied by the user.</li></ul>
 
 </apiDesc><example conref="examples\SecurityErrorExample.as" class="- topic/example "> The following example shows how a <codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> error can 
 be generated and handled within a <codeph class="+ topic/ph pr-d/codeph ">try...catch</codeph> statement by attempting 
 to connect to a port number that is one larger than the maximum allowed.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.Socket;

    public class SecurityErrorExample extends Sprite {

        public function SecurityErrorExample() {
            try {
                var host:String = "www.[yourDomain].com";
                var socket:Socket = new Socket();
                socket.connect(host, 65536);
            }
            catch(e:SecurityError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="SecurityError:SecurityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SecurityError</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new SecurityError object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new SecurityError object.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:ReferenceError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ReferenceError</apiName><shortdesc class="- topic/shortdesc ">
 A ReferenceError exception is thrown when a reference to an undefined property is 
 attempted on a sealed (nondynamic) object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, ReferenceError
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A ReferenceError exception is thrown when a reference to an undefined property is 
 attempted on a sealed (nondynamic) object. References to undefined variables will 
 result in ReferenceError exceptions to inform you of potential bugs and help you troubleshoot
 application code.
 <p class="- topic/p ">However, you can refer to undefined properties of a dynamic class without causing a ReferenceError exception
 to be thrown. For more information, see the <codeph class="+ topic/ph pr-d/codeph ">dynamic</codeph> keyword.</p>
 
 </apiDesc><example conref="examples\ReferenceErrorExample.as" class="- topic/example "> The following example shows how a <codeph class="+ topic/ph pr-d/codeph ">ReferenceError</codeph> exception can 
 be generated and handled within a <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph> statement. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class ReferenceErrorExample extends Sprite {

        public function ReferenceErrorExample() {
            try {
                this["someMember"] = true;
            }
            catch(e:ReferenceError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="statements.html#dynamic" class="- topic/link "><linktext class="- topic/linktext ">dynamic keyword</linktext></link></related-links><apiConstructor id="ReferenceError:ReferenceError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ReferenceError</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new ReferenceError object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Contains the message associated with the ReferenceError object.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new ReferenceError object.
	 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:RangeError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">RangeError</apiName><shortdesc class="- topic/shortdesc ">
 A RangeError exception is thrown when a numeric value is outside the acceptable range.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, RangeError
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A RangeError exception is thrown when a numeric value is outside the acceptable range. When working with arrays,
 referring to an index position of an array item that does not exist will throw a RangeError exception. 
 Using <codeph class="+ topic/ph pr-d/codeph ">Number.toExponential()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Number.toPrecision()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">Number.toFixed()</codeph> methods
 will throw a RangeError exception in cases
 where the arguments are outside the acceptable range of numbers. You can extend <codeph class="+ topic/ph pr-d/codeph ">Number.toExponential()</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">Number.toPrecision()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">Number.toFixed()</codeph> to avoid throwing a RangeError.
 <p product="flash" class="- topic/p ">Other situations that cause this exception to be thrown include the following:
 <ul class="- topic/ul "><li class="- topic/li ">Any Flash runtime API that expects a depth number is invoked with an invalid depth 
 number.</li><li class="- topic/li ">Any Flash runtime API that expects a frame number is invoked with an invalid frame 
 number.</li><li class="- topic/li ">Any Flash runtime API that expects a layer number is invoked with an invalid layer 
 number.</li></ul>
 </p>
 </apiDesc><example conref="examples\RangeErrorExample.as" class="- topic/example "> The following example shows how a <codeph class="+ topic/ph pr-d/codeph ">RangeError</codeph> exception can 
 be generated and handled within a <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph> statement. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class RangeErrorExample extends Sprite {

        public function RangeErrorExample() {
            var child:Sprite = new Sprite();
            try {
                addChildAt(child, 1);
            }
            catch(e:RangeError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#Number/toExponential()" class="- topic/link "><linktext class="- topic/linktext ">Number.toExponential()</linktext></link><link href="#Number/toPrecision()" class="- topic/link "><linktext class="- topic/linktext ">Number.toPrecision()</linktext></link><link href="#Number/toFixed()" class="- topic/link "><linktext class="- topic/linktext ">Number.toFixed()</linktext></link></related-links><apiConstructor id="RangeError:RangeError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">RangeError</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new RangeError object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Contains the message associated with the RangeError object.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new RangeError object.
	 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:int" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">int</apiName><shortdesc class="- topic/shortdesc ">
 The int class lets you work with the data type representing a 32-bit signed integer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">int object, int, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The int class lets you work with the data type representing a 32-bit signed integer. 
 The range of values represented by the int class is -2,147,483,648 (-2^31) to 2,147,483,647 (2^31-1).
 <p class="- topic/p ">The constant properties of the int class, <codeph class="+ topic/ph pr-d/codeph ">MAX_VALUE</codeph> and <codeph class="+ topic/ph pr-d/codeph ">MIN_VALUE</codeph>, are static, which means that you don't need an object to use them, so you don't need to use the constructor. The methods, however, are not static, which means that you do need an object to use them. You can create an int object by using the int class constructor or by declaring a variable of type int and assigning the variable a literal value.</p>
 <p class="- topic/p ">The int data type is useful for loop counters and other situations where a floating point number is not needed, and is similar to the int data type in Java and C++. The default value of a variable typed as int is <codeph class="+ topic/ph pr-d/codeph ">0</codeph></p>
 <p class="- topic/p ">If you are working with numbers that exceed <codeph class="+ topic/ph pr-d/codeph ">int.MAX_VALUE</codeph>, consider using Number.  </p>
 <p class="- topic/p ">The following example calls the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method of the int class, which returns the string <codeph class="+ topic/ph pr-d/codeph ">1234</codeph>: </p>
 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var myint:int = 1234;
 myint.toString();
 </codeblock>
 <p class="- topic/p ">The following example assigns the value of the <codeph class="+ topic/ph pr-d/codeph ">MIN_VALUE</codeph> property to a variable declared without the use of the constructor:</p>
 <pre xml:space="preserve" class="- topic/pre ">
 var smallest:int = int.MIN_VALUE;
 </pre> 
 
 </apiDesc><example conref="examples\IntExample.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">IntExample</codeph> class to show how 
 to work with and check the validity of int data types:
 <ol class="- topic/ol "><li class="- topic/li ">Two int variables <codeph class="+ topic/ph pr-d/codeph ">a</codeph> and <codeph class="+ topic/ph pr-d/codeph ">b</codeph> are declared in the constructor.</li><li class="- topic/li ">The two ints are added using the method <codeph class="+ topic/ph pr-d/codeph ">addIntegers()</codeph>.</li><li class="- topic/li ">A third int variable <codeph class="+ topic/ph pr-d/codeph ">c</codeph> is assigned the outcome of <codeph class="+ topic/ph pr-d/codeph ">parseInteger()</codeph>,
     which checks the validity of the string passed to it to ensure that it is an integer value
     in the acceptable range for int data types and returns an int equal to the integer value
     of the string if it is valid.</li><li class="- topic/li ">The int variables <codeph class="+ topic/ph pr-d/codeph ">a</codeph> and <codeph class="+ topic/ph pr-d/codeph ">c</codeph> are added together using <codeph class="+ topic/ph pr-d/codeph ">addIntegers()</codeph>.</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class IntExample extends Sprite {    
        public function IntExample() {
            var a:int = 512;
            var b:int = -128;
            
            trace(addIntegers(a, b)); // 384

            var c:int = parseInteger("32");
            
            trace(addIntegers(a, c)); // 544
        }
            
        public function addIntegers(a:int, b:int):int {
            return a + b;
        }
        
        public function parseInteger(str:String):int {
            var num:Number = parseInt(str);
            if(!isNaN(num) &amp;&amp; num &lt;= int.MAX_VALUE &amp;&amp; num &gt;= int.MIN_VALUE) {
                return int(num);
            }
            
            return 0;
        }
        
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="uint.html" class="- topic/link "><linktext class="- topic/linktext ">uint</linktext></link><link href="Number.html" class="- topic/link "><linktext class="- topic/linktext ">Number</linktext></link></related-links><apiConstructor id="int:int" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">int</apiName><shortdesc class="- topic/shortdesc ">
	 Constructor; creates a new int object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new number, constructor
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The numeric value of the int object being created or a value to be converted to a number. The default value is 0 if <codeph class="+ topic/ph pr-d/codeph ">value</codeph> is not provided.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Constructor; creates a new int object. You must use the int constructor when using <codeph class="+ topic/ph pr-d/codeph ">int.toString()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">int.valueOf()</codeph>. You do not use a constructor when using the properties of an int object. The <codeph class="+ topic/ph pr-d/codeph ">new int</codeph> constructor is primarily used as a placeholder. An int object is not the same as the <codeph class="+ topic/ph pr-d/codeph ">int()</codeph> function that converts a parameter to a primitive value.
	 
 	 </apiDesc><example class="- topic/example ">The following code constructs new int objects:
	 <pre xml:space="preserve" class="- topic/pre ">
	 var n1:int = new int(3.4);
	 var n2:int = new int(-10);
	 </pre>
	 
	 
	 </example></apiConstructorDetail><related-links class="- topic/related-links "><link href="#int/toString()" class="- topic/link "><linktext class="- topic/linktext ">int.toString()</linktext></link><link href="#int/valueOf()" class="- topic/link "><linktext class="- topic/linktext ">int.valueOf()</linktext></link></related-links></apiConstructor><apiOperation id="int:AS3:toExponential" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toExponential</apiName><shortdesc class="- topic/shortdesc ">
      Returns a string representation of the number in exponential notation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Throws an exception if the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> argument is outside the range 0 to 20.
	  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer between 0 and 20, inclusive, that represents the desired number of decimal places.
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Returns a string representation of the number in exponential notation. The string contains
      one digit before the decimal point and up to 20 digits after the decimal point, as
      specified by the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> parameter.
      </apiDesc><example conref="examples\Number.toExponential.1.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toExponential(2)</codeph> returns a string in
 exponential notation.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 315003;
trace(num.toExponential(2)); // 3.15e+5

</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:toFixed" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toFixed</apiName><shortdesc class="- topic/shortdesc ">
     Returns a string representation of the number in fixed-point notation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Throws an exception if the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> argument is outside the range 0 to 20.
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer between 0 and 20, inclusive, that represents the desired number of decimal places.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a string representation of the number in fixed-point notation. 
     Fixed-point notation means that the string will contain a specific number of digits 
     after the decimal point, as specified in the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> parameter.
     The valid range for the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> parameter is from 0 to 20. 
     Specifying a value outside this range throws an exception.
     
     </apiDesc><example conref="examples\Number.toFixed.1.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toFixed(3)</codeph> returns a string that rounds
 to three decimal places.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 7.31343;
trace(num.toFixed(3)); // 7.313
</codeblock></example><example conref="examples\Number.toFixed.2.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toFixed(2)</codeph> returns a string that adds
 trailing zeroes.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4;
trace(num.toFixed(2)); // 4.00
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:toPrecision" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toPrecision</apiName><shortdesc class="- topic/shortdesc ">
      Returns a string representation of the number either in exponential notation or in
      fixed-point notation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Throws an exception if the <codeph class="+ topic/ph pr-d/codeph ">precision</codeph> argument is outside the range 1 to 21.
	  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">precision</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer between 1 and 21, inclusive, that represents the desired number of digits to represent in the resulting string.
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Returns a string representation of the number either in exponential notation or in
      fixed-point notation. The string will contain the number of digits specified in the
      <codeph class="+ topic/ph pr-d/codeph ">precision</codeph> parameter.
      </apiDesc><example conref="examples\Number.toPrecision.1.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> returns a string with
 only three digits. The string is in fixed-point notation because exponential notation is not required.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 31.570;
trace(num.toPrecision(3)); // 31.6
</codeblock></example><example conref="examples\Number.toPrecision.2.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> returns a string with
 only three digits. The string is in exponential notation because the resulting number does not
 contain enough digits for fixed-point notation.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4000;
trace(num.toPrecision(3)); // 4.00e+3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the string representation of an int object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.tostring, tostring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">radix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies the numeric base (from 2 to 36) to use for the number-to-string conversion. If you do not specify the <codeph class="+ topic/ph pr-d/codeph ">radix</codeph> parameter, the default value is 10.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the string representation of an <codeph class="+ topic/ph pr-d/codeph ">int</codeph> object.
	 
	 </apiDesc><example class="- topic/example ">The following example uses 2 and 8 for the <codeph class="+ topic/ph pr-d/codeph ">radix</codeph> parameter and returns a string that contains the corresponding representation of the number 9:
	 <pre xml:space="preserve" class="- topic/pre ">
	 var myint:int = new int(9);
	 trace(myint.toString(2)); // 1001
	 trace(myint.toString(8)); // 11
	 </pre>
	 <p class="- topic/p ">The following example results in a hexadecimal value.</p>
	 <pre xml:space="preserve" class="- topic/pre ">
	 var r:int = new int(250);
	 var g:int = new int(128);
	 var b:int = new int(114);
	 var rgb:String = "0x"+ r.toString(16)+g.toString(16)+b.toString(16);
	 trace(rgb); // 0xfa8072
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the primitive value of the specified int object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.valueof, valueof, value of
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An int value.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the primitive value of the specified int object.
	 
 	 </apiDesc><example class="- topic/example ">The following example results in the primative value of the <codeph class="+ topic/ph pr-d/codeph ">numSocks</codeph> object.
	 <pre xml:space="preserve" class="- topic/pre ">
	 var numSocks:int = new int(2);
	 trace(numSocks.valueOf()); // 2
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiValue id="int:MAX_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MAX_VALUE</apiName><shortdesc class="- topic/shortdesc "> 
	The largest representable 32-bit signed integer, which is 2,147,483,647.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">int, int.max_value, max_value, max value
	 
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">2147483647</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	The largest representable 32-bit signed integer, which is 2,147,483,647.
	
    </apiDesc><example class="- topic/example ">The following ActionScript <ph outputclass="flashonly" class="- topic/ph ">displays</ph><ph outputclass="flexonly" class="- topic/ph ">writes</ph> the largest and smallest representable int objects <ph outputclass="flashonly" class="- topic/ph ">to the Output panel</ph><ph outputclass="flexonly" class="- topic/ph ">to the log file</ph>:
	<pre xml:space="preserve" class="- topic/pre ">
	trace("int.MIN_VALUE = "+int.MIN_VALUE);
	trace("int.MAX_VALUE = "+int.MAX_VALUE);
	</pre>
	<p class="- topic/p ">This code <ph outputclass="flexonly" class="- topic/ph ">logs</ph><ph outputclass="flashonly" class="- topic/ph ">displays</ph> the following values:</p>
	<pre xml:space="preserve" class="- topic/pre ">
	int.MIN_VALUE = -2147483648
	int.MAX_VALUE = 2147483647
	</pre>
	
	
	</example></apiValueDetail></apiValue><apiValue id="int:MIN_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIN_VALUE</apiName><shortdesc class="- topic/shortdesc ">
	 The smallest representable 32-bit signed integer, which is -2,147,483,648.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">int, int.min_value, min_value, min value
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">-2147483648</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The smallest representable 32-bit signed integer, which is -2,147,483,648.
	 
 	 </apiDesc><example class="- topic/example ">The following ActionScript <ph outputclass="flashonly" class="- topic/ph ">displays</ph><ph outputclass="flexonly" class="- topic/ph ">writes</ph> the largest and smallest representable int objects<ph outputclass="flashonly" class="- topic/ph "> to the Output panel</ph><ph outputclass="flexonly" class="- topic/ph "> to the log file</ph>:
     <pre xml:space="preserve" class="- topic/pre ">
     trace("int.MIN_VALUE = "+int.MIN_VALUE);
     trace("int.MAX_VALUE = "+int.MAX_VALUE);
     </pre>
     <p class="- topic/p ">This code <ph outputclass="flexonly" class="- topic/ph ">logs</ph><ph outputclass="flashonly" class="- topic/ph ">displays</ph> the following values:</p>
     <pre xml:space="preserve" class="- topic/pre ">
	int.MIN_VALUE = -2147483648
	int.MAX_VALUE = 2147483647
     </pre>
     
     
     </example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Number" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Number</apiName><shortdesc class="- topic/shortdesc ">
 A data type representing an IEEE-754 double-precision floating-point number.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number object, number, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The Number class is a simple wrapper object for the <codeph class="+ topic/ph pr-d/codeph ">Number</codeph> 
 data type.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A data type representing an IEEE-754 double-precision floating-point number. You can manipulate primitive numeric 
 values by using the methods and properties associated with the Number class. This class is identical to the 
 JavaScript Number class.
 <p class="- topic/p ">The properties of the Number class are static, which means you do not need an object to use them, so you 
 do not need to use the constructor.</p>
 <p class="- topic/p ">The Number data type adheres to the double-precision IEEE-754 standard. </p>
 <p class="- topic/p ">The Number data type is useful when you need to use floating-point values.
 Flash runtimes handle int and uint data types more efficiently than Number, but Number is 
 useful in situations where the range of values required exceeds the valid range 
 of the int and uint data types. The Number class can be used to
 represent integer values well beyond the valid range of the int and uint data types.
 The Number data type can use up to 53 bits to represent integer values, compared to
 the 32 bits available to int and uint. The default value of a variable typed as Number is <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> (Not a Number).</p>
 
 </apiDesc><example conref="examples\NumberExample.as" class="- topic/example "> The following example shows how a number with six digits after the decimal place 
 is truncated (with rounding) to a number with two digits after the decimal point.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;

    public class NumberExample extends Sprite {
        public function NumberExample() {
            var num:Number = new Number(10.456345);
            var str:String = num.toFixed(2);
            trace(num); // 10.456345
            trace(str); // 10.46
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="int.html" class="- topic/link "><linktext class="- topic/linktext ">int</linktext></link><link href="uint.html" class="- topic/link "><linktext class="- topic/linktext ">uint</linktext></link></related-links><apiConstructor id="Number:Number" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Number</apiName><shortdesc class="- topic/shortdesc ">
  Creates a Number object with the specified value.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new number, constructor
   
   </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The numeric value of the Number instance being created or a value 
  to be converted to a Number. The default value is 0 if <codeph class="+ topic/ph pr-d/codeph ">num</codeph> is 
  not specified. Using the constructor without specifying a <codeph class="+ topic/ph pr-d/codeph ">num</codeph> parameter is not
  the same as declaring a variable of type Number with no value assigned (such as <codeph class="+ topic/ph pr-d/codeph ">var myNumber:Number</codeph>), which 
  defaults to <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>. A number with no value assigned is undefined and the equivalent of 
  <codeph class="+ topic/ph pr-d/codeph ">new Number(undefined)</codeph>.
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Creates a Number with the specified value.
  
  </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Creates a Number object with the specified value. This constructor has the same effect
  as the <codeph class="+ topic/ph pr-d/codeph ">Number()</codeph> public native function that converts an object of a different type
  to a primitive numeric value.
  
  </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="#Number/toString()" class="- topic/link "><linktext class="- topic/linktext ">Number.toString()</linktext></link><link href="#Number/valueOf()" class="- topic/link "><linktext class="- topic/linktext ">Number.valueOf()</linktext></link></related-links></apiConstructor><apiOperation id="Number:AS3:toExponential" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toExponential</apiName><shortdesc class="- topic/shortdesc ">
      Returns a string representation of the number in exponential notation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Throws an exception if the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> argument is outside the range 0 to 20.
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer between 0 and 20, inclusive, that represents the desired number of decimal places.
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Returns a string representation of the number in exponential notation. The string contains
      one digit before the decimal point and up to 20 digits after the decimal point, as
      specified by the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> parameter.
      </apiDesc><example conref="examples\Number.toExponential.1.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toExponential(2)</codeph> returns a string in
 exponential notation.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 315003;
trace(num.toExponential(2)); // 3.15e+5

</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:toFixed" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toFixed</apiName><shortdesc class="- topic/shortdesc ">
     Returns a string representation of the number in fixed-point notation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Throws an exception if the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> argument is outside the range 0 to 20.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer between 0 and 20, inclusive, that represents the desired number of decimal places.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a string representation of the number in fixed-point notation. 
     Fixed-point notation means that the string will contain a specific number of digits 
     after the decimal point, as specified in the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> parameter.
     The valid range for the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> parameter is from 0 to 20. 
     Specifying a value outside this range throws an exception.
     
     </apiDesc><example conref="examples\Number.toFixed.1.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toFixed(3)</codeph> returns a string that rounds
 to three decimal places.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 7.31343;
trace(num.toFixed(3)); // 7.313
</codeblock></example><example conref="examples\Number.toFixed.2.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toFixed(2)</codeph> returns a string that adds
 trailing zeroes.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4;
trace(num.toFixed(2)); // 4.00
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:toPrecision" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toPrecision</apiName><shortdesc class="- topic/shortdesc ">
      Returns a string representation of the number either in exponential notation or in
      fixed-point notation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Throws an exception if the <codeph class="+ topic/ph pr-d/codeph ">precision</codeph> argument is outside the range 1 to 21.
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">precision</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer between 1 and 21, inclusive, that represents the desired number of digits to represent in the resulting string.
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Returns a string representation of the number either in exponential notation or in
      fixed-point notation. The string will contain the number of digits specified in the
      <codeph class="+ topic/ph pr-d/codeph ">precision</codeph> parameter.
      </apiDesc><example conref="examples\Number.toPrecision.1.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> returns a string with
 only three digits. The string is in fixed-point notation because exponential notation is not required.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 31.570;
trace(num.toPrecision(3)); // 31.6
</codeblock></example><example conref="examples\Number.toPrecision.2.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> returns a string with
 only three digits. The string is in exponential notation because the resulting number does not
 contain enough digits for fixed-point notation.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4000;
trace(num.toPrecision(3)); // 4.00e+3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
 Returns the string representation of the specified Number object (myNumber).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.tostring, tostring
  
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The numeric representation of the Number object as a string.
 
 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">radix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">10</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies the numeric base (from 2 to 36) to use for the number-to-string 
 conversion. If you do not specify the <codeph class="+ topic/ph pr-d/codeph ">radix</codeph> parameter, the default value 
 is 10.
 
 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the string representation of this Number using the specified 
 radix parameter as the numeric base.
 
 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Returns the string representation of the specified Number object (<codeph class="+ topic/ph pr-d/codeph "><i class="+ topic/ph hi-d/i ">myNumber</i></codeph>).
 If the value of the Number object is a decimal number without a leading zero (such as <codeph class="+ topic/ph pr-d/codeph ">.4</codeph>),
 <codeph class="+ topic/ph pr-d/codeph ">Number.toString()</codeph> adds a leading zero (<codeph class="+ topic/ph pr-d/codeph ">0.4</codeph>).
 
 
 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
 Returns the primitive value type of the specified Number object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.valueof, valueof, value of
  
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The primitive type value of the Number object.
 
 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the primitive value type of the specified Number object.
 
 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Returns the primitive value type of the specified Number object.
 
 </apiDesc></apiOperationDetail></apiOperation><apiValue id="Number:MAX_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MAX_VALUE</apiName><shortdesc class="- topic/shortdesc ">
  The largest representable number (double-precision IEEE-754).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.max_value, max_value, max value
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The largest representable number (double-precision IEEE-754).
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  The largest representable number (double-precision IEEE-754). This number is 
  approximately 1.79e+308.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Number:MIN_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIN_VALUE</apiName><shortdesc class="- topic/shortdesc ">
  The smallest representable non-negative, non-zero, number (double-precision IEEE-754).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.min_value, min_value, min value
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The smallest representable number (double-precision IEEE-754).
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  The smallest representable non-negative, non-zero, number (double-precision IEEE-754). This number is 
  approximately 5e-324. The smallest representable number overall is actually <codeph class="+ topic/ph pr-d/codeph ">-Number.MAX_VALUE</codeph>.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Number:NEGATIVE_INFINITY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NEGATIVE_INFINITY</apiName><shortdesc class="- topic/shortdesc ">
  Specifies the IEEE-754 value representing negative infinity.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.negative_infinity, negative_infinity, negative infinity, infinity
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Specifies the IEEE-754 value representing negative infinity.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Specifies the IEEE-754 value representing negative infinity. The value of this property 
  is the same as that of the constant <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph>.
  <p class="- topic/p ">
  Negative infinity is a special numeric value that is returned when a mathematical 
  operation or function returns a negative value larger than can be 
  represented.
  </p>
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Number:NaN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NaN</apiName><shortdesc class="- topic/shortdesc ">
  The IEEE-754 value representing Not a Number (NaN).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.nan, nan, not a number
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The IEEE-754 value representing Not a Number (NaN).
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  The IEEE-754 value representing Not a Number (<codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>).
  
  </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="package.html#isNaN()" class="- topic/link "><linktext class="- topic/linktext ">isNaN() global function</linktext></link></related-links></apiValue><apiValue id="Number:POSITIVE_INFINITY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">POSITIVE_INFINITY</apiName><shortdesc class="- topic/shortdesc ">
  Specifies the IEEE-754 value representing positive infinity.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.positive_infinity, positive_infinity, positive infinity, infinity
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Specifies the IEEE-754 value representing positive infinity.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Specifies the IEEE-754 value representing positive infinity. The value of this property 
  is the same as that of the constant <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph>.
  <p class="- topic/p ">
  Positive infinity is a special numeric value that is returned when a mathematical 
  operation or function returns a value larger than can be represented.
  </p>
  
  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:DefinitionError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DefinitionError</apiName><shortdesc class="- topic/shortdesc ">
 The DefinitionError class represents an error that occurs when user code
 attempts to define an identifier that is already defined.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
  
  </helpid></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">An DefinitionError is thrown when code attempts to redefine a class,
 interface, or function.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The DefinitionError class represents an error that occurs when user code
 attempts to define an identifier that is already defined. This error commonly
 occurs in redefining classes, interfaces,  
 and functions.
 
 </apiDesc></apiClassifierDetail><apiConstructor id="DefinitionError:DefinitionError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">DefinitionError</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new DefinitionError object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new DefinitionError object.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:Function" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Function</apiName><shortdesc class="- topic/shortdesc ">
 A function is the basic unit of code that can be invoked in ActionScript.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Function, Function object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The Function class is used to represent a built-in or user-defined function.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A function is the basic unit of code that can be invoked in ActionScript.
 Both user-defined and built-in functions in ActionScript are represented by Function objects, 
 which are instances of the Function class.
 <p class="- topic/p ">Methods of a class are slightly different than Function objects. Unlike an ordinary function object, a method is tightly linked to its associated class object. Therefore, a method or property has a definition that is shared among all instances of the same class. Methods can be extracted from an instance and treated as "bound" methods (retaining the link to the original instance). For a bound method, the <codeph class="+ topic/ph pr-d/codeph ">this</codeph> keyword points to the original object that implemented the method. For a function, <codeph class="+ topic/ph pr-d/codeph ">this</codeph> points to the associated object at the time the function is invoked.</p>
 
 
 </apiDesc><example conref="examples\FunctionExample.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">FunctionExample</codeph>,
 <codeph class="+ topic/ph pr-d/codeph ">SimpleCollection</codeph>, <codeph class="+ topic/ph pr-d/codeph ">EventBroadcaster</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">EventListener</codeph> classes
 to show various uses of functions in ActionScript.  This is accomplished with the following steps:
 <ol class="- topic/ol "><li class="- topic/li ">The constructor for <codeph class="+ topic/ph pr-d/codeph ">FunctionExample</codeph> creates a local variable named 
     <codeph class="+ topic/ph pr-d/codeph ">simpleColl</codeph>, which is populated with an array of integers ranging from <codeph class="+ topic/ph pr-d/codeph ">1</codeph> to
     <codeph class="+ topic/ph pr-d/codeph ">8</codeph>. </li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">simpleColl</codeph> object is printed using <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>.</li><li class="- topic/li ">An EventListener object, <codeph class="+ topic/ph pr-d/codeph ">listener</codeph>, is added to <codeph class="+ topic/ph pr-d/codeph ">simpleColl</codeph>.</li><li class="- topic/li ">When the <codeph class="+ topic/ph pr-d/codeph ">insert()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">remove()</codeph> functions are called, the listener responds
  to their events.</li><li class="- topic/li ">A second SimpleCollection object is created named <codeph class="+ topic/ph pr-d/codeph ">greaterThanFourColl</codeph>.</li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">greaterThanFourColl</codeph> object is assigned the result of <codeph class="+ topic/ph pr-d/codeph ">simpleColl.select()</codeph>
     with the argument <codeph class="+ topic/ph pr-d/codeph ">4</codeph> and an anonymous function. The SimpleCollection object's select method is an 
    internal iterator that uses the anonymous function parameter as a block.</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    
    public class FunctionExample extends Sprite {
        public function FunctionExample() {
            var simpleColl:SimpleCollection;
            simpleColl = new SimpleCollection(0, 1, 2, 3, 4, 5, 6, 7, 8);
            trace(simpleColl);        // 0, 1, 2, 3, 4, 5, 6, 7, 8

            var listener:EventListener = new EventListener();
            simpleColl.addListener(listener);
            simpleColl.insert(9);        // itemInsertedHandler: 9
            simpleColl.remove(8);        // itemRemovedHandler: 8
            trace(simpleColl);        // 0, 1, 2, 3, 4, 5, 6, 7, 9

            var greaterThanFourColl:SimpleCollection;
            greaterThanFourColl = simpleColl.select(4, function(item:int, value:int){ return item &gt; value });
            trace(greaterThanFourColl);    // 5, 6, 7, 9
        }
    }
}
    
import flash.display.Sprite;
    
class EventBroadcaster {
    private var listeners:Array;

    public function EventBroadcaster() {
        listeners = new Array();
    }
        
    public function addListener(obj:Object):void {
        removeListener(obj);
        listeners.push(obj);
    }
        
    public function removeListener(obj:Object):void {
        for(var i:uint = 0; i &lt; listeners.length; i++) {
            if(listeners[i] == obj) {
                listeners.splice(i, 1);
            }
        }
    }
    
    public function broadcastEvent(evnt:String, ...args):void {
        for(var i:uint = 0; i &lt; listeners.length; i++) {
            listeners[i][evnt].apply(listeners[i], args);
        }
    }    
}
    
class SimpleCollection extends EventBroadcaster {
    private var arr:Array;
        public function SimpleCollection(... args) {
        arr = (args.length == 1 &amp;&amp; !isNaN(args[0])) ? new Array(args[0]) : args;
    }
        
    public function insert(obj:Object):void {
        remove(obj);
        arr.push(obj);
        broadcastEvent("itemInsertedHandler", obj);
    }
        
    public function remove(obj:Object):void {
        for(var i:uint = 0; i &lt; arr.length; i++) {
            if(arr[i] == obj) {
                var obj:Object = arr.splice(i, 1)[0];
                broadcastEvent("itemRemovedHandler", obj);
            }
        }
    }

    public function select(val:int, fn:Function):SimpleCollection {
        var col:SimpleCollection = new SimpleCollection();
        for(var i:uint = 0; i &lt; arr.length; i++) {
            if(fn.call(this, arr[i], val)) {
                col.insert(arr[i]);
            }
        }
        return col;
    }
        
    public function toString():String {
        var str:String = new String();
        for(var i:uint = 0; i &lt; arr.length - 1; i++) {
            str += arr[i] + ", ";
        }
        str += arr[arr.length - 1];
        return str;
    }
}

class EventListener {
    public function EventListener() {
    }
    
    public function itemInsertedHandler(obj:Object):void {
        trace("itemInsertedHandler: " + obj);
    }
    
    public function itemRemovedHandler(obj:Object):void {
        trace("itemRemovedHandler: " + obj);        
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="Function:AS3:apply" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">apply</apiName><shortdesc class="- topic/shortdesc ">
  Specifies the value of thisObject to be used within any function that ActionScript calls.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Function, Function.apply, apply
  
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Any value that the called function specifies.
  
  
  </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisArg</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object to which the function is applied.
  
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">argArray</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array whose elements are passed to the function as parameters.
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Specifies the object instance on which the Function is called.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Specifies the value of <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> to be used within any function that ActionScript calls. 
  This method also specifies the parameters to be passed to any called function. Because <codeph class="+ topic/ph pr-d/codeph ">apply()</codeph> 
  is a method of the Function class, it is also a method of every Function object in ActionScript. 
  <p class="- topic/p ">The parameters are specified as an Array object, unlike <codeph class="+ topic/ph pr-d/codeph ">Function.call()</codeph>, which specifies 
  parameters as a comma-delimited list. This is often useful when the number of parameters to be passed is not
  known until the script actually executes.</p>
  <p class="- topic/p ">Returns the value that the called function specifies as the return value.</p>

  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Function/call()" class="- topic/link "><linktext class="- topic/linktext ">Function.call()</linktext></link></related-links></apiOperation><apiOperation id="Function:AS3:call" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">call</apiName><shortdesc class="- topic/shortdesc ">
  Invokes the function represented by a Function object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Function, Function.call, call
  
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisArg</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that specifies the value of <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> within the function body.
  
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The parameter or parameters to be passed to the function. You can specify zero or more parameters.
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Invokes this Function. 
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Invokes the function represented by a Function object. Every function in ActionScript 
  is represented by a Function object, so all functions support this method. 
  <p class="- topic/p ">In almost all cases, the function call (<codeph class="+ topic/ph pr-d/codeph ">()</codeph>) operator can be used instead of this method. 
  The function call operator produces code that is concise and readable. This method is primarily useful 
  when the <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> parameter of the function invocation needs to be explicitly controlled. 
  Normally, if a function is invoked as a method of an object within the body of the function, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> 
  is set to <codeph class="+ topic/ph pr-d/codeph ">myObject</codeph>, as shown in the following example:</p>
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  myObject.myMethod(1, 2, 3);
  </codeblock>
  <p class="- topic/p ">In some situations, you might want <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> to point somewhere else; 
  for example, if a function must be invoked as a method of an object, but is not actually stored as a method 
  of that object:</p>
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  myObject.myMethod.call(myOtherObject, 1, 2, 3); 
  </codeblock>
  <p class="- topic/p ">You can pass the value <codeph class="+ topic/ph pr-d/codeph ">null</codeph> for the <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> parameter to invoke a function as a 
  regular function and not as a method of an object. For example, the following function invocations are equivalent:</p>
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  Math.sin(Math.PI / 4)
  Math.sin.call(null, Math.PI / 4)
  </codeblock>
  
  <p class="- topic/p ">Returns the value that the called function specifies as the return value.</p>
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Function/apply()" class="- topic/link "><linktext class="- topic/linktext ">Function.apply()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier languages="" id="globalClassifier:SyntaxError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SyntaxError</apiName><shortdesc class="- topic/shortdesc ">
 A SyntaxError exception is thrown when a parsing error occurs, for one of the following reasons:.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, SyntaxError
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A SyntaxError exception is thrown when a parsing error occurs, for one of the following reasons:. 
 <ul class="- topic/ul "><li class="- topic/li ">An invalid regular expression is parsed by the RegExp class.</li><li class="- topic/li ">Invalid XML content is parsed by the XML class.</li></ul>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp class</linktext></link><link href="#XML" class="- topic/link "><linktext class="- topic/linktext ">XML class</linktext></link></related-links><apiConstructor id="SyntaxError:SyntaxError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SyntaxError</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new SyntaxError object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Contains the message associated with the SyntaxError object. 
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new SyntaxError object.
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:XMLList" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">XMLList</apiName><shortdesc class="- topic/shortdesc ">
 The XMLList class contains methods for working with one or more XML elements.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The XMLList class contains methods for working with one or more XML elements. An XMLList object
 can represent one or more XML objects or elements (including multiple nodes or attributes), so 
 you can call methods on the elements as a group or on the individual elements in the collection.
 <p class="- topic/p ">If an XMLList object has only one XML element, you can use the XML class methods on the 
 XMLList object directly. In the following example, <codeph class="+ topic/ph pr-d/codeph ">example.two</codeph> is an XMLList 
 object of length 1, so you can call any XML method on it.</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var example2 = &lt;example&gt;&lt;two&gt;2&lt;/two&gt;&lt;/example&gt;;</codeblock>
 <p class="- topic/p ">If you attempt to use XML class methods with an XMLList object containing more than one XML 
 object, an exception is thrown; instead, iterate over the XMLList collection (using a 
 <codeph class="+ topic/ph pr-d/codeph ">for each..in</codeph> statement, for example) and apply the methods to each XML object in 
 the collection.</p>
 
 </apiDesc><example conref="examples\XMLListExample.as" class="- topic/example "> The following example creates an XML property named <codeph class="+ topic/ph pr-d/codeph ">books</codeph> and adds several
 items with <codeph class="+ topic/ph pr-d/codeph ">book publisher</codeph> and <codeph class="+ topic/ph pr-d/codeph ">name</codeph> tags to a node named <codeph class="+ topic/ph pr-d/codeph ">books</codeph>.  
 Then the <codeph class="+ topic/ph pr-d/codeph ">showBooksByPublisher()</codeph> method is called,  
 which takes the XMLList and returns each item matching the publisher, "Addison-Wesley."
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class XMLListExample extends Sprite {
        private var books:XML;

        public function XMLListExample() {
            books =    &lt;books&gt;
                        &lt;book publisher="Addison-Wesley" name="Design Patterns" /&gt;
                        &lt;book publisher="Addison-Wesley" name="The Pragmatic Programmer" /&gt;
                        &lt;book publisher="Addison-Wesley" name="Test Driven Development" /&gt;
                        &lt;book publisher="Addison-Wesley" name="Refactoring to Patterns" /&gt;
                        &lt;book publisher="O'Reilly Media" name="The Cathedral &amp; the Bazaar" /&gt;
                        &lt;book publisher="O'Reilly Media" name="Unit Test Frameworks" /&gt;
                    &lt;/books&gt;;

            showBooksByPublisher("Addison-Wesley");
        }

        private function showBooksByPublisher(name:String):void {
            var results:XMLList = books.book.(@publisher == name);
            showList(results);
        }

        private function showList(list:XMLList):void {
            var item:XML;
            for each(item in list) {
                trace("item: " + item.toXMLString());
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#XML" class="- topic/link "><linktext class="- topic/linktext ">XML</linktext></link><link href="statements.html#for_each..in" class="- topic/link "><linktext class="- topic/linktext ">for each..in</linktext></link><link href="#Namespace" class="- topic/link "><linktext class="- topic/linktext ">Namespace</linktext></link><link href="#QName" class="- topic/link "><linktext class="- topic/linktext ">QName</linktext></link></related-links><apiConstructor id="XMLList:XMLList" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">XMLList</apiName><shortdesc class="- topic/shortdesc ">
	Creates a new XMLList object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList 
	</keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Any object that can be converted to an XMLList object by using the top-level <codeph class="+ topic/ph pr-d/codeph ">XMLList()</codeph> function.
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Creates a new XMLList object.
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="#global/XMLList()" class="- topic/link "><linktext class="- topic/linktext ">top-level XMLList() function</linktext></link></related-links></apiConstructor><apiOperation id="XMLList:AS3:attribute" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attribute</apiName><shortdesc class="- topic/shortdesc ">
	Calls the attribute() method of each XML object and returns an XMLList object 
	of the results.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.attribute, attribute
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object of matching XML objects or an empty XMLList object.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">attributeName</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the attribute that you want to include in an XMLList object.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Calls the <codeph class="+ topic/ph pr-d/codeph ">attribute()</codeph> method of each XML object and returns an XMLList object 
	of the results. The results match the given <codeph class="+ topic/ph pr-d/codeph ">attributeName</codeph> parameter. If there is no 
	match, the <codeph class="+ topic/ph pr-d/codeph ">attribute()</codeph> method returns an empty XMLList object.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attribute()" class="- topic/link "><linktext class="- topic/linktext ">XML.attribute()</linktext></link><link href="#XML/attributes()" class="- topic/link "><linktext class="- topic/linktext ">XML.attributes()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:attributes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attributes</apiName><shortdesc class="- topic/shortdesc ">
	Calls the attributes() method of each XML object and 
	returns an XMLList object of attributes for each XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.attributes, attributes
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object of attributes for each XML object.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Calls the <codeph class="+ topic/ph pr-d/codeph ">attributes()</codeph> method of each XML object and 
	returns an XMLList object of attributes for each XML object. 
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attribute()" class="- topic/link "><linktext class="- topic/linktext ">XML.attribute()</linktext></link><link href="#XML/attributes()" class="- topic/link "><linktext class="- topic/linktext ">XML.attributes()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:child" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">child</apiName><shortdesc class="- topic/shortdesc ">
	Calls the child() method of each XML object and returns an XMLList object that
	contains the results in order.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.child, child
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object of child nodes that match the input parameter.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">propertyName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The element name or integer of the XML child.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Calls the <codeph class="+ topic/ph pr-d/codeph ">child()</codeph> method of each XML object and returns an XMLList object that
	contains the results in order.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/child()" class="- topic/link "><linktext class="- topic/linktext ">XML.child()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:children" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">children</apiName><shortdesc class="- topic/shortdesc ">
	Calls the children() method of each XML object and 
	returns an XMLList object that contains the results.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.children, children
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object of the children in the XML objects.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Calls the <codeph class="+ topic/ph pr-d/codeph ">children()</codeph> method of each XML object and 
	returns an XMLList object that contains the results.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/children()" class="- topic/link "><linktext class="- topic/linktext ">XML.children()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:comments" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">comments</apiName><shortdesc class="- topic/shortdesc ">
	Calls the comments() method of each XML object and returns 
	an XMLList of comments.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.comments, comments
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList of the comments in the XML objects.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Calls the <codeph class="+ topic/ph pr-d/codeph ">comments()</codeph> method of each XML object and returns 
	an XMLList of comments.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/comments()" class="- topic/link "><linktext class="- topic/linktext ">XML.comments()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:contains" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">contains</apiName><shortdesc class="- topic/shortdesc ">
	Checks whether the XMLList object contains an XML object that is equal to the given 
	value parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.contains, contains
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the XMLList contains the XML object declared in the <codeph class="+ topic/ph pr-d/codeph ">value</codeph> parameter, 
	then <codeph class="+ topic/ph pr-d/codeph ">true</codeph>; otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XML object to compare against the current XMLList object. 
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Checks whether the XMLList object contains an XML object that is equal to the given 
	<codeph class="+ topic/ph pr-d/codeph ">value</codeph> parameter.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:copy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">copy</apiName><shortdesc class="- topic/shortdesc ">
	Returns a copy of the given XMLList object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.copy, copy
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The copy of the XMLList object.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Returns a copy of the given XMLList object. The copy is a duplicate of the entire tree of nodes.
	The copied XML object has no parent and returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if you attempt to call the <codeph class="+ topic/ph pr-d/codeph ">parent()</codeph> method.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:descendants" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">descendants</apiName><shortdesc class="- topic/shortdesc ">
	Returns all descendants (children, grandchildren, great-grandchildren, and so on) of the XML object 
	that have the given name parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.descendants, descendants
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object of the matching descendants (children, grandchildren, and so on) of the XML objects 
	in the original list. If there are no descendants, returns an empty XMLList object.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the element to match.
	
 	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Returns all descendants (children, grandchildren, great-grandchildren, and so on) of the XML object 
	that have the given <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter. The <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter can be a 
	QName object, a String data type, or any other data type that is then converted to a String
	data type.
	
	<p class="- topic/p ">To return all descendants, use
	the asterisk (~~) parameter. If no parameter is passed,
	the string "~~" is passed and returns all descendants of the XML object.</p>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/descendants()" class="- topic/link "><linktext class="- topic/linktext ">XML.descendants()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:elements" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">elements</apiName><shortdesc class="- topic/shortdesc ">
	Calls the elements() method of each XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.elements, elements
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object of the matching child elements of the XML objects.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the elements to match.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Calls the <codeph class="+ topic/ph pr-d/codeph ">elements()</codeph> method of each XML object. The <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter is 
	passed to the <codeph class="+ topic/ph pr-d/codeph ">descendants()</codeph> method. If no parameter is passed, the string "~~" is passed to the 
	<codeph class="+ topic/ph pr-d/codeph ">descendants()</codeph> method.
	
 	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/elements()" class="- topic/link "><linktext class="- topic/linktext ">XML.elements()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:hasComplexContent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasComplexContent</apiName><shortdesc class="- topic/shortdesc ">
	Checks whether the XMLList object contains complex content.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.hasComplexContent, hasComplexContent
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the XMLList object contains complex content, then <codeph class="+ topic/ph pr-d/codeph ">true</codeph>; otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Checks whether the XMLList object contains complex content. An XMLList object is 
	considered to contain complex content if it is not empty and either of the following conditions is true: 
	
	<ul class="- topic/ul "><li class="- topic/li ">The XMLList object contains a single XML item with complex content.</li><li class="- topic/li ">The XMLList object contains elements.</li></ul>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XMLList/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">hasSimpleContent()</linktext></link><link href="#XML/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasComplexContent()</linktext></link><link href="#XML/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasSimpleContent()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:hasOwnProperty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasOwnProperty</apiName><shortdesc class="- topic/shortdesc ">
	Checks for the property specified by p.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.hasOwnProperty, hasOwnProperty
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the parameter exists, then <codeph class="+ topic/ph pr-d/codeph ">true</codeph>; otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">p</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The property to match.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Checks for the property specified by <codeph class="+ topic/ph pr-d/codeph ">p</codeph>. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:hasSimpleContent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasSimpleContent</apiName><shortdesc class="- topic/shortdesc ">
	Checks whether the XMLList object contains simple content.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.hasSimpleContent, hasSimpleContent
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the XMLList contains simple content, then <codeph class="+ topic/ph pr-d/codeph ">true</codeph>; otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Checks whether the XMLList object contains simple content. An XMLList object is 
	considered to contain simple content if one or more of the following 
	conditions is true:
	<ul class="- topic/ul "><li class="- topic/li ">The XMLList object is empty</li><li class="- topic/li ">The XMLList object contains a single XML item with simple content</li><li class="- topic/li ">The XMLList object contains no elements</li></ul>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XMLList/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">hasComplexContent()</linktext></link><link href="#XML/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasComplexContent()</linktext></link><link href="#XML/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasSimpleContent()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:length" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
	Returns the number of properties in the XMLList object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.length, length
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of properties in the XMLList object. 
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Returns the number of properties in the XMLList object.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:normalize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">normalize</apiName><shortdesc class="- topic/shortdesc ">
	Merges adjacent text nodes and eliminates empty text nodes for each 
	of the following: all text nodes in the XMLList, all the XML objects 
	contained in the XMLList, and the descendants of all the XML objects in 
	the XMLList.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.normalize, normalize
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The normalized XMLList object.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Merges adjacent text nodes and eliminates empty text nodes for each 
	of the following: all text nodes in the XMLList, all the XML objects 
	contained in the XMLList, and the descendants of all the XML objects in 
	the XMLList. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:parent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parent</apiName><shortdesc class="- topic/shortdesc ">
	Returns the parent of the XMLList object if all items in the XMLList object have the same parent.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.parent, parent
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Returns the parent XML object.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Returns the parent of the XMLList object if all items in the XMLList object have the same parent.
	If the XMLList object has no parent or different parents, the method returns <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:processingInstructions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">processingInstructions</apiName><shortdesc class="- topic/shortdesc ">
	If a name parameter is provided, lists all the children of the XMLList object that 
	contain processing instructions with that name.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.processingInstructions, processingInstructions
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object that contains the processing instructions for each XML object.
	
 	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the processing instructions to match.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	If a <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter is provided, lists all the children of the XMLList object that 
	contain processing instructions with that name. With no parameters, the method lists all the 
	children of the XMLList object that contain any processing instructions.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/processingInstructions()" class="- topic/link "><linktext class="- topic/linktext ">XML.processingInstructions()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:propertyIsEnumerable" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">propertyIsEnumerable</apiName><shortdesc class="- topic/shortdesc ">
	Checks whether the property p is in the set of properties that can be iterated in a for..in statement 	
	applied to the XMLList object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.propertyIsEnumerable, propertyIsEnumerable
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the property can be iterated in a <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> statement, then <codeph class="+ topic/ph pr-d/codeph ">true</codeph>; otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">p</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The index of a property to check.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Checks whether the property <codeph class="+ topic/ph pr-d/codeph ">p</codeph> is in the set of properties that can be iterated in a <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> statement 	
	applied to the XMLList object. This is <codeph class="+ topic/ph pr-d/codeph ">true</codeph> only if <codeph class="+ topic/ph pr-d/codeph ">toNumber(p)</codeph> is greater than or equal to 0 
	and less than the length of the XMLList object. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:text" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">text</apiName><shortdesc class="- topic/shortdesc ">
	Calls the text() method of each XML 
	object and returns an XMLList object that contains the results.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.text, text
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object of all XML properties of the XMLList object that represent XML text nodes.
	
 	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Calls the <codeph class="+ topic/ph pr-d/codeph ">text()</codeph> method of each XML 
	object and returns an XMLList object that contains the results.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/text()" class="- topic/link "><linktext class="- topic/linktext ">XML.text()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	Returns a string representation of all the XML objects in an XMLList object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.toString, toString 
	
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string representation of the XML object.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Returns a string representation of all the XML objects in an XMLList object. The rules for 
	this conversion depend on whether the XML object has simple content or complex content:
	
	<ul class="- topic/ul "><li class="- topic/li ">If the XML object has simple content, <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> returns the string contents of the 
	XML object with  the following stripped out: the start tag, attributes, namespace declarations, and 
	end tag.</li></ul>
	
	<ul class="- topic/ul "><li class="- topic/li "> If the XML object has complex content, <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> returns an XML encoded string 
	representing the entire XML object, including the start tag, attributes, namespace declarations, 
	and end tag.</li></ul>
	
	<p class="- topic/p ">To return the entire XML object every time, use the <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> method.</p>
	
	
	</apiDesc><example conref="examples\XMLToStringExample1.as" class="- topic/example "> The following example shows what the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method returns when the 
 XML object has simple content:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var test:XML = &lt;type name="Joe"&gt;example&lt;/type&gt;;
trace(test.toString()); //example
</codeblock></example><example conref="examples\XMLToStringExample2.as" class="- topic/example "> The following example shows what the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method returns when the 
 XML object has complex content:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var test:XML = 
&lt;type name="Joe"&gt;
    &lt;base name="Bob"&gt;&lt;/base&gt;
    example
&lt;/type&gt;;
trace(test.toString());
  // &lt;type name="Joe"&gt;
  // &lt;base name="Bob"/&gt;
  // example
  // &lt;/type&gt; 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XMLList/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">hasComplexContent()</linktext></link><link href="#XMLList/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">hasSimpleContent()</linktext></link><link href="#XMLList/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">toXMLString()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:toXMLString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toXMLString</apiName><shortdesc class="- topic/shortdesc ">
	Returns a string representation of all the XML objects in an XMLList object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.toXMLString, toXMLString
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string representation of the XML object.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Returns a string representation of all the XML objects in an XMLList object. 
	Unlike the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method, the <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> 
	method always returns the start tag, attributes,
	and end tag of the XML object, regardless of whether the XML object has simple content 
	or complex content. (The <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method strips out these items for XML 
	objects that contain simple content.)
	
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XMLList/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	Returns the XMLList object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.valueOf, valueOf
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Returns the current XMLList object.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Returns the XMLList object. 
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier languages="" id="globalClassifier:Boolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Boolean</apiName><shortdesc class="- topic/shortdesc ">
A Boolean object is a data type that can have one of two values, either true or false,  
used for logical operations.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>Objects/Core/Boolean/
 
 </refpath></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
A Boolean object is a data type that can have one of two values, either <codeph class="+ topic/ph pr-d/codeph ">true</codeph> or <codeph class="+ topic/ph pr-d/codeph ">false</codeph>,  
used for logical operations. Use the Boolean 
class to retrieve the primitive data type or string representation of a Boolean object. 

<p class="- topic/p ">To create a Boolean object, you can use the constructor or the global function, or assign a literal value. 
It doesn't matter which technique you use; in ActionScript 3.0, all three techniques are equivalent. (This is 
different from JavaScript, where a Boolean object is distinct from the Boolean primitive type.)</p>

  <p class="- topic/p ">The following lines of code are equivalent:</p>
<codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var flag:Boolean = true;
var flag:Boolean = new Boolean(true);
var flag:Boolean = Boolean(true);
</codeblock>

 </apiDesc><example conref="examples\BooleanExample.as" class="- topic/example "> The following example toggles and displays each corresponding value for the Boolean object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
    import flash.display.Sprite;

    public class BooleanExample extends Sprite {
        private var flag:Boolean;

        public function BooleanExample() {
            trace(flag);    // false
            toggle();
            trace(flag);    // true
            toggle();
            trace(flag);    // false
        }
        
        private function toggle():void{
            flag = !flag;
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="Boolean:Boolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Boolean</apiName><shortdesc class="- topic/shortdesc ">
 Creates a Boolean object with the specified value.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new boolean, constructor
  
  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Any expression. 
 
 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Creates a Boolean object with the specified value. If you omit the <codeph class="+ topic/ph pr-d/codeph ">expression</codeph> 
 parameter, the Boolean object is initialized with a value of <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. If you 
 specify a value for the <codeph class="+ topic/ph pr-d/codeph ">expression</codeph> parameter, the method evaluates it and returns the result 
 as a Boolean value according to the rules in the global <codeph class="+ topic/ph pr-d/codeph ">Boolean()</codeph> function.
 
 </apiDesc><example class="- topic/example ">The following code creates a new Boolean object, initialized to a value of <codeph class="+ topic/ph pr-d/codeph ">false</codeph> called <codeph class="+ topic/ph pr-d/codeph ">myBoolean</codeph>:
 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var myBoolean:Boolean = new Boolean();
 </codeblock>
 
 </example></apiConstructorDetail><related-links class="- topic/related-links "><link href="package.html#Boolean()" class="- topic/link "><linktext class="- topic/linktext ">Boolean() global function</linktext></link></related-links></apiConstructor><apiOperation id="Boolean:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
      Returns the string representation ("true" or 
     "false") of the Boolean object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">boolean.toString, toString
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string <codeph class="+ topic/ph pr-d/codeph ">"true"</codeph> or <codeph class="+ topic/ph pr-d/codeph ">"false"</codeph>.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Returns the string representation (<codeph class="+ topic/ph pr-d/codeph ">"true"</codeph> or 
     <codeph class="+ topic/ph pr-d/codeph ">"false"</codeph>) of the Boolean object. The output is not localized, and is <codeph class="+ topic/ph pr-d/codeph ">"true"</codeph> or 
     <codeph class="+ topic/ph pr-d/codeph ">"false"</codeph> regardless of the system language.
     
     </apiDesc><example class="- topic/example ">This example creates a variable of type Boolean and then uses the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method
     to convert the value to a string for use in an array of strings:
     <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var myStringArray:Array = new Array("yes", "could be");
     var myBool:Boolean = 0;
     myBool.toString();
     myStringArray.push(myBool);
     trace(myStringArray); // yes,could be,false
     </codeblock>
     
     
     </example></apiOperationDetail></apiOperation><apiOperation id="Boolean:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
     Returns true if the value of the specified Boolean 
     object is true; false otherwise.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">boolean.valueOf, valueOf
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A Boolean value.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the value of the specified Boolean 
     object is true; <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.  
     
     </apiDesc><example class="- topic/example ">The following example shows how this method works, and also shows that the 
     value of a new Boolean object is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>:
     <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var myBool:Boolean = new Boolean();
     trace(myBool.valueOf());   // false
     myBool = (6==3+3);
     trace(myBool.valueOf());   // true  
     </codeblock>
     
     
     </example></apiOperationDetail></apiOperation></apiClassifier><apiClassifier languages="" id="globalClassifier:Error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Error</apiName><shortdesc class="- topic/shortdesc ">
 The Error class contains information about an error that occurred in a script.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">An Error is thrown when an error occurs in a script.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The Error class contains information about an error that occurred in a script. In developing ActionScript 3.0 applications,
 when you run your compiled code in the debugger version of a Flash runtime, a dialog box displays exceptions of type Error, 
 or of a subclass, to help you troubleshoot the code.
 You create an Error object by using the <codeph class="+ topic/ph pr-d/codeph ">Error</codeph> constructor function. 
 Typically, you throw a new Error object from within a <codeph class="+ topic/ph pr-d/codeph ">try</codeph> 
 code block that is caught by a <codeph class="+ topic/ph pr-d/codeph ">catch</codeph> or <codeph class="+ topic/ph pr-d/codeph ">finally</codeph> code block.
 <p class="- topic/p ">You can also create a subclass of the Error class and throw instances of that subclass.</p>
 
 </apiDesc><example conref="examples\ErrorExample.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">ErrorExample</codeph> class to show 
 how a custom error can be generated.  This is accomplished with the following 
 steps:
 <ol class="- topic/ol "><li class="- topic/li ">A local variable <codeph class="+ topic/ph pr-d/codeph ">nullArray</codeph> of Array type is declared, but notice 
     that a new Array object is never created.</li><li class="- topic/li ">The constructor attempts to load a value into the uninitialized array by using
     the <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> method within an error handling code segment that catches a 
     custom error by using the <codeph class="+ topic/ph pr-d/codeph ">CustomError</codeph> class, which extends <codeph class="+ topic/ph pr-d/codeph ">Error</codeph>.</li><li class="- topic/li ">When the CustomError is thrown, the constructor catches it and then outputs an 
  error message by using the <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> statement. </li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    public class ErrorExample extends Sprite 
    {
        private var nullArray:Array;
        public function ErrorExample() 
        {
            try 
            {
                nullArray.push("item");
            }
            catch(e:Error) 
            {
                throw new CustomError("nullArray is null");
            }
        }
    }
}

class CustomError extends Error 
{
    public function CustomError(message:String) 
    {
        super(message);
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="Error:Error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Error</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new Error object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, constructor
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string associated with the Error object; this parameter 
	 is optional. 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">id</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A reference number to associate with the specific error message.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Creates a new Error instance with the specified error message.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new Error object. If <codeph class="+ topic/ph pr-d/codeph ">message</codeph> is specified, its value is assigned 
	 to the object's <codeph class="+ topic/ph pr-d/codeph ">Error.message</codeph> property.
	 
	 
	 </apiDesc><example conref="examples\Error.1.as" class="- topic/example "> The following example creates a new Error object <codeph class="+ topic/ph pr-d/codeph ">err</codeph> and then, using the
 <codeph class="+ topic/ph pr-d/codeph ">Error()</codeph> constructor, assigns the string <codeph class="+ topic/ph pr-d/codeph ">"New Error Message"</codeph> to 
 <codeph class="+ topic/ph pr-d/codeph ">err</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var err:Error = new Error();
trace(err.toString());    // Error

err = new Error("New Error Message");
trace(err.toString());    // Error: New Error Message
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="statements.html#throw" class="- topic/link "><linktext class="- topic/linktext ">statements.html#throw</linktext></link><link href="statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">statements.html#try..catch..finally</linktext></link></related-links></apiConstructor><apiOperation id="Error:getStackTrace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getStackTrace</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the call stack for an error as a string at the time of the error's construction (for the debugger version
	 of Flash Player and the AIR Debug Launcher (ADL) only; returns null if not using the debugger version
	 of Flash Player or the ADL.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, call stack
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string representation of the call stack.
	 
	 
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the call stack for an error in a readable form.
	 
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the call stack for an error as a string at the time of the error's construction (for the debugger version
	 of Flash Player and the AIR Debug Launcher (ADL) only; returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if not using the debugger version
	 of Flash Player or the ADL. As shown in the following example, the first line of the return value is the 
	 string representation of the exception object, followed by the stack trace elements:
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 TypeError: null cannot be converted to an object
	     at com.xyz.OrderEntry.retrieveData(OrderEntry.as:995)
	     at com.xyz.OrderEntry.init(OrderEntry.as:200)
	     at com.xyz.OrderEntry.$construct(OrderEntry.as:148)
   	 </codeblock>
	 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Error:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	
	Returns the string "Error" by default or the value contained in the Error.message property,
    if defined.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error.toString, toString
	 
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The error message.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns the error message, or the word "Error" if the message is 
	undefined.
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	Returns the string <codeph class="+ topic/ph pr-d/codeph ">"Error"</codeph> by default or the value contained in the <codeph class="+ topic/ph pr-d/codeph ">Error.message</codeph> property,
    if defined.
	
    </apiDesc><example conref="examples\Error.toString.1.as" class="- topic/example "> The following example creates a new Error object <codeph class="+ topic/ph pr-d/codeph ">err</codeph> and then, using the
 <codeph class="+ topic/ph pr-d/codeph ">Error()</codeph> constructor, assigns the string <codeph class="+ topic/ph pr-d/codeph ">"New Error Message"</codeph> to 
 <codeph class="+ topic/ph pr-d/codeph ">err</codeph>.  Finally, the <codeph class="+ topic/ph pr-d/codeph ">message</codeph> property is set to <codeph class="+ topic/ph pr-d/codeph ">"Another New Error Message"</codeph>,
 which overwrites <codeph class="+ topic/ph pr-d/codeph ">"New Error Message"</codeph>.
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var err:Error = new Error();
trace(err.toString());    // Error

err = new Error("New Error Message");
trace(err.toString());    // Error: New Error Message

err.message = "Another New Error Message";
trace(err.toString());    // Error: Another New Error Message
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Error/message" class="- topic/link "><linktext class="- topic/linktext ">Error.message</linktext></link><link href="statements.html#throw" class="- topic/link "><linktext class="- topic/linktext ">statements.html#throw</linktext></link><link href="statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">statements.html#try..catch..finally</linktext></link></related-links></apiOperation><apiValue id="Error:message" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">message</apiName><shortdesc class="- topic/shortdesc ">
	 Contains the message associated with the Error object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error.message, message
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Contains the error message associated with the Error instance.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Contains the message associated with the Error object. By default, the value of this property 
	 is "<codeph class="+ topic/ph pr-d/codeph ">Error</codeph>". You can specify a <codeph class="+ topic/ph pr-d/codeph ">message</codeph> property when you create an 
	 Error object by passing the error string to the <codeph class="+ topic/ph pr-d/codeph ">Error</codeph> constructor function.
	 
	 
 	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="statements.html#throw" class="- topic/link "><linktext class="- topic/linktext ">statements.html#throw</linktext></link><link href="statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">statements.html#try..catch..finally</linktext></link></related-links></apiValue><apiValue id="Error:name" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
	  Contains the name of the Error object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error.name, name
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The name of the Error instance.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	  Contains the name of the Error object. By default, the value of this property is "<codeph class="+ topic/ph pr-d/codeph ">Error</codeph>".
	 
 	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="statements.html#throw" class="- topic/link "><linktext class="- topic/linktext ">statements.html#throw</linktext></link><link href="statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">statements.html#try..catch..finally</linktext></link></related-links></apiValue><apiValue id="Error:errorID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">errorID</apiName><shortdesc class="- topic/shortdesc ">
     Contains the reference number associated with the specific error message.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error.errorID, errorID
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Contains the error number.
     
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Contains the reference number associated with the specific error message. For a custom Error object,
     this number is the value from the <codeph class="+ topic/ph pr-d/codeph ">id</codeph> parameter supplied in the constructor.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:TypeError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">TypeError</apiName><shortdesc class="- topic/shortdesc ">
 A TypeError exception is thrown when the actual type of an operand is different
 from the expected type.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, TypeError
 
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A TypeError exception is thrown when the actual type of an operand is different
 from the expected type. 
 <p class="- topic/p ">
 In addition, this exception is thrown when:
  <ul class="- topic/ul "><li class="- topic/li ">An actual parameter to a function or method could not be coerced to the formal 
 parameter type.</li><li class="- topic/li ">A value is assigned to a variable and cannot be coerced to the variable's type.</li><li class="- topic/li ">The right side of the <codeph class="+ topic/ph pr-d/codeph ">is</codeph> or <codeph class="+ topic/ph pr-d/codeph ">instanceof</codeph> operator is not a valid type.</li><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">super</codeph> keyword is used illegally.</li><li class="- topic/li ">A property lookup results in more than one binding, and is therefore ambiguous.</li><li class="- topic/li ">A method is invoked on an incompatible object.  For example, a TypeError
 exception is thrown if a RegExp class method is "grafted" onto a generic object
 and then invoked.</li></ul>
 </p>
 
 </apiDesc><example conref="examples\TypeErrorExample.as" class="- topic/example "> The following example shows how a TypeError exception can 
 be generated and handled within a <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph> statement. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;

    public class TypeErrorExample extends Sprite {
        public function TypeErrorExample() {
            try {
                var child:Object = new Object();
                addChild(DisplayObject(child));
            }
            catch(e:TypeError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="operators.html#is" class="- topic/link "><linktext class="- topic/linktext ">is operator</linktext></link><link href="operators.html#instanceof" class="- topic/link "><linktext class="- topic/linktext ">instanceof operator</linktext></link><link href="statements.html#super" class="- topic/link "><linktext class="- topic/linktext ">super statement</linktext></link><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp class</linktext></link></related-links><apiConstructor id="TypeError:TypeError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">TypeError</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new TypeError object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Contains the message associated with the TypeError object. 
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new TypeError object.
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:arguments" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">arguments</apiName><shortdesc class="- topic/shortdesc ">
 An arguments object is used to store and access a function's arguments.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="8" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">An arguments object is used to store and access a function's arguments.
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 An arguments object is used to store and access a function's arguments. 
 Within a function's body, you can access its arguments object by using the local arguments 
 variable.
 <p class="- topic/p ">
 The arguments are stored as array elements: the first is accessed as 
 <codeph class="+ topic/ph pr-d/codeph ">arguments[0]</codeph>, the second as <codeph class="+ topic/ph pr-d/codeph ">arguments[1]</codeph>, and so on. The
 <codeph class="+ topic/ph pr-d/codeph ">arguments.length</codeph> property indicates the number of arguments passed to
 the function. There may be a different number of arguments passed than 
 the function declares.
 </p>
 <p class="- topic/p ">
 Unlike previous versions of ActionScript, ActionScript 3.0 has no <codeph class="+ topic/ph pr-d/codeph ">arguments.caller</codeph> property.
 To get a reference to the function
 that called the current function, you must pass a reference to that function as an
 argument. An example of this technique can be found in the example for <codeph class="+ topic/ph pr-d/codeph ">arguments.callee</codeph>.
 </p>
 <p class="- topic/p ">ActionScript 3.0 includes a new <codeph class="+ topic/ph pr-d/codeph ">...(rest)</codeph> keyword that is recommended instead of the 
 arguments class.</p>
 
 </apiDesc><example conref="examples\ArgumentsExample.as" class="- topic/example "> The following example shows uses for various <codeph class="+ topic/ph pr-d/codeph ">arguments</codeph> properties,
 such as <codeph class="+ topic/ph pr-d/codeph ">callee</codeph> and <codeph class="+ topic/ph pr-d/codeph ">length</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    
    public class ArgumentsExample extends Sprite {
        public function ArgumentsExample() {
                println("Hello World");
        }
        
        public function println(str:String):void {
            trace(arguments.callee == this.println); // true
            trace(arguments.length);                 // 1
            trace(arguments[0]);                     // Hello World
            trace(str);                                // Hello World
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="statements.html#..._(rest)_parameter" class="- topic/link "><linktext class="- topic/linktext ">...(rest)</linktext></link><link href="#Function" class="- topic/link "><linktext class="- topic/linktext ">Function</linktext></link></related-links><apiValue id="arguments:callee" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">callee</apiName><shortdesc class="- topic/shortdesc ">
	 A reference to the currently executing function.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="8" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Function</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">A reference to the currently executing function.
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 A reference to the currently executing function.
	 
	 </apiDesc><example conref="examples\arguments.callee.1.as" class="- topic/example "> The following code shows how to get a reference to the function
 that calls the function named <codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph>. The <codeph class="+ topic/ph pr-d/codeph ">firstFunction()</codeph> function has
 the Boolean argument of <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 
 to demonstrate that <codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph> successfully calls <codeph class="+ topic/ph pr-d/codeph ">firstFunction()</codeph> and
 to prevent an infinite loop of each function calling the other.
  
 <p class="- topic/p ">Because the <codeph class="+ topic/ph pr-d/codeph ">callSecond</codeph> parameter is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, <codeph class="+ topic/ph pr-d/codeph ">firstFunction()</codeph> 
 calls <codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph> and passes a reference to itself as the only
 argument. The function <codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph> receives this argument and stores it
 using a parameter named <codeph class="+ topic/ph pr-d/codeph ">caller</codeph>, which is of data type Function. From within <codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph>, the
 <codeph class="+ topic/ph pr-d/codeph ">caller</codeph> parameter is then used to call the <codeph class="+ topic/ph pr-d/codeph ">firstFunction</codeph> function,
 but this time with the <codeph class="+ topic/ph pr-d/codeph ">callSecond</codeph> argument set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</p>
 <p class="- topic/p ">When execution returns to <codeph class="+ topic/ph pr-d/codeph ">firstFunction()</codeph>, the <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>
 statement is executed because <codeph class="+ topic/ph pr-d/codeph ">callSecond</codeph> is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  package {
    import flash.display.Sprite;
    
    public class ArgumentsExample extends Sprite {
        private var count:int = 1;
        
        public function ArgumentsExample() {
            firstFunction(true);
        }

        public function firstFunction(callSecond:Boolean) {
            trace(count + ": firstFunction");
            if(callSecond) {
                secondFunction(arguments.callee);
            }
            else {
                trace("CALLS STOPPED");
            }
        }

        public function secondFunction(caller:Function) {
            trace(count + ": secondFunction\n");
            count++;
            caller(false);
        }        
    }
} 
</codeblock></example></apiValueDetail></apiValue><apiValue id="arguments:length" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
	 The number of arguments passed to the function.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="8" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The number of parameters passed to the function.
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The number of arguments passed to the function. This may be more or less
	 than the function declares.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:String" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">String</apiName><shortdesc class="- topic/shortdesc ">
 The String class is a data type that represents a string of characters.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The String class is a data type that represents a string of characters. The String class 
 provides methods and properties that let you manipulate primitive string value types. 
 You can convert the value of any object into a String data type object using the <codeph class="+ topic/ph pr-d/codeph ">String()</codeph>
 function. 
 <p class="- topic/p ">
 Because all string indexes are zero-based, the index of the last character 
 for any string <codeph class="+ topic/ph pr-d/codeph ">x</codeph> is <codeph class="+ topic/ph pr-d/codeph ">x.length - 1</codeph>.
 </p><p class="- topic/p ">
 You can call any of the methods of the String class whether you use the constructor method
 <codeph class="+ topic/ph pr-d/codeph ">new String()</codeph> to create a new string variable or simply assign a string literal value. 
 Unlike previous versions of ActionScript, it makes no difference whether you use the constructor,
 the global function, or simply assign a string literal value. The following lines of code are equivalent:
 </p>
 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var str:String = new String("foo");
 var str:String = "foo";
 var str:String = String("foo");</codeblock>
 <p class="- topic/p ">When setting a string variable to <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>, the Flash runtimes coerce <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> 
 to <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. So, the statement:</p>
 <pre xml:space="preserve" class="- topic/pre ">
 var s:String = undefined;</pre>
 sets the value to <codeph class="+ topic/ph pr-d/codeph ">null</codeph> instead of <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>. Use the <codeph class="+ topic/ph pr-d/codeph ">String()</codeph>
 function if you need to use <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
 </apiDesc><example conref="examples\StringExample.as" class="- topic/example "> The following example uses the StringExample and 
 StringHelper classes to show how various methods of the String class are used.  
 This is accomplished using the following steps:
 <ol class="- topic/ol "><li class="- topic/li ">The constructor for StringExample declares several local String instances,
     which are initialized with various strings and a new StringHelper object.</li><li class="- topic/li ">The StringHelper class has the following methods:
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">replace()</codeph>: calls the <codeph class="+ topic/ph pr-d/codeph ">split()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">join()</codeph> methods of 
         String to remove a substring of the string passed in with a new one.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">trim()</codeph>: calls both <codeph class="+ topic/ph pr-d/codeph ">trimBack()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">trimFront()</codeph> using the
         strings passed in and returns the updated string.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">trimFront()</codeph>:recursively removes all characters that match the <codeph class="+ topic/ph pr-d/codeph ">char</codeph>
         parameter, starting from the front of the string and working toward the end, until the first character in 
         the string does not match <codeph class="+ topic/ph pr-d/codeph ">char</codeph> and returns the updated string.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">trimBack()</codeph>: recursively removes all characters that match the <codeph class="+ topic/ph pr-d/codeph ">char</codeph>
         parameter, starting from the end of the string and working backward, until the last character in 
         the string does not match <codeph class="+ topic/ph pr-d/codeph ">char</codeph> and returns the updated string.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">stringToCharacter()</codeph>: returns the first character of the string passed to it.</li></ul>
  </li><li class="- topic/li ">Three strings are then produced using the declared string variables with a call to the
     <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> method used to produce the second string and <codeph class="+ topic/ph pr-d/codeph ">trim()</codeph> to produce the
     third string.</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class StringExample extends Sprite {
        public function StringExample() {
            var companyStr:String = new String("     Company X");
            var productStr:String = "Product Z Basic     ";
            var emptyStr:String = " ";
            var strHelper:StringHelper = new StringHelper();

            var companyProductStr:String = companyStr + emptyStr + productStr;
            trace("'" + companyProductStr + "'");    // '     Company X Product Z Basic     '

            companyProductStr = strHelper.replace(companyProductStr, "Basic", "Professional");
            trace("'" + companyProductStr + "'");    // '     Company X Product Z Professional     '

            companyProductStr = strHelper.trim(companyProductStr, emptyStr);
            trace("'" + companyProductStr + "'");    // 'Company X Product Z Professional'
        }
    }
}

class StringHelper {
    public function StringHelper() {
    }

    public function replace(str:String, oldSubStr:String, newSubStr:String):String {
        return str.split(oldSubStr).join(newSubStr);
    }

    public function trim(str:String, char:String):String {
        return trimBack(trimFront(str, char), char);
    }

    public function trimFront(str:String, char:String):String {
        char = stringToCharacter(char);
        if (str.charAt(0) == char) {
            str = trimFront(str.substring(1), char);
        }
        return str;
    }

    public function trimBack(str:String, char:String):String {
        char = stringToCharacter(char);
        if (str.charAt(str.length - 1) == char) {
            str = trimBack(str.substring(0, str.length - 1), char);
        }
        return str;
    }

    public function stringToCharacter(str:String):String {
        if (str.length == 1) {
            return str;
        }
        return str.slice(0, 1);
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="package.html#String()" class="- topic/link "><linktext class="- topic/linktext ">String() global function</linktext></link></related-links><apiConstructor id="String:String" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">String</apiName><shortdesc class="- topic/shortdesc ">
  Creates a new String object initialized to the specified string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, new string, new, constructor
   
   </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The initial value of the new String object.
  
  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Creates a new String object initialized to the specified string.
  
  <p class="- topic/p ">
  <b class="+ topic/ph hi-d/b ">Note: </b>Because string literals use less overhead than String 
  objects and are generally easier to use, you should use string literals instead of the 
  String class unless you have a good reason to use a String object rather than a string literal.
  </p>
  
  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="String:AS3:charAt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">charAt</apiName><shortdesc class="- topic/shortdesc ">
     Returns the character in the position specified by the index parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.charat, charat, character at
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The character at the specified index. Or an empty string if the
     specified index is outside the range of this string's indices.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">index</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer specifying the position of a character in the string. The first 
     character is indicated by <codeph class="+ topic/ph pr-d/codeph ">0</codeph>, and the last character is indicated by 
     <codeph class="+ topic/ph pr-d/codeph ">my_str.length - 1</codeph>.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns the character in the position specified by the <codeph class="+ topic/ph pr-d/codeph ">index</codeph> parameter. 
     If <codeph class="+ topic/ph pr-d/codeph ">index</codeph> is not a number from 0 to <codeph class="+ topic/ph pr-d/codeph ">string.length - 1</codeph>, an 
     empty string is returned.
     <p class="- topic/p ">
     This method is similar to <codeph class="+ topic/ph pr-d/codeph ">String.charCodeAt()</codeph> except that the returned 
     value is a character, not a 16-bit integer character code.
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/charCodeAt()" class="- topic/link "><linktext class="- topic/linktext ">charCodeAt()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:charCodeAt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">charCodeAt</apiName><shortdesc class="- topic/shortdesc ">
     Returns the numeric Unicode character code of the character at the specified  
     index.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.charcodeat, charcodeat, character code at
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The Unicode character code of the character at the specified index. Or <codeph class="+ topic/ph pr-d/codeph ">
     NaN</codeph> if the index is outside the range of this string's indices.
     <p class="- topic/p ">Unicode values are defined in the <xref href="http://www.unicode.org/ucd/" scope="external" class="- topic/xref ">Unicode Character Database</xref>
     specification. </p>       
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">index</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer that specifies the position of a character in the string. The 
     first character is indicated by <codeph class="+ topic/ph pr-d/codeph ">0,</codeph> and the last character is indicated by 
     <codeph class="+ topic/ph pr-d/codeph ">my_str.length - 1</codeph>.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns the numeric Unicode character code of the character at the specified  
     <codeph class="+ topic/ph pr-d/codeph ">index</codeph>. If <codeph class="+ topic/ph pr-d/codeph ">index</codeph> is not a number from 0 to <codeph class="+ topic/ph pr-d/codeph ">
     string.length - 1</codeph>, <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> is returned.
     <p class="- topic/p ">
     This method is similar to <codeph class="+ topic/ph pr-d/codeph ">String.charAt()</codeph> except that the returned 
     value is a 16-bit integer character code, not the actual character.
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/charAt()" class="- topic/link "><linktext class="- topic/linktext ">charAt()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:concat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">concat</apiName><shortdesc class="- topic/shortdesc ">
     Appends the supplied arguments to the end of the String object, converting them to strings if
     necessary, and returns the resulting string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.concat, concat, concatenate
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A new string consisting of this string concatenated
     with the specified parameters.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Zero or more values to be concatenated.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Appends the supplied arguments to the end of the String object, converting them to strings if
     necessary, and returns the resulting string. The original value of the source String object 
     remains unchanged.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:fromCharCode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">fromCharCode</apiName><shortdesc class="- topic/shortdesc ">
    Returns a string comprising the characters represented by the Unicode character codes
    in the parameters.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.fromcharcode, fromcharcode, from character code
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string value of the specified Unicode character codes.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charCodes</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A series of decimal integers that represent Unicode values.
    <p class="- topic/p ">Unicode values are defined in the <xref href="http://www.unicode.org/ucd/" scope="external" class="- topic/xref ">Unicode Character Database</xref>
    specification. </p>       
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns a string comprising the characters represented by the Unicode character codes
    in the parameters.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:indexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">indexOf</apiName><shortdesc class="- topic/shortdesc ">
     Searches the string and returns the position of the first occurrence of val 
     found at or after startIndex within the calling string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.indexof, indexof, index
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The index of the first occurrence of the specified substring or <codeph class="+ topic/ph pr-d/codeph ">-1</codeph>.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The substring for which to search.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An optional integer specifying the starting index of the search.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Searches the string and returns the position of the first occurrence of <codeph class="+ topic/ph pr-d/codeph ">val</codeph> 
     found at or after <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> within the calling string. This index is zero-based, 
     meaning that the first character in a string is considered to be at index 0--not index 1. If 
     <codeph class="+ topic/ph pr-d/codeph ">val</codeph> is not found, the method returns -1.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/lastIndexOf()" class="- topic/link "><linktext class="- topic/linktext ">lastIndexOf()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:lastIndexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">lastIndexOf</apiName><shortdesc class="- topic/shortdesc ">
     Searches the string from right to left and returns the index of the last occurrence 
     of val found before startIndex.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.lastindexof, lastindexof, last index of
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position of the last occurrence of the specified substring or -1 if not found.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string for which to search.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7FFFFFFF</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An optional integer specifying the starting index from which to 
     search for <codeph class="+ topic/ph pr-d/codeph ">val</codeph>. The default is the maximum value allowed for an index. 
     If <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> is not specified, the search starts at the last item in the string.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Searches the string from right to left and returns the index of the last occurrence 
     of <codeph class="+ topic/ph pr-d/codeph ">val</codeph> found before <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph>. The index is zero-based, 
     meaning that the first character is at index 0, and the last is at <codeph class="+ topic/ph pr-d/codeph ">string.length
     - 1</codeph>. If <codeph class="+ topic/ph pr-d/codeph ">val</codeph> is not found, the method returns <codeph class="+ topic/ph pr-d/codeph ">-1</codeph>.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/indexOf()" class="- topic/link "><linktext class="- topic/linktext ">indexOf()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:localeCompare" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">localeCompare</apiName><shortdesc class="- topic/shortdesc ">
     Compares the sort order of two or more strings and returns the result of the comparison as an integer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value 0 if the strings are equal. Otherwise, a negative integer if the original
     string precedes the string argument and a positive integer if the string argument precedes
     the original string. In both cases the absolute value of the number represents the difference
     between the two strings.
      
      </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">other</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string value to compare.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">values</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Optional set of more strings to compare.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Compares the sort order of two or more strings and returns the result of the comparison as an integer. While this
     method is intended to handle the comparison in a locale-specific way, the ActionScript 3.0 implementation
     does not produce a different result from other string comparisons such as the equality (<codeph class="+ topic/ph pr-d/codeph ">==</codeph>) or 
     inequality (<codeph class="+ topic/ph pr-d/codeph ">!=</codeph>) operators.
     If the strings are equivalent, the return value is 0.
     If the original string value precedes the string value specified by <codeph class="+ topic/ph pr-d/codeph ">other</codeph>, 
     the return value is a negative integer, the absolute value of which represents
     the number of characters that separates the two string values.
     If the original string value comes after <codeph class="+ topic/ph pr-d/codeph ">other</codeph>,
     the return value is a positive integer, the absolute value of which represents
     the number of characters that separates the two string values.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:match" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">match</apiName><shortdesc class="- topic/shortdesc ">
    Matches the specifed pattern against the 
    string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample><pre xml:space="preserve" class="- topic/pre "><code>
       var myPattern:RegExp = /sh./g;  
          // The dot (.) matches any character.
       var str:String = "She sells seashells by the seashore.";
       trace(str.match(myPattern));  
    
          // Output: she,sho
    
       myPattern = /sh./gi;  
          // This time, make it case insensitive (with the i flag).
       str = "She sells seashells by the seashore.";
       trace(str.match(myPattern));  
    
          // Output: She,she,sho  
    
       myPattern = RegExp = new RegExp("sh(.)", "gi")  
          // Note the grouping parentheses.
       str = "She sells seashells by the seashore.";
       trace(str.match(myPattern));  
    
          // Output: She,e,she,e,sho,o
          // Note that the result array is 
          // [[She,e],[she,e],[sho,o]] 
    </code></pre>
    
    </oldexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of strings consisting of all substrings in 
    the string that match the specified <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph>.
    
    <p class="- topic/p ">If <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> is a regular expression, in order to return an array with 
    more than one matching substring, the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (global) flag must be set
    in the regular expression: </p>
    
    <ul class="- topic/ul "><li class="- topic/li ">If the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (global) flag is <i class="+ topic/ph hi-d/i ">not</i> set,
    the return array will contain no more than one match, and the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph>
    property of the regular expression remains unchanged.</li><li class="- topic/li ">If the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (global) flag <i class="+ topic/ph hi-d/i ">is</i> set, the method starts the search at
    the beginning of the string (index position 0). If a matching substring is an empty string (which
    can occur with a regular expression such as <codeph class="+ topic/ph pr-d/codeph ">/x~~/</codeph>), the method adds that
    empty string to the array of matches, and then continues searching at the next index position. 
    The <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> property of the regular expression is set to 0 after the 
    method completes. </li></ul>
    
    <p class="- topic/p ">If no match is found, the method returns an empty array. If you pass
    no value (or an undefined value) as the <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> parameter, 
    the method returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
    
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pattern</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The pattern to match, which can be any type of object, but it is typically 
    either a string or a regular expression. If the <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> is not a regular expression
    or a string, then the method converts it to a string before executing. 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Matches the specifed <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> against the 
    string.
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:replace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">replace</apiName><shortdesc class="- topic/shortdesc ">
    Matches the specifed pattern against the string and returns a new string
    in which the first match of pattern is replaced with the content specified by repl.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The resulting string. Note that the source string remains unchanged.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pattern</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The pattern to match, which can be any type of object, but it is typically 
    either a string or a regular expression. If you specify a <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> parameter
    that is any object other than a string or a regular expression, the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method is 
    applied to the parameter and the <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> method executes using the resulting string 
    as the <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph>. 
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">repl</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Typically, the string that is inserted in place of the matching content. However, you can 
    also specify a function as this parameter. If you specify a function, the string returned  
    by the function is inserted in place of the matching content.
    
    <p class="- topic/p ">When you specify a string as the <codeph class="+ topic/ph pr-d/codeph ">repl</codeph> parameter and specify a regular expression 
    as the <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> parameter, you can use the following special <i class="+ topic/ph hi-d/i ">$ replacement codes</i>  
    in the <codeph class="+ topic/ph pr-d/codeph ">repl</codeph> string:</p>
    
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry NOWRAP="true" class="- topic/entry ">$ Code
      </entry><entry class="- topic/entry ">Replacement Text
      </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$$</codeph>
      </entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$</codeph>
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$&amp;</codeph>
      </entry><entry class="- topic/entry ">The matched substring.
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$`</codeph> 
      </entry><entry class="- topic/entry ">The portion of the string that precedes the matched substring. 
      Note that this code uses the straight left single quote character (`), 
      not the straight single quote character (') or the left curly single quote 
      character (&#145;).
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$'</codeph>
      </entry><entry class="- topic/entry ">The portion of string that follows the matched substring. 
      Note that this code uses the straight single quote character (').
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$</codeph><i class="+ topic/ph hi-d/i ">n</i>
      </entry><entry class="- topic/entry ">The <i class="+ topic/ph hi-d/i ">n</i>th captured parenthetical group match, where <i class="+ topic/ph hi-d/i ">n</i> is a single 
      digit 1-9 and <codeph class="+ topic/ph pr-d/codeph ">$</codeph><i class="+ topic/ph hi-d/i ">n</i> is not followed by a decimal digit. 
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$</codeph><i class="+ topic/ph hi-d/i ">nn</i>
      </entry><entry class="- topic/entry ">The <i class="+ topic/ph hi-d/i ">nn</i>th captured parenthetical group match, where <i class="+ topic/ph hi-d/i ">nn</i> is a two-digit 
      decimal number (01-99). If the <i class="+ topic/ph hi-d/i ">nn</i>th capture is undefined, the replacement text 
      is an empty string. 
      </entry></row></tbody></tgroup></adobetable>
    
    <p class="- topic/p ">For example, the following shows the use of the <codeph class="+ topic/ph pr-d/codeph ">$2</codeph> and <codeph class="+ topic/ph pr-d/codeph ">$1</codeph> 
    replacement codes, which represent the first and second capturing group matched:</p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var str:String = "flip-flop";
    var pattern:RegExp = /(\w+)-(\w+)/g;
    trace(str.replace(pattern, "$2-$1")); // flop-flip</codeblock>
    
    <p class="- topic/p ">When you specify a function as the <codeph class="+ topic/ph pr-d/codeph ">repl</codeph>, the <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> method
    passes the following parameters to the function:
    </p>
    
    <ul class="- topic/ul "><li class="- topic/li ">
      The matching portion of the string.
      </li><li class="- topic/li ">
      Any captured parenthetical group matches are provided as the next arguments. The number of arguments passed
      this way will vary depending on the number of parenthetical matches. You can determine the
      number of parenthetical matches by checking <codeph class="+ topic/ph pr-d/codeph ">arguments.length - 3</codeph> within the function
      code.
      </li><li class="- topic/li ">
      The index position in the string where the match begins.
      </li><li class="- topic/li ">
      The complete string.
      </li></ul>
    
    <p class="- topic/p ">For example, consider the following:</p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    var str1:String = "abc12 def34";
    var pattern:RegExp = /([a-z]+)([0-9]+)/;
    var str2:String = str1.replace(pattern, replFN);
    trace (str2);   // 12abc 34def
    
    function replFN():String {
      return arguments[2] + arguments[1];
    }</codeblock>
    
    
    <p class="- topic/p ">The call to the <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> method uses a function as the <codeph class="+ topic/ph pr-d/codeph ">repl</codeph>
    parameter. The regular expression (<codeph class="+ topic/ph pr-d/codeph ">/([a-z]([0-9]/g</codeph>) is matched twice. The 
    first time, the pattern matches the substring <codeph class="+ topic/ph pr-d/codeph ">"abc12"</codeph>, and the following list 
    of arguments is passed to the function:
    </p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    {"abc12", "abc", "12", 0, "abc12 def34"}</codeblock>
    
    
    <p class="- topic/p ">The second time, the pattern matches the substring <codeph class="+ topic/ph pr-d/codeph ">"def23"</codeph>, and the 
    following list of arguments is passed to the function:
    </p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    {"def34", "def", "34", 6, "abc123 def34"}</codeblock>
    
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Matches the specifed <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> against the string and returns a new string
    in which the first match of <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> is replaced with the content specified by <codeph class="+ topic/ph pr-d/codeph ">repl</codeph>. 
    The <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> parameter can be a string or a regular expression. The <codeph class="+ topic/ph pr-d/codeph ">repl</codeph> parameter
    can be a string or a function; if it is a function, the string returned  
    by the function is inserted in place of the match. The original string is not modified.
    
    <p class="- topic/p ">In the following example, only the first instance of "sh" (case-sensitive)
    is replaced: </p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    var myPattern:RegExp = /sh/;  
    var str:String = "She sells seashells by the seashore.";
    trace(str.replace(myPattern, "sch"));  
       // She sells seaschells by the seashore.</codeblock>
    
    <p class="- topic/p ">In the following example, all instances of "sh" (case-sensitive)
    are replaced because the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (global) flag is set in the regular expression: </p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    var myPattern:RegExp = /sh/g;  
    var str:String = "She sells seashells by the seashore.";
    trace(str.replace(myPattern, "sch"));  
       // She sells seaschells by the seaschore.</codeblock>
    
    <p class="- topic/p ">In the following example, all instance of "sh" 
    are replaced because the <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (global) flag is set in the regular expression 
    and the matches are <i class="+ topic/ph hi-d/i ">not</i> case-sensitive because the <codeph class="+ topic/ph pr-d/codeph ">i</codeph> (ignoreCase) flag is set:</p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    var myPattern:RegExp = /sh/gi;  
    var str:String = "She sells seashells by the seashore.";
    trace(str.replace(myPattern, "sch"));  
       // sche sells seaschells by the seaschore.</codeblock>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:search" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">search</apiName><shortdesc class="- topic/shortdesc ">
    Searches for the specifed pattern and returns the index of 
    the first matching substring.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample><pre xml:space="preserve" class="- topic/pre "><code>
       var str:String = "She sells seashells by the seashore.";
       var myPattern:RegExp = /sh/;  
          // This time, make it case insensitive (with the i flag).
       trace(str.match(myPattern));  
    
          // Output: 13
          // (The substring match starts at character position 13.)
    
       var myPattern:RegExp = /sh/i;
       trace(str.match(myPattern));  
    
          // Output: 0
          // (The substring match starts at character position 0 
          //   -- the first character of the source string.)
    </code></pre>
    
    </oldexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The index of the first matching substring, or <codeph class="+ topic/ph pr-d/codeph ">-1</codeph> if 
    there is no match. Note that the string is zero-indexed; the first character of 
    the string is at index 0, the last is at <codeph class="+ topic/ph pr-d/codeph ">string.length - 1</codeph>. 
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pattern</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The pattern to match, which can be any type of object but is typically 
    either a string or a regular expression.. If the <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> is not a regular expression
    or a string, then the method converts it to a string before executing. 
    Note that if you specify a regular expression, the method ignores the global flag ("g") of the 
    regular expression, and it ignores the <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> property of the regular
    expression (and leaves it unmodified). If you pass an undefined value (or no value), 
    the method returns <codeph class="+ topic/ph pr-d/codeph ">-1</codeph>.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Searches for the specifed <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> and returns the index of 
    the first matching substring. If there is no matching substring, the method returns 
    <codeph class="+ topic/ph pr-d/codeph ">-1</codeph>.
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:slice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">slice</apiName><shortdesc class="- topic/shortdesc ">
     Returns a string that includes the startIndex character 
     and all characters up to, but not including, the endIndex character.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.slice, slice
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A substring based on the specified indices.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The zero-based index of the starting point for the slice. If 
     <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> is a negative number, the slice is created from right-to-left, where 
     -1 is the last character.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer that is one greater than the index of the ending point for 
     the slice. The character indexed by the <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> parameter is not included in the extracted 
     string.  
     If <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> is a negative number, the ending point is determined by 
     counting back from the end of the string, where -1 is the last character.
     The default is the maximum value allowed for an index. If this parameter is omitted, <codeph class="+ topic/ph pr-d/codeph ">String.length</codeph> is used.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a string that includes the <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> character 
     and all characters up to, but not including, the <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> character. The original String object is not modified. 
     If the <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> parameter is not specified, then the end of the 
     substring is the end of the string. If the character indexed by <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> is the same as or to the right of the 
     character indexed by <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph>, the method returns an empty string.
     
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/substr()" class="- topic/link "><linktext class="- topic/linktext ">substr()</linktext></link><link href="#String/substring()" class="- topic/link "><linktext class="- topic/linktext ">substring()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:split" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">split</apiName><shortdesc class="- topic/shortdesc ">
     Splits a String object into an array of substrings 
     by dividing it wherever the specified delimiter parameter 
     occurs.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.split, split
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of substrings.
     
     
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">delimiter</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The pattern that specifies where to split this string. This can be any type of 
     object but is typically either a string or a regular expression. If the <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> 
     is not a regular expression or string, then the method converts it to a string before executing. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">limit</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The maximum number of items to place into the array. 
     The default is the maximum value allowed. 
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Splits a String object into an array of substrings 
     by dividing it wherever the specified <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> parameter 
     occurs. 
     
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> parameter is a regular expression, only 
     the first match at a given position of the string is considered, 
     even if backtracking could find a nonempty substring match at that
     position. For example:</p>
     
     <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var str:String = "ab";
     var results:Array = str.split(/a~~?/); // results == ["","b"]
     
     results = str.split(/a~~/); // results == ["","b"].)</codeblock>
     
     
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> parameter is a regular expression 
     containing grouping parentheses, then each time the 
     <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> is matched, the results (including any 
     undefined results) of the grouping parentheses are spliced into the
     output array. For example</p>
     
     <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var str:String = "Thi5 is a tricky-66 example.";
     var re:RegExp = /(\d+)/;
     var results:Array = str.split(re);
         // results == ["Thi","5"," is a tricky-","66"," example."]</codeblock>
     
     
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">limit</codeph> parameter is specified, then 
     the returned array will have no more than the specified 
     number of elements.</p>
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> is an empty string, an empty 
     regular expression, or a regular expression that can match an empty 
     string, each single character in the string 
     is output as an element in the array.</p>
     
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> parameter is undefined, the entire 
     string is placed into the first element of the returned 
     array. </p>     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/join()" class="- topic/link "><linktext class="- topic/linktext ">Array.join()</linktext></link><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:substr" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">substr</apiName><shortdesc class="- topic/shortdesc ">
     Returns a substring consisting of the characters that start at the specified 
     startIndex and with a length specified by len.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.substr, substr, substring
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A substring based on the specified parameters.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer that specified the index of the first character to be 
     used to create the substring. If <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> is a negative number, the 
     starting index is determined from the end of the string, where <codeph class="+ topic/ph pr-d/codeph ">-1</codeph> is the 
     last character.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">len</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The number of characters in the substring being created. 
     The default value is the maximum value allowed. If <codeph class="+ topic/ph pr-d/codeph ">len</codeph> 
     is not specified, the substring includes all the characters from <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph>
     to the end of the string.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a substring consisting of the characters that start at the specified <codeph class="+ topic/ph pr-d/codeph ">
     startIndex</codeph> and with a length specified by <codeph class="+ topic/ph pr-d/codeph ">len</codeph>. The original
     string is unmodified.
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:substring" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">substring</apiName><shortdesc class="- topic/shortdesc ">
     Returns a string consisting of the character specified by startIndex 
     and all characters up to endIndex - 1.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.substring, substring
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A substring based on the specified parameters.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer specifying the index of the first character used to create 
     the substring. Valid values for <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> are <codeph class="+ topic/ph pr-d/codeph ">0</codeph> through 
     <codeph class="+ topic/ph pr-d/codeph ">String.length</codeph>. If <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> is a negative value, <codeph class="+ topic/ph pr-d/codeph ">0
     </codeph> is used.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer that is one greater than the index of the last character in the
     extracted substring. Valid values for <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> are <codeph class="+ topic/ph pr-d/codeph ">0</codeph> through 
     <codeph class="+ topic/ph pr-d/codeph ">String.length</codeph>. The character at <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> is not included in 
     the substring. The default is the maximum value allowed for an index. 
     If this parameter is omitted, <codeph class="+ topic/ph pr-d/codeph ">String.length</codeph> is used. If 
     this parameter is a negative value, <codeph class="+ topic/ph pr-d/codeph ">0</codeph> is used.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a string consisting of the character specified by <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> 
     and all characters up to <codeph class="+ topic/ph pr-d/codeph ">endIndex - 1</codeph>. If <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> is not 
     specified, <codeph class="+ topic/ph pr-d/codeph ">String.length</codeph> is used. If the value of <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> 
     equals the value of <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph>, the method returns an empty string.
     If the value of <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> is greater than the value of <codeph class="+ topic/ph pr-d/codeph ">
     endIndex</codeph>, the parameters are automatically swapped before the function 
     executes. The original string is unmodified.
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:toLocaleLowerCase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleLowerCase</apiName><shortdesc class="- topic/shortdesc ">
     Returns a copy of this string, with all uppercase characters converted
     to lowercase.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A copy of this string with all uppercase characters converted
     to lowercase.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a copy of this string, with all uppercase characters converted
     to lowercase. The original string is unmodified. While this
     method is intended to handle the conversion in a locale-specific way, the ActionScript 3.0 implementation
     does not produce a different result from the <codeph class="+ topic/ph pr-d/codeph ">toLowerCase()</codeph> method.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/toLowerCase()" class="- topic/link "><linktext class="- topic/linktext ">toLowerCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:toLocaleUpperCase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleUpperCase</apiName><shortdesc class="- topic/shortdesc ">
     Returns a copy of this string, with all lowercase characters converted 
     to uppercase.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A copy of this string with all lowercase characters converted
     to uppercase.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a copy of this string, with all lowercase characters converted 
     to uppercase. The original string is unmodified. While this
     method is intended to handle the conversion in a locale-specific way, the ActionScript 3.0 implementation
     does not produce a different result from the <codeph class="+ topic/ph pr-d/codeph ">toUpperCase()</codeph> method.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/toUpperCase()" class="- topic/link "><linktext class="- topic/linktext ">toUpperCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:toLowerCase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLowerCase</apiName><shortdesc class="- topic/shortdesc ">
     Returns a copy of this string, with all uppercase characters converted
     to lowercase.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.tolowercase, tolowercase, to lowercase
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A copy of this string with all uppercase characters converted
     to lowercase.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a copy of this string, with all uppercase characters converted
     to lowercase. The original string is unmodified.
     
     <p class="- topic/p ">This method converts all characters (not simply A-Z) for which Unicode lowercase
     equivalents exist:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var str:String = " JOSÉ BARÇA";
     trace(str.toLowerCase()); // josé barça</codeblock>
     
     <p class="- topic/p ">These case mappings are defined in the <xref href="http://www.unicode.org/ucd/" scope="external" class="- topic/xref ">Unicode Character Database</xref>
     specification. </p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/toUpperCase()" class="- topic/link "><linktext class="- topic/linktext ">toUpperCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:toUpperCase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toUpperCase</apiName><shortdesc class="- topic/shortdesc ">
     Returns a copy of this string, with all lowercase characters converted 
     to uppercase.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.touppercase, touppercase, to uppercase
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A copy of this string with all lowercase characters converted
     to uppercase.
     
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a copy of this string, with all lowercase characters converted 
     to uppercase. The original string is unmodified.
     
     <p class="- topic/p ">This method converts all characters (not simply a-z) for which Unicode uppercase
     equivalents exist:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var str:String = "José Barça";
     trace(str.toUpperCase()); // JOSÉ BARÇA</codeblock>
     
     <p class="- topic/p ">These case mappings are defined in the <xref href="http://www.unicode.org/ucd/" scope="external" class="- topic/xref ">Unicode Character Database</xref>
     specification. </p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/toLowerCase()" class="- topic/link "><linktext class="- topic/linktext ">toLowerCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
     Returns the primitive value of a String instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>The following example creates a new instance of the String class
     and then shows that the <code>valueOf</code> method returns 
     the <i class="+ topic/ph hi-d/i ">primitive</i> value, rather than a reference to the new instance.
     
     <listing version="2.0">
     var str:String = new String("Hello World");
     var value:String = str.valueOf();
     trace(str instanceof String); // true
     trace(value instanceof String); // false
     trace(str === value); // false</listing>
     
     
     </oldexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value of the string.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns the primitive value of a String instance. This method is designed to
     convert a String object into a primitive string value. Because Flash runtimes 
     automatically call <codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> when necessary, 
     you rarely need to call this method explicitly.
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="String:length:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
     An integer specifying the number of characters in the specified String object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.length, length
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     An integer specifying the number of characters in the specified String object.
     <p class="- topic/p ">
     Because all string indexes are zero-based, the index of the last character for any 
     string <codeph class="+ topic/ph pr-d/codeph ">x</codeph> is <codeph class="+ topic/ph pr-d/codeph ">x.length - 1</codeph>.
     </p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Class" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Class</apiName><shortdesc class="- topic/shortdesc ">
 A Class object is created for each class definition in a program.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Class
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A Class object is created for each class definition in a program. Every Class object is an instance
 of the Class class. The Class object contains the static properties and methods of the class. The
 class object creates instances of the class when invoked using the <codeph class="+ topic/ph pr-d/codeph ">new</codeph> operator.
 
 <p class="- topic/p ">Some methods, such as <codeph class="+ topic/ph pr-d/codeph ">flash.net.getClassByAlias()</codeph>, return an object of type Class. 
 Other methods may have a parameter of type Class, such as <codeph class="+ topic/ph pr-d/codeph ">flash.net.registerClassAlias()</codeph>. </p>
 <p class="- topic/p ">The class name is the reference to the Class object, as this example shows:</p>
 <pre xml:space="preserve" class="- topic/pre "> 
 class Foo {
 }
 </pre> 
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">class Foo{}</codeph> statement is the class definition that creates the Class object Foo. Additionally,
 the statement <codeph class="+ topic/ph pr-d/codeph ">new Foo()</codeph> will create a new instance of class Foo, and the result will be of type Foo.</p>
 <p class="- topic/p ">Use the <codeph class="+ topic/ph pr-d/codeph ">class</codeph> statement to declare your classes. Class objects are useful for advanced 
 techniques, such as assigning classes to an existing instance object at runtime, as shown in the "Examples" 
 section below.</p>
 <p class="- topic/p ">Any static properties and methods of a class live on the class's Class object. Class, itself, declares 
 <codeph class="+ topic/ph pr-d/codeph ">prototype</codeph>.</p>
 
 <p class="- topic/p ">Generally, you do not need to declare or create variables of type Class manually. However, in the following 
 code, a class is assigned as a public Class property <codeph class="+ topic/ph pr-d/codeph ">circleClass</codeph>, and you can refer to this Class property
 as a property of the main Library class:</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
  import flash.display.Sprite;
  public class Library extends Sprite {
      
      public var circleClass:Class = Circle;
      public function Library() {
      }
  }
 }
  
 import flash.display.Shape;
 class Circle extends Shape {
  public function Circle(color:uint = 0xFFCC00, radius:Number = 10) {
      graphics.beginFill(color);
      graphics.drawCircle(radius, radius, radius);
  }
 }
 </codeblock>
 
 <p class="- topic/p ">Another SWF file can load the resulting Library.swf file and then instantiate objects of type Circle. The
 following example shows one way to get access to a child SWF file's assets. (Other techniques include using
 <codeph class="+ topic/ph pr-d/codeph ">flash.utils.getDefnitionByName()</codeph> or importing stub definitions of the child SWF file.)</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
  import flash.display.Sprite;
  import flash.display.Shape;
  import flash.display.Loader;
  import flash.net.URLRequest;
  import flash.events.Event;
  public class LibaryLoader extends Sprite {
      public function LibaryLoader() {
          var ldr:Loader = new Loader();
          var urlReq:URLRequest = new URLRequest("Library.swf");
          ldr.load(urlReq);
          ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, loaded);
      }
      private function loaded(event:Event):void {
          var library:Object = event.target.content;
          var circle:Shape = new library.circleClass();
          addChild(circle);
      }
  }
 }
 </codeblock>
 <p class="- topic/p ">In ActionScript 3.0, you can create embedded classes for external assets (such as images, sounds, or fonts) that are 
 compiled into SWF files. In earlier versions of ActionScript, you associated those assets using a linkage ID with the 
 <codeph class="+ topic/ph pr-d/codeph ">MovieClip.attachMovie()</codeph> method. In ActionScript 3.0, each embedded asset is represented by a unique embedded 
 asset class. Therefore, you can use the <codeph class="+ topic/ph pr-d/codeph ">new</codeph> operator to instantiate the asset's associated class and call 
 methods and properties on that asset.</p>
 <p product="flex" class="- topic/p ">For example, if you are using an MXML compiler to generate SWF files, you would create an embedded
 class as follows:</p>
 <codeblock product="flex" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     [Embed(source="bratwurst.jpg")]
     public var imgClass:Class;
 </codeblock>
 <p product="flex" class="- topic/p ">And, to instantiate it, you write the following:</p>
 <codeblock product="flex" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var myImg:Bitmap = new imgClass();
 </codeblock>
 
 </apiDesc><example conref="examples\Class.1.as" class="- topic/example "> The following example shows how to use Class objects to defer until runtime 
 the decision about which class to instantiate using the following steps:
 <ol class="- topic/ol "><li class="- topic/li ">Declare two classes as <codeph class="+ topic/ph pr-d/codeph ">ClassA</codeph> and <codeph class="+ topic/ph pr-d/codeph ">ClassB</codeph>. </li><li class="- topic/li ">Declare a variable of type Class named <codeph class="+ topic/ph pr-d/codeph ">classToConstruct</codeph> and one of type
     Boolean <codeph class="+ topic/ph pr-d/codeph ">chooseClassA</codeph>, which is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> in this case, 
  but your code could use a custom test expression to set the value of that variable. </li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    
    public class ClassExample extends Sprite {
        public function ClassExample() {
            var classToConstruct:Class;            
            var classInstance:Object;

            classToConstruct = ClassA;
            classInstance = new classToConstruct();
            trace(classInstance);    // [object ClassA]

            classToConstruct = ClassB;
            classInstance = new classToConstruct();
            trace(classInstance);    // [object ClassB]
        }
    }
}

class ClassA {
}
    
class ClassB {
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#Object/prototype" class="- topic/link "><linktext class="- topic/linktext ">Object.prototype</linktext></link><link href="operators.html#new" class="- topic/link "><linktext class="- topic/linktext ">new operator</linktext></link></related-links></apiClassifier><apiClassifier languages="" id="globalClassifier:Namespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Namespace</apiName><shortdesc class="- topic/shortdesc ">

The Namespace class contains methods and properties for defining and working with namespaces.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The Namespace class contains methods and properties for defining and 
working with namespaces of XML objects.

</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">

The Namespace class contains methods and properties for defining and working with namespaces. 
There are three scenarios for using namespaces:

<ul class="- topic/ul "><li class="- topic/li "> <b class="+ topic/ph hi-d/b ">Namespaces of XML objects</b> Namespaces associate a namespace prefix with a Uniform Resource Identifier (URI) 
that identifies the namespace. The prefix is a string used to reference the namespace within an 
XML object. If the prefix is undefined, when the XML is converted to a string, a prefix is 
automatically generated.
</li><li class="- topic/li "> <b class="+ topic/ph hi-d/b ">Namespace to differentiate methods</b> Namespaces can differentiate methods with the same name to perform different tasks. 
If two methods have the same name but separate namespaces, they can perform different tasks.
</li><li class="- topic/li "> <b class="+ topic/ph hi-d/b ">Namespaces for access control</b> 
Namespaces can be used to control access to a group of
properties and methods in a class. If you place the
properties and methods into a private
namespace, they are
inaccessible to any code that does not have access to
that namespace. You can grant access to the group of
properties and methods by passing the namespace to
other classes, methods or functions.
</li></ul>

<p class="- topic/p ">This class shows two forms of the constructor method because each form accepts 
different parameters.</p>

<p class="- topic/p ">This class (along with the XML, XMLList, and QName classes) implements 
powerful XML-handling standards defined in ECMAScript for XML 
(E4X) specification (ECMA-357 edition 2).</p>

</apiDesc><example conref="examples\NamespaceExample.as" class="- topic/example "> The following example shows how to work with namespaces defined in XML objects.
 This is accomplished with the following steps:
 <ol class="- topic/ol "><li class="- topic/li ">The example defines three Namespace objects, each with a unique URI that defines a namespace.</li><li class="- topic/li ">The example defines an XML variable named <codeph class="+ topic/ph pr-d/codeph ">myXML</codeph> and assigns it to the return value of 
     <codeph class="+ topic/ph pr-d/codeph ">getRSS()</codeph>.  The <codeph class="+ topic/ph pr-d/codeph ">getRSS()</codeph> method defines an XML object that contains several namespaces
     and returns that XML object.</li><li class="- topic/li ">The example declares and evaluates an Array variable by calling the <codeph class="+ topic/ph pr-d/codeph ">parseRSS()</codeph> method with
     <codeph class="+ topic/ph pr-d/codeph ">myXML</codeph> passed to it.  In <codeph class="+ topic/ph pr-d/codeph ">parseRSS()</codeph>, the default XML namespace is defined as
     <codeph class="+ topic/ph pr-d/codeph ">rss</codeph> and the example defines an XMLList variable by assigning the list of <codeph class="+ topic/ph pr-d/codeph ">item</codeph>
     objects in <codeph class="+ topic/ph pr-d/codeph ">myXML</codeph>.  An array is created and populated with various nodes within
     <codeph class="+ topic/ph pr-d/codeph ">myXML.item</codeph>. The array is then returned.</li><li class="- topic/li ">The elements in the array are printed using a <codeph class="+ topic/ph pr-d/codeph ">for</codeph> loop and three calls to
     <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>.</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class NamespaceExample extends Sprite {
        private var rss:Namespace = new Namespace("http://purl.org/rss/1.0/");
        private var rdf:Namespace = new Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#");
        private var dc:Namespace  = new Namespace("http://purl.org/dc/elements/1.1/");

        public function NamespaceExample() {
            var myXML:XML = getRSS();
            var rssItems:Array = parseRSS(myXML);
            
            var len:uint = rssItems.length;
            for (var i:uint; i &lt; len; i++) {
                trace(rssItems[i].title);
                trace(rssItems[i].creator);
                trace(rssItems[i].date);
                // Adobe Flash Developer Center
                // Adobe
                // 2005-08-08
                // Flex Developer Center
                // Adobe
                // 2005-10-16                
            }
        }
        
        private function parseRSS(rssXML:XML):Array {
            default xml namespace = rss;

            var items:XMLList = rssXML.item;

            var arr:Array = new Array();            
            var len:uint = items.length();
            for (var i:uint; i &lt; len; i++) {
                arr.push({title:items[i].title, creator:items[i].dc::creator, date:items[i].dc::date});
            }
            
            return arr;
        }

        private function getRSS():XML {
            var myXML:XML =  &lt;rdf:RDF
              xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
              xmlns="http://purl.org/rss/1.0/"
              xmlns:dc="http://purl.org/dc/elements/1.1/"
            &gt;
              &lt;channel rdf:about="http://www.xml.com/cs/xml/query/q/19"&gt;
                &lt;title&gt;Test RSS&lt;/title&gt;
                &lt;link&gt;http://www.adobe.com/&lt;/link&gt;
                &lt;description&gt;This is a test RSS document.&lt;/description&gt;
                &lt;language&gt;en-us&lt;/language&gt;
                &lt;items&gt;
                  &lt;rdf:Seq&gt;
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flash/"/&gt;
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flex/"/&gt;
                  &lt;/rdf:Seq&gt;
                &lt;/items&gt;
              &lt;/channel&gt;
              &lt;item rdf:about="http://www.adobe.com/devnet/flash/"&gt;
                &lt;title&gt;Adobe Flash Developer Center&lt;/title&gt;
                &lt;link&gt;http://www.adobe.com/devnet/flash/&lt;/link&gt;
                &lt;description&gt;Welcome to the Flash Developer Center&lt;/description&gt;
                &lt;dc:creator&gt;Adobe&lt;/dc:creator&gt;
                &lt;dc:date&gt;2005-08-08&lt;/dc:date&gt;    
              &lt;/item&gt;
              &lt;item rdf:about="http://www.adobe.com/devnet/flex/"&gt;
                &lt;title&gt;Flex Developer Center&lt;/title&gt;
                &lt;link&gt;http://www.adobe.com/devnet/flex/&lt;/link&gt;
                &lt;description&gt;Welcome to the Flex Developer Center&lt;/description&gt;
                &lt;dc:creator&gt;Adobe&lt;/dc:creator&gt;
                &lt;dc:date&gt;2005-10-16&lt;/dc:date&gt;    
              &lt;/item&gt;
            &lt;/rdf:RDF&gt;;
            
            return myXML;
        }
    }
}
</codeblock></example><example conref="examples\Namespace_2_Example.as" class="- topic/example "> The following example shows how namespaces can be used to differentiate methods that have
 the same name but perform different tasks. In this example, three methods named <codeph class="+ topic/ph pr-d/codeph ">hello()</codeph>
 reside in separate namespaces; each returns a different string when called.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {

    import flash.display.Sprite;

    public class Namespace_2_Example extends Sprite {    
        public function Namespace_2_Example() {
            var vocab:MultilingualVocabulary = new MultilingualVocabulary();

            trace(vocab.hello());    // hello
            
            var languages:Array = vocab.getLanguages();
            
            for (var i:uint; i &lt; languages.length; i++) {
                var ns:Namespace = languages[i];
                if (ns != null) {
                    trace(ns.toString() + ": " + vocab.ns::hello());
                    // hello
                    // MultilingualVocabulary:Hawaiian: aloha
                    // MultilingualVocabulary:French: bon jour
                }
            }
        }
    }    
}

class MultilingualVocabulary {
    public namespace French;
    public namespace Hawaiian;
    private var languages:Array;

    public function MultilingualVocabulary() {
        languages = new Array(Hawaiian, French);
    }
        
    public function hello():String { 
        return "hello";
    }

    Hawaiian function hello():String {
        return "aloha";
    }

    French function hello():String { 
        return "bon jour";
    }
        
    public function getLanguages():Array {
        return languages;
    }
}
</codeblock></example><example conref="examples\Namespace_3_Example.as" class="- topic/example "> The following example uses namespace names to select an appropriate
 variable value. It shows how you can store a namespace value in a variable and use
 that variable to refer to objects within that namespace.
 <p class="- topic/p ">The example defines namespaces and colors that correspond to mouse 
 states for a rectangular button. Each time the button is drawn, the example applies 
 the appropriate color (out is red; over is yellow; down is white) by referencing the <codeph class="+ topic/ph pr-d/codeph ">bgcolor</codeph>
 variable for the corresponding namespace (<codeph class="+ topic/ph pr-d/codeph ">out</codeph>, <codeph class="+ topic/ph pr-d/codeph ">over</codeph>, <codeph class="+ topic/ph pr-d/codeph ">down</codeph>). </p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
  
    public class Namespace_3_Example extends Sprite {     
        public function Namespace_3_Example() {
            addChild(new StateButton("Press Me."));
        }
    }
}

import flash.display.Sprite;
import flash.text.TextField;
import flash.events.Event;
import flash.events.MouseEvent;

class StateButton extends Sprite{
    private namespace out;
    private namespace over;
    private namespace down;
    private var label:TextField;
    private var labelTxt:String;
    private var ns:Namespace;
    out var bgColor:Number = 0xFF0000;
    over var bgColor:Number = 0xFFFF00;
    down var bgColor:Number = 0xFFFFFF;
      
    public function StateButton(str:String) {
        buttonMode = true;
        labelTxt = str;
        ns = out;
        draw();
        addLabel();
        addListeners();
    }

    private function addLabel():void {
        label = new TextField();
        label.text = labelTxt;
        label.width = 50;
        label.height = 20;
        label.mouseEnabled = false;
        addChild(label);
    }
      
    private function addListeners():void {
        addEventListener(MouseEvent.MOUSE_UP, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
        addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
    }
 
    private function mouseOutHandler(e:Event):void {
        ns = out;
        draw();
    }
 
    private function mouseOverHandler(e:Event):void {
        ns = over;
        draw();
    }
 
    private function mouseDownHandler(e:Event):void {
        ns = down;
        draw();
    }
 
    private function draw():void {
        this.graphics.clear();
        this.graphics.beginFill(ns::bgColor);
        this.graphics.drawRect(0, 0, 60, 20);
    }
} 
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#XML" class="- topic/link "><linktext class="- topic/linktext ">XML</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList</linktext></link><link href="#QName" class="- topic/link "><linktext class="- topic/linktext ">QName</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-357.htm" class="- topic/link "><linktext class="- topic/linktext ">ECMAScript for XML (E4X) specification (ECMA-357 edition 2)</linktext></link></related-links><apiConstructor id="Namespace:Namespace_0" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Namespace</apiName><shortdesc class="- topic/shortdesc "> 
	Creates a Namespace object according to the values of the prefixValue and uriValue parameters.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
	</helpid></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefixValue</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The prefix to use for the namespace.   
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uriValue</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The Uniform Resource Identifier (URI) of the namespace.
	
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Creates a Namespace object, given the prefixValue and uriValue.
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Creates a Namespace object according to the values of the <codeph class="+ topic/ph pr-d/codeph ">prefixValue</codeph> and <codeph class="+ topic/ph pr-d/codeph ">uriValue</codeph> parameters.
	This constructor requires both parameters.
	<p class="- topic/p ">The value of the <codeph class="+ topic/ph pr-d/codeph ">prefixValue</codeph> parameter is assigned to the <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph>
	property as follows:</p>
	<ul class="- topic/ul "><li class="- topic/li ">If <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> is passed, <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.</li><li class="- topic/li ">If the value is a valid XML name, as determined by the <codeph class="+ topic/ph pr-d/codeph ">isXMLName()</codeph> function, it is converted to a string and assigned to the <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> property.</li><li class="- topic/li ">If the value is not a valid XML name, the <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> property is set to <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.</li></ul>
	
	<p class="- topic/p ">The value of the <codeph class="+ topic/ph pr-d/codeph ">uriValue</codeph> parameter is assigned to the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph>
	property as follows:</p>
	<ul class="- topic/ul "><li class="- topic/li ">If a QName object is passed, the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> property is set to the value of the QName object's <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> property.</li><li class="- topic/li "> Otherwise, the <codeph class="+ topic/ph pr-d/codeph ">uriValue</codeph> parameter is converted to a string and assigned to the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> property.</li></ul>
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> This class shows two constructor method entries because each form accepts 
    different parameters. The constructor behaves differently depending on the type and number of 
    arguments passed, as detailed in each entry. ActionScript 3.0 does not support method or constructor overloading.</p>
    
	</apiDesc></apiConstructorDetail></apiConstructor><apiConstructor id="Namespace:Namespace_1" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Namespace</apiName><shortdesc class="- topic/shortdesc "> 
	Creates a Namespace object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
	</helpid></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uriValue</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The Uniform Resource Identifier (URI) of the namespace.
	
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Creates a Namespace object, given the uriValue.
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Creates a Namespace object.
	The values assigned to the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> and <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> properties 
	of the new Namespace object depend on the type of value passed for the <codeph class="+ topic/ph pr-d/codeph ">uriValue</codeph> parameter:
	<ul class="- topic/ul "><li class="- topic/li ">If no value is passed, the <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> and <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> properties are set to an empty string.</li><li class="- topic/li ">If the value is a Namespace object, a copy of the object is created.</li><li class="- topic/li ">If the value is a QName object, the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> property is set to the <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> property of the QName object.</li></ul>
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> This class shows two constructor entries because each form accepts 
    different parameters. The constructor behaves differently depending on the type and number of 
    parameters passed, as detailed in each entry. ActionScript 3.0 does not support method or constructor overloading.</p>
    
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Namespace:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	Equivalent to the Namespace.uri property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace, Namespace.toString, toString
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The Uniform Resource Identifier (URI) of the namespace, as a string.
	
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Equivalent to the Namespace.uri property. 
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Equivalent to the <codeph class="+ topic/ph pr-d/codeph ">Namespace.uri</codeph> property.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="Namespace:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
    Returns the URI value of the specified object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace, Namespace.toString, toString
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The Uniform Resource Identifier (URI) of the namespace, as a string.
    
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Equivalent to the Namespace.uri property. 
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns the URI value of the specified object. 
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="Namespace:prefix:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prefix</apiName><shortdesc class="- topic/shortdesc ">
	The prefix of the namespace.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace, Namespace.prefix, prefix
	</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The prefix of the namespace.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The prefix of the namespace.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="Namespace:uri:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">uri</apiName><shortdesc class="- topic/shortdesc ">
	The Uniform Resource Identifier (URI) of the namespace.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace, Namespace.uri, uri
	</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">The Uniform Resource Identifier (URI) of the namespace.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The Uniform Resource Identifier (URI) of the namespace.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:XML" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">XML</apiName><shortdesc class="- topic/shortdesc ">
    The XML class contains methods and properties for working with XML objects.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    The XML class contains methods and properties for working with XML objects. The XML class
    (along with the XMLList, Namespace, and QName classes) implements the 
    powerful XML-handling standards defined in ECMAScript for XML 
    (E4X) specification (ECMA-357 edition 2).
    
    <p class="- topic/p ">Use the <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> method to return a string representation of the XML object
    regardless of whether the XML object has simple content or complex content.</p>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: The XML class (along with related classes) from ActionScript 2.0 has been
    renamed XMLDocument and moved into the flash.xml package. 
    It is included in ActionScript 3.0 for backward compatibility.</p> 
    
    
    </apiDesc><example conref="examples\XMLExample.as" class="- topic/example "> The following example first creates an XML variable and adds nodes to it. 
 Then XML properties are used to find and print XML nodes.  Notice that the "at" 
 (<codeph class="+ topic/ph pr-d/codeph ">@</codeph>) symbol is used in several of the <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> calls to locate information
 by attribute name.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class XmlExample extends Sprite {        
        public function XmlExample() {
            var employees:XML =
                &lt;employees&gt;
                    &lt;employee ssn="123-123-1234"&gt;
                        &lt;name first="John" last="Doe"/&gt;
                        &lt;address&gt;
                            &lt;street&gt;11 Main St.&lt;/street&gt;
                            &lt;city&gt;San Francisco&lt;/city&gt;
                            &lt;state&gt;CA&lt;/state&gt;
                            &lt;zip&gt;98765&lt;/zip&gt;
                        &lt;/address&gt;
                    &lt;/employee&gt;
                    &lt;employee ssn="789-789-7890"&gt;
                        &lt;name first="Mary" last="Roe"/&gt;
                        &lt;address&gt;
                            &lt;street&gt;99 Broad St.&lt;/street&gt;
                            &lt;city&gt;Newton&lt;/city&gt;
                            &lt;state&gt;MA&lt;/state&gt;
                            &lt;zip&gt;01234&lt;/zip&gt;
                        &lt;/address&gt;
                    &lt;/employee&gt;
                &lt;/employees&gt;;

            trace(employees.employee[0].address.zip);   // 98765

            trace(employees.employee[1].@ssn);          // 789-789-7890

            trace(employees.employee.name);             // &lt;name first="John" last="Doe"/&gt;
                                                        // &lt;name first="Mary" last="Roe"/&gt;

            trace(employees..zip[0]);                   // 98765

            trace(employees..@ssn[1]);                  // 789-789-7890

            trace(employees..name);                     // &lt;name first="John" last="Doe"/&gt;
                                                        // &lt;name first="Mary" last="Roe"/&gt;

            trace(employees.employee[0].address.*);     // &lt;street&gt;11 Main St.&lt;/street&gt;    
                                                        // &lt;city&gt;San Francisco&lt;/city&gt;
                                                        // &lt;state&gt;CA&lt;/state&gt;
                                                        // &lt;zip&gt;98765&lt;/zip&gt;
            var node:String = "zip";
            trace(employees.employee[0].address[node]); // 98765
            
            var attribute:String = "ssn";
            trace(employees.employee[1].@[attribute]);  // 789-789-7890
            
            for each (var num:XML in employees..@ssn) {
                trace(num);                             // 123-123-1234
            }                                           // 789-789-7890
            
            var ssnToFind:String = "789-789-7890";
            trace(employees.employee.(@ssn == ssnToFind).toXMLString());
                                                        // &lt;employee ssn="789-789-7890"&gt;
                                                        // &lt;name first="Mary" last="Roe"/&gt;
                                                        // &lt;address&gt;
                                                        // &lt;street&gt;99 Broad St.&lt;/street&gt;
                                                        // &lt;city&gt;Newton&lt;/city&gt;
                                                        // &lt;state&gt;MA&lt;/state&gt;
                                                        // &lt;zip&gt;01234&lt;/zip&gt;
                                                        // &lt;/address&gt;
                                                        // &lt;/employee&gt;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#Namespace" class="- topic/link "><linktext class="- topic/linktext ">Namespace</linktext></link><link href="#QName" class="- topic/link "><linktext class="- topic/linktext ">QName</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-357.htm" class="- topic/link "><linktext class="- topic/linktext ">ECMAScript for XML (E4X) specification (ECMA-357 edition 2)</linktext></link></related-links><apiConstructor id="XML:XML" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">XML</apiName><shortdesc class="- topic/shortdesc "> 
    Creates a new XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML
    </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Any object that can be converted to XML with the top-level 
    <codeph class="+ topic/ph pr-d/codeph ">XML()</codeph> function.
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Creates a new XML object. You must use the constructor to create an 
    XML object before you call any of the methods of the XML class. 
    
    <p class="- topic/p ">Use the <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> method to return a string representation of the XML object
    regardless of whether the XML object has simple content or complex content.</p>
    
    </apiDesc><example conref="examples\XML_new.as" class="- topic/example "> The following example shows how you can load a remote XML document in ActionScript 3.0 using the URLLoader class in Flash Professional.
 Example provided by 
 <xref href="http://actionscriptexamples.com/2008/12/05/dynamically-loading-xml-files-in-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
//
// Requires:
//   - TextArea control UI component in the Flash Professional Library.
//
import fl.controls.TextArea;
 
var xml:XML;
 
var urlRequest:URLRequest = new URLRequest("http://www.helpexamples.com/flash/xml/menu.xml");
 
var urlLoader:URLLoader = new URLLoader();
urlLoader.addEventListener(Event.COMPLETE, urlLoader_complete);
urlLoader.load(urlRequest);
 
var textArea:TextArea = new TextArea();
textArea.move(5, 5);
textArea.setSize(stage.stageWidth - 10, stage.stageHeight - 10);
addChild(textArea);
 
function urlLoader_complete(evt:Event):void {
    xml = new XML(evt.currentTarget.data);
    textArea.text = xml.toXMLString();
}
</codeblock></example><example conref="examples\XML_new_2.as" class="- topic/example "> Here's another variation using all ActionScript.
 Example provided by 
 <xref href="http://actionscriptexamples.com/2008/12/05/dynamically-loading-xml-files-in-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML;
var textArea:TextField = new TextField();
textArea.width = 300;
 
var urlRequest:URLRequest = new URLRequest("http://www.helpexamples.com/flash/xml/menu.xml");
var urlLoader:URLLoader = new URLLoader();
urlLoader.dataFormat = URLLoaderDataFormat.TEXT;
urlLoader.addEventListener(Event.COMPLETE, urlLoader_complete);
urlLoader.load(urlRequest);
 
function urlLoader_complete(evt:Event):void {
    xml = new XML(evt.target.data);
    textArea.text = xml.toXMLString();
    addChild(textArea);
}
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="package.html#XML()" class="- topic/link "><linktext class="- topic/linktext ">XML() global function</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link></related-links></apiConstructor><apiOperation id="XML:AS3:addNamespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addNamespace</apiName><shortdesc class="- topic/shortdesc ">
    Adds a namespace to the set of in-scope namespaces for the XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.addNamespace, addNamespace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new XML object, with the namespace added.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The namespace to add to the XML object.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Adds a namespace to the set of in-scope namespaces for the XML object. If the namespace already 
    exists in the in-scope namespaces for the XML object (with a prefix matching that of the given 
    parameter), then the prefix of the existing namespace is set to <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>. If the input parameter 
    is a Namespace object, it's used directly. If it's a QName object, the input parameter's
    URI is used to create a new namespace; otherwise, it's converted to a String and a namespace is created from 
    the String.
    
    </apiDesc><example conref="examples\XML.addNamespace.1.as" class="- topic/example "> This example uses a namespace defined in one XML object and applies it
 to another XML object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml1:XML = &lt;ns:foo xmlns:ns="www.example.com/ns" /&gt;;
var nsNamespace:Namespace = xml1.namespace();

var xml2:XML = &lt;bar /&gt;;
xml2.addNamespace(nsNamespace);
trace(xml2.toXMLString()); // &lt;bar xmlns:ns="www.example.com/ns"/&gt;
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:appendChild" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">appendChild</apiName><shortdesc class="- topic/shortdesc ">
    Appends the given child to the end of the XML object's properties.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.appendChild, appendChild
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The resulting XML object.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The XML object to append.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Appends the given child to the end of the XML object's properties.
    The <codeph class="+ topic/ph pr-d/codeph ">appendChild()</codeph> method takes an XML object, an XMLList object, or 
    any other data type that is then converted to a String. 
    
    <p class="- topic/p ">Use the <codeph class="+ topic/ph pr-d/codeph ">delete</codeph> (XML) operator to remove XML nodes.</p>
    
    </apiDesc><example conref="examples\XML.appendChild.1.as" class="- topic/example "> This example appends a new element to the end of the child list of an XML object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;body&gt;
            &lt;p&gt;hello&lt;/p&gt;
        &lt;/body&gt;;
        
xml.appendChild(&lt;p&gt;world&lt;/p&gt;);    
trace(xml.p[0].toXMLString()); // &lt;p&gt;hello&lt;/p&gt;
trace(xml.p[1].toXMLString()); // &lt;p&gt;world&lt;/p&gt;
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#delete_(XML)" class="- topic/link "><linktext class="- topic/linktext ">delete (XML) operator</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:attribute" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attribute</apiName><shortdesc class="- topic/shortdesc ">
    Returns the XML value of the attribute that has the name matching the attributeName
    parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.attribute, attribute
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object or an empty XMLList object. Returns an empty XMLList object
    when an attribute value has not been defined.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">attributeName</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the attribute.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns the XML value of the attribute that has the name matching the <codeph class="+ topic/ph pr-d/codeph ">attributeName</codeph>
    parameter. Attributes are found within XML elements. 
    In the following example, the element has an attribute named "<codeph class="+ topic/ph pr-d/codeph ">gender</codeph>" 
    with the value "<codeph class="+ topic/ph pr-d/codeph ">boy</codeph>": <codeph class="+ topic/ph pr-d/codeph ">&lt;first gender="boy"&gt;John&lt;/first&gt;</codeph>.
    
    <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">attributeName</codeph> parameter can be any data type; however, 
    String is the most common data type to use. When passing any object other than a QName object, 
    the <codeph class="+ topic/ph pr-d/codeph ">attributeName</codeph> parameter uses the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method
    to convert the parameter to a string. </p>
    
    <p class="- topic/p ">If you need a qualified name reference, you can pass in a QName object. A QName object
    defines a namespace and the local name, which you can use to define the qualified name of an 
    attribute. Therefore calling <codeph class="+ topic/ph pr-d/codeph ">attribute(qname)</codeph> is not the same as calling
    <codeph class="+ topic/ph pr-d/codeph ">attribute(qname.toString())</codeph>.</p>
    
    </apiDesc><example conref="examples\XMLAttributeExample1.as" class="- topic/example "> This example shows a QName object passed into the <codeph class="+ topic/ph pr-d/codeph ">attribute()</codeph> method. The
 <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">attr</codeph> and the <codeph class="+ topic/ph pr-d/codeph ">namespace</codeph> property
 is <codeph class="+ topic/ph pr-d/codeph ">ns</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var xml:XML = &lt;ns:node xmlns:ns = "http://uri" ns:attr = '7' /&gt;       
 var qn:QName = new QName("http://uri", "attr");
 trace (xml.attribute(qn)); // 7
</codeblock></example><example conref="examples\XMLAttributeExample2.as" class="- topic/example "> To return an attribute with a name that matches an ActionScript reserved word, 
 use the <codeph class="+ topic/ph pr-d/codeph ">attribute()</codeph> method instead of the attribute identifier (@) 
 operator, as in the following example:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var xml:XML = &lt;example class="first" /&gt;
 trace(xml.attribute("class"));
 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attributes()" class="- topic/link "><linktext class="- topic/linktext ">XML.attributes()</linktext></link><link href="#QName" class="- topic/link "><linktext class="- topic/linktext ">QName</linktext></link><link href="#Namespace" class="- topic/link "><linktext class="- topic/linktext ">Namespace</linktext></link><link href="#XML/elements()" class="- topic/link "><linktext class="- topic/linktext ">XML.elements()</linktext></link><link href="operators.html#attribute_identifier" class="- topic/link "><linktext class="- topic/linktext ">attribute identifier (&amp;#064;) operator</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:attributes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attributes</apiName><shortdesc class="- topic/shortdesc ">
    Returns a list of attribute values for the given XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.attributes, attributes
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The list of attribute values.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns a list of attribute values for the given XML object. Use the <codeph class="+ topic/ph pr-d/codeph ">name()</codeph> 
    method with the <codeph class="+ topic/ph pr-d/codeph ">attributes()</codeph> method to return the name of an attribute.
    Use of <codeph class="+ topic/ph pr-d/codeph ">xml.attributes()</codeph> is equivalent to <codeph class="+ topic/ph pr-d/codeph ">xml.@*</codeph>.
    
    </apiDesc><example conref="examples\XMLAttributesExample1.as" class="- topic/example "> The following example returns the name of the attribute:

<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML=&lt;example id='123' color='blue'/&gt;
trace(xml.attributes()[1].name()); //color
</codeblock></example><example conref="examples\XMLAttributesExample2.as" class="- topic/example "> This example returns the names of all the attributes:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 
var xml:XML = &lt;example id='123' color='blue'/&gt;
var attNamesList:XMLList = xml.@*;

trace (attNamesList is XMLList); // true
trace (attNamesList.length()); // 2

for (var i:int = 0; i &lt; attNamesList.length(); i++)
{ 
    trace (typeof (attNamesList[i])); // xml
    trace (attNamesList[i].nodeKind()); // attribute
    trace (attNamesList[i].name()); // id and color
} 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attribute()" class="- topic/link "><linktext class="- topic/linktext ">XML.attribute()</linktext></link><link href="#XML/name()" class="- topic/link "><linktext class="- topic/linktext ">XML.name()</linktext></link><link href="operators.html#attribute_identifier" class="- topic/link "><linktext class="- topic/linktext ">&amp;#064; operator</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:childIndex" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">childIndex</apiName><shortdesc class="- topic/shortdesc ">
    Identifies the zero-indexed position of this XML object within the context of its parent.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.childindex, childindex
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The position of the object. Returns -1 as well as positive integers.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Identifies the zero-indexed position of this XML object within the context of its parent.
    
    </apiDesc><example conref="examples\XML.childIndex.1.as" class="- topic/example "> This example shows the use of the <codeph class="+ topic/ph pr-d/codeph ">childIndex()</codeph> method:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
            &lt;foo&gt;
                &lt;bar /&gt;
                text
                &lt;bob /&gt;
            &lt;/foo&gt;;
trace(xml.bar.childIndex()); // 0
trace(xml.bob.childIndex()); // 2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:child" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">child</apiName><shortdesc class="- topic/shortdesc ">
    Lists the children of an XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.child, child
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object of child nodes that match the input parameter. 
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">propertyName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The element name or integer of the XML child. 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Lists the children of an XML object. An XML child is an XML element, text node, comment, 
    or processing instruction. 
    
    <p class="- topic/p ">Use the <codeph class="+ topic/ph pr-d/codeph ">propertyName</codeph> parameter to list the 
    contents of a specific XML child. For example, to return the contents of a child named 
    <codeph class="+ topic/ph pr-d/codeph ">&lt;first&gt;</codeph>, use <codeph class="+ topic/ph pr-d/codeph ">child.name("first")</codeph>. You can generate the same result 
    by using the child's index number. The index number identifies the child's position in the 
    list of other XML children. For example, <codeph class="+ topic/ph pr-d/codeph ">name.child(0)</codeph> returns the first child 
    in a list. </p>
    
    <p class="- topic/p ">Use an asterisk (~~) to output all the children in an XML document. 
    For example, <codeph class="+ topic/ph pr-d/codeph ">doc.child("~~")</codeph>.</p>  
    
    <p class="- topic/p ">Use the <codeph class="+ topic/ph pr-d/codeph ">length()</codeph> method with the asterisk (~~) parameter of the 
    <codeph class="+ topic/ph pr-d/codeph ">child()</codeph> method to output the total number of children. For example, 
    <codeph class="+ topic/ph pr-d/codeph ">numChildren = doc.child("~~").length()</codeph>.</p>
    
    </apiDesc><example conref="examples\XML.child.1.as" class="- topic/example "> This example shows the use of the <codeph class="+ topic/ph pr-d/codeph ">child()</codeph> method to identify child
 elements with a specified name:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo&gt;
            &lt;bar&gt;text1&lt;/bar&gt;
            &lt;bar&gt;text2&lt;/bar&gt;
        &lt;/foo&gt;;
trace(xml.child("bar").length());  // 2
trace(xml.child("bar")[0].toXMLString()); // &lt;bar&gt;text1&lt;/bar&gt;
trace(xml.child("bar")[1].toXMLString()); // &lt;bar&gt;text2&lt;/bar&gt;
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/elements()" class="- topic/link "><linktext class="- topic/linktext ">XML.elements()</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList class</linktext></link><link href="#XML/length()" class="- topic/link "><linktext class="- topic/linktext ">XML.length()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:children" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">children</apiName><shortdesc class="- topic/shortdesc ">
    Lists the children of the XML object in the sequence in which they appear.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.children, children
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object of the XML object's children.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Lists the children of the XML object in the sequence in which they appear. An XML child 
    is an XML element, text node, comment, or processing instruction. 
    
    </apiDesc><example conref="examples\XML.children.1.as" class="- topic/example "> This example shows the use of the <codeph class="+ topic/ph pr-d/codeph ">children()</codeph> method:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var xml:XML = 
        &lt;foo id="22"&gt;
            &lt;bar&gt;44&lt;/bar&gt;
            text
            &lt;!-- comment --&gt;
            &lt;?instruction ?&gt;
        &lt;/foo&gt;;
trace(xml.children().length()); // 4
trace(xml.children()[0].toXMLString()); // &lt;bar&gt;44&lt;/bar&gt;
trace(xml.children()[1].toXMLString()); // text
trace(xml.children()[2].toXMLString()); // &lt;!-- comment --&gt;
trace(xml.children()[3].toXMLString()); // &lt;?instruction ?&gt;
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:comments" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">comments</apiName><shortdesc class="- topic/shortdesc ">
    Lists the properties of the XML object that contain XML comments.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.comments, comments
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object of the properties that contain comments.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Lists the properties of the XML object that contain XML comments.
    
    </apiDesc><example conref="examples\XML.comments.1.as" class="- topic/example "> This example shows the use of the <codeph class="+ topic/ph pr-d/codeph ">comments()</codeph> method:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
var xml:XML = 
        &lt;foo&gt;
            &lt;!-- example --&gt;
            &lt;!-- example2 --&gt;
        &lt;/foo&gt;;
trace(xml.comments().length()); // 2
trace(xml.comments()[1].toXMLString()); // &lt;!-- example2 --&gt;
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:contains" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">contains</apiName><shortdesc class="- topic/shortdesc ">
    Compares the XML object against the given value parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.contains, contains
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the XML object matches the <codeph class="+ topic/ph pr-d/codeph ">value</codeph> parameter, then <codeph class="+ topic/ph pr-d/codeph ">true</codeph>; otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value to compare against the current XML object.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Compares the XML object against the given <codeph class="+ topic/ph pr-d/codeph ">value</codeph> parameter. 
    
    </apiDesc><example conref="examples\XML.contains.1.as" class="- topic/example "> This example shows the use of the <codeph class="+ topic/ph pr-d/codeph ">contains()</codeph> method:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;order&gt;
            &lt;item&gt;Rice&lt;/item&gt;
            &lt;item&gt;Kung Pao Shrimp&lt;/item&gt;
        &lt;/order&gt;;
trace(xml.item[0].contains(&lt;item&gt;Rice&lt;/item&gt;)); // true
trace(xml.item[1].contains(&lt;item&gt;Kung Pao Shrimp&lt;/item&gt;)); // true
trace(xml.item[1].contains(&lt;item&gt;MSG&lt;/item&gt;)); // false
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:copy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">copy</apiName><shortdesc class="- topic/shortdesc ">
    Returns a copy of the given XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.copy, copy
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The copy of the object.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns a copy of the given XML object. The copy is a duplicate of the entire tree of nodes. 
    The copied XML object has no parent and returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if you attempt to call the 
    <codeph class="+ topic/ph pr-d/codeph ">parent()</codeph> method.
    
    </apiDesc><example conref="examples\XML.copy.1.as" class="- topic/example "> This example shows that the <codeph class="+ topic/ph pr-d/codeph ">copy()</codeph> method creates a new instance of an XML object. 
 When you modify the copy, the original remains unchanged:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml1:XML = &lt;foo /&gt;;
var xml2:XML = xml1.copy();
xml2.appendChild(&lt;bar /&gt;);
trace(xml1.bar.length()); // 0
trace(xml2.bar.length()); // 1
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:defaultSettings" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">defaultSettings</apiName><shortdesc class="- topic/shortdesc ">
    Returns an object with the following properties set to the default values: ignoreComments, 
    ignoreProcessingInstructions, ignoreWhitespace, prettyIndent, and 
    prettyPrinting.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.defaultSettings, defaultSettings
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object with properties set to the default settings.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns an object with the following properties set to the default values: <codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph>, 
    <codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph>, <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph>, <codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph>, and 
    <codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph>. The default values are as follows:
    
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreComments = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyIndent = 2</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyPrinting = true</codeph></li></ul>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> You do not apply this method to an instance of the XML class; you apply it to 
    <codeph class="+ topic/ph pr-d/codeph ">XML</codeph>, as in the following code: <codeph class="+ topic/ph pr-d/codeph ">var df:Object = XML.defaultSettings()</codeph>. </p>
    
    </apiDesc><example conref="examples\XML.defaultSettings.1.as" class="- topic/example "> The following example shows: how to apply some custom settings (for including comments and processing
 instructions) prior to setting an XML object; how to then revert back to the default settings before setting another XML
 object; and then how to set the custom settings again (for setting any more XML objects):
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var customSettings:Object = XML.settings();

var xml1:XML = 
        &lt;foo&gt;
            &lt;!-- comment --&gt;
            &lt;?instruction ?&gt;
        &lt;/foo&gt;;
trace(xml1.toXMLString());
//    &lt;foo&gt;
//        &lt;!-- comment --&gt;
//         &lt;?instruction ?&gt;
//    &lt;/foo&gt;

XML.setSettings(XML.defaultSettings());
var xml2:XML = 
        &lt;foo&gt;
            &lt;!-- comment --&gt;
            &lt;?instruction ?&gt;
        &lt;/foo&gt;;
trace(xml2.toXMLString());
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/ignoreComments" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreComments</linktext></link><link href="#XML/ignoreProcessingInstructions" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreProcessingInstructions</linktext></link><link href="#XML/ignoreWhitespace" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreWhitespace</linktext></link><link href="#XML/prettyIndent" class="- topic/link "><linktext class="- topic/linktext ">XML.prettyIndent</linktext></link><link href="#XML/prettyPrinting" class="- topic/link "><linktext class="- topic/linktext ">XML.prettyPrinting</linktext></link><link href="#XML/setSettings()" class="- topic/link "><linktext class="- topic/linktext ">XML.setSettings()</linktext></link><link href="#XML/settings()" class="- topic/link "><linktext class="- topic/linktext ">XML.settings()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:descendants" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">descendants</apiName><shortdesc class="- topic/shortdesc ">
    Returns all descendants (children, grandchildren, great-grandchildren, and so on) of the 
    XML object that have the given name parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.descendants, descendants
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object of matching descendants. If there are no descendants, returns an 
    empty XMLList object.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the element to match.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns all descendants (children, grandchildren, great-grandchildren, and so on) of the 
    XML object that have the given <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter. The <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter
    is optional. The <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter can be a QName object, a String data type
    or any other data type that is then converted to a String data type.
    
    <p class="- topic/p ">To return all descendants, use the "~~" parameter. If no parameter is passed,
    the string "~~" is passed and returns all descendants of the XML object.</p>
    
    </apiDesc><example conref="examples\XMLDescendantsExample1.as" class="- topic/example "> To return descendants with names that match ActionScript reserved words, use the 
 <codeph class="+ topic/ph pr-d/codeph ">descendants()</codeph> method instead of the descendant (..) operator, as in the 
 following example: 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
  &lt;enrollees&gt;
    &lt;student id="239"&gt;
        &lt;class name="Algebra" /&gt;
        &lt;class name="Spanish 2"/&gt;
    &lt;/student&gt;
    &lt;student id="206"&gt;
        &lt;class name="Trigonometry" /&gt;
        &lt;class name="Spanish 2" /&gt;
    &lt;/student&gt;
  &lt;/enrollees&gt;
trace(xml.descendants("class")); 
</codeblock></example><example conref="examples\XML.descendants.1.as" class="- topic/example "> The following example shows that the <codeph class="+ topic/ph pr-d/codeph ">descendants()</codeph> method returns an XMLList object
 that contains <i class="+ topic/ph hi-d/i ">all</i> descendant objects, including children, grandchildren, and so on:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
var xml:XML = 
        &lt;body&gt;
            &lt;!-- comment --&gt;
            text1
            &lt;a&gt;
                &lt;b&gt;text2&lt;/b&gt;
            &lt;/a&gt;
        &lt;/body&gt;;
trace(xml.descendants("*").length()); // 5
trace(xml.descendants("*")[0]); // // &lt;!-- comment --&gt;
trace(xml.descendants("*")[1].toXMLString()); // text1
trace(xml.descendants("a").toXMLString()); // &lt;a&gt;&lt;b&gt;text2&lt;/b&gt;&lt;/a&gt;
trace(xml.descendants("b").toXMLString()); // &lt;b&gt;text2&lt;/b&gt;
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#descendant_accessor" class="- topic/link "><linktext class="- topic/linktext ">descendant accessor (..) operator</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:elements" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">elements</apiName><shortdesc class="- topic/shortdesc ">
     Lists the elements of an XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.elements, elements
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object of the element's content. The element's content falls between the start and 
     end tags. If you use the asterisk (~~) to call all elements, both the 
     element's tags and content are returned.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the element. An element's name is surrounded by angle brackets. 
     For example, "<codeph class="+ topic/ph pr-d/codeph ">first</codeph>" is the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> in this example: 
     <codeph class="+ topic/ph pr-d/codeph ">&lt;first&gt;&lt;/first&gt;</codeph>. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Lists the elements of an XML object. An element consists of a start and an end tag; 
     for example <codeph class="+ topic/ph pr-d/codeph ">&lt;first&gt;&lt;/first&gt;</codeph>. The <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter 
     is optional. The <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter can be a QName object, a String data type,
     or any other data type that is then converted to a String data type. Use the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter to list a specific element. For example, 
     the element "<codeph class="+ topic/ph pr-d/codeph ">first</codeph>" returns "<codeph class="+ topic/ph pr-d/codeph ">John</codeph>" in this example: 
     <codeph class="+ topic/ph pr-d/codeph ">&lt;first&gt;John&lt;/first&gt;</codeph>. 
     
     <p class="- topic/p ">To list all elements, use the asterisk (~~) as the 
     parameter. The asterisk is also the default parameter. </p>
     
     <p class="- topic/p ">Use the <codeph class="+ topic/ph pr-d/codeph ">length()</codeph> method with the asterisk parameter to output the total 
     number of elements. For example, <codeph class="+ topic/ph pr-d/codeph ">numElement = addressbook.elements("~~").length()</codeph>.</p>
     
     </apiDesc><example conref="examples\XML.elements.1.as" class="- topic/example "> The following example shows that the <codeph class="+ topic/ph pr-d/codeph ">elements()</codeph> method returns a 
 list of elements only
 — not comments, text properties, or processing instructions:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo&gt;
            &lt;!-- comment --&gt;
            &lt;?instruction ?&gt;
            text
            &lt;a&gt;1&lt;/a&gt;
            &lt;b&gt;2&lt;/b&gt;
        &lt;/foo&gt;;
trace(xml.elements("*").length()); // 2
trace(xml.elements("*")[0].toXMLString()); // &lt;a&gt;1&lt;/a&gt;
trace(xml.elements("b").length()); // 1
trace(xml.elements("b")[0].toXMLString()); // &lt;b&gt;2&lt;/b&gt;
</codeblock></example><example conref="examples\XMLElementsExample1.as" class="- topic/example "> To return elements with names that match ActionScript reserved words, 
 use the <codeph class="+ topic/ph pr-d/codeph ">elements()</codeph> method instead of the XML dot (.) operator, 
 as in the following example:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML =
 &lt;student id="206"&gt;
    &lt;class name="Trigonometry" /&gt;
    &lt;class name="Spanish 2" /&gt;
 &lt;/student&gt;
trace(xml.elements("class")); 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/child()" class="- topic/link "><linktext class="- topic/linktext ">XML.child()</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList class</linktext></link><link href="#XML/length()" class="- topic/link "><linktext class="- topic/linktext ">XML.length()</linktext></link><link href="#XML/attribute()" class="- topic/link "><linktext class="- topic/linktext ">XML.attribute()</linktext></link><link href="operators.html#dot_(XML)" class="- topic/link "><linktext class="- topic/linktext ">XML dot (.) operator</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:hasComplexContent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasComplexContent</apiName><shortdesc class="- topic/shortdesc ">
    Checks to see whether the XML object contains complex content.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.hasComplexContent, hasComplexContent
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the XML object contains complex content, <codeph class="+ topic/ph pr-d/codeph ">true</codeph>; otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Checks to see whether the XML object contains complex content. An XML object contains complex content if  
    it has child elements. XML objects that representing attributes, comments, processing instructions, 
    and text nodes do not have complex content. However, an object that <i class="+ topic/ph hi-d/i ">contains</i> these can 
    still be considered to contain complex content (if the object has child elements).
    
    </apiDesc><example conref="examples\XML.hasComplexContent.1.as" class="- topic/example "> The following example shows an XML object with one property named <codeph class="+ topic/ph pr-d/codeph ">a</codeph> that has
 simple content and one property named <codeph class="+ topic/ph pr-d/codeph ">a</codeph> that has complex content:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo&gt;
            &lt;a&gt;
                text
            &lt;/a&gt;
            &lt;a&gt;
                &lt;b/&gt;
            &lt;/a&gt;
        &lt;/foo&gt;;
trace(xml.a[0].hasComplexContent()); // false
trace(xml.a[1].hasComplexContent()); // true

trace(xml.a[0].hasSimpleContent()); // true
trace(xml.a[1].hasSimpleContent()); // false
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasSimpleContent()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:hasOwnProperty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasOwnProperty</apiName><shortdesc class="- topic/shortdesc ">
    Checks to see whether the object has the property specified by the p parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.hasOwnProperty, hasOwnProperty
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the property exists, <codeph class="+ topic/ph pr-d/codeph ">true</codeph>; otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">p</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The property to match.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Checks to see whether the object has the property specified by the <codeph class="+ topic/ph pr-d/codeph ">p</codeph> parameter. 
    
    </apiDesc><example conref="examples\XML.hasOwnProperty.1.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">hasOwnProperty()</codeph> method to ensure
 that a property (<codeph class="+ topic/ph pr-d/codeph ">b</codeph>) exists prior to evaluating an expression (<codeph class="+ topic/ph pr-d/codeph ">b == "11"</codeph>) that uses the
 property:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo&gt;
            &lt;a /&gt;
            &lt;a&gt;
                &lt;b&gt;10&lt;/b&gt;
            &lt;/a&gt;
            &lt;a&gt;
                &lt;b&gt;11&lt;/b&gt;
            &lt;/a&gt;
        &lt;/foo&gt;;
trace(xml.a.(hasOwnProperty("b") &amp;&amp; b == "11")); 
</codeblock> If the last line in this example were the following, Flash Player would throw an exception since 
 the first element named <codeph class="+ topic/ph pr-d/codeph ">a</codeph> does not have a property named <codeph class="+ topic/ph pr-d/codeph ">b</codeph>:
 <p class="- topic/p ">
 <pre xml:space="preserve" class="- topic/pre ">trace(xml.a.(b == "11"));</pre>
 </p>
</example><example conref="examples\XML.hasOwnProperty.2.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">hasOwnProperty()</codeph> method to ensure
 that a property (<codeph class="+ topic/ph pr-d/codeph ">item</codeph>) exists prior to evaluating an expression 
 (<codeph class="+ topic/ph pr-d/codeph ">item.contains("toothbrush")</codeph>) that uses the
 property:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;orders&gt;
            &lt;order id='1'&gt;
                &lt;item&gt;toothbrush&lt;/item&gt;
                &lt;item&gt;toothpaste&lt;/item&gt;
            &lt;/order&gt;
            &lt;order&gt;
                &lt;returnItem&gt;shoe polish&lt;/returnItem&gt;
            &lt;/order&gt;
        &lt;/orders&gt;;
trace(xml.order.(hasOwnProperty("item") &amp;&amp; item.contains("toothbrush"))); 
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:hasSimpleContent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasSimpleContent</apiName><shortdesc class="- topic/shortdesc ">
    Checks to see whether the XML object contains simple content.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.hasSimpleContent, hasSimpleContent
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the XML object contains simple content, <codeph class="+ topic/ph pr-d/codeph ">true</codeph>; otherwise <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
    
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Checks to see whether the XML object contains simple content. An XML object contains simple content 
    if it represents a text node, an attribute node, or an XML element that has no child elements. 
    XML objects that represent comments and processing instructions do <i class="+ topic/ph hi-d/i ">not</i> contain simple 
    content.
    
    </apiDesc><example conref="examples\XML.hasComplexContent.1.as" class="- topic/example "> The following example shows an XML object with one property named <codeph class="+ topic/ph pr-d/codeph ">a</codeph> that has
 simple content and one property named <codeph class="+ topic/ph pr-d/codeph ">a</codeph> that has complex content:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo&gt;
            &lt;a&gt;
                text
            &lt;/a&gt;
            &lt;a&gt;
                &lt;b/&gt;
            &lt;/a&gt;
        &lt;/foo&gt;;
trace(xml.a[0].hasComplexContent()); // false
trace(xml.a[1].hasComplexContent()); // true

trace(xml.a[0].hasSimpleContent()); // true
trace(xml.a[1].hasSimpleContent()); // false
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasComplexContent()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:inScopeNamespaces" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">inScopeNamespaces</apiName><shortdesc class="- topic/shortdesc ">
    Lists the namespaces for the XML object, based on the object's parent.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.inScopeNamespaces, inScopeNamespaces
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of Namespace objects. 
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Lists the namespaces for the XML object, based on the object's parent. 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:insertChildAfter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">insertChildAfter</apiName><shortdesc class="- topic/shortdesc ">
    Inserts the given child2 parameter after the child1 parameter in this XML object and returns the 
    resulting object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.insertChildAfter, insertChildAfter
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The resulting XML object or <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
    
    </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object in the source object that you insert before <codeph class="+ topic/ph pr-d/codeph ">child2</codeph>.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object to insert.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Inserts the given <codeph class="+ topic/ph pr-d/codeph ">child2</codeph> parameter after the <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> parameter in this XML object and returns the 
    resulting object. If the <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, the method
    inserts the contents of <codeph class="+ topic/ph pr-d/codeph ">child2</codeph> <i class="+ topic/ph hi-d/i ">before</i> all children of the XML object 
    (in other words, after <i class="+ topic/ph hi-d/i ">none</i>). If <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> is provided, but it does not 
    exist in the XML object, the XML object is not modified and <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> is 
    returned.
    
    <p class="- topic/p ">If you call this method on an XML child that is not an element (text, attributes, comments, pi, and so on) 
    <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> is returned.</p>
    
    <p class="- topic/p ">Use the <codeph class="+ topic/ph pr-d/codeph ">delete</codeph> (XML) operator to remove XML nodes.</p>
    
    </apiDesc><example conref="examples\XML.insertChildAfter.1.as" class="- topic/example "> The following example appends an element to the end of the child elements of an XML object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;menu&gt;
            &lt;item&gt;burger&lt;/item&gt;
            &lt;item&gt;soda&lt;/item&gt;
        &lt;/menu&gt;;
xml.insertChildAfter(xml.item[0], &lt;saleItem&gt;fries&lt;/saleItem&gt;);
trace(xml);
</codeblock> The <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> output is the following:
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph "> &lt;menu&gt;
     &lt;item&gt;burger&lt;/item&gt;
     &lt;saleItem&gt;fries&lt;/saleItem&gt;
     &lt;item&gt;soda&lt;/item&gt;
 &lt;/menu&gt;</codeph></pre>
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/insertChildBefore()" class="- topic/link "><linktext class="- topic/linktext ">XML.insertChildBefore()</linktext></link><link href="operators.html#delete_(XML)" class="- topic/link "><linktext class="- topic/linktext ">delete (XML) operator</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:insertChildBefore" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">insertChildBefore</apiName><shortdesc class="- topic/shortdesc ">
    Inserts the given child2 parameter before the child1 parameter 
    in this XML object and returns the resulting object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.insertChildBefore, insertChildBefore
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The resulting XML object or <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
    
    </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object in the source object that you insert after <codeph class="+ topic/ph pr-d/codeph ">child2</codeph>.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object to insert.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Inserts the given <codeph class="+ topic/ph pr-d/codeph ">child2</codeph> parameter before the <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> parameter 
    in this XML object and returns the resulting object. If the <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> parameter 
    is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, the method inserts the contents of    
    <codeph class="+ topic/ph pr-d/codeph ">child2</codeph> <i class="+ topic/ph hi-d/i ">after</i> all children of the XML object (in other words, before 
    <i class="+ topic/ph hi-d/i ">none</i>). If <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> is provided, but it does not exist in the XML object, 
    the XML object is not modified and <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> is returned.
    
    <p class="- topic/p ">If you call this method on an XML child that is not an element (text, attributes, 
    comments, pi, and so on) <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> is returned.</p>
    
    <p class="- topic/p ">Use the <codeph class="+ topic/ph pr-d/codeph ">delete</codeph> (XML) operator to remove XML nodes.</p>
    
    </apiDesc><example conref="examples\XML.insertChildBefore.1.as" class="- topic/example "> The following example appends an element to the end of the child elements of an XML object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;menu&gt;
            &lt;item&gt;burger&lt;/item&gt;
            &lt;item&gt;soda&lt;/item&gt;
        &lt;/menu&gt;;
xml.insertChildBefore(xml.item[0], &lt;saleItem&gt;fries&lt;/saleItem&gt;);
trace(xml);
</codeblock> The <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> output is the following:
 <pre xml:space="preserve" class="- topic/pre ">
 &lt;menu&gt;
     &lt;saleItem&gt;fries&lt;/saleItem&gt;
     &lt;item&gt;burger&lt;/item&gt;
     &lt;item&gt;soda&lt;/item&gt;
 &lt;/menu&gt;</pre>
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/insertChildAfter()" class="- topic/link "><linktext class="- topic/linktext ">XML.insertChildAfter()</linktext></link><link href="operators.html#delete_(XML)" class="- topic/link "><linktext class="- topic/linktext ">delete (XML) operator</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:length" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
    For XML objects, this method always returns the integer 1.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.length, length
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Always returns <codeph class="+ topic/ph pr-d/codeph ">1</codeph> for any XML object.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    For XML objects, this method always returns the integer <codeph class="+ topic/ph pr-d/codeph ">1</codeph>. 
    The <codeph class="+ topic/ph pr-d/codeph ">length()</codeph> method of the XMLList class returns a value of <codeph class="+ topic/ph pr-d/codeph ">1</codeph> for 
    an XMLList object that contains only one value.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:localName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">localName</apiName><shortdesc class="- topic/shortdesc ">
    Gives the local name portion of the qualified name of the XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.localName, localName
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The local name as either a String or <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Gives the local name portion of the qualified name of the XML object.
    
    </apiDesc><example conref="examples\XML.localName.1.as" class="- topic/example "> The following example illustrates the use of the <codeph class="+ topic/ph pr-d/codeph ">localName()</codeph> method:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding"&gt;

                        &lt;soap:Body xmlns:wx = "http://example.com/weather"&gt;
                &lt;wx:forecast&gt;
                    &lt;wx:city&gt;Quito&lt;/wx:city&gt;
                &lt;/wx:forecast&gt;
            &lt;/soap:Body&gt;
        &lt;/soap:Envelope&gt;;
        
trace(xml.localName()); // Envelope
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:name" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
    Gives the qualified name for the XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.name, name
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The qualified name is either a QName or <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Gives the qualified name for the XML object. 
    
    </apiDesc><example conref="examples\XML.name.1.as" class="- topic/example "> The following example illustrates the use of the <codeph class="+ topic/ph pr-d/codeph ">name()</codeph> method to get the qualified
 name of an XML object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding"&gt;

                        &lt;soap:Body xmlns:wx = "http://example.com/weather"&gt;
                &lt;wx:forecast&gt;
                    &lt;wx:city&gt;Quito&lt;/wx:city&gt;
                &lt;/wx:forecast&gt;
            &lt;/soap:Body&gt;
        &lt;/soap:Envelope&gt;;
        
trace(xml.name().localName); // Envelope
trace(xml.name().uri); // "http://www.w3.org/2001/12/soap-envelope"
</codeblock></example><example conref="examples\XML.name.2.as" class="- topic/example "> The following example illustrates the use of the <codeph class="+ topic/ph pr-d/codeph ">name()</codeph> method called on an XML property,
 on a text element, and on an attribute:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo x="15" y="22"&gt;
            text
        &lt;/foo&gt;;
        
trace(xml.name().localName); // foo
trace(xml.name().uri == ""); // true
trace(xml.children()[0]); // text
trace(xml.children()[0].name()); // null
trace(xml.attributes()[0]); // 15
trace(xml.attributes()[0].name()); // x
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attributes()" class="- topic/link "><linktext class="- topic/linktext ">XML.attributes()</linktext></link><link href="operators.html#attribute_identifier" class="- topic/link "><linktext class="- topic/linktext ">attribute identifier</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:namespaceDeclarations" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">namespaceDeclarations</apiName><shortdesc class="- topic/shortdesc ">
    Lists namespace declarations associated with the XML object in the context of its parent.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.namespaceDeclarations, namespaceDeclarations
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of Namespace objects.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Lists namespace declarations associated with the XML object in the context of its parent. 
    
    </apiDesc><example conref="examples\XML.namespaceDeclarations.1.as" class="- topic/example "> The following example outputs the namespace declarations of an
 XML object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
            xmlns:dc="http://purl.org/dc/elements/1.1/" 
            xmlns="http://purl.org/rss/1.0/"&gt;

            &lt;!-- ... --&gt;
            
        &lt;/rdf:RDF&gt;;
                    
for (var i:uint = 0; i &lt; xml.namespaceDeclarations().length; i++) {
    var ns:Namespace = xml.namespaceDeclarations()[i]; 
    var prefix:String = ns.prefix;
    if (prefix == "") {
        prefix = "(default)";
    }
    trace(prefix + ":" , ns.uri);
}
</codeblock> The <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> output is the following:
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns#
 dc: http://purl.org/dc/elements/1.1/
 (default): http://purl.org/rss/1.0/</codeph></pre>
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/namespace()" class="- topic/link "><linktext class="- topic/linktext ">XML.namespace()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:namespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">namespace</apiName><shortdesc class="- topic/shortdesc ">
    If no parameter is provided, gives the namespace associated with the qualified name of 
    this XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.namespace, namespace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>, or a namespace.
    
    </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The prefix you want to match.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    If no parameter is provided, gives the namespace associated with the qualified name of 
    this XML object. If a <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> parameter is specified, the method returns the namespace 
    that matches the <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> parameter and that is in scope for the XML object. If there is no 
    such namespace, the method returns <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
    
    </apiDesc><example conref="examples\XML.namespace.1.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">namespace()</codeph> method 
 to get the namespace of an XML object and assign it to a Namespace object named <codeph class="+ topic/ph pr-d/codeph ">soap</codeph>
 which is then used in identifying a property of the <codeph class="+ topic/ph pr-d/codeph ">xml</codeph> object 
 (<codeph class="+ topic/ph pr-d/codeph ">xml.soap::Body[0]</codeph>):
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding"&gt;

                        &lt;soap:Body xmlns:wx = "http://example.com/weather"&gt;
                &lt;wx:forecast&gt;
                    &lt;wx:city&gt;Quito&lt;/wx:city&gt;
                &lt;/wx:forecast&gt;
            &lt;/soap:Body&gt;
        &lt;/soap:Envelope&gt;;
        
var soap:Namespace = xml.namespace();
trace(soap.prefix); // soap
trace(soap.uri); // http://www.w3.org/2001/12/soap-envelope

var body:XML = xml.soap::Body[0];
trace(body.namespace().prefix); // soap
trace(xml.namespace().uri); // http://www.w3.org/2001/12/soap-envelope
trace(body.namespace("wx").uri); // "http://example.com/weather"
</codeblock></example><example conref="examples\XML.namespace.2.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">namespace()</codeph> method to get the 
 default namespace for a node, as well as the namespace for a specific prefix (<codeph class="+ topic/ph pr-d/codeph ">"dc"</codeph>):
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
            xmlns:dc="http://purl.org/dc/elements/1.1/" 
            xmlns="http://purl.org/rss/1.0/"&gt;
                &lt;!-- ... --&gt;
        &lt;/rdf:RDF&gt;;
                    
trace(xml.namespace()); // http://www.w3.org/1999/02/22-rdf-syntax-ns#
trace(xml.namespace("dc")); // http://purl.org/dc/elements/1.1/
trace(xml.namespace("foo")); // undefined
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:nodeKind" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">nodeKind</apiName><shortdesc class="- topic/shortdesc ">
    Specifies the type of node: text, comment, processing-instruction,  
    attribute, or element.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.nodeKind, nodeKind
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The node type used.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Specifies the type of node: text, comment, processing-instruction,  
    attribute, or element. 
    
    </apiDesc><example conref="examples\XMLNodeKindExample1.as" class="- topic/example "> This example traces all five node types:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;

var xml:XML = 
    &lt;example id="10"&gt;
        &lt;!-- this is a comment --&gt;
        &lt;?test this is a pi ?&gt;
        and some text
    &lt;/example&gt;;

trace(xml.nodeKind()); // element
trace(xml.children()[0].nodeKind()); // comment
trace(xml.children()[1].nodeKind()); // processing-instruction
trace(xml.children()[2].nodeKind()); // text
trace(xml.@id[0].nodeKind()); // attribute
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#attribute_identifier" class="- topic/link "><linktext class="- topic/linktext ">attribute identifier</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:normalize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">normalize</apiName><shortdesc class="- topic/shortdesc ">
    For the XML object and all descendant XML objects, merges adjacent text nodes and 
    eliminates empty text nodes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.normalize, normalize
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The resulting normalized XML object.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    For the XML object and all descendant XML objects, merges adjacent text nodes and 
    eliminates empty text nodes.
    
    </apiDesc><example conref="examples\XML.normalize.1.as" class="- topic/example "> The following example shows the effect of calling the <codeph class="+ topic/ph pr-d/codeph ">normalize()</codeph> method:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = &lt;body&gt;&lt;/body&gt;;
xml.appendChild("hello");
xml.appendChild(" world");
trace(xml.children().length()); // 2
xml.normalize();
trace(xml.children().length()); // 1
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:parent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parent</apiName><shortdesc class="- topic/shortdesc ">
    Returns the parent of the XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.parent, parent
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Either an XML reference of the parent node, or <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>
    if the XML object has no parent.
    
    </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns the parent of the XML object. If the XML object has no parent, the method returns 
    <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
    
    </apiDesc><example conref="examples\XML.parent.1.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">parent()</codeph> method to identify the parent element
 of a specific element in an XML structure:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body&gt;
        &lt;p id="p1"&gt;Hello&lt;/p&gt;
        &lt;p id="p2"&gt;Test:
            &lt;ul&gt;
                &lt;li&gt;1&lt;/li&gt;
                &lt;li&gt;2&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/p&gt;
    &lt;/body&gt;;
var node:XML = xml.p.ul.(li.contains("1"))[0]; // == &lt;ul&gt; ... &lt;/ul&gt;
trace(node.parent().@id); // p2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:prependChild" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">prependChild</apiName><shortdesc class="- topic/shortdesc ">
    Inserts a copy of the provided child object into the XML element before any existing XML 
    properties for that element.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.prependChild, prependChild
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The resulting XML object.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object to insert.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Inserts a copy of the provided <codeph class="+ topic/ph pr-d/codeph ">child</codeph> object into the XML element before any existing XML 
    properties for that element.
    
    <p class="- topic/p ">Use the <codeph class="+ topic/ph pr-d/codeph ">delete</codeph> (XML) operator to remove XML nodes.</p> 
    
    </apiDesc><example conref="examples\XML.prependChild.1.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">prependChild()</codeph> method to add an element to the 
 begining of a child list of an XML object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;body&gt;
            &lt;p&gt;hello&lt;/p&gt;
        &lt;/body&gt;;
        
xml.prependChild(&lt;p&gt;world&lt;/p&gt;);    
trace(xml.p[0].toXMLString()); // &lt;p&gt;world&lt;/p&gt;
trace(xml.p[1].toXMLString()); // &lt;p&gt;hello&lt;/p&gt;
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#delete_(XML)" class="- topic/link "><linktext class="- topic/linktext ">delete (XML) operator</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:processingInstructions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">processingInstructions</apiName><shortdesc class="- topic/shortdesc ">
    If a name parameter is provided, lists all the children of the XML object 
    that contain processing instructions with that name.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.processingInstructions, processingInstructions
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A list of matching child objects.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the processing instructions to match.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    If a <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter is provided, lists all the children of the XML object 
    that contain processing instructions with that <codeph class="+ topic/ph pr-d/codeph ">name</codeph>. With no parameters, the method 
    lists all the children of the XML object that contain any processing instructions.
    
    </apiDesc><example conref="examples\XML.processingInstructions.1.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">processingInstructions()</codeph> method to get an
 array of processing instructions for an XML object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreProcessingInstructions = false;
var xml:XML =
    &lt;body&gt;
            foo
            &lt;?xml-stylesheet href="headlines.css" type="text/css" ?&gt;
            &lt;?instructionX ?&gt;
            
    &lt;/body&gt;;

trace(xml.processingInstructions().length()); // 2
trace(xml.processingInstructions()[0].name()); // xml-stylesheet
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:propertyIsEnumerable" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">propertyIsEnumerable</apiName><shortdesc class="- topic/shortdesc ">
    Checks whether the property p is in the set of properties that can be iterated in a 
    for..in statement applied to the XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.propertyIsEnumerable, propertyIsEnumerable
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the property can be iterated in a <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> statement, <codeph class="+ topic/ph pr-d/codeph ">true</codeph>; 
    otherwise, <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">p</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The property that you want to check.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Checks whether the property <codeph class="+ topic/ph pr-d/codeph ">p</codeph> is in the set of properties that can be iterated in a 
    <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> statement applied to the XML object. Returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph> only 
    if <codeph class="+ topic/ph pr-d/codeph ">toString(p) == "0"</codeph>. 
    
    </apiDesc><example conref="examples\XML.propertyIsEnumerable.1.as" class="- topic/example "> The following example shows that, for an XML object, the 
 <codeph class="+ topic/ph pr-d/codeph ">propertyNameIsEnumerable()</codeph> method returns a value of 
 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> only for the value <codeph class="+ topic/ph pr-d/codeph ">0</codeph>; whereas for an 
 XMLList object, the return value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for each valid index 
 value for the XMLList object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;body&gt;
             &lt;p&gt;Hello&lt;/p&gt;
               &lt;p&gt;World&lt;/p&gt;
        &lt;/body&gt;;

trace(xml.propertyIsEnumerable(0)); // true
trace(xml.propertyIsEnumerable(1)); // false

for (var propertyName:String in xml) {
    trace(xml[propertyName]);
}

var list:XMLList = xml.p;
trace(list.propertyIsEnumerable(0)); // true
trace(list.propertyIsEnumerable(1)); // true
trace(list.propertyIsEnumerable(2)); // false

for (var propertyName:String in list) { 
    trace(list[propertyName]);
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:removeNamespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeNamespace</apiName><shortdesc class="- topic/shortdesc ">
    Removes the given namespace for this object and all descendants.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.removeNamespace, removeNamespace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A copy of the resulting XML object.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Namespace</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The namespace to remove.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Removes the given namespace for this object and all descendants. The <codeph class="+ topic/ph pr-d/codeph ">removeNamespaces()</codeph> 
    method does not remove a namespace if it is referenced by the object's qualified name or the 
    qualified name of the object's attributes.
    
    </apiDesc><example conref="examples\XML.removeNamespace.1.as" class="- topic/example "> The following example shows how to remove a namespace declaration
 from an XML object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
        xmlns:dc="http://purl.org/dc/elements/1.1/" 
        xmlns="http://purl.org/rss/1.0/"&gt;
    
        &lt;!-- ... --&gt;
        
    &lt;/rdf:RDF&gt;;

trace(xml.namespaceDeclarations().length); // 3
trace(xml.namespaceDeclarations()[0] is String); // 
var dc:Namespace = xml.namespace("dc");
xml.removeNamespace(dc);
trace(xml.namespaceDeclarations().length); // 2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:replace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">replace</apiName><shortdesc class="- topic/shortdesc ">
    Replaces the properties specified by the propertyName parameter 
    with the given value parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.replace, replace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The resulting XML object, with the matching properties replaced.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">propertyName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Can be a 
    numeric value, an unqualified name for a set of XML elements, a qualified name for a set of 
    XML elements, or the asterisk wildcard ("*"). 
    Use an unqualified name to identify XML elements in the default namespace. 
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The replacement value. This can be an XML object, an XMLList object, or any value 
    that can be converted with <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph>. 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Replaces the properties specified by the <codeph class="+ topic/ph pr-d/codeph ">propertyName</codeph> parameter 
    with the given <codeph class="+ topic/ph pr-d/codeph ">value</codeph> parameter. 
    If no properties match <codeph class="+ topic/ph pr-d/codeph ">propertyName</codeph>, the XML object is left unmodified.
    
    </apiDesc><example conref="examples\XML.replace.1.as" class="- topic/example "> The following example illustrates calling the <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> method
 with an integer as the first parameter:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body&gt;
        &lt;p&gt;Hello&lt;/p&gt;
        &lt;p&gt;World&lt;/p&gt;
        &lt;hr/&gt;
    &lt;/body&gt;;

xml.replace(1, &lt;p&gt;Bob&lt;/p&gt;);
trace(xml);
</codeblock> This results in the following <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> output:
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
 &lt;body&gt;
     &lt;p&gt;Hello&lt;/p&gt;
     &lt;p&gt;Bob&lt;/p&gt;
     &lt;hr/&gt;
 &lt;/body&gt;
 </codeph></pre>
</example><example conref="examples\XML.replace.2.as" class="- topic/example "> The following example calls <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> method
 with a string as the first parameter:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body&gt;
        &lt;p&gt;Hello&lt;/p&gt;
        &lt;p&gt;World&lt;/p&gt;
        &lt;hr/&gt;
    &lt;/body&gt;;

xml.replace("p", &lt;p&gt;Hi&lt;/p&gt;); 
trace(xml);
</codeblock> This results in the following <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> output:
 
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
 &lt;body&gt;
     &lt;p&gt;Hi&lt;/p&gt;
     &lt;hr/&gt;
 &lt;/body&gt;;
 </codeph></pre>
</example><example conref="examples\XML.replace.3.as" class="- topic/example "> The following example illustrates calling the <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> method
 with a QName as the first parameter:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;ns:body xmlns:ns = "myNS"&gt;
        &lt;ns:p&gt;Hello&lt;/ns:p&gt;
        &lt;ns:p&gt;World&lt;/ns:p&gt;
        &lt;hr/&gt;
    &lt;/ns:body&gt;;

var qname:QName = new QName("myNS", "p");
xml.replace(qname, &lt;p&gt;Bob&lt;/p&gt;);
trace(xml);

</codeblock> This results in the following <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> output:
 
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
 &lt;ns:body xmlns:ns = "myNS"&gt;
     &lt;p&gt;Bob&lt;/p&gt;
     &lt;hr/&gt;
 &lt;/ns:body&gt;
 </codeph></pre>
</example><example conref="examples\XML.replace.4.as" class="- topic/example "> The following example illustrates calling the <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> method
 with the string <codeph class="+ topic/ph pr-d/codeph ">"*"</codeph> as the first parameter:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body&gt;
        &lt;p&gt;Hello&lt;/p&gt;
        &lt;p&gt;World&lt;/p&gt;
        &lt;hr/&gt;
    &lt;/body&gt;;

xml.replace("*", &lt;img src = "hello.jpg"/&gt;);
trace(xml);
</codeblock> This results in the following <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> output:
 
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
 &lt;body&gt;
     &lt;img src="hello.jpg"/&gt;
 &lt;/body&gt;
 </codeph></pre>
</example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setChildren" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setChildren</apiName><shortdesc class="- topic/shortdesc ">
    Replaces the child properties of the XML object with the specified set of XML properties, 
    provided in the value parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setChildren, setChildren
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The resulting XML object. 
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The replacement XML properties. Can be a single XML object or an XMLList object. 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Replaces the child properties of the XML object with the specified set of XML properties, 
    provided in the <codeph class="+ topic/ph pr-d/codeph ">value</codeph> parameter.
    
    </apiDesc><example conref="examples\XML.setChildren.1.as" class="- topic/example "> The following example illustrates calling the <codeph class="+ topic/ph pr-d/codeph ">setChildren()</codeph> method, first
 using an XML object as the parameter, and then using an XMLList object as the parameter:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body&gt;
        &lt;p&gt;Hello&lt;/p&gt;
        &lt;p&gt;World&lt;/p&gt;
    &lt;/body&gt;;

var list:XMLList = xml.p;

xml.setChildren(&lt;p&gt;hello&lt;/p&gt;);
trace(xml);

//    &lt;body&gt;
//        &lt;p&gt;hello&lt;/p&gt;
//    &lt;/body&gt;

xml.setChildren(list);
trace(xml);

//    &lt;body&gt;
//        &lt;p&gt;Hello&lt;/p&gt;
//        &lt;p&gt;World&lt;/p&gt;
//    &lt;/body&gt;
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setLocalName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setLocalName</apiName><shortdesc class="- topic/shortdesc ">
    Changes the local name of the XML object to the given name parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setLocalName, setLocalName
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The replacement name for the local name.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Changes the local name of the XML object to the given <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter. 
    
    </apiDesc><example conref="examples\XML.setLocalName.1.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">setLocalName()</codeph> method
 to change the local name of an XML element:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;ns:item xmlns:ns="http://example.com"&gt;
        toothbrush
    &lt;/ns:item&gt;;
    
xml.setLocalName("orderItem");
trace(xml.toXMLString()); // &lt;ns:orderItem xmlns:ns="http://example.com"&gt;toothbrush&lt;/ns:orderItem&gt;
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setName</apiName><shortdesc class="- topic/shortdesc ">
    Sets the name of the XML object to the given qualified name or attribute name.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setName, setName
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new name for the object.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Sets the name of the XML object to the given qualified name or attribute name. 
    
    </apiDesc><example conref="examples\XML.setName.1.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">setName()</codeph> method
 to change the name of an XML element:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;item&gt;
        toothbrush
    &lt;/item&gt;;
    
xml.setName("orderItem");
trace(xml.toXMLString()); // &lt;orderItem&gt;toothbrush&lt;/orderItem&gt;
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setNamespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setNamespace</apiName><shortdesc class="- topic/shortdesc ">
    Sets the namespace associated with the XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setNamespace, setNamespace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Namespace</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The new namespace.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Sets the namespace associated with the XML object.
    
    </apiDesc><example conref="examples\XML.setNamespace.1.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">soap</codeph> namespace defined in one XML object 
 and applies it to the namespace of another XML object (<codeph class="+ topic/ph pr-d/codeph ">xml2</codeph>):
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml1:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding"&gt;
            &lt;!-- ... --&gt;
        &lt;/soap:Envelope&gt;;
var ns:Namespace = xml1.namespace("soap");

var xml2:XML = 
    &lt;Envelope&gt;
        &lt;Body/&gt;
    &lt;/Envelope&gt;;
    
xml2.setNamespace(ns);

trace(xml2);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setSettings" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setSettings</apiName><shortdesc class="- topic/shortdesc ">
    Sets values for the following XML properties: ignoreComments, 
    ignoreProcessingInstructions, ignoreWhitespace,
    prettyIndent, and prettyPrinting.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setSettings, setSettings
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rest</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object with each of the following properties: 
    
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph></li></ul>
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Sets values for the following XML properties: <codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph>, 
    <codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph>, <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph>,
    <codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph>.
      
    The following are the default settings, which are applied if no <codeph class="+ topic/ph pr-d/codeph ">setObj</codeph> parameter
    is provided:
    
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.ignoreComments = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.ignoreProcessingInstructions = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.ignoreWhitespace = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.prettyIndent = 2</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.prettyPrinting = true</codeph></li></ul>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: You do not apply this method to an instance of the XML class; you apply it to 
    <codeph class="+ topic/ph pr-d/codeph ">XML</codeph>, as in the following code: <codeph class="+ topic/ph pr-d/codeph ">XML.setSettings()</codeph>.</p>
    
    </apiDesc><example conref="examples\XML.defaultSettings.1.as" class="- topic/example "> The following example shows: how to apply some custom settings (for including comments and processing
 instructions) prior to setting an XML object; how to then revert back to the default settings before setting another XML
 object; and then how to set the custom settings again (for setting any more XML objects):
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var customSettings:Object = XML.settings();

var xml1:XML = 
        &lt;foo&gt;
            &lt;!-- comment --&gt;
            &lt;?instruction ?&gt;
        &lt;/foo&gt;;
trace(xml1.toXMLString());
//    &lt;foo&gt;
//        &lt;!-- comment --&gt;
//         &lt;?instruction ?&gt;
//    &lt;/foo&gt;

XML.setSettings(XML.defaultSettings());
var xml2:XML = 
        &lt;foo&gt;
            &lt;!-- comment --&gt;
            &lt;?instruction ?&gt;
        &lt;/foo&gt;;
trace(xml2.toXMLString());
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/ignoreComments" class="- topic/link "><linktext class="- topic/linktext ">ignoreComments</linktext></link><link href="#XML/ignoreProcessingInstructions" class="- topic/link "><linktext class="- topic/linktext ">ignoreProcessingInstructions</linktext></link><link href="#XML/ignoreWhitespace" class="- topic/link "><linktext class="- topic/linktext ">ignoreWhitespace</linktext></link><link href="#XML/prettyIndent" class="- topic/link "><linktext class="- topic/linktext ">prettyIndent</linktext></link><link href="#XML/prettyPrinting" class="- topic/link "><linktext class="- topic/linktext ">prettyPrinting</linktext></link><link href="#XML/defaultSettings()" class="- topic/link "><linktext class="- topic/linktext ">defaultSettings()</linktext></link><link href="#XML/settings()" class="- topic/link "><linktext class="- topic/linktext ">settings()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:settings" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">settings</apiName><shortdesc class="- topic/shortdesc ">
    Retrieves the following properties: ignoreComments, 
    ignoreProcessingInstructions, ignoreWhitespace, 
    prettyIndent, and prettyPrinting.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.settings, settings
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object with the following XML properties:
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph></li></ul>
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Retrieves the following properties: <codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph>, 
    <codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph>, <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph>, 
    <codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph>.
    
    </apiDesc><example conref="examples\XML.defaultSettings.1.as" class="- topic/example "> The following example shows: how to apply some custom settings (for including comments and processing
 instructions) prior to setting an XML object; how to then revert back to the default settings before setting another XML
 object; and then how to set the custom settings again (for setting any more XML objects):
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var customSettings:Object = XML.settings();

var xml1:XML = 
        &lt;foo&gt;
            &lt;!-- comment --&gt;
            &lt;?instruction ?&gt;
        &lt;/foo&gt;;
trace(xml1.toXMLString());
//    &lt;foo&gt;
//        &lt;!-- comment --&gt;
//         &lt;?instruction ?&gt;
//    &lt;/foo&gt;

XML.setSettings(XML.defaultSettings());
var xml2:XML = 
        &lt;foo&gt;
            &lt;!-- comment --&gt;
            &lt;?instruction ?&gt;
        &lt;/foo&gt;;
trace(xml2.toXMLString());
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/ignoreComments" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreComments</linktext></link><link href="#XML/ignoreProcessingInstructions" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreProcessingInstructions</linktext></link><link href="#XML/ignoreWhitespace" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreWhitespace</linktext></link><link href="#XML/prettyIndent" class="- topic/link "><linktext class="- topic/linktext ">XML.prettyIndent</linktext></link><link href="#XML/prettyPrinting" class="- topic/link "><linktext class="- topic/linktext ">XML.prettyPrinting</linktext></link><link href="#XML/defaultSettings()" class="- topic/link "><linktext class="- topic/linktext ">XML.defaultSettings()</linktext></link><link href="#XML/setSettings()" class="- topic/link "><linktext class="- topic/linktext ">XML.setSettings()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:text" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">text</apiName><shortdesc class="- topic/shortdesc ">
    Returns an XMLList object of all XML properties of the XML object that represent XML text nodes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.text, text
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The list of properties.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns an XMLList object of all XML properties of the XML object that represent XML text nodes.
    
    </apiDesc><example conref="examples\XML.text.1.as" class="- topic/example "> The following example uses the <codeph class="+ topic/ph pr-d/codeph ">text()</codeph> method to get the text nodes of 
 an XML object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML =
        &lt;body&gt;
            text1
            &lt;hr/&gt;
            text2
        &lt;/body&gt;;
trace(xml.text()[0]); // text1
trace(xml.text()[1]); // text2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    Returns a string representation of the XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.toString, toString 
    
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string representation of the XML object.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns a string representation of the XML object. The rules for this conversion depend on whether  
    the XML object has simple content or complex content:
    
    <ul class="- topic/ul "><li class="- topic/li ">If the XML object has simple content, <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> returns the String contents of the 
    XML object with  the following stripped out: the start tag, attributes, namespace declarations, and 
    end tag.</li></ul>
    
    <ul class="- topic/ul "><li class="- topic/li "> If the XML object has complex content, <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> returns an XML encoded String 
    representing the entire XML object, including the start tag, attributes, namespace declarations, 
    and end tag.</li></ul>
    
    <p class="- topic/p ">To return the entire XML object every time, use <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph>.</p>
    
    
    </apiDesc><example conref="examples\XMLToStringExample1.as" class="- topic/example "> The following example shows what the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method returns when the 
 XML object has simple content:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var test:XML = &lt;type name="Joe"&gt;example&lt;/type&gt;;
trace(test.toString()); //example
</codeblock></example><example conref="examples\XMLToStringExample2.as" class="- topic/example "> The following example shows what the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method returns when the 
 XML object has complex content:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var test:XML = 
&lt;type name="Joe"&gt;
    &lt;base name="Bob"&gt;&lt;/base&gt;
    example
&lt;/type&gt;;
trace(test.toString());
  // &lt;type name="Joe"&gt;
  // &lt;base name="Bob"/&gt;
  // example
  // &lt;/type&gt; 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasSimpleContent()</linktext></link><link href="#XML/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasComplexContent()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:toXMLString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toXMLString</apiName><shortdesc class="- topic/shortdesc ">
    Returns a string representation of the XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.toXMLString, toXMLString
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string representation of the XML object.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns a string representation of the XML object. Unlike the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method,
    the <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> method always returns the start tag, attributes,
    and end tag of the XML object, regardless of whether the XML object has simple content or complex 
    content. (The <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method strips out these items for XML objects that contain 
    simple content.)
      
    </apiDesc><example conref="examples\XML.toXMLString.1.as" class="- topic/example "> The following example shows the difference between using the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method 
 (which is applied to all parameters of a <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> method, by default) and using the
 <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> method:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML =
        &lt;p&gt;hello&lt;/p&gt;;
trace(xml); // hello
trace(xml.toXMLString()); // &lt;p&gt;hello&lt;/p&gt;
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/toString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toString()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
    Returns the XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.valueOf, valueOf
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The primitive value of an XML instance.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Returns the XML object. 
    
    </apiDesc><example conref="examples\XML.valueOf.1.as" class="- topic/example "> The following example shows that the value returned by the <codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> method
 is the same as the source XML object:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = &lt;p&gt;hello&lt;/p&gt;;
trace(xml.valueOf() === xml); // true
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="XML:ignoreComments:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ignoreComments</apiName><shortdesc class="- topic/shortdesc ">
    Determines whether XML comments are ignored 
    when XML objects parse the source XML data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.ignoreComments, ignoreComments
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Determines whether XML comments are ignored 
    when XML objects parse the source XML data. By default, the comments are ignored 
    (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>). To include XML comments, set this property to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
    The <codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph> property is used only during the XML parsing, not during 
    the call to any method such as <codeph class="+ topic/ph pr-d/codeph ">myXMLObject.child(~~).toXMLString()</codeph>. 
    If the source XML includes comment nodes, they are kept or discarded during the XML parsing. 
    
    </apiDesc><example conref="examples\XML.ignoreComments.1.as" class="- topic/example "> This example shows the effect of setting <codeph class="+ topic/ph pr-d/codeph ">XML.ignoreComments</codeph>
 to <codeph class="+ topic/ph pr-d/codeph ">false</codeph> and to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
var xml1:XML = 
        &lt;foo&gt;
            &lt;!-- comment --&gt;
        &lt;/foo&gt;;
trace(xml1.toXMLString()); // &lt;foo&gt;&lt;!-- comment --&gt;&lt;/foo&gt;

XML.ignoreComments = true;
var xml2:XML = 
        &lt;foo&gt;
            &lt;!-- example --&gt;
        &lt;/foo&gt;;
trace(xml2.toXMLString()); // &lt;foo/&gt;
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#XML/child()" class="- topic/link "><linktext class="- topic/linktext ">XML.child()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link></related-links></apiValue><apiValue id="XML:ignoreProcessingInstructions:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ignoreProcessingInstructions</apiName><shortdesc class="- topic/shortdesc ">
    Determines whether XML 
    processing instructions are ignored when XML objects parse the source XML data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.ignoreProcessingInstructions, ignoreProcessingInstructions
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Determines whether XML 
    processing instructions are ignored when XML objects parse the source XML data. 
    By default, the processing instructions are ignored (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>). To include XML 
    processing instructions, set this property to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. The 
    <codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph> property is used only during the XML parsing, 
    not during the call to any method such as <codeph class="+ topic/ph pr-d/codeph ">myXMLObject.child(~~).toXMLString()</codeph>.
    If the source XML includes processing instructions nodes, they are kept or discarded during 
    the XML parsing.
    
    </apiDesc><example conref="examples\XML.ignoreProcessingInstructions.1.as" class="- topic/example "> This example shows the effect of setting <codeph class="+ topic/ph pr-d/codeph ">XML.ignoreProcessingInstructions</codeph>
 to <codeph class="+ topic/ph pr-d/codeph ">false</codeph> and to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreProcessingInstructions = false;
var xml1:XML = 
        &lt;foo&gt;
            &lt;?exampleInstruction ?&gt;
        &lt;/foo&gt;;
trace(xml1.toXMLString()); // &lt;foo&gt;&lt;?exampleInstruction ?&gt;&lt;/foo&gt;

XML.ignoreProcessingInstructions = true;
var xml2:XML = 
        &lt;foo&gt;
            &lt;?exampleInstruction ?&gt;
        &lt;/foo&gt;;
trace(xml2.toXMLString()); // &lt;foo/&gt;
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#XML/child()" class="- topic/link "><linktext class="- topic/linktext ">XML.child()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link></related-links></apiValue><apiValue id="XML:ignoreWhitespace:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ignoreWhitespace</apiName><shortdesc class="- topic/shortdesc ">
    Determines whether white space characters
    at the beginning and end of text nodes are ignored during parsing.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.ignoreWhitespace, ignoreWhitespace
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Determines whether white space characters
    at the beginning and end of text nodes are ignored during parsing. By default, 
    white space is ignored (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>). If a text node is 100% white space and the 
    <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph> property is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, then the node is not created.  
    To show white space in a text node, set the <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph> property to 
    <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
    
    <p class="- topic/p ">When you create an XML object, it caches the current value of the <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph>
    property. Changing the <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph> does not change the behavior of existing XML
    objects.</p>
    
    </apiDesc><example conref="examples\XML.ignoreWhitespace.1.as" class="- topic/example "> This example shows the effect of setting <codeph class="+ topic/ph pr-d/codeph ">XML.ignoreWhitespace</codeph>
 to <codeph class="+ topic/ph pr-d/codeph ">false</codeph> and to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreWhitespace = false;
var xml1:XML = &lt;foo&gt;    &lt;/foo&gt;;
trace(xml1.children().length()); // 1

XML.ignoreWhitespace = true;
var xml2:XML = &lt;foo&gt;    &lt;/foo&gt;;
trace(xml2.children().length()); // 0
</codeblock></example></apiValueDetail></apiValue><apiValue id="XML:prettyIndent:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prettyIndent</apiName><shortdesc class="- topic/shortdesc ">
    Determines the amount of indentation applied by 
    the toString() and toXMLString() methods when 
    the XML.prettyPrinting property is set to true.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.prettyIndent, prettyIndent
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Determines the amount of indentation applied by 
    the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> methods when 
    the <codeph class="+ topic/ph pr-d/codeph ">XML.prettyPrinting</codeph> property is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. 
    Indentation is applied with the space character, not the tab character.
    
    The default value is <codeph class="+ topic/ph pr-d/codeph ">2</codeph>.
    
    </apiDesc><example conref="examples\XML.prettyIndent.1.as" class="- topic/example "> This example shows the effect of setting the <codeph class="+ topic/ph pr-d/codeph ">XML.prettyIndent</codeph>
 static property:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = &lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;;
XML.prettyIndent = 0;
trace(xml.toXMLString());

XML.prettyIndent = 1;
trace(xml.toXMLString());

XML.prettyIndent = 2;
trace(xml.toXMLString());
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#XML/prettyPrinting" class="- topic/link "><linktext class="- topic/linktext ">prettyPrinting</linktext></link><link href="#XML/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">toXMLString()</linktext></link></related-links></apiValue><apiValue id="XML:prettyPrinting:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prettyPrinting</apiName><shortdesc class="- topic/shortdesc ">
    Determines whether the toString() 
    and toXMLString() methods normalize white space characters between some tags.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.prettyPrinting, prettyPrinting
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Determines whether the <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> 
    and <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> methods normalize white space characters between some tags. 
    The default value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
    
    </apiDesc><example conref="examples\XML.prettyPrinting.1.as" class="- topic/example "> This example shows the effect of setting <codeph class="+ topic/ph pr-d/codeph ">XML.prettyPrinting</codeph>
 static property:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = &lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;;
XML.prettyPrinting = false;
trace(xml.toXMLString());

XML.prettyPrinting = true;
trace(xml.toXMLString());
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#XML/prettyIndent" class="- topic/link "><linktext class="- topic/linktext ">prettyIndent</linktext></link><link href="#XML/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">toXMLString()</linktext></link></related-links></apiValue></apiClassifier><apiOperation id="globalOperation:Array" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Array</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of length zero or more.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">You can pass no arguments for an empty array, a single integer argument for an array of a specific length, or a single object to create an array
	 containing the one specified object.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new array. The array can be of length zero or more, or an array populated by a single 
	 specified object. 
	 <ul class="- topic/ul "><li class="- topic/li ">Calling <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> with no arguments returns an empty array.</li><li class="- topic/li ">Calling <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> with a single integer argument returns an array of the specified length, but whose elements have undefined values.</li><li class="- topic/li ">Calling <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> with a specified object returns an array with one element of the specified object.</li></ul>
	 Using the <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> function is <i class="+ topic/ph hi-d/i ">similar</i> to creating an array with the Array class constructor, but the <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> function only
	 allows one, or no, parameter value. You cannot use the the <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> function to populate the new array with several values.
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> If you try to use the <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> function to create a new array, and pass several values as parameters to populate
	 the array, you'll get a compiler error. The the <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> function only allows one parameter. Use the Array class constructor, instead, to create and
	 populate an array of several values.</p>
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> function does not cast the type of an object to an array. Use the <codeph class="+ topic/ph pr-d/codeph ">as</codeph> operator for explicit type conversion, or type casting, 
	 when the argument is not a primitive value. For more information, see the Example
	 section of this entry. If you pass an object as a parameter to the <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> function, a new array is created containing the object as an element.</p>
	 </apiDesc><example conref="examples\Array.func.4.as" class="- topic/example "> The following example demonstrates the behavior of the <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph>
 function when an argument is not a primitive value. A common use case of casting to an array
 is the conversion of an Object instance that stores its values in array format. 
 If <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> is called with an argument of type <codeph class="+ topic/ph pr-d/codeph ">Object</codeph>,
 or any other non-primitive data type, a reference to the object is stored in an element
 of the new array. In other words, if the only argument passed is an object, 
 a reference to that object becomes the first element of the new array.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var obj:Object = [ "a", "b", "c" ];
      
var newArray:Array = Array( obj );

trace(newArray == obj);    // false
trace(newArray[0] == obj); // true
trace(newArray[0][0])      // a
trace(newArray[0][1])      // b
trace(newArray[0][2])      // c
</codeblock></example><example conref="examples\Array.func.5.as" class="- topic/example "> To cast <codeph class="+ topic/ph pr-d/codeph ">obj</codeph> to an array, use the <codeph class="+ topic/ph pr-d/codeph ">as</codeph> operator, which returns an array reference
 if <codeph class="+ topic/ph pr-d/codeph ">obj</codeph> is a valid array and <codeph class="+ topic/ph pr-d/codeph ">null</codeph> otherwise:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var obj:Object = [ "a", "b", "c" ];
      
var newArray:Array = obj as Array;

trace(newArray == obj); // true
trace(newArray[0]);     // a
trace(newArray[1]);     // b
trace(newArray[2]);     // c
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array" class="- topic/link "><linktext class="- topic/linktext ">Array class</linktext></link><link href="operators.html#as" class="- topic/link "><linktext class="- topic/linktext ">as operator</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:Boolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Boolean</apiName><shortdesc class="- topic/shortdesc ">
	 Converts the expression parameter to a Boolean value and returns the value.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The result of the conversion to Boolean.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An expression or object to convert to Boolean.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Converts the <codeph class="+ topic/ph pr-d/codeph ">expression</codeph> parameter to a Boolean value and returns the value. 
	 <p class="- topic/p ">The return value depends on the data type and value of the argument, as described in the following table:</p>
	 
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Input Value</entry><entry class="- topic/entry ">Example</entry><entry class="- topic/entry ">Return Value</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(0)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(NaN)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Number (not <codeph class="+ topic/ph pr-d/codeph ">0</codeph> or <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>)</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(4)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Empty string</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean("")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Non-empty string</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean("6")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(null)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">undefined</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(undefined)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Instance of Object class</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(new Object())</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">No argument</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean()</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row></tbody></tgroup></adobetable>
	 <p class="- topic/p ">Unlike previous versions of ActionScript, the <codeph class="+ topic/ph pr-d/codeph ">Boolean()</codeph> function returns the same results as does the Boolean class constructor.</p>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:Number" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Number</apiName><shortdesc class="- topic/shortdesc ">
	 Converts a given value to a Number value.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The converted number value
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value to be converted to a number.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Converts a given value to a Number value. The following table shows the result of various input types:
	 
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Input Type/Value</entry><entry class="- topic/entry ">Example</entry><entry class="- topic/entry ">Return Value</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">undefined</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(undefined)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(null)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(true)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">1</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(false)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(NaN)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Empty string</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number("")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">String that converts to Number</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number("5")</codeph></entry><entry class="- topic/entry ">The number (e.g. <codeph class="+ topic/ph pr-d/codeph ">5</codeph>)</entry></row><row class="- topic/row "><entry class="- topic/entry ">String that does not convert to Number</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number("5a")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:Object" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Object</apiName><shortdesc class="- topic/shortdesc ">
	 Every value in ActionScript 3.0 is an object, which means that calling Object() on a value returns that value.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value specified by the <codeph class="+ topic/ph pr-d/codeph ">value</codeph> parameter.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object or a number, string, or Boolean value to convert.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Every value in ActionScript 3.0 is an object, which means that calling <codeph class="+ topic/ph pr-d/codeph ">Object()</codeph> on a value returns that value.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:String" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">String</apiName><shortdesc class="- topic/shortdesc ">
	 Returns a string representation of the specified parameter.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string representation of the value passed for the <codeph class="+ topic/ph pr-d/codeph ">expression</codeph> parameter.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> An expression to convert to a string.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns a string representation of the specified parameter.
	 <p class="- topic/p ">The following table shows the result of various input types:</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Input Type/Value</entry><entry class="- topic/entry ">Return Value</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">undefined</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">undefined</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"null"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"true"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"false"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NaN"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">String</entry><entry class="- topic/entry ">String</entry></row><row class="- topic/row "><entry class="- topic/entry ">Object</entry><entry class="- topic/entry ">Object.toString()</entry></row><row class="- topic/row "><entry class="- topic/entry ">Number</entry><entry class="- topic/entry ">String representation of the number</entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:Vector" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Vector</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new Vector instance whose elements are instances of the specified data type.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><commentPrivate>The reason this compiles with the .&lt;T&gt; designation is because
	 a dummy class "T" is declared in the top level Vector.as file. If this file is
	 built without that one, the build will fail.
	 
	 </commentPrivate></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> argument contains an element that can't be 
	 converted to the specified data type.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A Vector instance populated with the elements of the <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> array.
	 
	 </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sourceArray</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An Array or Vector instance whose elements become the elements of the result 
	 Vector. If the argument is a Vector instance whose associated data type is the same as the 
	 specified data type, the argument is returned as the function result.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new Vector instance whose elements are instances of the specified data type. 
	 When calling this function, you specify the data type of the result Vector's elements 
	 (the Vector's <i class="+ topic/ph hi-d/i ">base type</i>) using a type parameter. This function 
	 uses the same syntax that's used when declaring a Vector instance or calling the 
	 <codeph class="+ topic/ph pr-d/codeph ">new Vector.&lt;T&gt;()</codeph> constructor:
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var v:Vector.&lt;String&gt; = Vector.&lt;String&gt;(["Hello", "World"]);</codeblock>
	 
	 <p class="- topic/p ">The resulting Vector is populated 
	 with the values in the elements of the <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> argument. 
	 If the <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> argument is already a Vector.&lt;T&gt;  
	 instance where <codeph class="+ topic/ph pr-d/codeph ">T</codeph> is the base type, the function returns 
	 that Vector. Otherwise, the result Vector 
	 is populated with the elements of the <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> Array or Vector.</p>
	 
	 <p class="- topic/p ">In either case, the data type of all the elements of the <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> 
	 argument must match the base type <codeph class="+ topic/ph pr-d/codeph ">T</codeph> specified in the function call.</p>
	 
	 <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> argument has <codeph class="+ topic/ph pr-d/codeph ">length</codeph> 0, the function 
	 returns an empty Vector.</p>
	 
	 <p class="- topic/p ">If a Vector is passed as the <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> argument and its base type 
	 is not <codeph class="+ topic/ph pr-d/codeph ">T</codeph>, or if an Array is passed and its elements are not all instances of  
	 data type <codeph class="+ topic/ph pr-d/codeph ">T</codeph>, an attempt is made to convert the values to the base type. If 
	 the values can be automatically converted, the result Vector contains the converted values. 
	 If no conversion can be made, an error occurs.</p>
	 
	 <p class="- topic/p ">Likewise, if an element in the <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> argument is an instance of 
	 a subclass of the base type <codeph class="+ topic/ph pr-d/codeph ">T</codeph>, the call succeeds and the element is 
	 added to the resulting Vector. This works even if the 
	 <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> argument is a Vector whose base type is a subclass 
	 of <codeph class="+ topic/ph pr-d/codeph ">T</codeph>. In fact, this is the only way to convert a Vector with base type 
	 <codeph class="+ topic/ph pr-d/codeph ">T</codeph> to a Vector with a base type that's a superclass of <codeph class="+ topic/ph pr-d/codeph ">T</codeph>.</p>
	 
	 <p class="- topic/p ">For example, the following code results in a compile error in strict mode, or a 
	 TypeError at run time, because it attempts to assign a Vector.&lt;Sprite&gt; to a 
	 Vector.&lt;DisplayObject&gt; variable (Sprite is a subclass of DisplayObject):</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 var v1:Vector.&lt;Sprite&gt; = new Vector.&lt;Sprite&gt;();
	 v1[0] = new Sprite();
	 var v2:Vector.&lt;DisplayObject&gt; = v1;
	 </codeblock>
	 
	 <p class="- topic/p ">The following alternative version of the code successfully copies the elements of a 
	 Vector.&lt;Sprite&gt; instance to a Vector.&lt;DisplayObject&gt; instance:</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 var v1:Vector.&lt;Sprite&gt; = new Vector.&lt;Sprite&gt;();
	 v1[0] = new Sprite();
	 var v2:Vector.&lt;DisplayObject&gt; = Vector.&lt;DisplayObject&gt;(v1);
	 </codeblock>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector" class="- topic/link "><linktext class="- topic/linktext ">Vector class</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:XMLList" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">XMLList</apiName><shortdesc class="- topic/shortdesc ">
     Converts an object to an XMLList object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XMLList object containing values held in the converted object.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Object to be converted into an XMLList object.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Converts an object to an XMLList object.
     <p class="- topic/p ">The following table describes return values for various input types.</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Parameter Type</entry><entry class="- topic/entry ">Return Value</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">Boolean</entry><entry class="- topic/entry ">Value is first converted to a string, then converted to an XMLList object.</entry></row><row class="- topic/row "><entry class="- topic/entry ">Null</entry><entry class="- topic/entry ">A runtime error occurs (TypeError exception).</entry></row><row class="- topic/row "><entry class="- topic/entry ">Number</entry><entry class="- topic/entry ">Value is first converted to a string, then converted to an XMLList object.</entry></row><row class="- topic/row "><entry class="- topic/entry ">Object</entry><entry class="- topic/entry ">Converts to XMLList only if the value is a String, Number or Boolean value. Otherwise a runtime error occurs (TypeError exception).</entry></row><row class="- topic/row "><entry class="- topic/entry ">String</entry><entry class="- topic/entry ">Value is converted to an XMLList object.</entry></row><row class="- topic/row "><entry class="- topic/entry ">Undefined</entry><entry class="- topic/entry ">A runtime error occurs (TypeError exception).</entry></row><row class="- topic/row "><entry class="- topic/entry ">XML</entry><entry class="- topic/entry ">Value is converted to an XMLList object.</entry></row><row class="- topic/row "><entry class="- topic/entry ">XMLList</entry><entry class="- topic/entry ">Input value is returned unchanged.</entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/XML()" class="- topic/link "><linktext class="- topic/linktext ">XML()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:XML" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">XML</apiName><shortdesc class="- topic/shortdesc ">
	 Converts an object to an XML object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An XML object containing values held in the converted object.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Object to be converted to XML.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Converts an object to an XML object. 
	 <p class="- topic/p ">The following table describes return values for various input types.</p>
	 	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Parameter Type</entry><entry class="- topic/entry ">Return Value</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">Boolean</entry><entry class="- topic/entry ">Value is first converted to a string, then converted to an XML object.</entry></row><row class="- topic/row "><entry class="- topic/entry ">Null</entry><entry class="- topic/entry ">A runtime error occurs (TypeError exception).</entry></row><row class="- topic/row "><entry class="- topic/entry ">Number</entry><entry class="- topic/entry ">Value is first converted to a string, then converted to an XML object.</entry></row><row class="- topic/row "><entry class="- topic/entry ">Object</entry><entry class="- topic/entry ">Converts to XML only if the value is a String, Number or Boolean value. Otherwise a runtime error occurs (TypeError exception).</entry></row><row class="- topic/row "><entry class="- topic/entry ">String</entry><entry class="- topic/entry ">Value is converted to XML.</entry></row><row class="- topic/row "><entry class="- topic/entry ">Undefined</entry><entry class="- topic/entry ">A runtime error occurs (TypeError exception).</entry></row><row class="- topic/row "><entry class="- topic/entry ">XML</entry><entry class="- topic/entry ">Input value is returned unchanged.</entry></row><row class="- topic/row "><entry class="- topic/entry ">XMLList</entry><entry class="- topic/entry ">Returns an XML object only if the XMLList object contains only one property of type XML. Otherwise a runtime error occurs (TypeError exception).</entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/XMLList()" class="- topic/link "><linktext class="- topic/linktext ">XMLList()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:decodeURIComponent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">decodeURIComponent</apiName><shortdesc class="- topic/shortdesc ">
	 Decodes an encoded URI component into a string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string in which all characters previously escaped by the <codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent</codeph> function are
	 restored to their unescaped representation.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string encoded with the <codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent</codeph> function.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Decodes an encoded URI component into a string. Returns a string in which 
	 all characters previously escaped by the <codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent</codeph> 
	 function are restored to their uncoded representation.
	 <p class="- topic/p ">This function differs from the <codeph class="+ topic/ph pr-d/codeph ">decodeURI()</codeph> function in that it is intended for use only with a part of a URI string, called a URI component.
	 A URI component is any text that appears between special characters called <i class="+ topic/ph hi-d/i ">component separators</i> 
     (<codeph class="+ topic/ph pr-d/codeph ">: / ; and ? </codeph>). 
	 Common examples of a URI component are "http" and "www.adobe.com".</p>
	 <p class="- topic/p ">Another important difference between this function and <codeph class="+ topic/ph pr-d/codeph ">decodeURI()</codeph> is that because this function
	 assumes that it is processing a URI component it treats the escape sequences that represent special separator characters (<codeph class="+ topic/ph pr-d/codeph ">; / ? : @ &amp; = + $ , #</codeph>) as regular
	 text that should be decoded. </p>
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/decodeURI()" class="- topic/link "><linktext class="- topic/linktext ">decodeURI()</linktext></link><link href="#global/encodeURI()" class="- topic/link "><linktext class="- topic/linktext ">encodeURI()</linktext></link><link href="#global/encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:decodeURI" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">decodeURI</apiName><shortdesc class="- topic/shortdesc ">
	 Decodes an encoded URI into a string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string in which all characters previously escaped by the <codeph class="+ topic/ph pr-d/codeph ">encodeURI</codeph> function are
	 restored to their unescaped representation.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string encoded with the <codeph class="+ topic/ph pr-d/codeph ">encodeURI</codeph> function.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Decodes an encoded URI into a string. Returns a string in which all characters previously encoded 
	 by the <codeph class="+ topic/ph pr-d/codeph ">encodeURI</codeph> function are restored to their unencoded representation.
	 <p class="- topic/p ">The following table shows the set of escape sequences that are <i class="+ topic/ph hi-d/i ">not</i> decoded to characters by the <codeph class="+ topic/ph pr-d/codeph ">decodeURI</codeph> function. Use <codeph class="+ topic/ph pr-d/codeph ">decodeURIComponent()</codeph> to decode the escape sequences in this table.</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Escape sequences not decoded</entry><entry class="- topic/entry ">Character equivalents</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%23</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">#</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%24</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%26</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">&amp;</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%2B</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">+</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%2C</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">,</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%2F</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">/</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%3A</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">:</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%3B</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">;</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%3D</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">=</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%3F</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">?</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%40</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">@</codeph></entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\DecodeURIExample.as" class="- topic/example "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">package {
    import flash.display.Sprite;

    public class DecodeURIExample extends Sprite {
        public function DecodeURIExample() {
            var uri:String = "http://www.example.com/application.jsp?user=&lt;user name='some user'&gt;&lt;/user&gt;";
            var encoded:String = encodeURI(uri);
            var decoded:String = decodeURI(encoded);
            trace(uri);        // http://www.example.com/application.jsp?user=&lt;user name='some user'&gt;&lt;/user&gt;
            trace(encoded);    // http://www.example.com/application.jsp?user=%3Cuser%20name='some%20user'%3E%3C/user%3E
            trace(decoded);    // http://www.example.com/application.jsp?user=&lt;user name='some user'&gt;&lt;/user&gt;
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/decodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">decodeURIComponent()</linktext></link><link href="#global/encodeURI()" class="- topic/link "><linktext class="- topic/linktext ">encodeURI()</linktext></link><link href="#global/encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:encodeURIComponent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodeURIComponent</apiName><shortdesc class="- topic/shortdesc ">
	 Encodes a string into a valid URI component.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Encodes a string into a valid URI component. Converts a substring of a URI into a 
	 string in which all characters are encoded as UTF-8 escape sequences unless a character
	 belongs to a very small group of basic characters.
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent()</codeph> function differs from the <codeph class="+ topic/ph pr-d/codeph ">encodeURI()</codeph> function in that it is intended for use only with a part of a URI string, called a URI component.
	 A URI component is any text that appears between special characters called <i class="+ topic/ph hi-d/i ">component separators</i>
     (<codeph class="+ topic/ph pr-d/codeph ">: / ; and ? </codeph>). 
	 Common examples of a URI component are "http" and "www.adobe.com".</p>
	 <p class="- topic/p ">Another important difference between this function and <codeph class="+ topic/ph pr-d/codeph ">encodeURI()</codeph> is that because this function
	 assumes that it is processing a URI component it treats the special separator characters (<codeph class="+ topic/ph pr-d/codeph ">; / ? : @ &amp; = + $ , #</codeph>) as regular
	 text that should be encoded. </p>
	 <p class="- topic/p ">The following table shows all characters that are <i class="+ topic/ph hi-d/i ">not</i> converted to UTF-8 escape sequences by the <codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent</codeph> function.</p>
	 <adobetable class="innertable"><tgroup cols="1" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Characters not encoded</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0 1 2 3 4 5 6 7 8 9</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">a b c d e f g h i j k l m n o p q r s t u v w x y z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">- _ . ! ~ ~~ ' ( )</codeph></entry></row></tbody></tgroup></adobetable>	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/decodeURI()" class="- topic/link "><linktext class="- topic/linktext ">decodeURI()</linktext></link><link href="#global/decodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">decodeURIComponent()</linktext></link><link href="#global/encodeURI()" class="- topic/link "><linktext class="- topic/linktext ">encodeURI()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:encodeURI" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodeURI</apiName><shortdesc class="- topic/shortdesc ">
	 Encodes a string into a valid URI (Uniform Resource Identifier).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string with certain characters encoded as UTF-8 escape sequences.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string representing a complete URI.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Encodes a string into a valid URI (Uniform Resource Identifier). 
	 Converts a complete URI into a string in which all characters are encoded 
	 as UTF-8 escape sequences unless a character belongs to a small group of basic characters.
	 <p class="- topic/p ">The following table shows the entire set of basic characters that are <i class="+ topic/ph hi-d/i ">not</i> converted to UTF-8 escape sequences by the <codeph class="+ topic/ph pr-d/codeph ">encodeURI</codeph> function.</p>
	 <adobetable class="innertable"><tgroup cols="1" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Characters not encoded</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0 1 2 3 4 5 6 7 8 9</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">a b c d e f g h i j k l m n o p q r s t u v w x y z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">; / ? : @ &amp; = + $ , #</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">- _ . ! ~ ~~ ' ( )</codeph></entry></row></tbody></tgroup></adobetable>
	 </apiDesc><example conref="examples\EncodeURIExample.as" class="- topic/example "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">package {
    import flash.display.Sprite;

    public class EncodeURIExample extends Sprite {
        public function EncodeURIExample() {
            var uri:String = "http://www.example.com/application.jsp?user=&lt;user name='some user'&gt;&lt;/user&gt;";
            var encoded:String = encodeURI(uri);
            var decoded:String = decodeURI(encoded);
            trace(uri);        // http://www.example.com/application.jsp?user=&lt;user name='some user'&gt;&lt;/user&gt;
            trace(encoded);    // http://www.example.com/application.jsp?user=%3Cuser%20name='some%20user'%3E%3C/user%3E
            trace(decoded);    // http://www.example.com/application.jsp?user=&lt;user name='some user'&gt;&lt;/user&gt;
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/decodeURI()" class="- topic/link "><linktext class="- topic/linktext ">decodeURI()</linktext></link><link href="#global/decodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">decodeURIComponent()</linktext></link><link href="#global/encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:escape" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">escape</apiName><shortdesc class="- topic/shortdesc ">
	 Converts the parameter to a string and encodes it in a URL-encoded format, 
	 where most nonalphanumeric characters are replaced with % hexadecimal sequences.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A URL-encoded string.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The expression to convert into a string and encode in a URL-encoded format.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Converts the parameter to a string and encodes it in a URL-encoded format, 
	 where most nonalphanumeric characters are replaced with <codeph class="+ topic/ph pr-d/codeph ">%</codeph> hexadecimal sequences. 
	 When used in a URL-encoded string, the percentage symbol (<codeph class="+ topic/ph pr-d/codeph ">%</codeph>) is used to introduce 
	 escape characters, and is not equivalent to the modulo operator (<codeph class="+ topic/ph pr-d/codeph ">%</codeph>).
	 <p class="- topic/p ">The following table shows all characters that are <i class="+ topic/ph hi-d/i ">not</i> converted to escape sequences by the <codeph class="+ topic/ph pr-d/codeph ">escape()</codeph> function.</p>
	 <adobetable class="innertable"><tgroup cols="1" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Characters not encoded</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0 1 2 3 4 5 6 7 8 9</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">a b c d e f g h i j k l m n o p q r s t u v w x y z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">@ - _ . ~~ + /</codeph></entry></row></tbody></tgroup></adobetable>	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> Use the <codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent()</codeph> function, instead of the <codeph class="+ topic/ph pr-d/codeph ">escape()</codeph> function, to treat 
	 special separator characters (<codeph class="+ topic/ph pr-d/codeph ">@ + /</codeph>) as regular
	 text to encode.</p>
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/unescape()" class="- topic/link "><linktext class="- topic/linktext ">unescape()</linktext></link><link href="#global/encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:int" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">int</apiName><shortdesc class="- topic/shortdesc ">
	 Converts a given numeric value to an integer value.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The converted integer value.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value to be converted to an integer.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Converts a given numeric value to an integer value. Decimal values are truncated at the decimal point.
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/uint()" class="- topic/link "><linktext class="- topic/linktext ">uint()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:isFinite" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isFinite</apiName><shortdesc class="- topic/shortdesc ">
	 Returns true if the value is a finite number, 
	 or false if the value is Infinity or -Infinity.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0." class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if it is a finite number 
	 or <codeph class="+ topic/ph pr-d/codeph ">false</codeph> if it is infinity or negative infinity
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number to evaluate as finite or infinite.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the value is a finite number, 
	 or <codeph class="+ topic/ph pr-d/codeph ">false</codeph> if the value is <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> or <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph>.
	 The presence of <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> or <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph> indicates a mathematical
	 error condition such as division by 0.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:isNaN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isNaN</apiName><shortdesc class="- topic/shortdesc ">
	 Returns true if the value is NaN(not a number).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the value is <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>(not a number) and <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A numeric value or mathematical expression to evaluate.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the value is <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>(not a number). The <codeph class="+ topic/ph pr-d/codeph ">isNaN()</codeph> function is useful for checking whether a mathematical expression evaluates successfully to a number. 
	 The most common use of <codeph class="+ topic/ph pr-d/codeph ">isNaN()</codeph> is to check the value returned from the <codeph class="+ topic/ph pr-d/codeph ">parseInt()</codeph>and <codeph class="+ topic/ph pr-d/codeph ">parseFloat()</codeph> functions. The <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> value is a special member of the Number data type that represents a value that is "not a number." 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note</b>: The <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> value is not a member of the int or uint data types.</p>
	 <p class="- topic/p ">The following table describes the return value of <codeph class="+ topic/ph pr-d/codeph ">isNaN()</codeph> on various input types and
	 values. (If your compiler warnings are set to Strict Mode, some of the following operations will generate
	 compiler warnings.)</p>
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Input Type/Value</entry><entry class="- topic/entry ">Example</entry><entry class="- topic/entry ">Return Value</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">0 divided by 0</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN(0/0)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Non-zero number divided by <codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN(5/0)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Square root of a negative number</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN(Math.sqrt(-1))</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Arcsine of number greater than 1 or less than 0</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN(Math.asin(2))</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">String that can be converted to Number</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN("5")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">String that cannot be converted to Number</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN("5a")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:isXMLName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isXMLName</apiName><shortdesc class="- topic/shortdesc ">
	 Determines whether the specified string is a valid name for an XML element or attribute.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the <codeph class="+ topic/ph pr-d/codeph ">str</codeph> argument is a valid XML name; <codeph class="+ topic/ph pr-d/codeph ">false</codeph> otherwise.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string to evaluate.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Determines whether the specified string is a valid name for an XML element or attribute.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:parseFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parseFloat</apiName><shortdesc class="- topic/shortdesc ">
	 Converts a string to a floating-point number.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number or <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> (not a number).
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string to read and convert to a floating-point number.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Converts a string to a floating-point number. The function reads, or <i class="+ topic/ph hi-d/i ">parses</i>, and returns the numbers in a string until it reaches a character that is not a part of the initial number. If the string does not begin with a number that can be parsed, <codeph class="+ topic/ph pr-d/codeph ">parseFloat()</codeph> returns <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>. White space preceding valid integers is ignored, as are trailing nonnumeric characters.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:parseInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parseInt</apiName><shortdesc class="- topic/shortdesc ">
	 Converts a string to an integer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number or <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> (not a number).
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string to convert to an integer.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">radix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer representing the radix (base) of the number to parse. Legal values are from 2 to 36.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Converts a string to an integer. If the specified string in the parameters cannot be converted to a number, the function returns <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>. Strings beginning with 0x are interpreted as hexadecimal numbers. Unlike in previous versions of ActionScript, integers beginning with 0 are <i class="+ topic/ph hi-d/i ">not</i> interpreted as octal numbers. You must specify a radix of 8 for octal numbers. White space and zeroes preceding valid integers are ignored, as are trailing nonnumeric characters.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:trace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">trace</apiName><shortdesc class="- topic/shortdesc ">
	 Displays expressions, or writes to log files, while debugging.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">One or more (comma separated) expressions to evaluate. For multiple expressions, a space is inserted between each expression in the output.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Displays expressions, or writes to log files, while debugging. A single trace statement can support multiple arguments. If any argument 
	 in a trace statement includes a data type other than a String, the trace function invokes the associated <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> method
	 for that data type. For example, if the argument is a Boolean value the trace function invokes <codeph class="+ topic/ph pr-d/codeph ">Boolean.toString()</codeph> and 
	 displays the return value. 
	 </apiDesc><example conref="examples\TraceExample.as" class="- topic/example "> The following example uses the class <codeph class="+ topic/ph pr-d/codeph ">TraceExample</codeph> to 
 show how the <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> method can be used to print a simple string.  Generally,
 the message will be printed to a "Debug" console.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class TraceExample extends Sprite {

        public function TraceExample() {
            trace("Hello World");
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="globalOperation:uint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">uint</apiName><shortdesc class="- topic/shortdesc ">
	 Converts a given numeric value to an unsigned integer value.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The converted integer value.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A value to be converted to an integer.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Converts a given numeric value to an unsigned integer value. Decimal values are truncated at the decimal point.
	 <p class="- topic/p ">The following table describes the return value of <codeph class="+ topic/ph pr-d/codeph ">uint()</codeph> on various input types and values.</p>
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Input Type/Value</entry><entry class="- topic/entry ">Example</entry><entry class="- topic/entry ">Return Value</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">undefined</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(undefined)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(null)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(0)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(NaN)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Positive floating-point number</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(5.31)</codeph></entry><entry class="- topic/entry ">Truncated unsigned integer (e.g. <codeph class="+ topic/ph pr-d/codeph ">5</codeph>)</entry></row><row class="- topic/row "><entry class="- topic/entry ">Negative floating-point number</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(-5.78)</codeph></entry><entry class="- topic/entry ">Truncates to integer then applies rule for negative integers</entry></row><row class="- topic/row "><entry class="- topic/entry ">Negative integer</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(-5)</codeph></entry><entry class="- topic/entry ">Sum of <codeph class="+ topic/ph pr-d/codeph ">uint.MAX_VALUE</codeph> and the negative integer (for example, <codeph class="+ topic/ph pr-d/codeph ">uint.MAX_VALUE + (-5)</codeph>)</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(true)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">1</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(false)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Empty String</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint("")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">String that converts to Number</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint("5")</codeph></entry><entry class="- topic/entry ">The number</entry></row><row class="- topic/row "><entry class="- topic/entry ">String that does not convert to Number</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint("5a")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row></tbody></tgroup></adobetable>

	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/int()" class="- topic/link "><linktext class="- topic/linktext ">int()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:unescape" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">unescape</apiName><shortdesc class="- topic/shortdesc ">
	 Evaluates the parameter str as a string, decodes the string from URL-encoded format 
	 (converting all hexadecimal sequences to ASCII characters), and returns the string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string decoded from a URL-encoded parameter.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string with hexadecimal sequences to escape.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Evaluates the parameter <codeph class="+ topic/ph pr-d/codeph ">str</codeph> as a string, decodes the string from URL-encoded format 
	 (converting all hexadecimal sequences to ASCII characters), and returns the string.
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="globalValue:-Infinity" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">-Infinity</apiName><shortdesc class="- topic/shortdesc ">
 A special value representing negative Infinity.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A special value representing negative <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph>. The value of this constant is the same as <codeph class="+ topic/ph pr-d/codeph ">Number.NEGATIVE_INFINITY</codeph>.
 </apiDesc><example conref="examples\Constants.NegInfinity.1.as" class="- topic/example "> The result of division by 0 is <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph>, but only 
 when the divisor is a negative number.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

trace(0 / 0);  // NaN
trace(7 / 0);  // Infinity
trace(-7 / 0); // -Infinity


</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#Number/NEGATIVE_INFINITY" class="- topic/link "><linktext class="- topic/linktext ">Number.NEGATIVE_INFINITY</linktext></link></related-links></apiValue><apiValue id="globalValue:Infinity" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">Infinity</apiName><shortdesc class="- topic/shortdesc ">
 A special value representing positive Infinity.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A special value representing positive <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph>. The value of this constant is the same as <codeph class="+ topic/ph pr-d/codeph ">Number.POSITIVE_INFINITY</codeph>.
 </apiDesc><example conref="examples\Constants.Infinity.1.as" class="- topic/example "> The result of division by 0 is <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph>, but only 
 when the divisor is a positive number.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

trace(0 / 0);  // NaN
trace(7 / 0);  // Infinity
trace(-7 / 0); // -Infinity


</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#Number/POSITIVE_INFINITY" class="- topic/link "><linktext class="- topic/linktext ">Number.POSITIVE_INFINITY</linktext></link></related-links></apiValue><apiValue id="globalValue:NaN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NaN</apiName><shortdesc class="- topic/shortdesc ">
 A special member of the Number data type that represents a value that is "not a number" (NaN).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A special member of the Number data type that represents a value that is "not a number" (<codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>). 
 When a mathematical expression results in a value that cannot be expressed as a number, the result is <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>.
 The following list describes common expressions that result in <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>.
 <ul class="- topic/ul "><li class="- topic/li ">Division by 0 results in <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> only if the divisor is also 0. If the divisor is greater than 0, division by 0 results in <codeph class="+ topic/ph pr-d/codeph "><codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph></codeph>. If the divisor is less than 0,  division by 0 results in <codeph class="+ topic/ph pr-d/codeph "><codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph></codeph>;</li><li class="- topic/li ">Square root of a negative number;</li><li class="- topic/li ">The arcsine of a number outside the valid range of 0 to 1;</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> subtracted from <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph>;</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> or <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph> divided by <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> or <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph>;</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> or <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph> multiplied by 0;</li></ul>
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> value is not a member of the int or uint data types.</p>
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> value is not considered equal to any other value, including <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>, which makes it impossible to use the equality operator to test whether an expression is <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>. To determine whether a number is the <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> function, use <codeph class="+ topic/ph pr-d/codeph ">isNaN()</codeph>.</p>
 
 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#global/isNaN()" class="- topic/link "><linktext class="- topic/linktext ">isNaN()</linktext></link><link href="#Number/NaN" class="- topic/link "><linktext class="- topic/linktext ">Number.NaN</linktext></link></related-links></apiValue><apiValue id="globalValue:undefined" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">undefined</apiName><shortdesc class="- topic/shortdesc ">
 A special value that applies to untyped variables that have not been initialized or dynamic object properties that are not initialized.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiType value="" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A special value that applies to untyped variables that have not been initialized or dynamic object properties that are not initialized.
 In ActionScript 3.0, only variables that are untyped can hold the value <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>,
 which is not true in ActionScript 1.0 and ActionScript 2.0.
 For example, both of the following variables are <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> because they are untyped and unitialized:
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">var foo;</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">var bar:~~;</codeph></li></ul>
 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> value also applies to uninitialized or undefined properties of dynamic objects.
 For example, if an object is an instance of the Object class, 
 the value of any dynamically added property is <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> until a value is assigned to that property.
 </p>
 <p class="- topic/p ">Results vary when <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> is used with various functions:</p>
 <ul class="- topic/ul "><li class="- topic/li ">The value returned by <codeph class="+ topic/ph pr-d/codeph ">String(undefined)</codeph> is <codeph class="+ topic/ph pr-d/codeph ">"undefined"</codeph> (<codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> is
 converted to a string).</li><li class="- topic/li ">The value returned by <codeph class="+ topic/ph pr-d/codeph ">Number(undefined)</codeph> is <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>.</li><li class="- topic/li ">The value returned by <codeph class="+ topic/ph pr-d/codeph ">int(undefined)</codeph> and <codeph class="+ topic/ph pr-d/codeph ">uint(undefined)</codeph> is 0.</li><li class="- topic/li ">The value returned by <codeph class="+ topic/ph pr-d/codeph ">Object(undefined)</codeph> is a new Object instance.</li><li class="- topic/li ">When the value <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> is assigned to a typed variable, 
 the value is converted to the default value of the data type.</li></ul>
 <p class="- topic/p ">Do not confuse <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> with <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
 When <codeph class="+ topic/ph pr-d/codeph ">null</codeph> and <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> are compared with the equality
 (<codeph class="+ topic/ph pr-d/codeph ">==</codeph>) operator, they compare as equal. However, when <codeph class="+ topic/ph pr-d/codeph ">null</codeph> and <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> are
 compared with the strict equality (<codeph class="+ topic/ph pr-d/codeph ">===</codeph>) operator, they compare
 as not equal.</p>
 </apiDesc><example conref="examples\Constants.undefined.1.as" class="- topic/example "> In the following example, an untyped variable, <codeph class="+ topic/ph pr-d/codeph ">myVar</codeph> is declared but not initialized.
 The value of <codeph class="+ topic/ph pr-d/codeph ">myVar</codeph> is <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> because the variable is untyped.
 This is true whether the variable has no type annotation or uses the special (~~) untyped annotation (<codeph class="+ topic/ph pr-d/codeph ">var myVar:~~;</codeph>).
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

// trace value of untyped and uninitialized variable
var myVar;
trace(myVar); // undefined
</codeblock></example><example conref="examples\Constants.undefined.2.as" class="- topic/example "> The same rule applies to uninitialized properties of a dynamic object. For example, given an instance, <codeph class="+ topic/ph pr-d/codeph ">obj</codeph>, of the
 dynamic class <codeph class="+ topic/ph pr-d/codeph ">A</codeph>, the value of <codeph class="+ topic/ph pr-d/codeph ">obj.propName</codeph>, which is an uninitialized 
 property of the <codeph class="+ topic/ph pr-d/codeph ">obj</codeph> instance, is <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

dynamic class A {}
var obj:A = new A()

// trace undefined property of obj
trace(obj.propName); // undefined

</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="statements.html#null" class="- topic/link "><linktext class="- topic/linktext ">null</linktext></link></related-links></apiValue><apiClassifier languages="" id="globalClassifier:uint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">uint</apiName><shortdesc class="- topic/shortdesc ">
 The uint class provides methods for working with a data type representing a 32-bit unsigned integer.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">uint object, uint, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The uint class provides methods for working with a data type representing a 32-bit unsigned integer. Because an unsigned integer can only be 
 positive, its maximum value is twice that of the int class.
 <p class="- topic/p ">The range of values represented by the uint class is 0 to 4,294,967,295 (2^32-1).</p>
 <p class="- topic/p ">You can create a uint object by declaring a variable of type uint and assigning the variable a literal value. The default value of a variable of type uint is <codeph class="+ topic/ph pr-d/codeph ">0</codeph>.</p>
 <p class="- topic/p ">The uint class is primarily useful for pixel color values (ARGB and RGBA) and other situations where 
 the int data type does not work well. For example, the number 0xFFFFFFFF, which 
 represents the color value white with an alpha value of 255, can't be represented 
 using the int data type because it is not within the valid range of the int values.</p> 
 
 <p class="- topic/p ">The following example creates a uint object and calls the <codeph class="+ topic/ph pr-d/codeph ">
 toString()</codeph> method:</p>
 <pre xml:space="preserve" class="- topic/pre ">
 var myuint:uint = 1234;
 trace(myuint.toString()); // 1234
 </pre>
 <p class="- topic/p ">The following example assigns the value of the <codeph class="+ topic/ph pr-d/codeph ">MIN_VALUE</codeph> 
 property to a variable without the use of the constructor:</p>
 <pre xml:space="preserve" class="- topic/pre ">
 var smallest:uint = uint.MIN_VALUE;
 trace(smallest.toString()); // 0
 </pre> 
 
 </apiDesc><example conref="examples\UintExample.as" class="- topic/example "> The following example declares a uint <codeph class="+ topic/ph pr-d/codeph ">i</codeph> within a <codeph class="+ topic/ph pr-d/codeph ">for</codeph> loop, 
 which prints out the digits 0 to 9 (since uint defaults to 0).
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;

    public class UintExample extends Sprite {
        public function UintExample() {
            for(var i:uint; i &lt; 10; i++) {
                trace(i);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="int.html" class="- topic/link "><linktext class="- topic/linktext ">int</linktext></link><link href="Number.html" class="- topic/link "><linktext class="- topic/linktext ">Number</linktext></link></related-links><apiConstructor id="uint:uint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">uint</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a new uint object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new number, constructor
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The numeric value of the uint object being created, 
	 or a value to be converted to a number. If <codeph class="+ topic/ph pr-d/codeph ">num</codeph> is not provided,
	 the default value is <codeph class="+ topic/ph pr-d/codeph ">0</codeph>.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a new uint object. You can create a variable of uint type and assign it a literal value. The <codeph class="+ topic/ph pr-d/codeph ">new uint()</codeph> constructor is primarily used 
	 as a placeholder. A uint object is not the same as the <codeph class="+ topic/ph pr-d/codeph ">
	 uint()</codeph> function, which converts a parameter to a primitive value.
	 
	 </apiDesc><example class="- topic/example ">The following code constructs two new uint objects; the first by assigning a literal value, and the second by using the constructor function:
	 <pre xml:space="preserve" class="- topic/pre ">
	 var n1:uint = 3;
	 var n2:uint = new uint(10);
	 </pre>
	 
	 </example></apiConstructorDetail></apiConstructor><apiOperation id="uint:AS3:toExponential" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toExponential</apiName><shortdesc class="- topic/shortdesc ">
      Returns a string representation of the number in exponential notation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Throws an exception if the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> argument is outside the range 0 to 20.
	  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer between 0 and 20, inclusive, that represents the desired number of decimal places.
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Returns a string representation of the number in exponential notation. The string contains
      one digit before the decimal point and up to 20 digits after the decimal point, as
      specified by the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> parameter.
      </apiDesc><example conref="examples\Number.toExponential.1.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toExponential(2)</codeph> returns a string in
 exponential notation.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 315003;
trace(num.toExponential(2)); // 3.15e+5

</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:toFixed" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toFixed</apiName><shortdesc class="- topic/shortdesc ">
     Returns a string representation of the number in fixed-point notation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Throws an exception if the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> argument is outside the range 0 to 20.
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer between 0 and 20, inclusive, that represents the desired number of decimal places.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a string representation of the number in fixed-point notation. 
     Fixed-point notation means that the string will contain a specific number of digits 
     after the decimal point, as specified in the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> parameter.
     The valid range for the <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> parameter is from 0 to 20. 
     Specifying a value outside this range throws an exception.
     
     </apiDesc><example conref="examples\Number.toFixed.1.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toFixed(3)</codeph> returns a string that rounds
 to three decimal places.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 7.31343;
trace(num.toFixed(3)); // 7.313
</codeblock></example><example conref="examples\Number.toFixed.2.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toFixed(2)</codeph> returns a string that adds
 trailing zeroes.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4;
trace(num.toFixed(2)); // 4.00
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:toPrecision" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toPrecision</apiName><shortdesc class="- topic/shortdesc ">
      Returns a string representation of the number either in exponential notation or in
      fixed-point notation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Throws an exception if the <codeph class="+ topic/ph pr-d/codeph ">precision</codeph> argument is outside the range 1 to 21.
	  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">precision</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer between 1 and 21, inclusive, that represents the desired number of digits to represent in the resulting string.
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Returns a string representation of the number either in exponential notation or in
      fixed-point notation. The string will contain the number of digits specified in the
      <codeph class="+ topic/ph pr-d/codeph ">precision</codeph> parameter.
      </apiDesc><example conref="examples\Number.toPrecision.1.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> returns a string with
 only three digits. The string is in fixed-point notation because exponential notation is not required.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 31.570;
trace(num.toPrecision(3)); // 31.6
</codeblock></example><example conref="examples\Number.toPrecision.2.as" class="- topic/example "> The following example shows how <codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> returns a string with
 only three digits. The string is in exponential notation because the resulting number does not
 contain enough digits for fixed-point notation.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4000;
trace(num.toPrecision(3)); // 4.00e+3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the string representation of a uint object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">uint, uint.tostring, tostring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The string representation of the uint object.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">radix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Specifies the numeric base (from 2 to 36) to use for the 
	 number-to-string conversion. If you do not specify the <codeph class="+ topic/ph pr-d/codeph ">radix</codeph>
	 parameter, the default value is <codeph class="+ topic/ph pr-d/codeph ">10</codeph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the string representation of a uint object.
	 
     </apiDesc><example class="- topic/example ">The following example uses 2 and 8 for the <codeph class="+ topic/ph pr-d/codeph ">radix</codeph>
	 parameters and returns a string value with the corresponding 
	 representation of the number 9:
	 <pre xml:space="preserve" class="- topic/pre ">
	 var myuint:uint = 9;
	 trace(myuint.toString(2)); // 1001
	 trace(myuint.toString(8)); // 11
	 </pre>
	 The following example creates hexadecimal values:
	 <pre xml:space="preserve" class="- topic/pre ">
	 var r:uint = 250;
	 var g:uint = 128;
	 var b:uint = 114;
	 var rgb:String = "0x" + r.toString(16) + g.toString(16) + b.toString(16);
	 trace(rgb); // 0xfa8072 
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	 Returns the primitive uint type value of the specified
	 uint object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.valueof, valueof, value of
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The primitive uint type value of this uint
	 object.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Returns the primitive uint type value of the specified
	 uint object.
	 
	 </apiDesc><example class="- topic/example ">The following example outputs the primitive value of the <codeph class="+ topic/ph pr-d/codeph ">
	 numSocks</codeph> object.
	 <pre xml:space="preserve" class="- topic/pre ">
	 var numSocks:uint = 2;
	 trace(numSocks.valueOf()); // 2
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiValue id="uint:MAX_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MAX_VALUE</apiName><shortdesc class="- topic/shortdesc "> 
	The largest representable 32-bit unsigned integer, which is 4,294,967,295.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">uint, uint.max_value, max_value, max value
	 
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">4294967295</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	The largest representable 32-bit unsigned integer, which is 4,294,967,295.
	
   	</apiDesc><example class="- topic/example ">The following ActionScript displays the largest and smallest representable 
	<codeph class="+ topic/ph pr-d/codeph ">uint</codeph> values:
	<pre xml:space="preserve" class="- topic/pre ">
	trace("uint.MIN_VALUE = " + uint.MIN_VALUE);
	trace("uint.MAX_VALUE = " + uint.MAX_VALUE);
	</pre>
	<p class="- topic/p ">The values are:</p>
	<pre xml:space="preserve" class="- topic/pre ">
	uint.MIN_VALUE = 0
	uint.MAX_VALUE = 4294967295
	</pre>
	
	</example></apiValueDetail></apiValue><apiValue id="uint:MIN_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIN_VALUE</apiName><shortdesc class="- topic/shortdesc ">
	 The smallest representable unsigned integer, which is 0.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">uint, uint.min_value, min_value, min value
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 The smallest representable unsigned integer, which is <codeph class="+ topic/ph pr-d/codeph ">0</codeph>.
	 
	 </apiDesc><example class="- topic/example ">The following ActionScript displays the largest and smallest representable 
	 <codeph class="+ topic/ph pr-d/codeph ">uint</codeph> values:
	 <pre xml:space="preserve" class="- topic/pre ">
	 trace("uint.MIN_VALUE = " + uint.MIN_VALUE);
	 trace("uint.MAX_VALUE = " + uint.MAX_VALUE);
	 </pre>
	 <p class="- topic/p ">The values are:</p>
	 <pre xml:space="preserve" class="- topic/pre ">
	 uint.MIN_VALUE = 0
	 uint.MAX_VALUE = 4294967295
	 </pre>
     
     </example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Vector" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Vector</apiName><shortdesc class="- topic/shortdesc ">
 The Vector class lets you access and manipulate a vector &amp;#8212; an array whose elements
 all have the same data type.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector, Vector object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Lets you define Vectors (typed arrays).
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The Vector class lets you access and manipulate a vector — an array whose elements
 all have the same data type. The data type of a Vector's elements is 
 known as the Vector's <i class="+ topic/ph hi-d/i ">base type</i>. The base type can be any class, 
 including built in classes and custom classes. The base type is specified when 
 declaring a Vector variable as well as when creating an instance by calling 
 the class constructor.
 
 <p class="- topic/p ">As with an Array, you can use the array access operator (<codeph class="+ topic/ph pr-d/codeph ">[]</codeph>) to 
 set or retrieve the value of a Vector element. Several Vector methods also 
 provide mechanisms for setting and retrieving element values. These include 
 <codeph class="+ topic/ph pr-d/codeph ">push()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">pop()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">shift()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">unshift()</codeph>, 
 and others. The properties 
 and methods of a Vector object are similar — in most cases identical — to 
 the properties and methods of an Array. In most cases where you would use 
 an Array in which all the elements have the same data type, a Vector instance 
 is preferable. However, Vector instances are dense arrays, meaning it must have a value
 (or <codeph class="+ topic/ph pr-d/codeph ">null</codeph>) in each index. Array instances
 don't have this same restriction.</p>
 
 <p class="- topic/p ">The Vector's base type is specified using postfix 
 type parameter syntax. Type parameter syntax is a sequence consisting of 
 a dot (<codeph class="+ topic/ph pr-d/codeph ">.</codeph>), left angle bracket (<codeph class="+ topic/ph pr-d/codeph ">&lt;</codeph>), class name, 
 then a right angle bracket (<codeph class="+ topic/ph pr-d/codeph ">&gt;</codeph>), as shown in this example:</p>
 
 <p class="- topic/p ">In the first line of the example, the variable <codeph class="+ topic/ph pr-d/codeph ">v</codeph> is declared as a 
 Vector.&lt;String&gt; instance. In other words, it represents a Vector (an array) 
 that can only hold String instances and from which only String instances can be retrieved.
 The second line constructs an instance of the same Vector type (that is, a 
 Vector whose elements are all String objects) and assigns it to <codeph class="+ topic/ph pr-d/codeph ">v</codeph>.</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var v:Vector.&lt;String&gt;;
 v = new Vector.&lt;String&gt;();
 </codeblock>
 
 
 
  
 
 
 
  
 
 
 
 <p class="- topic/p ">A variable declared with the Vector.&lt;T&gt; data type can only store 
 a Vector instance that is constructed with the same base type 
 <codeph class="+ topic/ph pr-d/codeph ">T</codeph>. For example, a Vector that's constructed by calling 
 <codeph class="+ topic/ph pr-d/codeph ">new Vector.&lt;String&gt;()</codeph> can't be assigned to a variable 
 that's declared with the Vector.&lt;int&gt; data type. The base types must match exactly. 
 For example, the following code doesn't compile because the object's base type isn't 
 the same as the variable's declared base type (even though Sprite is a subclass of 
 DisplayObject):</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 // This code doesn't compile even though Sprite is a DisplayObject subclass
 var v:Vector.&lt;DisplayObject&gt; = new Vector.&lt;Sprite&gt;();
 </codeblock>
 
 <p class="- topic/p ">To convert a Vector with base type <codeph class="+ topic/ph pr-d/codeph ">T</codeph> to a Vector of a superclass of 
 <codeph class="+ topic/ph pr-d/codeph ">T</codeph>, use the <codeph class="+ topic/ph pr-d/codeph ">Vector()</codeph> global function.</p>
 
 <p class="- topic/p ">In addition to the data type restriction, the Vector class has other restrictions 
 that distinguish it from the Array class:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">A Vector is a dense array. Unlike an Array, which may have values in indices 
       0 and 7 even if there are no values in positions 1 through 6, a Vector must have 
       a value (or <codeph class="+ topic/ph pr-d/codeph ">null</codeph>) in each index.</li><li class="- topic/li ">A Vector can optionally be fixed-length, meaning the number of elements 
       it contains can't change.</li><li class="- topic/li ">Access to a Vector's elements is bounds-checked. You can never read a value 
       from an index greater than the final element (<codeph class="+ topic/ph pr-d/codeph ">length - 1</codeph>). You 
       can never set a value with an index more than one beyond the current final 
       index (in other words, you can only set a value at an existing index or 
       at index <codeph class="+ topic/ph pr-d/codeph ">[length]</codeph>).</li></ul>
 
 <p class="- topic/p ">As a result of its restrictions, a Vector has three primary benefits over 
 an Array instance whose elements are all instances of a single class:</p>
 <ul class="- topic/ul "><li class="- topic/li ">Performance: array element access and iteration are much faster when 
       using a Vector instance than they are when using an Array.</li><li class="- topic/li ">Type safety: in strict mode the compiler can identify data type errors. Examples
       of data type errors include assigning a value of the incorrect data type to a Vector 
       or expecting the wrong data type when reading a value from a Vector. 
       Note, however, that when using the 
       <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> method or <codeph class="+ topic/ph pr-d/codeph ">unshift()</codeph> method to add values to a Vector, the 
       arguments' data types are not checked at compile time. Instead, they are checked at run time.</li><li class="- topic/li ">Reliability: runtime range checking (or fixed-length checking) increases reliability 
       significantly over Arrays.</li></ul> 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="operators.html#array_access" class="- topic/link "><linktext class="- topic/linktext ">[] array access</linktext></link><link href="package.html#Vector()" class="- topic/link "><linktext class="- topic/linktext ">Vector() global function</linktext></link><link href="#Array" class="- topic/link "><linktext class="- topic/linktext ">Array class</linktext></link></related-links><apiConstructor id="Vector:Vector" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Vector</apiName><shortdesc class="- topic/shortdesc ">
     Creates a Vector with the specified base type.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The initial length (number of elements) of the Vector. If 
     this parameter is greater than zero, the specified number of Vector elements 
     are created and populated with the default value appropriate to 
     the base type (<codeph class="+ topic/ph pr-d/codeph ">null</codeph> for reference types).
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fixed</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Whether the Vector's length is fixed (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) or 
     can be changed (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>). This value can also be set using 
     the <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> property.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a Vector with the specified base type.
     
     <p class="- topic/p ">When calling the <codeph class="+ topic/ph pr-d/codeph ">Vector.&lt;T&gt;()</codeph> constructor, specify the
     base type using type parameter syntax. Type parameter syntax is a 
     sequence consisting of a dot (<codeph class="+ topic/ph pr-d/codeph ">.</codeph>), left angle bracket 
     (<codeph class="+ topic/ph pr-d/codeph ">&lt;</codeph>), class name, then a right angle bracket 
     (<codeph class="+ topic/ph pr-d/codeph ">&gt;</codeph>), as shown in this example:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var v:Vector.&lt;String&gt; = new Vector.&lt;String&gt;();
     </codeblock>
     
     
     
     
     
     <p class="- topic/p ">To create a Vector instance from an Array or another Vector (such as one with a different base type), 
      use the <codeph class="+ topic/ph pr-d/codeph ">Vector()</codeph> global function.</p>
       
     <p class="- topic/p ">To create a pre-populated Vector instance, use the following syntax instead of using the parameters specified below:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     // var v:Vector.&lt;T&gt; = new &lt;T&gt;[E0, ..., En-1 ,];
     // For example: 
     var v:Vector.&lt;int&gt; = new &lt;int&gt;[0,1,2,];
     </codeblock>
     
     <p class="- topic/p ">The following information applies to this syntax: 
     <ul class="- topic/ul "><li class="- topic/li ">It is supported in Flash Professional CS5 and later, Flash Builder 4 and later, and Flex 4 and later. </li><li class="- topic/li "> The trailing comma is optional. </li><li class="- topic/li "> Empty items in the array are not supported; a statement such as <codeph class="+ topic/ph pr-d/codeph ">var v:Vector.&lt;int&gt; = new &lt;int&gt;[0,,2,]</codeph>
     throws a compiler error.</li><li class="- topic/li ">You can't specify a default length for the Vector instance. Instead, the length is the same as the number of elements 
     in the initialization list. </li><li class="- topic/li ">You can't specify whether the Vector instance has a fixed length. Instead, use the <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> property. </li><li class="- topic/li "> Data loss or errors can occur if items passed as values don't match the specified type. For example:</li><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var v:Vector.&lt;int&gt; = new &lt;int&gt;[4.2]; // compiler error when running in strict mode
     trace(v[0]); //returns 4 when not running in strict mode
     </codeblock></ul> </p>
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="#Vector/fixed" class="- topic/link "><linktext class="- topic/linktext ">fixed</linktext></link><link href="package.html#Vector()" class="- topic/link "><linktext class="- topic/linktext ">Vector() global function</linktext></link></related-links></apiConstructor><apiOperation id="Vector:AS3:concat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">concat</apiName><shortdesc class="- topic/shortdesc ">
     Concatenates the elements specified in the parameters with the elements 
     in the Vector and creates a new Vector.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.concat, concat, concatenate
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If any argument is not an instance of the base type 
     and can't be converted to the base type.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A Vector with the same base type as this Vector that contains 
     the elements from this Vector followed by elements from the parameters.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">One or more values of the base type of this Vector 
     to be concatenated in a new Vector. 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Concatenates the elements specified in the parameters.
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Concatenates the elements specified in the parameters with the elements 
     in the Vector and creates a new Vector. If the parameters specify a Vector, 
     the elements of that Vector are concatenated. If you don't pass any parameters, 
     the new Vector is a duplicate (shallow clone) of the original Vector.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:every" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">every</apiName><shortdesc class="- topic/shortdesc ">
    Executes a test function on each item in the Vector until an item is 
    reached that returns false for the specified function.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A Boolean value of <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the specified function returns 
    <codeph class="+ topic/ph pr-d/codeph ">true</codeph> when called on all items in the Vector; otherwise, <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The function to run on each item in the Vector. 
    This function is invoked 
    with three arguments: the current item from the Vector, the index of the item, 
    and the Vector object:
    <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T&gt;):Boolean {
       // your code here
    }
    </pre> 
    
    <p class="- topic/p ">The callback function should return a Boolean value.</p>
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object that the identifer <codeph class="+ topic/ph pr-d/codeph ">this</codeph> in the 
    callback function refers to when the function is called.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Executes a test function on each item in the Vector until an item is 
    reached that returns <codeph class="+ topic/ph pr-d/codeph ">false</codeph> for the specified function. 
    You use this method to determine whether all items in a Vector meet 
    a criterion, such as having values less than a particular number.
    
    <p class="- topic/p ">For this method, the second parameter, 
    <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if the
    first parameter, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, is a method closure. That is 
    the most common way of using this method.</p>
    
    <p product="flash" class="- topic/p ">However, suppose you create a function on a frame on the main timeline using Flash Professional, 
    but you want it to be called in a different <codeph class="+ topic/ph pr-d/codeph ">this</codeph> context:</p>
    
    <pre product="flash" xml:space="preserve" class="- topic/pre ">
    function myFunction(item:T, index:int, vector:Vector.&lt;T&gt;):Boolean {
       // your code here
    }
    </pre>
    
    <p product="flash" class="- topic/p ">Suppose you then use the <codeph class="+ topic/ph pr-d/codeph ">every()</codeph> 
    method on a Vector called <codeph class="+ topic/ph pr-d/codeph ">myVector</codeph>:</p>
    
    <pre product="flash" xml:space="preserve" class="- topic/pre ">
    myVector.every(myFunction, someObject);
    </pre>
    
    <p product="flash" class="- topic/p ">Because <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> is a member of the 
    main class of the SWF file, it cannot be executed in a different <codeph class="+ topic/ph pr-d/codeph ">this</codeph> context. Flash 
    runtimes throw an exception when this code runs. You can avoid this runtime error 
    by assigning the function to a variable, as follows:</p>
    
    <pre product="flash" xml:space="preserve" class="- topic/pre ">
    var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T&gt;):Boolean {
        //your code here
    };
    myVector.every(myFunction, someObject);
    </pre>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/some()" class="- topic/link "><linktext class="- topic/linktext ">Vector.some()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:filter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">filter</apiName><shortdesc class="- topic/shortdesc ">
     Executes a test function on each item in the Vector and returns 
     a new Vector containing all items that return true for the 
     specified function.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A new Vector that contains all items from the original Vector 
     for which the <codeph class="+ topic/ph pr-d/codeph ">callback</codeph> function returned <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The function to run on each item in the Vector. 
     This function is invoked 
     with three arguments: the current item from the Vector, the index of the item, 
     and the Vector object:
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T&gt;):Boolean;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object that the identifer <codeph class="+ topic/ph pr-d/codeph ">this</codeph> in the 
     callback function refers to when the function is called.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Executes a test function on each item in the Vector and returns 
     a new Vector containing all items that return <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for the 
     specified function. If an item returns <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, 
     it is not included in the result Vector. The base type of the return 
     Vector matches the base type of the Vector on which the method is called.
     
     <p class="- topic/p ">For this method, the second parameter, 
     <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if the
     first parameter, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, is a method closure. That is 
     the most common way of using this method.</p>
     
     <p product="flash" class="- topic/p ">However, suppose you create a function on a frame on the main timeline using Flash Professional, 
     but you want it to be called in a different <codeph class="+ topic/ph pr-d/codeph ">this</codeph> context:</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(item:T, index:int, vector:Vector.&lt;T&gt;):Boolean {
        // your code here
     }
     </pre>
     
     <p product="flash" class="- topic/p ">Suppose you then use the <codeph class="+ topic/ph pr-d/codeph ">filter()</codeph> 
     method on a Vector called <codeph class="+ topic/ph pr-d/codeph ">myVector</codeph>:</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var result:Vector.&lt;T&gt; = myVector.filter(myFunction, someObject);
     </pre>
     
     <p product="flash" class="- topic/p ">Because <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> is a member of the 
     main class of the SWF file, it cannot be executed in a different <codeph class="+ topic/ph pr-d/codeph ">this</codeph> context. Flash 
     runtimes throw an exception when this code runs. You can avoid this runtime error 
     by assigning the function to a variable, as follows:</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T&gt;):Boolean {
         //your code here
     };
     myVector.filter(myFunction, someObject);
     </pre>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/map()" class="- topic/link "><linktext class="- topic/linktext ">Vector.map()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:forEach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">forEach</apiName><shortdesc class="- topic/shortdesc ">
     Executes a function on each item in the Vector.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The function to run on each item in the Vector. 
     This function is invoked 
     with three arguments: the current item from the Vector, the index of the item, 
     and the Vector object:
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T&gt;):void;</pre>
     <p class="- topic/p ">Any return value from the function call is discarded.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object that the identifer <codeph class="+ topic/ph pr-d/codeph ">this</codeph> in the 
     callback function refers to when the function is called.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Executes a function on each item in the Vector.
     
     <p class="- topic/p ">For this method, the second parameter, 
     <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if the
     first parameter, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, is a method closure. That is 
     the most common way of using this method.</p>
     
     <p product="flash" class="- topic/p ">However, suppose you create a function on a frame on the main timeline using Flash Professional, 
     but you want it to be called in a different <codeph class="+ topic/ph pr-d/codeph ">this</codeph> context:</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(item:T, index:int, vector:Vector.&lt;T&gt;):void {
        // your code here
     }
     </pre>
     
     <p product="flash" class="- topic/p ">Suppose you then use the <codeph class="+ topic/ph pr-d/codeph ">forEach()</codeph> 
     method on a Vector called <codeph class="+ topic/ph pr-d/codeph ">myVector</codeph>:</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myVector.forEach(myFunction, someObject);
     </pre>
     
     <p product="flash" class="- topic/p ">Because <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> is a member of the 
     main class of the SWF file, it cannot be executed in a different <codeph class="+ topic/ph pr-d/codeph ">this</codeph> context. Flash 
     runtimes throw an exception when this code runs. You can avoid this runtime error 
     by assigning the function to a variable, as follows:</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T&gt;):void {
         //your code here
     };
     myVector.forEach(myFunction, someObject);
     </pre>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:indexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">indexOf</apiName><shortdesc class="- topic/shortdesc ">
     Searches for an item in the Vector and returns the index position of the item.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A zero-based index position of the item in the Vector. 
     If the <codeph class="+ topic/ph pr-d/codeph ">searchElement</codeph> argument is not found, 
     the return value is -1.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">searchElement</apiItemName><apiType value="T" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The item to find in the Vector.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fromIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The location in the Vector from which to start searching 
     for the item. If this parameter is negative, it is treated as <codeph class="+ topic/ph pr-d/codeph ">length 
     + fromIndex</codeph>, meaning the search starts <codeph class="+ topic/ph pr-d/codeph ">-fromIndex</codeph> items 
     from the end and searches from that position forward to the end of the Vector.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Searches for an item in the Vector and returns the index position of the item.
     The item is compared to the Vector elements using strict equality (<codeph class="+ topic/ph pr-d/codeph ">===</codeph>).
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/lastIndexOf()" class="- topic/link "><linktext class="- topic/linktext ">Vector.lastIndexOf()</linktext></link><link href="operators.html#strict_equality" class="- topic/link "><linktext class="- topic/linktext ">=== (strict equality)</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:join" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">join</apiName><shortdesc class="- topic/shortdesc ">
     Converts the elements in the Vector to strings, inserts the specified separator between the 
     elements, concatenates them, and returns the resulting string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.join, join
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string consisting of the elements of the Vector
     converted to strings and separated by the specified string.
     
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sep</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">,</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A character or string that separates Vector elements in 
     the returned string. If you omit this parameter, a comma is used as the default 
     separator. 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Converts the elements in the Vector to strings.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Converts the elements in the Vector to strings, inserts the specified separator between the 
     elements, concatenates them, and returns the resulting string. A nested Vector is always 
     separated by a comma (,), not by the separator passed to the <codeph class="+ topic/ph pr-d/codeph ">join()</codeph> method.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/split()" class="- topic/link "><linktext class="- topic/linktext ">String.split()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:lastIndexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">lastIndexOf</apiName><shortdesc class="- topic/shortdesc ">
     Searches for an item in the Vector, working backward from the specified 
     index position, and returns the index position of the matching item.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A zero-based index position of the item in the Vector. 
     If the <codeph class="+ topic/ph pr-d/codeph ">searchElement</codeph> argument is not found, 
     the return value is -1.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">searchElement</apiItemName><apiType value="T" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The item to find in the Vector.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fromIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The location in the Vector from which to start searching 
     for the item. The default is the maximum allowable index value, meaning 
     that the search starts at the last item in the Vector.
     <p class="- topic/p ">If this parameter is negative, it is treated as 
     <codeph class="+ topic/ph pr-d/codeph ">length + fromIndex</codeph>, meaning the search starts 
     <codeph class="+ topic/ph pr-d/codeph ">-fromIndex</codeph> items from the end and searches from that 
     position backward to index 0.</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Searches for an item in the Vector, working backward from the specified 
     index position, and returns the index position of the matching item. The 
     item is compared to the Vector elements using strict equality (<codeph class="+ topic/ph pr-d/codeph ">===</codeph>).
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/indexOf()" class="- topic/link "><linktext class="- topic/linktext ">Vector.indexOf()</linktext></link><link href="operators.html#strict_equality" class="- topic/link "><linktext class="- topic/linktext ">=== (strict equality)</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:map" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">map</apiName><shortdesc class="- topic/shortdesc ">
     Executes a function on each item in the Vector, and returns a new Vector 
     of items corresponding to the results of calling the function on 
     each item in this Vector.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A new Vector that contains the results of calling the function
     on each item in this Vector. The result Vector has the same base type 
     and <codeph class="+ topic/ph pr-d/codeph ">length</codeph> as the original.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The function to run on each item in the Vector. 
     This function is invoked 
     with three arguments: the current item from the Vector, the index of the item, 
     and the Vector object:
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T&gt;):T;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object that the identifer <codeph class="+ topic/ph pr-d/codeph ">this</codeph> in the 
     callback function refers to when the function is called.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Executes a function on each item in the Vector, and returns a new Vector 
     of items corresponding to the results of calling the function on 
     each item in this Vector. The result Vector has the same base 
     type and <codeph class="+ topic/ph pr-d/codeph ">length</codeph> as the original Vector. 
     The element at index <codeph class="+ topic/ph pr-d/codeph ">i</codeph> in the result Vector is the result of 
     the call on the element at index <codeph class="+ topic/ph pr-d/codeph ">i</codeph> in the original Vector.
     
     <p class="- topic/p ">For this method, the second parameter, 
     <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if the
     first parameter, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, is a method closure. That is 
     the most common way of using this method.</p>
     
     <p product="flash" class="- topic/p ">However, suppose you create a function on a frame on the main timeline, using Flash Professional
     but you want it to be called in a different <codeph class="+ topic/ph pr-d/codeph ">this</codeph> context:</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(item:Object, index:int, vector:Vector.&lt;T&gt;):T {
        // your code here
     }
     </pre>
     
     <p product="flash" class="- topic/p ">Suppose you then use the <codeph class="+ topic/ph pr-d/codeph ">map()</codeph> 
     method on a Vector called <codeph class="+ topic/ph pr-d/codeph ">myVector</codeph>:</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myVector.map(myFunction, someObject);
     </pre>
     
     <p product="flash" class="- topic/p ">Because <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> is a member of the 
     main class of the SWF file, it cannot be executed in a different <codeph class="+ topic/ph pr-d/codeph ">this</codeph> context. Flash 
     runtimes throw an exception when this code runs. You can avoid this runtime error 
     by assigning the function to a variable, as follows:</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T&gt;):void {
         //your code here
     };
     myVector.map(myFunction, someObject);
     </pre>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/filter()" class="- topic/link "><linktext class="- topic/linktext ">Vector.filter()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:pop" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pop</apiName><shortdesc class="- topic/shortdesc ">
     Removes the last element from the Vector and returns that element.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.pop, pop
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If this method is called while <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The value of the last element in the specified Vector.
     
     </apiDesc><apiType value="T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Removes the last element from the Vector and returns that element. The 
     <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property of the Vector is decreased by one when 
     this function is called.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/push()" class="- topic/link "><linktext class="- topic/linktext ">Vector.push()</linktext></link><link href="#Vector/shift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.shift()</linktext></link><link href="#Vector/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:push" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">push</apiName><shortdesc class="- topic/shortdesc ">
     Adds one or more elements to the end of the Vector and returns 
     the new length of the Vector.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.push, push
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If any argument is not an instance of the 
     base type <codeph class="+ topic/ph pr-d/codeph ">T</codeph> of the Vector.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If this method is called while <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The length of the Vector after the new elements are added.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">One or more values to append to the Vector.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Adds one or more elements to the end of the Vector and returns 
     the new length of the Vector.
     
     <p class="- topic/p ">Because this function can accept 
     multiple arguments, the data type of the arguments is not 
     checked at compile time even in strict mode. However, if an 
     argument is passed that is not an instance of the base type, 
     an exception occurs at run time.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/pop()" class="- topic/link "><linktext class="- topic/linktext ">Vector.pop()</linktext></link><link href="#Vector/shift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.shift()</linktext></link><link href="#Vector/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:reverse" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reverse</apiName><shortdesc class="- topic/shortdesc ">
     Reverses the order of the elements in the Vector.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.reverse, reverse
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The Vector with the elements in reverse order.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reverses the order of the elements in the Vector. This method 
     alters the Vector on which it is called.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:shift" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">shift</apiName><shortdesc class="- topic/shortdesc ">
     Removes the first element from the Vector and returns that element.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.shift, shift
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The first element in the Vector.
     
     </apiDesc><apiType value="T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Removes the first element from the Vector and returns that element. 
     The remaining Vector elements are moved from their original position, 
     i, to i - 1.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/pop()" class="- topic/link "><linktext class="- topic/linktext ">Vector.pop()</linktext></link><link href="#Vector/push()" class="- topic/link "><linktext class="- topic/linktext ">Vector.push()</linktext></link><link href="#Vector/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:slice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">slice</apiName><shortdesc class="- topic/shortdesc ">
     Returns a new Vector that consists of a range of elements from 
     the original Vector, without modifying the original Vector.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.slice, slice
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">a Vector that consists of a range of elements from the original Vector.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number specifying the index of the starting point 
     for the slice. If <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> is a negative number, the starting 
     point begins at the end of the Vector, where -1 is the last element.  
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">16777215</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A number specifying the index of the ending point for 
     the slice. If you omit this parameter, the slice includes all elements from the 
     starting point to the end of the Vector. If <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> is a negative 
     number, the ending point is specified from the end of the Vector, where -1 is the 
     last element.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Returns a new Vector that consists of a range of elements from the original Vector.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a new Vector that consists of a range of elements from 
     the original Vector, without modifying the original Vector. The 
     returned Vector includes the <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> element and 
     all elements up to, but not including, the <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> element.
     
     <p class="- topic/p "> If you don't pass any parameters, the new Vector is a duplicate (shallow clone) of the original Vector.
     If you pass a value of 0 for both parameters, a new, empty Vector is created of the same type 
     as the original Vector.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:some" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">some</apiName><shortdesc class="- topic/shortdesc ">
     Executes a test function on each item in the Vector until an 
     item is reached that returns true.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A Boolean value of <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if any items in the Vector return 
     <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for the specified function; otherwise, <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The function to run on each item in the Vector. 
     This function is invoked 
     with three arguments: the current item from the Vector, the index of the item, 
     and the Vector object:
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T&gt;):Boolean</pre> 
     
     <p class="- topic/p ">The callback function should return a Boolean value.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The object that the identifer <codeph class="+ topic/ph pr-d/codeph ">this</codeph> in the 
     callback function refers to when the function is called.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Executes a test function on each item in the Vector until an 
     item is reached that returns <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Use this method 
     to determine whether any items in a Vector meet a criterion, such as 
     having a value less than a particular number.
     
     <p class="- topic/p ">For this method, the second parameter, 
     <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if the
     first parameter, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, is a method closure. That is 
     the most common way of using this method.</p>
     
     <p product="flash" class="- topic/p ">However, suppose you create a function on a frame on the main timeline, 
     but you want it to be called in a different <codeph class="+ topic/ph pr-d/codeph ">this</codeph> context:</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(item:Object, index:int, vector:Vector.&lt;T&gt;):Boolean {
        // your code here
     }
     </pre>
     
     <p product="flash" class="- topic/p ">Suppose you then use the <codeph class="+ topic/ph pr-d/codeph ">some()</codeph> 
     method on a Vector called <codeph class="+ topic/ph pr-d/codeph ">myVector</codeph>:</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myVector.some(myFunction, someObject);
     </pre>
     
     <p product="flash" class="- topic/p ">Because <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> is a member of the 
     main class of the SWF file, it cannot be executed in a different <codeph class="+ topic/ph pr-d/codeph ">this</codeph> context. Flash 
     runtimes throw an exception when this code runs. You can avoid this runtime error 
     by assigning the function to a variable, as follows:</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T&gt;):Boolean {
         //your code here
     };
     myVector.some(myFunction, someObject);
     </pre>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/every()" class="- topic/link "><linktext class="- topic/linktext ">every()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:sort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sort</apiName><shortdesc class="- topic/shortdesc ">
     Sorts the elements in the Vector.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.sort, sort
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">This Vector, with elements in the new order.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">compareFunction</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A comparison method that determines 
     the behavior of the sort.
     
     <p class="- topic/p ">The specified method must take two arguments of the base type (<codeph class="+ topic/ph pr-d/codeph ">T</codeph>) 
     of the Vector and return a Number:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">function compare(x:T, y:T):Number {}</codeblock>
     
     <p class="- topic/p ">The logic of the <codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph> function is that, given two 
     elements <codeph class="+ topic/ph pr-d/codeph ">x</codeph> and <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, the function returns one of the 
     following three values:</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">a negative number, if <codeph class="+ topic/ph pr-d/codeph ">x</codeph> should appear before <codeph class="+ topic/ph pr-d/codeph ">y</codeph> 
       in the sorted sequence</li><li class="- topic/li ">0, if <codeph class="+ topic/ph pr-d/codeph ">x</codeph> equals <codeph class="+ topic/ph pr-d/codeph ">y</codeph></li><li class="- topic/li ">a positive number, if <codeph class="+ topic/ph pr-d/codeph ">x</codeph> should appear after <codeph class="+ topic/ph pr-d/codeph ">y</codeph> 
       in the sorted sequence</li></ul>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sorts the elements in the Vector. This method sorts according to the function 
     provided as the <codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph> parameter.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:splice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">splice</apiName><shortdesc class="- topic/shortdesc ">
     Adds elements to and removes elements from the Vector.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.splice, splice
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> and <codeph class="+ topic/ph pr-d/codeph ">deleteCount</codeph> 
     arguments specify an index to be deleted that's outside the Vector's bounds.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If this method is called while <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> is <codeph class="+ topic/ph pr-d/codeph ">true</codeph> and the 
     <codeph class="+ topic/ph pr-d/codeph ">splice()</codeph> operation changes the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> of the Vector.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">a Vector containing the elements that were removed from the original Vector.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer that specifies the index of the element 
     in the Vector where the insertion or deletion begins. You can use a 
     negative integer to specify a position relative to the end of the Vector
     (for example, -1 for the last element of the Vector).
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deleteCount</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">4294967295</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer that specifies the number of elements 
     to be deleted. This number includes the element specified in the 
     <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> parameter. If you do not specify a value for the 
     <codeph class="+ topic/ph pr-d/codeph ">deleteCount</codeph> parameter, the method deletes all of the values 
     from the <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> element to the last element in the Vector. 
     (The default value is <codeph class="+ topic/ph pr-d/codeph ">uint.MAX_VALUE</codeph>.)
     If the value is 0, no elements are deleted.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">items</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An optional list of one or more comma-separated values
     to insert into the Vector at the position specified in the <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> parameter.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Adds elements to and removes elements from the Vector. This method modifies 
     the Vector without making a copy.
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Note:</b> To override this method in a subclass of Vector, 
     use <codeph class="+ topic/ph pr-d/codeph ">...args</codeph> for the parameters, as this example shows:</p>
     
     <pre xml:space="preserve" class="- topic/pre ">
     public override function splice(...args) {
       // your statements here
     }
     </pre>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:toLocaleString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleString</apiName><shortdesc class="- topic/shortdesc ">
     Returns a string that represents the elements in the specified Vector.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string of Vector elements.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a string that represents the elements in the specified Vector. 
     Every element in the Vector, starting with index 0 and ending with the 
     highest index, is converted to a concatenated string and separated by 
     commas. In the ActionScript 3.0 implementation, this method returns 
     the same value as the <codeph class="+ topic/ph pr-d/codeph ">Vector.toString()</codeph> method.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/toString()" class="- topic/link "><linktext class="- topic/linktext ">Vector.toString()</linktext></link></related-links></apiOperation><apiOperation id="Vector:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
     Returns a string that represents the elements in the Vector.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.toString, toString
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A string of Vector elements.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns a string that represents the elements in the Vector. Every element in the 
     Vector, starting with index 0 and ending with the highest index, is converted to a 
     concatenated string and separated by commas. To specify a custom separator, 
     use the <codeph class="+ topic/ph pr-d/codeph ">Vector.join()</codeph> method.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/split()" class="- topic/link "><linktext class="- topic/linktext ">String.split()</linktext></link><link href="#Vector/join()" class="- topic/link "><linktext class="- topic/linktext ">Vector.join()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:unshift" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">unshift</apiName><shortdesc class="- topic/shortdesc ">
     Adds one or more elements to the beginning of the Vector and returns 
     the new length of the Vector.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.unshift, unshift
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If any argument is not an instance of the 
     base type <codeph class="+ topic/ph pr-d/codeph ">T</codeph> of the Vector.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If this method is called while <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An integer representing the new length of the Vector.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">One or more instances of the base type of the Vector 
     to be inserted at the beginning of the Vector.  
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Adds one or more elements to the beginning of the Vector and returns 
     the new length of the Vector. The other elements in the Vector are moved 
     from their original position, i, to i + the number of new elements.
     
     <p class="- topic/p ">Because this function can accept 
     multiple arguments, the data type of the arguments is not 
     checked at compile time even in strict mode. However, if an 
     argument is passed that is not an instance of the base type, 
     an exception occurs at run time.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/pop()" class="- topic/link "><linktext class="- topic/linktext ">Vector.pop()</linktext></link><link href="#Vector/push()" class="- topic/link "><linktext class="- topic/linktext ">Vector.push()</linktext></link><link href="#Vector/shift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.shift()</linktext></link></related-links></apiOperation><apiValue id="Vector:fixed:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fixed</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether the length property of the Vector can 
     be changed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">vector.fixed, fixed
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property of the Vector can 
     be changed. If the value is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the <codeph class="+ topic/ph pr-d/codeph ">length</codeph>
     property can't be changed. This means the following operations are not 
     allowed when <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>:
     
     <ul class="- topic/ul "><li class="- topic/li ">setting the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property directly</li><li class="- topic/li ">assigning a value to index position <codeph class="+ topic/ph pr-d/codeph ">length</codeph></li><li class="- topic/li ">calling a method that changes the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property, including:
         <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">pop()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">push()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">shift()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">unshift()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">splice()</codeph> (if the <codeph class="+ topic/ph pr-d/codeph ">splice()</codeph> call changes 
               the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> of the Vector).</li></ul>
       </li></ul>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="Vector:length:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
     The range of valid indices available in the Vector.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">vector.length, length
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If this property is changed 
     while <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If this property is set to a value larger 
     than the maximum allowable index (2<sup class="+ topic/ph hi-d/sup ">32</sup>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The range of valid indices available in the Vector. 
     A Vector instance has index positions up to but not including 
     the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> value.
     
     <p class="- topic/p ">Every Vector element always has a value that is either an 
     instance of the base type or <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. When the 
     <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property is set to a value 
     that's larger than its previous value, additional elements are 
     created and populated with the default value appropriate to 
     the base type (<codeph class="+ topic/ph pr-d/codeph ">null</codeph> for reference types).</p>
     
     <p class="- topic/p ">When the <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property is set to a value 
     that's smaller than its previous value, all the elements 
     at index positions greater than or equal to the new <codeph class="+ topic/ph pr-d/codeph ">length</codeph> 
     value are removed from the Vector.</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>