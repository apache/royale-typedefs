<?xml version="1.0" encoding="UTF-8"?><apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.data</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.data:SQLViewSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLViewSchema</apiName><shortdesc class="- topic/shortdesc ">
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
 A SQLViewSchema instance provides information describing a specific view
 in a database.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLTableSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A SQLViewSchema instance provides information describing a specific view
 in a database.
 
 It contains the name of the view (the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> property), the
 SQL statement used to create the view (the <codeph class="+ topic/ph pr-d/codeph ">sql</codeph> property), and
 information about the view's columns (the <codeph class="+ topic/ph pr-d/codeph ">columns</codeph> property).
 
 <p class="- topic/p ">To obtain view schema information for a database, use the
 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method to load the schema information, making certain to
 use <codeph class="+ topic/ph pr-d/codeph ">null</codeph> or <codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph> for the <codeph class="+ topic/ph pr-d/codeph ">type</codeph> argument's value.
 In the resulting SQLSchemaResult instance, the <codeph class="+ topic/ph pr-d/codeph ">views</codeph> property contains an array
 of SQLViewSchema instances representing the views in the database.</p>
 
 <p class="- topic/p ">Generally, developer code does not construct SQLViewSchema instances directly.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLColumnSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLViewSchema:SQLViewSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLViewSchema</apiName><shortdesc class="- topic/shortdesc ">
     Creates a SQLViewSchema instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the associated database.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the view.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The SQL statement used to create the view.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">columns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Array of SQLColumnSchema instances describing this view's columns.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a SQLViewSchema instance. Generally, developer code does not call the SQLViewSchema
     constructor directly. To obtain schema information for a database, call the
	 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method.
     
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="flash.data:SQLColumnSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLColumnSchema</apiName><shortdesc class="- topic/shortdesc ">
 The SQLColumnSchema class provides information describing the characteristics of a specific column
 within a table in a database.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The SQLColumnSchema class provides information describing the characteristics of a specific column
 within a table in a database.
 
 <p class="- topic/p ">To obtain column schema information for one or more tables in a database, use the
 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method to load the schema information, making certain to
 use <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for the <codeph class="+ topic/ph pr-d/codeph ">includeColumnSchema</codeph> argument's value. In the resulting
 SQLSchemaResult instance, each table and view definition includes a <codeph class="+ topic/ph pr-d/codeph ">columns</codeph>
 property — an array of SQLColumnSchema instances representing the columns in the
 table or view.</p>
 
 <p class="- topic/p ">Generally, developer code does not construct SQLColumnSchema instances directly.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTableSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTableSchema</linktext></link><link href="flash.data.xml#SQLViewSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLViewSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLColumnSchema:SQLColumnSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLColumnSchema</apiName><shortdesc class="- topic/shortdesc ">
     Constructs a SQLColumnSchema instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the column.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">primaryKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates whether this column is a part of the primary
     key for the associated table.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">allowNull</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates whether this column can contain <codeph class="+ topic/ph pr-d/codeph ">NULL</codeph> values.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">autoIncrement</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates whether this is an auto increment column.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dataType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The declared type of the column.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">defaultCollationType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The collation sequence defined for this column.
     This value corresponds to one of the constants in the SQLCollationType class:
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.BINARY</codeph> indicates that the column uses the
	 			<codeph class="+ topic/ph pr-d/codeph ">BINARY</codeph> collation sequence.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.NO_CASE</codeph> indicates that the column uses the <codeph class="+ topic/ph pr-d/codeph ">NOCASE</codeph>
	 			collation sequence, meaning text comparisons are made in a case-insensitive manner.</li></ul>
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Constructs a SQLColumnSchema instance. Generally, developer code does not call the SQLColumnSchema
     constructor directly. To obtain schema information for a database, call the
	 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLCollationType</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLColumnSchema:allowNull:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">allowNull</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether NULL values are allowed in this column.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether <codeph class="+ topic/ph pr-d/codeph ">NULL</codeph> values are allowed in this column. A column
     that is declared with a <codeph class="+ topic/ph pr-d/codeph ">NOT NULL</codeph> constraint has a <codeph class="+ topic/ph pr-d/codeph ">false</codeph>
	 value for the <codeph class="+ topic/ph pr-d/codeph ">allowNull</codeph> property.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:autoIncrement:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">autoIncrement</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether this is an auto-increment column.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether this is an auto-increment column. An auto-increment column is a special type
	 of <codeph class="+ topic/ph pr-d/codeph ">PRIMARY KEY</codeph> column whose value is automatically generated as the next value
	 in a sequence of integers when a new row is inserted into the table.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:dataType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataType</apiName><shortdesc class="- topic/shortdesc ">
     Gets the data type of the column as a string.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gets the data type of the column as a string. The value is the literal data type name that was
	 specified in the <codeph class="+ topic/ph pr-d/codeph ">CREATE TABLE</codeph> statement that was used to define the table, or
	 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> if no data type was specified.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:defaultCollationType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">defaultCollationType</apiName><shortdesc class="- topic/shortdesc ">
     Indicates the default collation sequence that is defined for this column.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates the default collation sequence that is defined for this column.
	 The value of this property corresponds to one of the constants in the SQLCollationType class:
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.BINARY</codeph> indicates that the column uses the
	 			<codeph class="+ topic/ph pr-d/codeph ">BINARY</codeph> collation sequence.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.NO_CASE</codeph> indicates that the column uses the <codeph class="+ topic/ph pr-d/codeph ">NOCASE</codeph>
	 			collation sequence, meaning that text comparisons are made in a case-insensitive manner.</li></ul>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLCollationType</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnSchema:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
     Gets the name of the column.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gets the name of the column.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:primaryKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">primaryKey</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether this column is the primary key column (or one of the primary key columns
	 in a composite key) for its associated table.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether this column is the primary key column (or one of the primary key columns
	 in a composite key) for its associated table.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLColumnNameStyle" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLColumnNameStyle</apiName><shortdesc class="- topic/shortdesc ">
 This class contains the constants that represent the possible values for the
 SQLConnection.columnNameStyle property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 This class contains the constants that represent the possible values for the
 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.columnNameStyle</codeph> property. These values indicate
 different options that control how column names (property names) are formatted in the objects
 returned as a result of a SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement.
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links><apiValue id="flash.data:SQLColumnNameStyle:DEFAULT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEFAULT</apiName><shortdesc class="- topic/shortdesc ">
     Indicates that column names returned from a SELECT statement
	 use the default format.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">default</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates that column names returned from a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement
	 use the default format. In the default format, column names have the form
     <codeph class="+ topic/ph pr-d/codeph ">[table-name]_[column-name]</codeph> when multiple tables are
	 included in the <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement, or <codeph class="+ topic/ph pr-d/codeph ">[column-name]</codeph> when
	 the <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement includes a single table.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnNameStyle:LONG" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LONG</apiName><shortdesc class="- topic/shortdesc ">
     Indicates that column names returned from a SELECT statement use
	 long-column-name format.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">long</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates that column names returned from a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement use
	 long-column-name format. In this format, column names use the form
	 <codeph class="+ topic/ph pr-d/codeph ">[table-name]_[column-name]</codeph> regardless of how many
	 tables are included in the <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnNameStyle:SHORT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SHORT</apiName><shortdesc class="- topic/shortdesc ">
     Indicates that column names returned from a SELECT statement use short-column-name
	 format.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">short</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates that column names returned from a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement use short-column-name
	 format. In this format, column names use the form <codeph class="+ topic/ph pr-d/codeph ">[column-name]</codeph>,
	 regardless of how many tables are included in the <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement.
	 
	 <p class="- topic/p ">If the result set contains multiple columns with the same name, only one property with that
	 name is added to the result object. The value assigned to that property is taken from the last
	 column with that name in the result row. For example, consider the following <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>
	 statement:</p>
	 
	 <pre xml:space="preserve" class="- topic/pre ">
	 SELECT customers.customerId, addresses.customerId
	 FROM customers INNER JOIN addresses
	    ON customers.customerId = addresses.customerId
	 </pre>
	 
	 <p class="- topic/p ">When this statement is executed on a SQLConnection instance with short column name format,
	 each result object has a property named <codeph class="+ topic/ph pr-d/codeph ">customerId</codeph>, containing the
	 value from the <codeph class="+ topic/ph pr-d/codeph ">addresses</codeph> table's <codeph class="+ topic/ph pr-d/codeph ">customerId</codeph> column.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchema</apiName><shortdesc class="- topic/shortdesc ">
 The SQLSchema class is the base class for schema information for database objects
 such as tables, views, and indices.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The SQLSchema class is the base class for schema information for database objects
 such as tables, views, and indices.
 
 <p class="- topic/p ">To obtain schema information for a database, use the
 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method to load the schema information.
 The resulting SQLSchemaResult instance contains arrays of instances representing the objects
 in the database.</p>
 
 <p class="- topic/p ">Generally, developer code does not construct SQLSchema instances directly.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLSchema:SQLSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchema</apiName><shortdesc class="- topic/shortdesc ">
     Creates a SQLSchema instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the associated database.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the database object.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The SQL used to construct the database
     object.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a SQLSchema instance. Generally, developer code does not call the SQLSchema
     constructor directly. To obtain schema information for a database, call the
	 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLSchema:database:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">database</apiName><shortdesc class="- topic/shortdesc ">
     The name of the database to which this schema object belongs.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The name of the database to which this schema object belongs. The name is "main" for the main
	 database associated with a SQLConnection instance (the database file that is
	 opened by calling a SQLConnection instance's <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method). For other
	 databases that are attached to the connection using the
	 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.attach()</codeph> method, the value is the name specified in the <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph>
     method call.
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchema:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
     The name of this schema object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The name of this schema object. Each object within a
     database has a unique name. The name is defined in the SQL statement that creates the object
	 (such as the <codeph class="+ topic/ph pr-d/codeph ">CREATE TABLE</codeph> statement for a table).
	 
	 <p class="- topic/p ">For example, if a database index is created using the following SQL statement, the value of the
	 <codeph class="+ topic/ph pr-d/codeph ">name</codeph> property for that index's schema would be <codeph class="+ topic/ph pr-d/codeph ">"customer_index"</codeph>:</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">CREATE INDEX customer_index ON customers (id)</codeblock>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLSchema:sql:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sql</apiName><shortdesc class="- topic/shortdesc ">
     Returns the entire text of the SQL statement that was used to create this schema object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Returns the entire text of the SQL statement that was used to create this schema object.
	 Each object within a database is created using a SQL statement.
	 
	 <p class="- topic/p ">For example, if a database index is created using the following SQL:</p>
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">CREATE INDEX customer_index ON customers (id)</codeblock>
	 <p class="- topic/p ">the <codeph class="+ topic/ph pr-d/codeph ">sql</codeph> property for that index's schema would be the entire text of
	 the statement.</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLCollationType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLCollationType</apiName><shortdesc class="- topic/shortdesc ">
 This class contains the constants that represent the possible values for the
 defaultCollationType parameter of the SQLColumnSchema constructor, as well as the
 SQLColumnSchema.defaultCollationType property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 This class contains the constants that represent the possible values for the
 <codeph class="+ topic/ph pr-d/codeph ">defaultCollationType</codeph> parameter of the SQLColumnSchema constructor, as well as the
 <codeph class="+ topic/ph pr-d/codeph ">SQLColumnSchema.defaultCollationType</codeph> property.
 
 <p class="- topic/p ">These values represent different collation sequences that can be specified for a column
 in a database table. A <i class="+ topic/ph hi-d/i ">collation sequence</i> is a way of sorting and comparing data,
 for example whether the database differentiates between uppercase and lowercase characters.</p>
 
 <p class="- topic/p ">For more information about defining and using collation sequences, see the 
 "COLLATE" section in the appendix
 "<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_statements_en" scope="external" class="- topic/xref ">SQL support in local databases</xref>."</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema/defaultCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links><apiValue id="flash.data:SQLCollationType:BINARY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">BINARY</apiName><shortdesc class="- topic/shortdesc ">
     Indicates that the column is defined to use the BINARY collation sequence.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">binary</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates that the column is defined to use the <codeph class="+ topic/ph pr-d/codeph ">BINARY</codeph> collation sequence.
     A <codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.BINARY</codeph> collation compares two
     values using their byte values, regardless of the text encoding of the characters.
	 
	 <p class="- topic/p ">When binary collation is used with values of the <codeph class="+ topic/ph pr-d/codeph ">TEXT</codeph> storage class, the database
	 differentiates between uppercase and lowercase characters when sorting and comparing the column's
	 values.</p>
	 
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema/defaultCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLCollationType:NO_CASE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NO_CASE</apiName><shortdesc class="- topic/shortdesc ">
     Indicates that the column is defined to use the NOCASE collation sequence.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">noCase</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates that the column is defined to use the <codeph class="+ topic/ph pr-d/codeph ">NOCASE</codeph> collation sequence.
     A <codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.NO_CASE</codeph> collation ignores uppercase and lowercase differences
	 when sorting and comparing two values.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema/defaultCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLSchemaResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchemaResult</apiName><shortdesc class="- topic/shortdesc ">
 A SQLSchemaResult instance contains the information resulting from a call to
 the SQLConnection.loadSchema() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A SQLSchemaResult instance contains the information resulting from a call to
 the <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method. It contains four Array properties
 that hold the requested schema data, based on the argument values
 used when calling <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
 
 <p class="- topic/p ">To retrieve the SQLSchemaResult instance for a <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>
 call, call the SQLConnection instance's <codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> method. Generally, developer
 code does not create SQLSchemaResult instances directly.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.getSchemaResult()</linktext></link></related-links><apiConstructor id="flash.data:SQLSchemaResult:SQLSchemaResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchemaResult</apiName><shortdesc class="- topic/shortdesc ">
     Creates a SQLSchemaResult instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">tables</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of SQLTableSchema instances as specified in the <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> request.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">views</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of SQLViewSchema instances as specified in the <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> request.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">indices</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of SQLIndexSchema instances as specified in the <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> request.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">triggers</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An array of SQLTriggerSchema instances as specified in the <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> request.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a SQLSchemaResult instance. Generally, developer code does not call the SQLSchemaResult
     constructor directly. To obtain schema information for a database, call the
	 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLSchemaResult:indices:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">indices</apiName><shortdesc class="- topic/shortdesc ">
     An array of SQLIndexSchema instances requested in a call
     to SQLConnection.loadSchema().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     An array of SQLIndexSchema instances requested in a call
     to <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. If the specified databases
	 do not contain any indices, or if the <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> call
	 specifies to exclude indices from the result, the <codeph class="+ topic/ph pr-d/codeph ">indices</codeph>
	 property is an empty array (an array whose <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property
	 is 0).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLIndexSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLIndexSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:tables:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">tables</apiName><shortdesc class="- topic/shortdesc ">
     An array of SQLTableSchema instances requested in a call
     to SQLConnection.loadSchema().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     An array of SQLTableSchema instances requested in a call
     to <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. If the specified databases
	 do not contain any tables, or if the <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> call
	 specifies to exclude tables from the result, the <codeph class="+ topic/ph pr-d/codeph ">tables</codeph>
	 property is an empty array (an array whose <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property
	 is 0).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTableSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTableSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:triggers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">triggers</apiName><shortdesc class="- topic/shortdesc ">
     An array of SQLTriggerSchema instances requested in a call
     to SQLConnection.loadSchema().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     An array of SQLTriggerSchema instances requested in a call
     to <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. If the specified databases
	 do not contain any triggers, or if the <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> call
	 specifies to exclude triggers from the result, the <codeph class="+ topic/ph pr-d/codeph ">triggers</codeph>
	 property is an empty array (an array whose <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property
	 is 0).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTriggerSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTriggerSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:views:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">views</apiName><shortdesc class="- topic/shortdesc ">
     An array of SQLViewSchema instances requested in a call
     to SQLConnection.loadSchema().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     An array of SQLViewSchema instances requested in a call
     to <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. If the specified databases
	 do not contain any views, or if the <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> call
	 indicates that views should be excluded from the result, the <codeph class="+ topic/ph pr-d/codeph ">views</codeph>
	 property is an empty array (an array whose <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property
	 is 0).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLViewSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLViewSchema</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLTransactionLockType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLTransactionLockType</apiName><shortdesc class="- topic/shortdesc ">
 This class contains the constants that represent the possible values for the
 option parameter of the SQLConnection.begin() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 This class contains the constants that represent the possible values for the
 <codeph class="+ topic/ph pr-d/codeph ">option</codeph> parameter of the <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.begin()</codeph> method.
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links><apiValue id="flash.data:SQLTransactionLockType:DEFERRED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEFERRED</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the deferred locking transaction option.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">deferred</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the deferred locking transaction option.
     A deferred-lock transaction does not acquire a lock on the database
     until the database is first accessed. With a deferred
     transaction, a lock is not acquired until the first read or write
     operation.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLTransactionLockType:EXCLUSIVE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">EXCLUSIVE</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the exclusive locking transaction option.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">exclusive</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the exclusive locking transaction option.
	 An exclusive-locked transaction acquires a lock on the database immediately.
	 Other SQLStatement objects executing against the same database through a
	 different SQLConnection (in the same AIR application or a different one)
	 can't read data from or write data to the database.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLTransactionLockType:IMMEDIATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">IMMEDIATE</apiName><shortdesc class="- topic/shortdesc ">
     Specifies the immediate locking transaction option.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">immediate</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Specifies the immediate locking transaction option.
     An immediate-locked transaction acquires a lock on the database immediately.
	 SQLStatement objects executing against the same database through a
	 different SQLConnection (in the same AIR application or a different one)
	 can read data from the database but can't write data to it. However, for those 
	 other connections reading data from the database, the initial state of the data 
	 in the database is identical to the state of the database before the 
	 in-transaction SQLConnection instance's <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> method was called. 
	 Any uncommitted data changes made within the immediate-locked transaction are 
	 not available to the other connections.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLConnection</apiName><shortdesc class="- topic/shortdesc ">
 A SQLConnection instance is used to manage the creation of and connection to local SQL database files
 (local databases).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A SQLConnection instance is used to manage the creation of and connection to local SQL database files
 (local databases).
 
 
 <p class="- topic/p ">The functionality of the SQLConnection class falls into several categories:</p>
 
 <ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">A local SQL database file is created or opened by calling the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method or the
   SQLConnection instance to the SQLStatement's <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> property.</p></li><li class="- topic/li "><p class="- topic/p ">The SQLConnection class also provides state for SQL statements, including a
   mechanism for executing multiple statements in a transaction. Transactions are managed using the 
   <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> methods. In addition, the 
   <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> methods 
   allow code to define and manage savepoints. These are used to subdivide transactions into sets of operations.</p></li><li class="- topic/li "><p class="- topic/p ">The SQLConnection class provides access to database schema information for connected
   databases. A database's schema describes the definitions of its tables, columns, indices, and triggers.
   See the <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> method for more information.</p></li><li class="- topic/li "><p class="- topic/p ">The SQLConnection class provides the ability to encrypt databases using AES with CCM. This provides
   both authentication and privacy for data. To encrypt a database, a 16 byte key (specified using a 
   ByteArray) must be specified when the database is created. This key can later be changed
   using the <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.reencrypt()</codeph> method. Encryption imposes a performance penalty on
   writes to and reads from the database. Encryption is applied to data stored on the disk, but not to a 
   temporary data cache in memory. Encryption is <i class="+ topic/ph hi-d/i ">not</i> supported for in-memory databases.</p></li><li class="- topic/li "><p class="- topic/p ">A SQLConnection instance can be used to receive database-level
   event notifications and provide configuration control for
   all aspects of a database, including cache page size, process canceling, and statement execution
   options.</p></li></ul>
 
 <p class="- topic/p ">A <codeph class="+ topic/ph pr-d/codeph ">SQLConnection</codeph> instance operates in one of two distinct execution modes: asynchronous
 and synchronous. To use synchronous execution, you use the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method to connect to the
 main database for the SQLConnection instance. To use asynchronous execution, use the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>
 method to connect to the main database for the instance.</p>
 
 <p class="- topic/p ">When you're using asynchronous execution, you use event listeners or a Responder instance to
 determine when an operation completes or fails. The operations run in the
 background rather than in the main application thread, so the application continues
 to run and respond to user interaction even while the database operations are being performed. Each 
 asynchronous SQLConnection instance executes SQL statements in its own thread.</p>
 
 <p class="- topic/p ">In asynchronous execution mode, you begin a specific operation
 by calling the appropriate method, and you can detect the completion (or failure) of the operation
 by registering a listener for the appropriate event. Each operation has an associated event that
 is dispatched when the operation completes successfully; for example, when an <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>
 method call completes successfully (when the database connection is opened) the <codeph class="+ topic/ph pr-d/codeph ">open</codeph>
 event is dispatched. When any operation fails,
 an <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched. The SQLError instance in the SQLErrorEvent
 object's <codeph class="+ topic/ph pr-d/codeph ">error</codeph> property contains information about the specific error,
 including the operation that was being attempted and the reason the operation failed.</p>
 
 <p class="- topic/p ">When you're using synchronous execution, you do not need to register event
 listeners to determine when an operation completes or fails. To identify errors,
 enclose the error-throwing statements in a <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph> block. Because
 synchronous operations execute in the main execution thread, all application
 functionality (including refreshing the screen and allowing mouse and keyboard
 interaction) is paused while the database operation or operations are performed.
 For long-running operations this can cause a noticeable pause in the application.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link><link href="flash.events.xml#SQLEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLEvent</linktext></link><link href="flash.events.xml#SQLErrorEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLErrorEvent</linktext></link><link href="flash.errors.xml#SQLError" class="- topic/link "><linktext class="- topic/linktext ">flash.errors.SQLError</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_en" class="- topic/link "><linktext class="- topic/linktext ">Quick Start: Working asynchronously with a local SQL database (Flex)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_flash_en" class="- topic/link "><linktext class="- topic/linktext ">Quick Start: Working asynchronously with a local SQL database (Flash)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_html_en" class="- topic/link "><linktext class="- topic/linktext ">Quick Start: Working asynchronously with a local SQL database (HTML)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_en" class="- topic/link "><linktext class="- topic/linktext ">Quick Start: Working synchronously with a local SQL database (Flex)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_flash_en" class="- topic/link "><linktext class="- topic/linktext ">Quick Start: Working synchronously with a local SQL database (Flash)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_html_en" class="- topic/link "><linktext class="- topic/linktext ">Quick Start: Working synchronously with a local SQL database (HTML)</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.UPDATE_update" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">update</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when data in any table in any of the connected databases changes as a result
 of a SQL UPDATE command.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLUpdateEvent.UPDATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when data in any table in any of the connected databases changes as a result
 of a SQL <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> command. The data change can be a direct result of a <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>
 statement executed through a SQLStatement instance, or an indirect result caused by a trigger firing
 in response to a statement execution.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.SET_SAVEPOINT_setSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">setSavepoint</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a setSavepoint() method call's operation
 completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.SET_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> method call's operation
 completes successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.SCHEMA_schema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">schema</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a loadSchema() method call's operation completes
 successfully and the schema results are ready.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.SCHEMA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> method call's operation completes
 successfully and the schema results are ready.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">loadSchema()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ROLLBACK_TO_SAVEPOINT_rollbackToSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollbackToSavepoint</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a rollbackToSavepoint() method call's operation
 completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ROLLBACK_TO_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> method call's operation
 completes successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ROLLBACK_rollback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollback</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a rollback() method call's operation
 completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ROLLBACK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> method call's operation
 completes successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.RELEASE_SAVEPOINT_releaseSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">releaseSavepoint</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a releaseSavepoint() method call's operation
 completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.RELEASE_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> method call's operation
 completes successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.REENCRYPT_reencrypt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">reencrypt</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a reencrypt() method call's operation completes
 successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.REENCRYPT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a <codeph class="+ topic/ph pr-d/codeph ">reencrypt()</codeph> method call's operation completes
 successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/reencrypt()" class="- topic/link "><linktext class="- topic/linktext ">reencrypt()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an openAsync() method call's operation
 completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method call's operation
 completes successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.INSERT_insert" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">insert</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when data in any table in any of the connected databases changes as a result
 of a SQL INSERT command.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLUpdateEvent.INSERT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when data in any table in any of the connected databases changes as a result
 of a SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> command. The data change can be a direct result of an <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>
 statement executed through a SQLStatement instance, or an indirect result caused by a trigger firing
 in response to a statement execution.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLErrorEvent.ERROR_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when any of the SQLConnection object's asynchronous operations results
 in an error.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLErrorEvent.ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when any of the SQLConnection object's asynchronous operations results
 in an error. The SQLErrorEvent instance that's dispatched as the event object
 has an <codeph class="+ topic/ph pr-d/codeph ">error</codeph> property that contains information about the operation that
 was attempted and the cause of the failure.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.DETACH_detach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">detach</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a detach() method call's operation
 completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.DETACH</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a <codeph class="+ topic/ph pr-d/codeph ">detach()</codeph> method call's operation
 completes successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/detach()" class="- topic/link "><linktext class="- topic/linktext ">detach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.DELETE_delete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">delete</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when data in any table in any of the connected databases changes as a result
 of a SQL DELETE command.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLUpdateEvent.DELETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when data in any table in any of the connected databases changes as a result
 of a SQL <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> command. The data change can be a direct result of a <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>
 statement executed through a SQLStatement instance, or an indirect result caused by a trigger firing
 in response to a statement execution.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.DEANALYZE_deanalyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">deanalyze</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a deanalyze() method call's operation
 completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.DEANALYZE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a <codeph class="+ topic/ph pr-d/codeph ">deanalyze()</codeph> method call's operation
 completes successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/deanalyze()" class="- topic/link "><linktext class="- topic/linktext ">deanalyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.COMMIT_commit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">commit</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a commit() method call's operation
 completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.COMMIT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> method call's operation
 completes successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a close() method call's operation
 completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method call's operation
 completes successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.COMPACT_compact" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">compact</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a compact() method call's operation
 completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.COMPACT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> method call's operation
 completes successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/compact()" class="- topic/link "><linktext class="- topic/linktext ">compact()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a cancel() method call's operation completes
 successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a <codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph> method call's operation completes
 successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/cancel()" class="- topic/link "><linktext class="- topic/linktext ">cancel()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.BEGIN_begin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">begin</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when a begin() method call's operation
 completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.BEGIN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when a <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> method call's operation
 completes successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ATTACH_attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an attach() method call's operation
 completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ATTACH</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> method call's operation
 completes successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ANALYZE_analyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">analyze</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an analyze() operation
 completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ANALYZE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> operation
 completes successfully.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/analyze()" class="- topic/link "><linktext class="- topic/linktext ">analyze()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.data:SQLConnection:SQLConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLConnection</apiName><shortdesc class="- topic/shortdesc ">
     Creates a SQLConnection instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">if constructor is called from any sandbox outside
     of the main application sandbox. 
      
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a SQLConnection instance.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.data:SQLConnection:addEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addEventListener</apiName><shortdesc class="- topic/shortdesc ">
     
	Registers an event listener object with an EventDispatcher object so that the listener 
	receives notification of an event.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The type of event.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The listener function that processes the event. This function must accept
    an Event object as its only parameter and must return nothing<ph class="- topic/ph ">, as this example shows:</ph>
	
	
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">function(evt:Event):void</codeblock>
	
	<p class="- topic/p ">The function can have any name.</p>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">Determines whether the listener works in the capture phase or the 
	target and bubbling phases. If <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, 
	the listener processes the event only during the capture phase and not in the 
	target or bubbling phase. If <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, the
	listener processes the event only during the target or bubbling phase. To listen for
	the event in all three phases, call <codeph class="+ topic/ph pr-d/codeph ">addEventListener</codeph> twice, once with 
	<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, then again with
	<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</ph>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">priority</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The priority level of the event listener. The priority is designated by
	a signed 32-bit integer. The higher the number, the higher the priority. All listeners
	with priority <i class="+ topic/ph hi-d/i ">n</i> are processed before listeners of priority <i class="+ topic/ph hi-d/i ">n</i>-1. If two
	or more listeners share the same priority, they are processed in the order in which they
	were added. The default priority is 0.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useWeakReference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Determines whether the reference to the listener is strong or
	weak. A strong reference (the default) prevents your listener from being garbage-collected.
    A weak reference does not. <p class="- topic/p ">Class-level member functions are not subject to garbage 
    collection, so you can set <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for 
    class-level member functions without subjecting them to garbage collection. If you set
    <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> for a listener that is a nested inner 
    function, the function will be garbage-collected and no longer persistent. If you create 
    references to the inner function (save it in another variable) then it is not 
    garbage-collected and stays persistent.</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
	Registers an event listener object with an EventDispatcher object so that the listener 
	receives notification of an event. <ph class="- topic/ph ">You can register event listeners on all nodes in the 
	display list for a specific type of event, phase, and priority.</ph>
	
	
	
	<p class="- topic/p ">After you successfully register an event listener, you cannot change its priority
	through additional calls to <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>. To change a listener's
	priority, you must first call <codeph class="+ topic/ph pr-d/codeph ">removeListener()</codeph>. Then you can register the
	listener again with the new priority level. </p>
	
	<p class="- topic/p ">Keep in mind that after the listener is registered, subsequent calls to
	<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> with a different <codeph class="+ topic/ph pr-d/codeph ">type</codeph> or
	<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> value result in the creation of a separate listener registration. 
	<ph class="- topic/ph ">For example, if you first register a listener with <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> set to 
	<codeph class="+ topic/ph pr-d/codeph ">true</codeph>, it listens only during the capture phase. If you call 
	<codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> again using the same listener object, but with
	<codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, you have two separate listeners: one
	that listens during the capture phase and another that listens during the target and
	bubbling phases.</ph>
	</p>
	
	<p class="- topic/p ">You cannot register an event listener for only the target phase or the bubbling 
	phase. Those phases are coupled during registration because bubbling 
	applies only to the ancestors of the target node.</p>
	
	<p class="- topic/p ">If you no longer need an event listener, remove it by calling 
	<codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph>, or memory problems could result. Event listeners are not automatically
	removed from memory because the garbage
	collector does not remove the listener as long as the dispatching object exists (unless the <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph>
	parameter is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).</p>
		
	<p class="- topic/p ">Copying an EventDispatcher instance does not copy the event listeners attached to it. 
	(If your newly created node needs an event listener, you must attach the listener after
    creating the node.) However, if you move an EventDispatcher instance, the event listeners 
    attached to it move along with it.</p>
	
	
	<p class="- topic/p ">If the event listener is being registered on a node while an event is being processed
	on this node, the event listener is not triggered during the current phase but can be 
	triggered during a later phase in the event flow, such as the bubbling phase.</p>
	
	<p class="- topic/p ">If an event listener is removed from a node while an event is being processed on the node,
	it is still triggered by the current actions. After it is removed, the event listener is
	never invoked again (unless registered again for future processing). </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLConnection:analyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">analyze</apiName><shortdesc class="- topic/shortdesc ">
     Gathers statistics about database indices and
     stores them in the database.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When this method is called while the SQLConnection instance
     isn't connected to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">if the operation fails in synchronous execution mode.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">resourceName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the database or
     table whose indices are to be analyzed. If the specified resource is a table
     whose name is unique among all the attached databases, only the table name needs
     to be specified. However, a table name can be specified in the form
     <codeph class="+ topic/ph pr-d/codeph ">[database-name].[table-name]</codeph> to prevent ambiguity when the table name
     is not unique. If the <codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>
     (the default), all the indices in all attached databases are analyzed.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when
     the operation succeeds or fails. In asynchronous execution mode, if the
	 <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> an <codeph class="+ topic/ph pr-d/codeph ">analyze</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gathers statistics about database indices and
     stores them in the database. These statistics can then be used by the query optimizer
	 (the portion of the database engine that determines the most efficient way to
	 execute each statement). The statistics help the query optimizer make better
	 choices about which index or indices to use when executing a particular query.
	 
	 <p class="- topic/p ">If a database has indices defined, but the <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> method hasn't
	 been called, the runtime still uses those indices to execute statements. However,
	 without the additional statistical information generated by the <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> method,
	 the runtime may not choose the most efficient index for a particular query.</p>
	 
	 <p class="- topic/p ">When a table's data changes (as a result of <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>, <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>,
	 or <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> statements) the indices associated with that table change as well.
	 The statistical information generated by <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> is not automatically
	 updated. Consequently, after a large number of data changes, calling the 
	 <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> method again might be beneficial. However, the benefit obtained
	 from calling <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> again depends on several factors, including the
	 number of indices defined on a table, the relationship between the number of changed
	 rows and the total number of rows in the table, how much variation there is in the
	 table's indexed data, and how different the changed data is from the prechange data.</p>
     
     <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> parameter indicates whether the operation is 
	 performed on the indices of all attached databases, a specific database, or a specific
     table.</p>
     
     <p class="- topic/p ">Each time this method is called, any previously created statistical
     data is purged and recreated for the database or table specified in the <codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph>
	 parameter (or all tables in all connected databases if <codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>).
	 This method can be called at any time
     while a database connection is open. The <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> operation and its statistical
	 data are not included in a transaction; however, it is best
     not to call <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> when the database has a current transaction (the
     <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>). This is because any data, table schema,
	 or index changes that have been executed in the transaction but not yet committed
	 are not taken into account by the <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> call, and the
	 <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> data is out of date as soon as the transaction is committed.</p>
     
     <p class="- topic/p ">To remove the statistical data created with the <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> method, use
     the <codeph class="+ topic/ph pr-d/codeph ">deanalyze()</codeph> method.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/deanalyze()" class="- topic/link "><linktext class="- topic/linktext ">deanalyze()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:analyze_analyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">analyze</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:analyze_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous execution mode.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous execution mode.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><shortdesc class="- topic/shortdesc ">
     Adds another database to the SQLConnection instance, giving the new database
     the specified name.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter is an empty string (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>)
     or <codeph class="+ topic/ph pr-d/codeph ">null</codeph>
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the value specified for the <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> parameter is not a
	 flash.filesystem.File instance
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> argument is not <codeph class="+ topic/ph pr-d/codeph ">null</codeph> and 
	 its <codeph class="+ topic/ph pr-d/codeph ">length</codeph> is not 16 bytes
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> and the 
	 <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> argument is not <codeph class="+ topic/ph pr-d/codeph ">null</codeph>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the SQLConnection instance isn't connected to a database
	 (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>);
     or if a transaction is currently open (the <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">if the operation fails in synchronous execution mode.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name that is used to identify the newly attached database.
     This name can be used in SQL statements to explicitly indicate that a table belongs
     to the specified database, when using the format <codeph class="+ topic/ph pr-d/codeph ">[database-name].[table-name]</codeph>.
     The names "main" and "temp" are reserved and cannot be used.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">reference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A reference to the database file to attach
	 (a flash.filesystem.File instance). If the reference refers to a file that doesn't exist, either
	 a new database file is created or an error is thrown according to the value that was specified for the
	 <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> parameter in the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> call that
	 connected the main database.
	 
     <p class="- topic/p ">If the parameter's value is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, an in-memory database is created and attached.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when
     the operation succeeds or fails. In asynchronous execution mode, if the
	 <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> an <codeph class="+ topic/ph pr-d/codeph ">attach</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">encryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The encryption key for the database file.
	 If the <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> call creates a database, the database is encrypted and the 
	 specified key is used as the encryption key for the database. If the call attaches an 
	 existing encrypted database, the value must match the database's encryption key or an error occurs.
	 If the database being attached is not encrypted, or to create an unencrypted database, 
	 the value must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (the default).
	 
	 <p class="- topic/p ">A valid encryption key is 16 bytes long. An in-memory database cannot be encrypted, so this 
	 parameter must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> when the <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> parameter's value is 
	 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
	 
	 <p class="- topic/p ">When attaching an encrypted database, if the encryption key provided doesn't match the 
	 database's encryption key, an exception occurs. In synchronous execution mode, a SQLError 
	 exception is thrown. In asynchronous execution mode, a SQLErrorEvent is dispatched, and the event  
	 object's <codeph class="+ topic/ph pr-d/codeph ">error</codeph> property contains a SQLError instance. In either case, the 
	 SQLError object's <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph> property is 3138 ("File opened is not a database file").</p>
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> parameter is available starting with AIR 1.5.</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Adds another database to the SQLConnection instance, giving the new database
     the specified name. Attaching a database allows that database to be used in SQL
     statements executed against this SQLConnection instance.
     
     <p class="- topic/p ">If a database is already attached using the specified name, calling <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph>
     results in an error. However, the same database may
     be attached multiple times using unique names. Only ten databases can be attached
     to a single SQLConnection instance.</p>
     
     <p class="- topic/p ">Any SQL statement can be executed on a database connected using
     <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> that can be executed on the main database (the database
     connected using <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
     A SQL statement can access tables in any of the databases attached to the
     statement's associated SQLConnection instance, including accessing tables from
     multiple databases in a single statement. When the runtime is resolving table names
     in a statement, it searches through the SQLConnection instance's databases in the order
     in which the databases were attached, starting with the database that was connected
     using the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method. Use the database name (as specified in the
     <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> method's <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter) in the statement
     to explicitly qualify a table name.</p>
     
     <p class="- topic/p ">To remove a database attached using the <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> method,
     use the <codeph class="+ topic/ph pr-d/codeph ">detach()</codeph> method. When the SQLConnection instance is closed (by
     calling the <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> method), all
     attached databases are detached.</p>
     
     <p class="- topic/p ">The attached database uses the same execution mode (synchronous or asynchronous) as
	 the main database, depending on whether the main database was connected using the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>
	 method or the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/detach()" class="- topic/link "><linktext class="- topic/linktext ">detach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:attach_attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:attach_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous execution mode.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous execution mode.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:begin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">begin</apiName><shortdesc class="- topic/shortdesc ">
     Begins a transaction within which all SQL statements executed against
     the connection's database or databases are grouped.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When this method is called while the SQLConnection instance
     isn't connected to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the option specified is not one of the SQLTransactionLockType
     constants.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">if the operation fails in synchronous execution mode.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">option</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates the locking strategy that is used by
     the transaction. The value can be one of the constants defined
     in the SQLTransactionLockType class:
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.DEFERRED</codeph> indicates that a lock is not acquired
	    until the first read or write operation.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.EXCLUSIVE</codeph> indicates that a lock is acquired as soon
	    as possible, and no other SQLConnection instance can read from or write to the database.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.IMMEDIATE</codeph> indicates that a lock is acquired as soon
	    as possible, in which other SQLConnection instances can read from but can't write to the database.</li></ul>
	 <p class="- topic/p ">The default value (<codeph class="+ topic/ph pr-d/codeph ">null</codeph>) is equivalent to <codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.DEFERRED</codeph>.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when
     the operation succeeds or fails. In asynchronous execution mode, if the
	 <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> a <codeph class="+ topic/ph pr-d/codeph ">begin</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Begins a transaction within which all SQL statements executed against
     the connection's database or databases are grouped.
     
     <p class="- topic/p ">By default, each SQL statement
     is executed within its own transaction, and the transaction ends when
     the statement's execution succeeds or fails. Creating a transaction using the
     <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> method causes a new, manual transaction to be created.
     From that point on, all SQL statements executed against the SQLConnection instance
     take place within the transaction, and any actions or modifications performed
     by the statements can be committed (made permanent) or rolled back (undone) as
     a group.</p>
     
	 <p class="- topic/p ">To end a transaction, call the <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> or
     <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> method, depending on whether the changes made by the
     transactions' statements are to be made permanent or discarded.</p>
	 
     <p class="- topic/p ">Nested calls to <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> are ignored. You can create savepoints, 
	 which are like bookmarks within a transaction, by calling the 
	 <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> method. You can then partially commit or roll back 
	 SQL statements by calling the <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> or 
	 <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> methods. However, if a transaction is started 
	 by calling <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>, changes are not permanently committed to the 
	 database until the <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> method is called.</p>
     
	 <p class="- topic/p ">If the database connection closes while a transaction is currently open, 
	 AIR rolls back the transaction automatically. (Note: for AIR 1.1 and previous 
	 versions, an open transaction is automatically committed when a connection 
	 closes.)</p>
     
     <p class="- topic/p ">A transaction is not limited to statement executions in a single
     database; it can include statements executed on different attached
     databases.</p>
     
     </apiDesc><example conref="examples\SQLConnection.transactions.1.as" class="- topic/example "> The following example demonstrates executing multiple SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>
 statements within a transaction. First a row is added to the "employees" table. Next the 
 primary key of the newly inserted row is retrieved, and used to add a row to the related 
 "phoneNumbers" table.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.data.SQLConnection;
    import flash.data.SQLResult;
    import flash.data.SQLStatement;
    import flash.display.Sprite;
    import flash.events.SQLErrorEvent;
    import flash.events.SQLEvent;
    import flash.filesystem.File;
    
    public class MultiInsertTransactionExample extends Sprite
    {
        private var conn:SQLConnection;
        private var insertEmployee:SQLStatement;
        private var insertPhoneNumber:SQLStatement;
        
        public function MultiInsertTransactionExample():void
        {
            // define where to find the database file
            var appStorage:File = File.applicationStorageDirectory;
            var dbFile:File = appStorage.resolvePath("ExampleDatabase.db");
            
            // open the database connection
            conn = new SQLConnection();
            conn.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            conn.addEventListener(SQLEvent.OPEN, openHandler);
            conn.openAsync(dbFile);
        }
        
        // Called when the database is connected
        private function openHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.OPEN, openHandler);
            
            // start a transaction
            conn.addEventListener(SQLEvent.BEGIN, beginHandler);
            conn.begin();
        }
        
        // Called when the transaction begins
        private function beginHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.BEGIN, beginHandler);
            
            // create and execute the first SQL statement:
            // insert an employee record
            insertEmployee = new SQLStatement();
            insertEmployee.sqlConnection = conn;
            insertEmployee.text = 
                "INSERT INTO employees (lastName, firstName, email) " + 
                "VALUES (:lastName, :firstName, :email, :birthday)";
            insertEmployee.parameters[":lastName"] = "Smith";
            insertEmployee.parameters[":firstName"] = "Bob";
            insertEmployee.parameters[":email"] = "bsmith@example.com";
            insertEmployee.parameters[":birthday"] = new Date(1971, 8, 12);
            
            insertEmployee.addEventListener(SQLEvent.RESULT, insertEmployeeHandler);
            insertEmployee.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            insertEmployee.execute();
        }
        
        // Called after the employee record is inserted
        private function insertEmployeeHandler(event:SQLEvent):void
        {
            insertEmployee.removeEventListener(SQLEvent.RESULT, insertEmployeeHandler);
            insertEmployee.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            // Get the employee id of the newly created employee row
            var result:SQLResult = insertEmployee.getResult();
            var employeeId:Number = result.lastInsertRowID;
            
            // Add a phone number to the related phoneNumbers table
            insertPhoneNumber = new SQLStatement();
            insertPhoneNumber.sqlConnection = conn;
            insertPhoneNumber.text =
                "INSERT INTO phoneNumbers (employeeId, type, number) " +
                "VALUES (:employeeId, :type, :number)";
            insertPhoneNumber.parameters[":employeeId"] = employeeId;
            insertPhoneNumber.parameters[":type"] = "Home";
            insertPhoneNumber.parameters[":number"] = "(555) 555-1234";
            
            insertPhoneNumber.addEventListener(SQLEvent.RESULT, insertPhoneNumberHandler);
            insertPhoneNumber.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            insertPhoneNumber.execute();
        }
        
        // Called after the phone number record is inserted
        private function insertPhoneNumberHandler(event:SQLEvent):void
        {
            insertPhoneNumber.removeEventListener(SQLEvent.RESULT, insertPhoneNumberHandler);
            insertPhoneNumber.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            // No errors so far, so commit the transaction
            conn.addEventListener(SQLEvent.COMMIT, commitHandler);
            conn.commit();
        }
        
        // Called after the transaction is committed
        private function commitHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.COMMIT, commitHandler);
            
            trace("Transaction complete");
        }
        
        // Called whenever an error occurs
        private function errorHandler(event:SQLErrorEvent):void
        {
            // If a transaction is happening, roll it back
            if (conn.inTransaction)
            {
                conn.addEventListener(SQLEvent.ROLLBACK, rollbackHandler);
                conn.rollback();
            }
            
            trace(event.error.message);
            trace(event.error.details);
        }
        
        // Called when the transaction is rolled back
        private function rollbackHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.ROLLBACK, rollbackHandler);
            
            // add additional error handling, close the database, etc.
        }
    }
}
</codeblock></example><example conref="examples\SQLConnection.transactions.2.as" class="- topic/example "> The following example demonstrates executing multiple SQL <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>
 statements within a transaction. The transaction is used to delete an employee record. 
 First the related rows in the "phoneNumbers" table are deleted. Next the employee 
 record row is deleted from the "employees" table.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.data.SQLConnection;
    import flash.data.SQLResult;
    import flash.data.SQLStatement;
    import flash.display.Sprite;
    import flash.events.SQLErrorEvent;
    import flash.events.SQLEvent;
    import flash.filesystem.File;
    
    public class MultiDeleteTransactionExample extends Sprite
    {
        private var conn:SQLConnection;
        private var deleteEmployee:SQLStatement;
        private var deletePhoneNumbers:SQLStatement;
        
        private var employeeIdToDelete:Number = 25;
        
        public function MultiDeleteTransactionExample():void
        {
            // define where to find the database file
            var appStorage:File = File.applicationStorageDirectory;
            var dbFile:File = appStorage.resolvePath("ExampleDatabase.db");
            
            // open the database connection
            conn = new SQLConnection();
            conn.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            conn.addEventListener(SQLEvent.OPEN, openHandler);
            conn.openAsync(dbFile);
        }
        
        // Called when the database is connected
        private function openHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.OPEN, openHandler);
            
            // start a transaction
            conn.addEventListener(SQLEvent.BEGIN, beginHandler);
            conn.begin();
        }
        
        // Called when the transaction begins
        private function beginHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.BEGIN, beginHandler);
            
            // Create and execute the first SQL statement:
            // Delete an employee's phone number records
            deletePhoneNumbers = new SQLStatement();
            deletePhoneNumbers.sqlConnection = conn;
            deletePhoneNumbers.text =
                "DELETE FROM phoneNumbers " +
                "WHERE employeeId = :employeeId";
            deletePhoneNumbers.parameters[":employeeId"] = employeeIdToDelete;
            
            deletePhoneNumbers.addEventListener(SQLEvent.RESULT, deletePhoneNumbersHandler);
            deletePhoneNumbers.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            deletePhoneNumbers.execute();
        }
        
        // Called after the phone number records are deleted
        private function deletePhoneNumbersHandler(event:SQLEvent):void
        {
            deletePhoneNumbers.removeEventListener(SQLEvent.RESULT, deletePhoneNumbersHandler);
            deletePhoneNumbers.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            deleteEmployee = new SQLStatement();
            deleteEmployee.sqlConnection = conn;
            deleteEmployee.text = 
                "DELETE FROM employees " + 
                "WHERE employeeId = :employeeId";
            deleteEmployee.parameters[":employeeId"] = employeeIdToDelete;
            
            deleteEmployee.addEventListener(SQLEvent.RESULT, deleteEmployeeHandler);
            deleteEmployee.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            deleteEmployee.execute();
        }
        
        // Called after the employee record is deleted
        private function deleteEmployeeHandler(event:SQLEvent):void
        {
            deleteEmployee.removeEventListener(SQLEvent.RESULT, deleteEmployeeHandler);
            deleteEmployee.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            // No errors so far, so commit the transaction
            conn.addEventListener(SQLEvent.COMMIT, commitHandler);
            conn.commit();
        }
        
        // Called after the transaction is committed
        private function commitHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.COMMIT, commitHandler);
            
            trace("Transaction complete");
        }
        
        // Called whenever an error occurs
        private function errorHandler(event:SQLErrorEvent):void
        {
            // If a transaction is happening, roll it back
            if (conn.inTransaction)
            {
                conn.addEventListener(SQLEvent.ROLLBACK, rollbackHandler);
                conn.rollback();
            }
            
            trace(event.error.message);
            trace(event.error.details);
        }
        
        // Called when the transaction is rolled back
        private function rollbackHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.ROLLBACK, rollbackHandler);
            
            // add additional error handling, close the database, etc.
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link><link href="flash.data.xml#SQLTransactionLockType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTransactionLockType</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:begin_begin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">begin</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:begin_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous execution mode.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous execution mode.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
     Aborts all SQL statements that are currently executing on databases connected to the SQLConnection
     instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When this method is called while the SQLConnection instance
     isn't connected to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the operation fails in synchronous execution mode.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when
     the operation succeeds or fails. In asynchronous execution mode, if the
	 <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> a <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Aborts all SQL statements that are currently executing on databases connected to the SQLConnection
     instance. This method can be used to stop long running or runaway queries.
     
     <p class="- topic/p ">If there are statements executing when the <codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph> method is called, this method
     aborts the statements' operations and any incomplete updates or transactions are rolled back.
     If there are no statements currently executing, calling this method rolls back an open transaction
	 but otherwise does nothing.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:cancel_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
	 
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:cancel_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous execution mode.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous execution mode.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Closes the current database connection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the operation fails in synchronous execution mode.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when
     the operation succeeds or fails. In asynchronous execution mode, if the
	 <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> a <codeph class="+ topic/ph pr-d/codeph ">close</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Closes the current database connection. Any attached databases are
     detached as well.
     
     <p class="- topic/p ">If there is an open
     transaction when <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> is called, the transaction is rolled back.
     When a SQLConnection instance is
     garbage-collected, the runtime calls <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> automatically, including
     if an AIR application is closed while a SQLConnection is still connected to a database.</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.data:SQLConnection:close_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:close_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous execution mode.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous execution mode.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:commit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">commit</apiName><shortdesc class="- topic/shortdesc ">
     Commits an existing transaction, causing any actions performed by the transaction's
     statements to be permanently applied to the database.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the method is called while the SQLConnection 
	 instance isn't connected to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is
	 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>); or if no transaction is currently open (the
	 <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when
     the operation succeeds or fails. In asynchronous execution mode, if the
	 <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> a <codeph class="+ topic/ph pr-d/codeph ">commit</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Commits an existing transaction, causing any actions performed by the transaction's
     statements to be permanently applied to the database.
     
	 <p class="- topic/p ">Intermediate savepoints, which are like bookmarks in a transaction, can be created 
	 by calling the <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> method. Using savepoints you can commit 
	 portions of a transaction by calling the <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph>
	 method, or roll back portions of a transaction by calling the 
	 <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> method. However, 
	 if a transaction is opened using the <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> method, changes are not 
	 permanently saved to the database until the entire transaction is 
	 committed by calling the <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> method.</p>
	 
	 <p class="- topic/p ">For a transaction that uses savepoints, any statements that were rolled back 
	 using the <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> method are not committed when the 
	 entire transaction is committed. Statements that were committed using
	 <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> or whose savepoints weren't released or rolled back
	 are committed to the database.</p>
	 
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:commit_commit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">commit</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:commit_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes with a failure.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes with a failure.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:compact" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">compact</apiName><shortdesc class="- topic/shortdesc ">
     Reclaims all unused space in the database.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the method is called while the SQLConnection instance
	 isn't connected to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>);
	 or if a transaction is currently in progress (the <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph>
	 property is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the operation fails in synchronous execution mode.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when
     the operation succeeds or fails. In asynchronous execution mode, if the
	 <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> a <codeph class="+ topic/ph pr-d/codeph ">compact</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Reclaims all unused space in the database. When an object (table, index, or trigger) is
     dropped from the database, it leaves behind empty space. This makes the database file
     larger than it needs to be, but can speed up <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> operations.
     Over time, <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> and <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> operations can leave the database
     file structure fragmented, which slows down disk access to the database contents. This
     method compacts the database file, eliminating free pages, aligning table data to be
     contiguous, and otherwise cleaning up the database file structure.
     
     <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> operation can't be performed on an attached database file;
     it can only be performed on the main (original) database file opened by the SQLConnection
     instance. This operation fails if there is an active transaction, and has no effect
     on an in-memory database.</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.data:SQLConnection:compact_compact" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">compact</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:compact_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous execution mode.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous execution mode.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:deanalyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deanalyze</apiName><shortdesc class="- topic/shortdesc ">
     Removes all statistical information created by a call to the
     analyze() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When this method is called while the SQLConnection instance
     isn't connected to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the operation fails in synchronous execution mode.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when
     the operation succeeds or fails. In asynchronous execution mode, if the
	 <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> a <codeph class="+ topic/ph pr-d/codeph ">deanalyze</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Removes all statistical information created by a call to the
     <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> method.
	 
	 <p class="- topic/p ">Because the statistics generated by the <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> method take up space in
	 a database, calling <codeph class="+ topic/ph pr-d/codeph ">deanalyze()</codeph> allows you to reclaim that space, such as
	 after dropping several indices or tables.</p>
     
     <p class="- topic/p ">This operation is not included in an active transaction.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/analyze()" class="- topic/link "><linktext class="- topic/linktext ">analyze()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:deanalyze_deanalyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">deanalyze</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:deanalyze_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous execution mode.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous execution mode.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:detach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">detach</apiName><shortdesc class="- topic/shortdesc ">
     Detaches an additional database previously attached to the SQLConnection instance using
     the attach() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> or contains
     an empty string (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If this method is called while the SQLConnection instance
     isn't connected to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>); or
	 if the SQLConnection instance has an open transaction (the <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph>
	 property is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the operation fails in synchronous execution mode.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The given name of the database to detach.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when
     the operation succeeds or fails. In asynchronous execution mode, if the
	 <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> a <codeph class="+ topic/ph pr-d/codeph ">detach</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Detaches an additional database previously attached to the SQLConnection instance using
     the <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> method. It is possible to have the same database
     attached multiple times using different names, and detaching one
     connection leaves the others intact. A database cannot be detached
     if the connection has an open transaction (if the <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph>
     property is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:detach_detach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">detach</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:detach_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous execution mode.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous execution mode.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:getSchemaResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getSchemaResult</apiName><shortdesc class="- topic/shortdesc ">
     Provides access to the result of a call to the loadSchema() method.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.data:SQLSchemaResult</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Provides access to the result of a call to the <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> method.
	 The <codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> method behaves as a first-in, first-out queue of
	 results. Each time the <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> method call completes (each time the
	 <codeph class="+ topic/ph pr-d/codeph ">schema</codeph> event is dispatched in asynchronous execution mode),
	 a new SQLSchemaResult object is added to the queue.
	 Each time the <codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> method
     is called, the earliest result (the one that was added to the queue first) is returned and removed
	 from the queue. When there are no more objects left in the queue, <codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph>
	 returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     
     <p class="- topic/p ">When the database connection is closed the method returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
     
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">loadSchema()</linktext></link><link href="flash.data.xml#SQLConnection/event:schema" class="- topic/link "><linktext class="- topic/linktext ">schema event</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLConnection:loadSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">loadSchema</apiName><shortdesc class="- topic/shortdesc ">
     Loads schema information from the connected database or any attached databases.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the method is called while the SQLConnection instance
     isn't connected to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the specified <codeph class="+ topic/ph pr-d/codeph ">type</codeph> argument value isn't
	 one of the allowed types.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When using synchronous execution mode, if an invalid value is supplied for the name
	 or database parameters.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Class</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates the type of schema to load. A <codeph class="+ topic/ph pr-d/codeph ">null</codeph> value (the
	 default) indicates that all the schema information should be loaded.
     Specifying a non-<codeph class="+ topic/ph pr-d/codeph ">null</codeph> value for this parameter narrows the scope of the
	 resulting schema, removing potentially unneeded information from the results
	 and making the operation more efficient. The value must be the class name of
	 one of the following classes:
	 <ul class="- topic/ul "><li class="- topic/li ">SQLIndexSchema</li><li class="- topic/li ">SQLTableSchema</li><li class="- topic/li ">SQLTriggerSchema</li><li class="- topic/li ">SQLViewSchema</li></ul>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates which resource's schema is loaded. How this value is
     used depends on the <codeph class="+ topic/ph pr-d/codeph ">type</codeph> argument specified. Typically, this is the name of a database
	 object such as a table name, an index or view name, and so forth. If a value is specified,
	 only schema information for the database object with the specified name is included in the
	 result.
	 
	 <p class="- topic/p ">If the specified value is not valid an <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is
	 dispatched (or an error is thrown in synchronous execution mode). The <codeph class="+ topic/ph pr-d/codeph ">type</codeph> parameter
	 value must correspond to the type of the object named in order for the value to be valid, as described
	 in the method description.</p>
	 
	 <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> then all schemata of the specified
	 type are included. If the value specified is not valid an <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">main</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the database whose schema is loaded. If the value specified
     is not valid an <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">includeColumnSchema</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates whether the result includes schema information for the
	 columns of tables and views.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when
     the operation succeeds or fails. In asynchronous execution mode, if the
	 <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> a <codeph class="+ topic/ph pr-d/codeph ">schema</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Loads schema information from the connected database or any attached databases.
     The schema indicates the structure of the database's tables, columns, indices, and triggers.
	 
     <p class="- topic/p ">To access the loaded schema use the <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.getSchemaResult()</codeph> method.</p>
	 
     <p class="- topic/p ">In asynchronous execution mode, a <codeph class="+ topic/ph pr-d/codeph ">schema</codeph> event is dispatched if the operation
	 is successful, or an <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched if the operation fails.</p>
	 
	 <p class="- topic/p ">The combination of the <codeph class="+ topic/ph pr-d/codeph ">type</codeph> and <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter values determines the
	 type of schema data that's generated by the <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> method and, consequently, the
	 values of the properties of the SQLSchemaResult instance that's generated. The following
	 table lists the valid <codeph class="+ topic/ph pr-d/codeph ">type</codeph> and <codeph class="+ topic/ph pr-d/codeph ">name</codeph> pairs and the schema data that's
	 generated as a result:</p>
	 
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">type</codeph> argument</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> argument</entry><entry class="- topic/entry ">Retrieves schema data for: </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">all objects in the database (all tables, views, triggers, and indices)</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">all indices in the database</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph></entry><entry class="- topic/entry ">valid table name</entry><entry class="- topic/entry ">all indices defined on the specified table</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph></entry><entry class="- topic/entry ">valid index name</entry><entry class="- topic/entry ">the specified index</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTableSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">all tables in the database</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTableSchema</codeph></entry><entry class="- topic/entry ">valid table name</entry><entry class="- topic/entry ">the specified table</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">all triggers in the database</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry ">valid table name</entry><entry class="- topic/entry ">all triggers associated with the specified table</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry ">valid view name</entry><entry class="- topic/entry ">all triggers associated with the specified view </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry ">valid trigger name</entry><entry class="- topic/entry ">the specified trigger </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">all views in the database</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph></entry><entry class="- topic/entry ">valid view name</entry><entry class="- topic/entry ">the specified view </entry></row></tbody></tgroup></adobetable>
	 
	 <p class="- topic/p ">If the combination of <codeph class="+ topic/ph pr-d/codeph ">type</codeph> and <codeph class="+ topic/ph pr-d/codeph ">name</codeph> arguments does not correspond to
	 one of the specified combinations, an <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched in asynchronous
	 execution mode or an exception is thrown in synchronous execution mode.
	 For instance, if the <codeph class="+ topic/ph pr-d/codeph ">type</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph> and the <codeph class="+ topic/ph pr-d/codeph ">name</codeph>
	 argument is the name of a table (rather than the name of a view), an error is raised indicating that
	 the database doesn't contain an object of the specified type with the specified name.</p>
	 
	 
	 <p class="- topic/p ">If the database is empty (it doesn't contain any tables, views, triggers, 
	 or indices), calling the <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> method results in an error.</p>
	 
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">getSchemaResult()</linktext></link><link href="flash.data.xml#SQLConnection/event:schema" class="- topic/link "><linktext class="- topic/linktext ">schema event</linktext></link><link href="flash.data.xml#SQLIndexSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLIndexSchema</linktext></link><link href="flash.data.xml#SQLTableSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTableSchema</linktext></link><link href="flash.data.xml#SQLTriggerSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTriggerSchema</linktext></link><link href="flash.data.xml#SQLViewSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLViewSchema</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:loadSchema_schema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">schema</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:loadSchema_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes with a failure.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes with a failure.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:openAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">openAsync</apiName><shortdesc class="- topic/shortdesc ">
     Opens an asynchronous connection to the database file at the specified location in the file system,
     or creates and opens a new database file at the location, or creates and opens an
     in-memory database.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the SQLConnection instance already has an open connection
     to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the value specified for the <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> parameter is not a
	 flash.filesystem.File instance
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> argument is not <codeph class="+ topic/ph pr-d/codeph ">null</codeph> and 
	 its <codeph class="+ topic/ph pr-d/codeph ">length</codeph> is not 16 bytes
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> and the 
	 <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> argument is not <codeph class="+ topic/ph pr-d/codeph ">null</codeph>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If an invalid <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph> parameter is specified. 
	 This includes passing a page size when the mode is <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph>.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">reference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The location of the database file that is opened. This value must be
     a flash.filesystem.File instance. If the parameter's value is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, an in-memory database
     is created and opened.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">openMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">create</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates how the database is opened. The value can be any of the
	 constants defined in the SQLMode class. The default value is
     <codeph class="+ topic/ph pr-d/codeph ">SQLMode.CREATE</codeph>, indicating that if a database file is not found at the specified
     location, one is created. If <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> is <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> and
     the specified file does not exist then an <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched. This parameter is ignored
     when the <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when the operation succeeds or fails.
     If the <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> an <codeph class="+ topic/ph pr-d/codeph ">open</codeph> or <codeph class="+ topic/ph pr-d/codeph ">error</codeph>
	 event is dispatched when execution completes.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">autoCompact</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates whether unused space in the database is reclaimed automatically.
     This parameter is only valid when creating a new database file or opening a database file in which
     no tables have been created. By default, the space taken up by removed data is left in the database
     file and reused when needed. Setting this parameter to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> causes the database to
     automatically reclaim unused space. This can negatively affect performance because it requires
	 additional processing each time data is written to the database and can also cause the
	 database data to become fragmented over time.
	 To force the database to reclaim unused space in a database file at any time and to
	 defragment the database file, use the <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> method.
	 
	 <p class="- topic/p ">This parameter is ignored when the <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> parameter is <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph>.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pageSize</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1024</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates the page size (in bytes) for the database. This parameter is
	 only valid when creating a new database file or opening a database file in which
     no tables have been created. The value must be a power of two greater than or equal to 
     512 and less than or equal to 32768. The default value is 1024 bytes. This value can only be set
     before any tables are created.  Once the tables are created attempting to change this value
     results in an error. 
     
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">encryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The encryption key for the database file.
	 If the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> call creates a database, the database is encrypted and the 
	 specified key is used as the encryption key for the database. If the call opens an 
	 encrypted database, the value must match the database's encryption key or an error occurs.
	 If the database being opened is not encrypted, the value must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (the 
	 default) or an error occurs.
	 
	 <p class="- topic/p ">A valid encryption key is 16 bytes long. An in-memory database cannot be encrypted, so this 
	 parameter must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> when the <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> parameter's value is 
	 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
	 
	 <p class="- topic/p ">When opening an encrypted database, if the encryption key provided doesn't match the 
	 database's encryption key, a SQLErrorEvent is dispatched. The event object's 
	 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> property contains a SQLError instance. That SQLError object's 
	 <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph> property is 3138 ("File opened is not a database file").</p>
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> parameter is available starting with AIR 1.5.</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Opens an asynchronous connection to the database file at the specified location in the file system,
     or creates and opens a new database file at the location, or creates and opens an
     in-memory database. The operations of creating and opening the database, as well as all other operations
	 that are performed using this SQLConnection instance (including statement execution and other operations
	 performed by a SQLStatement instance associated with this SQLConnection instance) are performed
	 <i class="+ topic/ph hi-d/i ">asynchronously</i> when the database is opened using this method. To perform operations
	 synchronously, open the database connection using the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method instead.
     
	 <p class="- topic/p ">Once a database is connected, use a <xref href="SQLStatement.html" class="- topic/xref ">SQLStatement</xref> instance to execute SQL commands. 
	 Database-level operations such as beginning or ending transactions, loading schema information,
	 and other operations are performed using the SQLConnection instance.</p>
     
     <p class="- topic/p ">A database that is connected using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method is automatically
     assigned the database name "main"; that name can be used to explicitly qualify
     table names in SQL statements using the format <codeph class="+ topic/ph pr-d/codeph ">[database-name].[table-name]</codeph>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.data.xml#SQLMode" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLMode</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:openAsync_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:openAsync_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails. The connection is never left open after a
     failed operation.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
     Opens a synchronous connection to the database file at the specified location in the file system,
     or creates and opens a new database file at the location, or creates and opens an
     in-memory database.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the SQLConnection instance already has an open connection
     to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the operation fails. The connection is never left open after a failed
     operation.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the value specified for the <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> parameter is not a
	 flash.filesystem.File instance
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> argument is not <codeph class="+ topic/ph pr-d/codeph ">null</codeph> and 
	 its <codeph class="+ topic/ph pr-d/codeph ">length</codeph> is not 16 bytes
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> and the 
	 <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> argument is not <codeph class="+ topic/ph pr-d/codeph ">null</codeph>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If an invalid <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph> parameter is specified. 
	 This includes passing a page size when the mode is <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph>.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">reference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The location of the database file that is opened. This value must be
     a flash.filesystem.File instance. If the parameter's value is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, an in-memory database
     is created and opened.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">openMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">create</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates how the database is opened. The value can be any of the
	 constants defined in the SQLMode class. The default value is
     <codeph class="+ topic/ph pr-d/codeph ">SQLMode.CREATE</codeph>, indicating that if a database file is not found at the specified
     location, one is created. If <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> is <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> and
     the specified file does not exist then an error occurs. This parameter is ignored
     when the <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">autoCompact</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates whether unused space in the database is reclaimed automatically.
     This parameter is only valid when creating a new database file or opening a database file in which
     no tables have been created. By default, the space taken up by removed data is left in the database
     file and reused when needed. Setting this parameter to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> causes the database to
     automatically reclaim unused space. This can negatively affect performance because it requires
	 additional processing each time data is written to the database and can also cause the
	 database data to become fragmented over time.
	 At any time you can force the database to reclaim unused space in a database file and
	 defragment the database file using the <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> method.
	 
	 <p class="- topic/p ">This parameter is ignored when the <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> parameter is <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph>.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pageSize</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1024</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates the page size (in bytes) for the database. This parameter is
	 only valid when creating a new database file or opening a database file in which
     no tables have been created. The value must be a power of two greater than or equal to 
     512 and less than or equal to 32768. The default value is 1024 bytes. This value can only be set
     before any tables are created. Once the tables are created attempting to change this value
     results in an error. 
     
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">encryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The encryption key for the database file.
	 If the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> call creates a database, the database is encrypted and the 
	 specified key is used as the encryption key for the database. If the call opens an 
	 encrypted database, the value must match the database's encryption key or an error occurs.
	 If the database being opened is not encrypted, or to create an unencrypted database, 
	 the value must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (the default) or an error occurs.
	 
	 <p class="- topic/p ">A valid encryption key is 16 bytes long. An in-memory database cannot be encrypted, so this 
	 parameter must be <codeph class="+ topic/ph pr-d/codeph ">null</codeph> when the <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> parameter's value is 
	 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
	 
	 <p class="- topic/p ">When opening an encrypted database, if the encryption key provided doesn't match the 
	 database's encryption key, a SQLError exception is thrown. In that case the SQLError object's 
	 <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph> property is 3138 ("File opened is not a database file").</p>
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> parameter is available starting with AIR 1.5.</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Opens a synchronous connection to the database file at the specified location in the file system,
     or creates and opens a new database file at the location, or creates and opens an
     in-memory database. The operations of creating and opening the database, as well as all other operations
	 that are performed using this SQLConnection instance (including statement execution and other operations
	 performed by a SQLStatement instance associated with this SQLConnection instance) are performed
	 <i class="+ topic/ph hi-d/i ">synchronously</i> when the database is opened using this method. To perform operations
	 asynchronously, open the database connection using the <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method instead.
	 
	 <p class="- topic/p ">Once a database is connected, use a <xref href="SQLStatement.html" class="- topic/xref ">SQLStatement</xref> instance to execute SQL commands. 
	 Database-level operations such as beginning or ending transactions, loading schema information,
	 and other operations are performed using the SQLConnection instance.</p>
     
     <p class="- topic/p ">A database that is connected using the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> method is automatically
     assigned the database name "main". That name can be used to explicitly qualify
     table names in SQL statements using the format <codeph class="+ topic/ph pr-d/codeph ">[database-name].[table-name]</codeph>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.data.xml#SQLMode" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLMode</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:open_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:reencrypt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reencrypt</apiName><shortdesc class="- topic/shortdesc ">
	 Changes the encryption key of an encrypted database.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the <codeph class="+ topic/ph pr-d/codeph ">newEncryptionKey</codeph> value is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> or its 
	 <codeph class="+ topic/ph pr-d/codeph ">length</codeph> is not 16 bytes.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the connection is not open, or if there is an open transaction.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the operation fails in synchronous execution mode.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newEncryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A ByteArray containing the new encryption key for the database. A valid 
	 encryption key is 16 bytes long.
	 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when the operation succeeds or fails.
     If the <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> a <codeph class="+ topic/ph pr-d/codeph ">reencrypt</codeph> or 
	 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Changes the encryption key of an encrypted database. This method only affects the encryption 
	 key of the main database (the database that was connected using the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> or 
	 <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method). You can only call <codeph class="+ topic/ph pr-d/codeph ">reencrypt()</codeph> on a database 
	 that was encrypted when it was created. Once a database has been created as an encrypted database, 
	 it cannot be unencrypted. Likewise, a database that is created without encryption cannot be 
	 encrypted later.
	 
	 <p class="- topic/p ">The reencryption operation runs in its own transaction. If the reencryption process 
	 is interrupted, the database rolls back the transaction and the encryption key is not changed.</p> 
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:reencrypt_reencrypt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">reencrypt</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:reencrypt_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails.
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:releaseSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">releaseSavepoint</apiName><shortdesc class="- topic/shortdesc ">
	 This method commits the SQL operations made since the most recent savepoint 
	 or the named savepoint if a name is specified.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">when the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter value is an empty 
	 string (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the method is called while the SQLConnection 
	 instance isn't connected to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is
	 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>); or if no transaction is currently open (the
	 <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the operation fails in synchronous execution mode.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">String The name of the savepoint from which all SQL operations 
	 should be committed. If no value is provided or if this parameter is 
	 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (the default) then the most recent unnamed savepoint (created 
	 by a call to <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> with no <codeph class="+ topic/ph pr-d/codeph ">name</codeph> value) is 
	 used. The <codeph class="+ topic/ph pr-d/codeph ">name</codeph> value cannot be an empty string (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Responder An object that designates methods to be called 
	 when the operation succeeds or fails. In asynchronous execution mode, if the 
	 responder argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> a <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes. 
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 This method commits the SQL operations made since the most recent savepoint 
	 or the named savepoint if a name is specified.
	 
	 <p class="- topic/p ">Note that until the entire transaction is committed, any changes are not 
	 permanently saved to the database. If the transaction is started using the 
	 <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> method, you must call the <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> method 
	 to commit the entire transaction. If the transaction is started by calling 
	 <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> while <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> is 
	 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, you can finish the entire transaction either by calling 
	 the <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> method or by calling <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> 
	 or <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> for the first savepoint of the 
	 transaction.</p>
	 
	 <p class="- topic/p ">If the code calls the <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> method, it permanently discards 
	 all changes in the transaction, regardless of whether <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> 
	 is called before the transaction is rolled back.</p>
	 
	 <p class="- topic/p ">If this method is called with no parameters (or with <codeph class="+ topic/ph pr-d/codeph ">null</codeph> for 
	 the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter), it commits all database changes since the most 
	 recent unnamed savepoint (the most recent savepoint created by calling 
	 <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> with no <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter). For example, 
	 if the <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> method has been called three times, three 
	 savepoints are set. Calling <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> at that point 
	 commits the SQL operations performed since the third (newest) 
	 savepoint.</p>
	 
	 <p class="- topic/p ">If a value is provided for the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter this method commits
	 all the SQL operations performed since the savepoint with the specified name. 
	 If other savepoints have been created more recently than the specified savepoint, 
	 operations performed after those savepoints are committed also.</p>
	 
	 <p class="- topic/p ">Once a savepoint is released or rolled back, that savepoint and any more 
	 recent savepoints are removed. If code executes additional SQL operations after 
	 a <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> call 
	 removes a savepoint, those operations belong to the most recent remaining 
	 savepoint. (In other words, they belong to the savepoint created most recently 
	 before the removed savepoint.) If no savepoint remains, the operations belong 
	 to the main transaction.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:releaseSavepoint_releaseSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">releaseSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:releaseSavepoint_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous 
	 execution mode.
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous 
	 execution mode.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:removeEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeEventListener</apiName><shortdesc class="- topic/shortdesc ">
     
	Removes a listener from the EventDispatcher object.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The type of event.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The listener object to remove.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">Specifies whether the listener was registered for the capture phase or the 
	target and bubbling phases. If the listener was registered for both the capture phase and the
	target and bubbling phases, two calls to <codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph> are required 
	to remove both, one call with <codeph class="+ topic/ph pr-d/codeph ">useCapture()</codeph> set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, and another 
	call with <codeph class="+ topic/ph pr-d/codeph ">useCapture()</codeph> set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
	Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLConnection:rollbackToSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">rollbackToSavepoint</apiName><shortdesc class="- topic/shortdesc ">
	 Rolls back any SQL operations since the most recent savepoint or the named 
	 savepoint if a name is specified.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">when the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter value is an empty 
	 string (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the method is called while the SQLConnection 
	 instance isn't connected to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is
	 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>); or if no transaction is currently open (the
	 <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the operation fails in synchronous execution mode.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">String The name of the savepoint to which the database state should 
	 be rolled back. If no value is provided or if this parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> 
	 (the default) then most recent unnamed savepoint (created by a call to 
	 <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> with no <codeph class="+ topic/ph pr-d/codeph ">name</codeph> value) is used. The 
	 <codeph class="+ topic/ph pr-d/codeph ">name</codeph> value cannot be an empty string (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Responder An object that designates methods to be called when 
	 the operation succeeds or fails. In asynchronous execution mode, if the responder 
	 argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> a <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint</codeph> or 
	 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes. 
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Rolls back any SQL operations since the most recent savepoint or the named 
	 savepoint if a name is specified.
	 
	 <p class="- topic/p ">Note that if the entire transaction is committed by calling the 
	 <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> method, any changes in the transaction that are not 
	 already rolled back using the <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> method are 
	 permanently saved to the database. In addition, calling the <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph>
	 method permanently discards all changes, regardless of whether individual 
	 savepoints have been released (committed) or rolled back before the transaction 
	 is rolled back.</p>
	 
	 <p class="- topic/p ">If this method is called with no parameters (or with <codeph class="+ topic/ph pr-d/codeph ">null</codeph> 
	 for the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter), it rolls back all database changes since 
	 the most recent unnamed savepoint (the most recent call to <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> 
	 with no <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter value).</p>
	 
	 <p class="- topic/p ">If a value is provided for the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter this method 
	 rolls back all the SQL operations performed since the savepoint with the 
	 specified name. If other savepoints have been created more recently than the 
	 specified savepoint, operations performed since those savepoints are rolled 
	 back also.</p>
	 
	 <p class="- topic/p ">Once a savepoint is released or rolled back, that savepoint and any more 
	 recent savepoints are removed. If code executes additional SQL operations after 
	 a <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> call 
	 removes a savepoint, those operations belong to the most recent remaining 
	 savepoint. (In other words, they  belong to the savepoint created most recently 
	 before the removed savepoint.) If no savepoint remains, the 
	 operations belong to the main transaction.</p>
	 
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:rollbackToSavepoint_rollbackToSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollbackToSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes 
	 successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes 
	 successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:rollbackToSavepoint_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous 
	 execution mode.
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous 
	 execution mode.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:rollback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">rollback</apiName><shortdesc class="- topic/shortdesc ">
     Rolls back an existing transaction created using the begin() method, 
	 meaning all changes made by any SQL statements in the transaction are discarded.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the method is called while the SQLConnection 
	 instance isn't connected to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is
	 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>); or if no transaction is currently open (the
	 <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the operation fails in synchronous execution mode.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when
     the operation succeeds or fails. In asynchronous execution mode, if the
	 <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> a <codeph class="+ topic/ph pr-d/codeph ">rollback</codeph>
	 or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Rolls back an existing transaction created using the <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> method, 
	 meaning all changes made by any SQL statements in the transaction are discarded.
     
	 <p class="- topic/p ">Intermediate savepoints can be marked within a transaction by calling the 
	 <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> method. Using savepoints you can commit portions 
	 of a transaction by calling the <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> method, or 
	 roll back portions of a transaction by calling <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph>. 
	 However, calling the <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> method permanently discards all 
	 changes made in a transaction, regardless of whether individual savepoints have 
	 been released (committed) before the transaction is rolled back.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:rollback_rollback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollback</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:rollback_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous 
	 execution mode.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous 
	 execution mode.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:setSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setSavepoint</apiName><shortdesc class="- topic/shortdesc ">
	 Creates a savepoint, which is like a bookmark within a database transaction.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">when the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter value is an empty 
	 string (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the method is called while the SQLConnection 
	 instance isn't connected to a database (the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is
	 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the operation fails in synchronous execution mode.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">String The name for the savepoint. If no value is provided or 
	 if this parameter is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (the default) then the next call 
	 to <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> with 
	 no <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter specified commits or rolls back the SQL operations 
	 performed since the unnamed savepoint.
	 <p class="- topic/p ">If the name provided is a duplicate of a previous named savepoint, the next call
	 to either <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.releaseSavepoint()</codeph> or 
	 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.rollbackToSavepoint()</codeph> commits or rolls back changes 
	 made since the most recent savepoint with that name.</p>
	 <p class="- topic/p "> The <codeph class="+ topic/ph pr-d/codeph ">name</codeph> value cannot be an empty string (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).</p>
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Responder An object that designates methods to be called when 
	 the operation succeeds or fails. In asynchronous execution mode, if the responder 
	 argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> a <codeph class="+ topic/ph pr-d/codeph ">setSavepoint</codeph> or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 
	 event is dispatched when execution completes. 
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Creates a savepoint, which is like a bookmark within a database transaction. 
	 A savepoint represents a point within a transaction. The set of SQL operations 
	 performed between savepoints can be committed or rolled back separately from 
	 other operations using the <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> and 
	 <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> methods. In this way, using a savepoint 
	 allows you to treat a set of SQL operations as a nested transaction.
	 
	 <p class="- topic/p ">When the <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> method is called, if a transaction has 
	 not already been opened (by calling the <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> method), calling 
	 this method begins the transaction and creates a savepoint at the start of the 
	 transaction. If a transaction is already open, calling <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>
	 creates a savepoint within the transaction.</p>
	 
	 <p class="- topic/p ">Note that until the entire transaction is committed, any changes are not 
	 permanently saved to the database. If the transaction is started using the 
	 <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> method, you must call the <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> method 
	 to commit the entire transaction. If the transaction is started by calling 
	 <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> while <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> is 
	 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, you can finish the entire transaction either by calling 
	 the <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> method. The transaction also finishes automatically
	 when you call <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> 
	 for the savepoint that started the transaction.</p>
	 
	 <p class="- topic/p ">You can specify a name for a savepoint by providing a value for the 
	 <codeph class="+ topic/ph pr-d/codeph ">name</codeph> parameter. This allows you to to rollback or commit all 
	 changes made since that specific savepoint. If no name is specified 
	 (the default) then an unnamed savepoint is created.</p>
	 
	 <p class="- topic/p ">Once a savepoint is released or rolled back, that savepoint and any more 
	 recent savepoints are removed. If code executes additional SQL operations 
	 after a <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph>
	 call removes a savepoint, those operations belong to the most recent remaining 
	 savepoint. (In other words, they belong to the savepoint created most recently 
	 before the removed savepoint.) If no savepoint remains, the operations belong 
	 to the main transaction.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:setSavepoint_setSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">setSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation completes successfully.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation completes successfully.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:setSavepoint_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous 
	 execution mode.
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous 
	 execution mode.</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.data:SQLConnection:autoCompact:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">autoCompact</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether autocompacting was enabled when the current database
	 was originally created (the value that was specified for the autoCompact
	 parameter in the open() or openAsync() call that created the
	 database).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether autocompacting was enabled when the current database
	 was originally created (the value that was specified for the <codeph class="+ topic/ph pr-d/codeph ">autoCompact</codeph>
	 parameter in the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> call that created the
	 database). If this property is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, unused space is removed from the database file
	 automatically after each write operation, keeping the database file smaller. If the property
	 is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, the space previously occupied by removed data is left in the database
	 file and reused when needed. Even when <codeph class="+ topic/ph pr-d/codeph ">autoCompact</codeph> is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, you can force the
	 database to reclaim unused space by calling the <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> method.
     
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, this property
	 is set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:cacheSize:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">cacheSize</apiName><shortdesc class="- topic/shortdesc ">
     Provides access to the cache size for this connection, which represents the maximum number
     of database disk pages that are held in memory at one time.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When an attempt is made to set this
     property while the SQLConnection instance isn't connected to a database (the
	 <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>); or if a transaction is currently open (the
	 <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Provides access to the cache size for this connection, which represents the maximum number
     of database disk pages that are held in memory at one time. Each page
     uses about 1.5 KB of memory (depending on the value specified for the <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph>
	 parameter of the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> method call that created the
	 database). The default cache size is 2000. If an application is executing
     <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> or <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> operations that change many rows of a database,
	 increasing the cache size can improve speed at the cost of increased memory consumption.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:columnNameStyle:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">columnNameStyle</apiName><shortdesc class="- topic/shortdesc ">
     Indicates how column names are reported in the
     result of a SELECT statement.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When an attempt is made to set this
     property while the SQLConnection instance isn't connected to a database (the
	 <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates how column names are reported in the
     result of a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement.
     
     <p class="- topic/p ">The constants defined in the SQLColumnNameStyle class
     represent the possible values for this property:</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLColumnNameStyle.LONG</codeph> indicates that
         column names are returned in the format <codeph class="+ topic/ph pr-d/codeph ">[table-name]_[column-name]</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLColumnNameStyle.SHORT</codeph> specifies that column names are given
         the format <codeph class="+ topic/ph pr-d/codeph ">[column-name]</codeph>. If there are multiple columns with the same name,
	     only one property with that name is added to the result object.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLColumnNameStyle.DEFAULT</codeph> is the default value. When
         this value is used, result column names are formatted according to the number of
         tables in the <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement that have similar column names. If the
	     <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement includes only one table, the short name format
	     <codeph class="+ topic/ph pr-d/codeph ">[column-name]</codeph> is used, and if the <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>
         statement includes multiple tables joined together, whenever there is a naming collision
	     because two column names are identical, the long name format
         <codeph class="+ topic/ph pr-d/codeph ">[table-name]_[column-name]</codeph> is used for the identically named columns.</li></ul>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether the SQLConnection instance has an open connection
     to a database file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether the SQLConnection instance has an open connection
     to a database file.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:inTransaction:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">inTransaction</apiName><shortdesc class="- topic/shortdesc ">
	 Indicates whether this connection is currently involved in a transaction.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indicates whether this connection is currently involved in a transaction.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:lastInsertRowID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lastInsertRowID</apiName><shortdesc class="- topic/shortdesc ">
     The last generated row identifier created by a SQL INSERT
	 statement.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The last generated row identifier created by a SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>
	 statement. A row identifier is used to uniquely identify a row in a table within
     the database. The value is frequently generated by the database.
	 
     <p class="- topic/p ">The value is zero if no database is connected or no
	 <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> statement has been executed.</p>
	 
	 <p class="- topic/p ">The row identifier for a single SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> statement execution
	 can be obtained through the <codeph class="+ topic/ph pr-d/codeph ">lastInsertRowID</codeph> property of the SQLResult object
	 returned by the SQLStatement object's <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> method (when called after the
	 SQLStatement dispatches its <codeph class="+ topic/ph pr-d/codeph ">result</codeph> event).</p>
	 
	 <p class="- topic/p ">For more information on primary keys and generated row identifiers,
	 see the "<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_data_en" scope="external" class="- topic/xref ">CREATE TABLE</xref>" and
	 "<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_statements_en" scope="external" class="- topic/xref ">Expressions</xref>" sections in the appendix
	 "<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_en" scope="external" class="- topic/xref ">SQL support in local databases</xref>."</p>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLResult/lastInsertRowID" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLResult.lastInsertRowID</linktext></link><link href="flash.events.xml#SQLUpdateEvent/rowID" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLUpdateEvent.rowID</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:pageSize:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">pageSize</apiName><shortdesc class="- topic/shortdesc ">
     Indicates the database page size (in bytes) that was specified when the current database
	 was originally created (the value that was specified for the pageSize
	 parameter in the open() or openAsync() call that created the
	 database).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates the database page size (in bytes) that was specified when the current database
	 was originally created (the value that was specified for the <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph>
	 parameter in the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> call that created the
	 database).
     
     <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, this property's
     value is 0.</p>
     
	 <p class="- topic/p ">The page size for a database can be changed (using the <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>
	 methods) until the first table is created in the database.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:totalChanges:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">totalChanges</apiName><shortdesc class="- topic/shortdesc ">
     Contains the total number of data changes that have been made since the
	 connection to the database was opened.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Contains the total number of data changes that have been made since the
	 connection to the database was opened. In addition to tracking changes
	 made by <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>, <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>, and <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>
	 statements, this value includes changes caused by triggers.
	 
	 <p class="- topic/p ">When the database connection is closed, the value is
     reset to 0. When the SQLConnection instance isn't connected
	 to a database, the value is 0.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLResult/rowsAffected" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLResult.rowsAffected</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLTriggerSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLTriggerSchema</apiName><shortdesc class="- topic/shortdesc ">
 A SQLTriggerSchema instance provides information describing a specific trigger
 in a database.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A SQLTriggerSchema instance provides information describing a specific trigger
 in a database.
 
 It contains the name of the trigger (the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> property),
 the name of the associated table (the <codeph class="+ topic/ph pr-d/codeph ">table</codeph> property), and the
 SQL statement used to create the trigger (the <codeph class="+ topic/ph pr-d/codeph ">sql</codeph> property).
 
 <p class="- topic/p ">To obtain trigger schema information for a database, use the
 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method to load the schema information, making certain to
 use <codeph class="+ topic/ph pr-d/codeph ">null</codeph> or <codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph> for the <codeph class="+ topic/ph pr-d/codeph ">type</codeph> argument's value.
 In the resulting SQLSchemaResult instance, the <codeph class="+ topic/ph pr-d/codeph ">triggers</codeph> property contains an array
 of SQLTriggerSchema instances representing the triggers in the database.</p>
 
 <p class="- topic/p ">Generally, developer code does not construct SQLTriggerSchema instances directly.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLTriggerSchema:SQLTriggerSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLTriggerSchema</apiName><shortdesc class="- topic/shortdesc ">
     Creates a SQLTriggerSchema instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the associated database.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the trigger.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The SQL used to create the trigger.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">table</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the trigger's associated table.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a SQLTriggerSchema instance.  Generally, developer code does not call the SQLTriggerSchema
     constructor directly. To obtain schema information for a database, call the
	 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLTriggerSchema:table:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">table</apiName><shortdesc class="- topic/shortdesc ">
     The name of the table on which this trigger is defined, or the name of the view if
	 the trigger is defined on a view.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The name of the table on which this trigger is defined, or the name of the view if
	 the trigger is defined on a view.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLStatement" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLStatement</apiName><shortdesc class="- topic/shortdesc ">
 A SQLStatement instance is used to execute a SQL statement against a local SQL database
 that is open through a SQLConnection instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A SQLStatement instance is used to execute a SQL statement against a local SQL database
 that is open through a SQLConnection instance.
 
 <p class="- topic/p ">A SQLStatement instance is linked to a SQLConnection instance by setting the SQLConnection instance as the
 value of the SQLStatement instance's <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> property. The <codeph class="+ topic/ph pr-d/codeph ">text</codeph> property
 is populated with the actual text of the SQL statement to execute. If necessary, SQL statement parameter
 values are specified using the <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> property, and the statement is
 carried out by calling the <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> method.</p>
 
 <p class="- topic/p ">For a complete description of the SQL dialect supported in local SQL databases, see the appendix
 <xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">SQL support in local databases</xref>.</p>
 
 <p class="- topic/p ">In asynchronous execution mode, the <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> and <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> methods are executed
 in the background, and the runtime dispatches events to registered event listeners or to a specified Responder
 instance when the operations complete or fail.
 In synchronous mode, the methods are executed on the main application thread, meaning that no other code executes
 until the database operations are completed. In addition, in synchronous mode if the methods fail the runtime
 throws an exception rather than dispatching an error event.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement_flash.events.SQLErrorEvent.ERROR_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an error occurs during an operation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLErrorEvent.ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an error occurs during an operation.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement_flash.events.SQLEvent.RESULT_result" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">result</apiName><shortdesc class="- topic/shortdesc ">
 Dispatched when an execute() or
 next() method call's operation completes successfully.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.RESULT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Dispatched when an <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> or
 <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> method call's operation completes successfully. Once the
 <codeph class="+ topic/ph pr-d/codeph ">result</codeph> event is dispatched the <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph>
 method can be called to retrieve statement results.
 
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">getResult()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.data:SQLStatement:SQLStatement" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLStatement</apiName><shortdesc class="- topic/shortdesc ">
     Creates a SQLStatement instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the constructor is called from any sandbox outside
     of the main application sandbox. 
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a SQLStatement instance.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.data:SQLStatement:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
     Cancels execution of this statement.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Cancels execution of this statement.  Like <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph>
     this method is used to stop a long running query or to cancel a query that is not
     yet complete. However, unlike <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph> this method only cancels the
     single statement. If the statement is not currently executing, calling this method does
     nothing.
	 
	 <p class="- topic/p ">No events are dispatched in direct response to the completion of the <codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph>
	 operation. However, once the <codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph> operation completes and statement execution
	 is cancelled, the SQLStatement instance dispatches an <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event indicating that
	 the statement execution (the <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> call) did not complete.
	 Alternatively, if a value was specified for the <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> parameter of the
	 <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> call, the specified fault handler method is called.
	 In either case, the SQLError instance that's passed to the listeners has an <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph>
     property with a value of 3118 (Operation aborted).</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLStatement:clearParameters" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clearParameters</apiName><shortdesc class="- topic/shortdesc ">
     Clears all current parameter settings.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Clears all current parameter settings.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/parameters" class="- topic/link "><linktext class="- topic/linktext ">parameters</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLStatement:execute" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">execute</apiName><shortdesc class="- topic/shortdesc ">
     Executes the SQL in the text property against the database that
     is connected to the SQLConnection object in the sqlConnection
     property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the <codeph class="+ topic/ph pr-d/codeph ">text</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>
     or contains an empty string (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>); if the <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> property is
     not set; if the SQLConnection instance assigned to the <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> property is not
     connected; or if the statement is currently executing.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the operation fails in synchronous execution mode.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefetch</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the statement's <codeph class="+ topic/ph pr-d/codeph ">text</codeph> property is a
	 <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement, this value indicates how many rows are
	 returned at one time by the statement.
     The default value is -1, indicating that all the result rows are returned
     at one time. This parameter is used in conjunction with the <codeph class="+ topic/ph pr-d/codeph ">next()</codeph>
     method to divide large result sets into smaller sets of data. This can improve
	 a user's perception of application performance by returning initial results more
	 quickly and dividing result-processing operations.
     
     <p class="- topic/p ">When the SQL statement is a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> query and a <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph>
     argument greater than zero is specified, the statement is considered to be executing
     until the entire result set is returned or either the <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.cancel()</codeph>
     or <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph> method is called. Note that because the number of
	 rows in a result set is unknown at execution time, the database cursor must move beyond
     the last row in the result set before the statement is considered complete. When a
	 <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> argument is specified in an <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> call, at least
	 one row more than the total number of rows in the result set must be requested
	 (either through a <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> value that's larger than the number of rows in the
	 result set, or through subsequent calls to the <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> method) before
	 the resulting SQLResult instance's <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when
     the operation succeeds or fails. In asynchronous execution mode, if the
	 <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>
     a <codeph class="+ topic/ph pr-d/codeph ">result</codeph> or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Executes the SQL in the <codeph class="+ topic/ph pr-d/codeph ">text</codeph> property against the database that
     is connected to the SQLConnection object in the <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph>
     property.
     
	 <p class="- topic/p ">If the <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is not <codeph class="+ topic/ph pr-d/codeph ">null</codeph> the specified
	 Responder object designates methods that are called to handle the results
     of the operation. If the <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, 
	 in asynchronous execution mode a
	 <codeph class="+ topic/ph pr-d/codeph ">result</codeph> event is dispatched if the operation is successful, or an
	 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched if the operation fails.</p>
	 
	 <p class="- topic/p ">To access the results of a statement, such as the result rows of a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>
	 statement or the database generated primary key of an <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> statement, call
	 the <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> method. The results are available immediately after the 
	 statement executes in synchronous mode, and when the <codeph class="+ topic/ph pr-d/codeph ">result</codeph> event
	 is dispatched in asynchronous mode.</p>
     
     <p class="- topic/p ">Every statement must be prepared (compiled) before it can be executed. The first time
	 a SQLStatement instance's <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> method is called, the statement is
	 prepared by the runtime. Once a statement is prepared it does not need to be prepared
	 again unless the <codeph class="+ topic/ph pr-d/codeph ">text</codeph> property changes. Setting one or more parameter values
	 does not require the statement to be prepared again.</p>
	 
     </apiDesc><example conref="examples\SQLStatement.execute.1.as" class="- topic/example "> The following example demonstrates executing a SQLStatement,
 using event listeners to determine when the statement execution completes
 or fails.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.addEventListener(SQLErrorEvent.ERROR, errorHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
    }
}

function errorHandler(event:SQLErrorEvent):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example><example conref="examples\SQLStatement.execute.2.as" class="- topic/example "> The following example demonstrates executing a SQLStatement,
 using a Responder object to indicate which functions are called when the statement 
 execution completes or fails.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var conn:SQLConnection;
var dbStatement:SQLStatement;
var employeeResponder:Responder;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    employeeResponder = new Responder(resultHandler, errorHandler);
    dbStatement.execute(-1, employeeResponder);
}

function resultHandler(result:SQLResult):void
{
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
    }
}

function errorHandler(error:SQLError):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">getResult()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement:execute_result" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">result</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the statement execution completes
     successfully, or when a <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> argument value is specified and a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>
     statement returns one or more rows of data.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the statement execution completes
     successfully, or when a prefetch argument value is specified and a SELECT
     statement returns one or more rows of data.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement:execute_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous execution mode.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous execution mode.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLStatement:getResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getResult</apiName><shortdesc class="- topic/shortdesc ">
     Provides access to a SQLResult object containing the results of the statement
     execution, including any result rows from a SELECT statement, and other
     information about the statement execution for all executed statements.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">A SQLResult object containing the result of a call to the <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph>
     or <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> method.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.data:SQLResult</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Provides access to a SQLResult object containing the results of the statement
     execution, including any result rows from a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement, and other
     information about the statement execution for all executed statements.
     In asynchronous execution mode, the result information is not available until the
	 <codeph class="+ topic/ph pr-d/codeph ">result</codeph> event is dispatched.
     
     <p class="- topic/p ">When a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement is executed, if the <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph>
     method is called with the default <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> argument of -1, the returned
     SQLResult object contains the entire result set of the query.</p>
     
     <p class="- topic/p ">When a <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> argument is specified for an <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">next()</codeph>
     method call, the <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> method behaves as a first-in, first-out queue
     of results. Each time the <codeph class="+ topic/ph pr-d/codeph ">result</codeph> event is dispatched, a new SQLResult object
     is added to the queue. Each time the <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> method is called, the earliest
     SQLResult object (the one that was added to the queue first) is returned and removed
     from the queue. When there are no more SQLResult objects left in the queue, <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph>
     returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
	 
	 <p class="- topic/p ">Note that unless they are removed by calling <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph>,
	 SQLResult objects remain in the queue. For example, if the <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph>
	 method is called multiple times without calling <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph>, the
	 SQLResult objects associated with each <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> call remains in
	 the queue.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link><link href="flash.data.xml#SQLStatement/event:result" class="- topic/link "><linktext class="- topic/linktext ">result event</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLStatement:next" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">next</apiName><shortdesc class="- topic/shortdesc ">
     Retrieves the next portion of a SELECT statement's result set.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the method is called while the statement is not
     currently executing (the <codeph class="+ topic/ph pr-d/codeph ">executing</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">if the operation fails in synchronous execution mode.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefetch</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When the statement's <codeph class="+ topic/ph pr-d/codeph ">text</codeph> property is a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>
     statement, this value indicates how many rows are returned at one time by
     the statement.
     The default value is -1, indicating that all the result rows are returned
     at one time.  This can improve
	 a user's perception of application performance by returning initial results more
	 quickly and dividing result-processing operations.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">An object that designates methods to be called when
     the operation succeeds or fails. If the <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>
     a <codeph class="+ topic/ph pr-d/codeph ">result</codeph> or <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched when execution completes.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Retrieves the next portion of a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement's result set.
     If there are no more rows in the result set, a <codeph class="+ topic/ph pr-d/codeph ">result</codeph> event is dispatched but
     no additional SQLResult object is added to the <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> queue.
     
     <p class="- topic/p ">In asynchronous execution mode, if the <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is not
	 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> the specified
     Responder object indicates the methods that are called to handle the results
     of the operation.
     If the <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> argument is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, a
	 <codeph class="+ topic/ph pr-d/codeph ">result</codeph> event is dispatched if the operation is successful, or an
	 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> event is dispatched if the operation fails.</p>
     
     <p class="- topic/p ">This method can only be called when the statement is still executing.
     When the statement is a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> query and a <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph>
     argument greater than zero is specified, the statement is considered to be executing
     until the entire result set is returned or either the
	 <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.cancel()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph>
     method is called.</p>
     
     </apiDesc><example conref="examples\SQLStatement.next.1.as" class="- topic/example "> The following example demonstrates executing a SQLStatement,
 explicitly indicating that only the first 10 rows of the result set are 
 to be returned the first time the result returns. The code checks the
 <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> property of the SQLResult and, if not all the rows
 have been retrieved, calls the <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> method.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.addEventListener(SQLErrorEvent.ERROR, errorHandler);
    dbStatement.execute(10);
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
        if (!result.complete)
        {
            dbStatement.next(10);
        }
    }
}

function errorHandler(event:SQLErrorEvent):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement:next_result" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">result</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the statement execution completes
     successfully, or when a <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> argument value is specified and the
     <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> call returns one or more rows of data.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the statement execution completes
     successfully, or when a prefetch argument value is specified and the
     next() call returns one or more rows of data.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement:next_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Dispatched when the operation fails in asynchronous execution mode.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Dispatched when the operation fails in asynchronous execution mode.</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.data:SQLStatement:executing:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">executing</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether the statement is currently executing.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether the statement is currently executing.
     
     <p class="- topic/p ">This property is true if <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> has been called and
     not all of the results have been returned from the database.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:itemClass:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">itemClass</apiName><shortdesc class="- topic/shortdesc ">
     Indicates a class (data type) that is used for each
     row returned as a result of the statement's execution.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Class</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates a class (data type) that is used for each
     row returned as a result of the statement's execution.
     
     
     
     <p class="- topic/p ">By default, each row returned by a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement is
     created as an Object instance, with the result set's column names as the
     names of the properties of the object, and the value of each column as the
     value of its associated property.</p>
     
     <p class="- topic/p ">By specifying a class for the <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> property,
     each row returned by a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement executed by this SQLStatement instance
     is created as an instance of the designated class. Each property of the <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> instance is
     assigned the value from the column with the same name as the property.</p>
     
     <p class="- topic/p ">Any class assigned to this property must have a constructor
     that does not require any parameters. In addition, the class must
     have a single property for each column returned by the <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement.
     It is considered an error if a column in the <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> list
     does not have a matching property name in the <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> class.</p>
     
     </apiDesc><example conref="examples\SQLStatement.itemClass.1.as" class="- topic/example "> The following code demonstrates using the <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> property 
 to have the runtime create instances of a custom class from SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement
 results.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Employee class definition
package
{
    public class Employee
    {
        public var name:String;
        public var ssn:String;
        public var id:uint;
        public override function toString():String
        {
            return "id: "+ id.toString() + " name: " + name + " ssn: " + ssn;
        }
    }
}


// using the Employee class as SQLStatement.itemClass
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    dbStatement.itemClass = Employee;
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var emp:Employee;
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            emp = result.data[i];
            trace(emp.toString());
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLResult/data" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLResult.data</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:parameters:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">parameters</apiName><shortdesc class="- topic/shortdesc ">
     Serves as an associative array to which you add values for the
     parameters specified in the SQL statement's
     text property.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Serves as an associative array to which you add values for the
     parameters specified in the SQL statement's
     <codeph class="+ topic/ph pr-d/codeph ">text</codeph> property. The array keys are
     the names of the parameters. If an unnamed parameter is specified
     in the statement text, its key is the index of the parameter.
     
     <p class="- topic/p ">Within the text of a SQL statement, a parameter is indicated with
     one of the following characters: "?", ":", or "@".</p>
     
     <p class="- topic/p ">The ":" and "@" tokens indicate a named parameter; the characters following
     the token designate the name of the parameter.</p>
     
     <p class="- topic/p ">For example, in the following SQL statement, a parameter named <codeph class="+ topic/ph pr-d/codeph ">firstName</codeph>
     is specified using the ":" character:</p>
     
     <pre xml:space="preserve" class="- topic/pre ">SELECT FROM employees WHERE firstName = :firstName</pre>
     
     <p class="- topic/p ">The "?" token indicates an indexed (numbered) parameter; each parameter
     is automatically given an index according to the sequence of parameters
     in the statement text. Parameter index values are zero based. In other words, the first parameter's index is 0.</p>
     
     <p class="- topic/p ">Parameters are used to allow for typed substitution of
     values that are unknown at the time the SQL statement is constructed.
     The use of parameters is the only way to guarantee the storage class for
     a value passed in to the database. When parameters are not used, all values are
	 converted from their text representation to a storage class based on the
     associated column's type affinity. For more information on storage classes and
	 column affinity, see the 
	 "Data type support" section
	 in the appendix
	 "<xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">SQL support in local databases</xref>".</p>
     
     <p class="- topic/p ">Parameters are also used as a security measure to prevent a malicious technique known
     as a SQL injection attack. In a SQL injection attack, a user enters SQL code in a
     user-accessible location (for example, a data entry field). If application code constructs
     a SQL statement by directly concatenating user input into the SQL text, the user-entered
     SQL code is executed against the database. The following listing shows an
     example of concatenating user input into SQL text. <b class="+ topic/ph hi-d/b ">Do not use this
     technique</b>:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql:String =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = '" + username + "' " +
         "    AND password = '" + password + "'";
     var statement:SQLStatement = new SQLStatement();
     statement.text = sql;
     </codeblock>
     
     
     
     <p class="- topic/p ">Using statement parameters instead of concatenating user-entered values into
     a statement's text prevents a SQL injection attack, because the parameter values are
     treated explicitly as substituted values, rather than becoming part of the literal statement
     text. The following is the recommended alternative to the previous listing:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql:String =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = :username " +
         "    AND password = :password";
     var statement:SQLStatement = new SQLStatement();
     statement.text = sql;
     // set parameter values
     statement.parameters[":username"] = username;
     statement.parameters[":password"] = password;
     </codeblock>
     
     
     
     <p class="- topic/p ">All parameter values must be set before
     the statement is executed. Parameter values specified in the <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph>
     array are bound (that is,
     combined with the statement text) when the <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> method is called. Once
     <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> has been called, any
     subsequent changes to the values are not applied to the executing
     statement. However, on a subsequent <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> call the changed
     values are used. If the statement text includes a parameter that doesn't have a value specified
     in the <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> property, an error occurs.</p>
     
     <p class="- topic/p ">To clear all the parameter values from the <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> property,
     use the <codeph class="+ topic/ph pr-d/codeph ">clearParameters()</codeph> method.</p>
     
	 </apiDesc><example conref="examples\SQLStatement.parameters.1.as" class="- topic/example "> The following example shows the use of a named parameter, 
 <codeph class="+ topic/ph pr-d/codeph ">:firstName</codeph>, in a SQL statement.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// employees is a SQLStatement instance
employees.text = "SELECT FROM employees WHERE first = :firstName";
employees.parameters[":firstName"] = "Sam";
employees.execute();
</codeblock></example><example conref="examples\SQLStatement.parameters.2.as" class="- topic/example "> The following example shows the use of an unnamed parameter
 in a SQL statement.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// employees is a SQLStatement instance
employees.text = "SELECT FROM employees WHERE first = ?";
employees.parameters[0] = "Sam";
employees.execute();
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/text" class="- topic/link "><linktext class="- topic/linktext ">text</linktext></link><link href="flash.data.xml#SQLStatement/clearParameters()" class="- topic/link "><linktext class="- topic/linktext ">clearParameters()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:sqlConnection:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sqlConnection</apiName><shortdesc class="- topic/shortdesc ">
     The SQLConnection object that manages the connection to the database or databases on which
     the statement is executed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.data:SQLConnection</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When an attempt is made to change the value
     of this property while the statement is executing.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The SQLConnection object that manages the connection to the database or databases on which
     the statement is executed.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLStatement:text:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">text</apiName><shortdesc class="- topic/shortdesc ">
     The actual SQL text of the statement.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">When an attempt is made to change the <codeph class="+ topic/ph pr-d/codeph ">text</codeph>
     property while the statement is executing.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The actual SQL text of the statement.
	 
     <p class="- topic/p ">The text can be any supported SQL. For a complete description of the
	 SQL dialect supported in local SQL databases, see the appendix
	 "<xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">SQL support in local databases</xref>".</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLMode</apiName><shortdesc class="- topic/shortdesc ">
 This class contains the constants that represent the possible values for the
 openMode parameter of the SQLConnection.open() and 
 SQLConnection.openAsync() methods.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 This class contains the constants that represent the possible values for the
 <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> parameter of the <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.open()</codeph> and 
 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.openAsync()</codeph> methods.
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links><apiValue id="flash.data:SQLMode:CREATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CREATE</apiName><shortdesc class="- topic/shortdesc ">
	 Indicates that the connection is opened for updates, and a database 
	 file is created if the specified file doesn't exist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">create</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indicates that the connection is opened for updates, and a database 
	 file is created if the specified file doesn't exist. In this
	 mode reading and writing are allowed to the database. If the database
	 does not exist one is created before the operation completes.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLMode:READ" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">READ</apiName><shortdesc class="- topic/shortdesc ">
	 Indicates that the connection is opened in read-only mode.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">read</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indicates that the connection is opened in read-only mode. In this
	 mode writes are not allowed to the database. If the database does not 
	 exist the open operation fails.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLMode:UPDATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UPDATE</apiName><shortdesc class="- topic/shortdesc ">
	 Indicates that the connection is opened for updates but a 
	 new database file is not created if the specified file doesn't exist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">update</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indicates that the connection is opened for updates but a 
	 new database file is not created if the specified file doesn't exist. In this
	 mode reading and writing are allowed to the database. If the database
	 does not exist the open operation fails.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:EncryptedLocalStore" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">EncryptedLocalStore</apiName><shortdesc class="- topic/shortdesc ">
	The EncryptedLocalStore class provides a persistent, encrypted data storage mechanism.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	The EncryptedLocalStore class provides a persistent, encrypted data storage mechanism.
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">AIR profile support:</i> This feature is supported 
	 on all desktop operating systems, but is not supported on mobile devices or AIR for TV devices. You can test 
	 for support at run time using the <codeph class="+ topic/ph pr-d/codeph ">EncryptedLocalStore.isSupported</codeph> property. See 
	 <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">
	 AIR Profile Support</xref> for more information regarding API support across multiple profiles.</p>
	 
	 <p class="- topic/p ">AIR provides an encrypted local store (ELS) for each AIR application installed on
	a user's computer. This lets you save and retrieve data that is
	stored on the user’s local hard drive in an encrypted format that
	cannot easily be deciphered by other users. A separate encrypted
	local store is used for each AIR application, and each AIR application
	uses a separate encrypted local store for each user account on the computer. </p>
	
	<p class="- topic/p ">Use the encrypted local store to cache information
	that must be secured, such as login credentials for web services.
	The ELS is appropriate for storing information that must be kept
	private from other users. It does not, however, protect the data
	from other processes run under the same user account. It is thus
	not appropriate for protecting secret application data, such as DRM
	or encryption keys.</p>
	
	<p class="- topic/p ">AIR uses
	DPAPI on Windows, KeyChain on Mac OS, and KeyRing or KWallet on Linux
	to associate the encrypted local store to each application and user.
	The encrypted local store uses AES-CBC 128-bit encryption.</p>
	
	<p class="- topic/p ">Information in the encrypted local store is only available to
	AIR application content in the application security sandbox. </p>
	
	<p class="- topic/p ">If you update an AIR application, the updated version retains
	access to any existing data in the encrypted local store unless:</p>
	
	<ul class="- topic/ul "><li class="- topic/li ">The items were added with the <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> parameter
	set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph></li><li class="- topic/li ">The existing and update versions are both published prior
	to AIR 1.5.3 and the update is signed with a migration signature</li></ul>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">Limitations of the encrypted local store</b></p>
	<p class="- topic/p ">The
	data in the encrypted local store is protected by the user’s operating
	system account credentials. Other entities cannot access the data
	in the store unless they can login as that user. However, the data
	is not secure against access by other applications run by an authenticated
	user. Thus, data that your application
	may want to keep secret from users, such as keys used for licensing
	or digital rights management, is not secure. The ELS is not
	an appropriate location for storing such information. It is only
	an appropriate place for storing a user’s private data, such as
	passwords.</p>
	
	<p class="- topic/p ">Data in the ELS can be lost for a variety of reasons.
	For example, the user could uninstall the application and delete
	the encrypted file. Or, the publisher ID could be changed as a result
	of an update. Thus the ELS should be treated as a private cache,
	not permanent data storage. </p>
	
	<p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> parameter
	is deprecated and should not be set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Setting
	the parameter to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> does not provide any additional
	protection for data. At the same time, access to the data is lost
	whenever the application is updated — even if the publisher ID stays
	the same.</p>
	
	<p class="- topic/p ">The encrypted local store may perform more slowly
	if the stored data exceeds 10MB.</p>
	
	<p class="- topic/p ">When you uninstall an AIR
	application, the uninstaller does not delete data stored in the
	encrypted local store. </p>
	
	<p class="- topic/p ">The best practices for using the ELS
	include:</p>
	
	<ul class="- topic/ul "><li class="- topic/li ">Use the ELS to store sensitive user data
	such as passwords (setting <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>)</li><li class="- topic/li ">Do not use the ELS to store applications secrets such as
	DRM keys or licensing tokens</li><li class="- topic/li ">Provide a way for your application to recreate the data stored
	in the ELS if the ELS data is lost. For example, by prompting the
	user to re-enter their account credentials when necessary.</li><li class="- topic/li ">Do not use the <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> parameter.</li><li class="- topic/li ">If you do set <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>,
	do not migrate stored items during an update. Recreate the data
	after the update instead.</li><li class="- topic/li ">Only store relatively small amounts of data. For large amounts
	of data, use an AIR SQL database with encryption.</li></ul>
	
	<p class="- topic/p ">Items in the encrypted local store are identified with a string. All items are
	stored as byte array data.</p>
	
	<p class="- topic/p ">Encrypted local store data is put in a subdirectory of the user's application data directory; 
	the subdirectory path is Adobe/AIR/ELS/ followed by the application ID.</p>
	
	</apiDesc><example conref="examples\EncryptedLocalStore.1.as" class="- topic/example "> The following code stores a string in the encrypted local store, retrieves it, and then deletes it:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var str:String = "Bob";
var bytes:ByteArray = new ByteArray();
bytes.writeUTFBytes(str);
EncryptedLocalStore.setItem("firstName", bytes);

var storedValue:ByteArray = EncryptedLocalStore.getItem("firstName");
trace(storedValue.readUTFBytes(storedValue.length)); // "Bob"

EncryptedLocalStore.removeItem("firstName");
</codeblock></example></apiClassifierDetail><apiOperation id="flash.data:EncryptedLocalStore:getItem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getItem</apiName><shortdesc class="- topic/shortdesc ">
		The data corresponding to the specified name.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The <codeph class="+ topic/ph pr-d/codeph ">name</codeph> value is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> or an empty string.
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The ByteArray data. If there is no data for the provided <codeph class="+ topic/ph pr-d/codeph ">name</codeph>, 
		the method returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
		
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the item in the encrypted local store.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		The data corresponding to the specified name.
		 
		<p class="- topic/p ">If an item does not exist by the specified name, this method returns <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:removeItem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeItem</apiName><shortdesc class="- topic/shortdesc ">
		Removes the item with the given name from the encrypted local store.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The <codeph class="+ topic/ph pr-d/codeph ">name</codeph> value is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> or an empty string.
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the item in the encrypted local store.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Removes the item with the given name from the encrypted local store.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:reset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reset</apiName><shortdesc class="- topic/shortdesc ">
		Clears the entire encrypted local store, deleting all data.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Clears the entire encrypted local store, deleting all data.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:setItem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setItem</apiName><shortdesc class="- topic/shortdesc ">
		Stores a ByteArray object under the specified name.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The <codeph class="+ topic/ph pr-d/codeph ">name</codeph> value is <codeph class="+ topic/ph pr-d/codeph ">null</codeph> or an empty string.
		
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the item in the encrypted local store.
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The data.
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">stronglyBound</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">(deprecated) The <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> parameter should  
		be set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph> (the default value). If set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, the stored item 
		 cannot be retrieved if any application files are altered. For example,if a user installs an 
		 update of your application, the updated application cannot read any strongly bound data that 
		 was previously written to the encrypted local store.
		 
		</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Stores a ByteArray object under the specified name.
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.data:EncryptedLocalStore:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
        The isSupported property is set to true if the 
        EncryptedLocalStore class is supported on the current platform, otherwise it is
        set to false.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Reports whether the encrypted local store is available on the client system.
        
        </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        The <codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph> property is set to <codeph class="+ topic/ph pr-d/codeph ">true</codeph> if the 
        EncryptedLocalStore class is supported on the current platform, otherwise it is
        set to <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
        
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLIndexSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLIndexSchema</apiName><shortdesc class="- topic/shortdesc ">
 A SQLIndexSchema instance provides information describing a specific index
 in a database.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A SQLIndexSchema instance provides information describing a specific index
 in a database.
 
 The available information includes the name of the associated table
 (the <codeph class="+ topic/ph pr-d/codeph ">table</codeph> property), the
 SQL statement used to create the index (the <codeph class="+ topic/ph pr-d/codeph ">sql</codeph> property), 
 and the name of the index (the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> property).
 
 <p class="- topic/p ">To obtain index schema information for a database, use the
 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method to load the schema information, making certain to
 use <codeph class="+ topic/ph pr-d/codeph ">null</codeph> or <codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph> for the <codeph class="+ topic/ph pr-d/codeph ">type</codeph> argument's value.
 In the resulting SQLSchemaResult instance, the <codeph class="+ topic/ph pr-d/codeph ">indices</codeph> property contains an array
 of SQLIndexSchema instances representing the indices in the database.</p>
 
 <p class="- topic/p ">Generally, developer code does not construct SQLIndexSchema instances directly.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLIndexSchema:SQLIndexSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLIndexSchema</apiName><shortdesc class="- topic/shortdesc ">
     Creates a SQLIndexSchema instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the associated database.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the index.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The SQL statement used to create this index.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">table</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the table to which this index is attached.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a SQLIndexSchema instance. Generally, developer code does not call the SQLIndexSchema
     constructor directly. To obtain schema information for a database, call the
	 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.getSchemaResult()</linktext></link><link href="flash.data.xml#SQLSchemaResult/indices" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLSchemaResult.indices</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLIndexSchema:table:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">table</apiName><shortdesc class="- topic/shortdesc ">
     The name of the table to which this index is attached.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The name of the table to which this index is attached.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLTableSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLTableSchema</apiName><shortdesc class="- topic/shortdesc ">
 A SQLTableSchema instance provides information describing a specific table
 in a database.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 A SQLTableSchema instance provides information describing a specific table
 in a database.
 
 It contains the name of the table (the <codeph class="+ topic/ph pr-d/codeph ">name</codeph> property), the
 SQL statement used to create the table (the <codeph class="+ topic/ph pr-d/codeph ">sql</codeph> property), and
 information about the table's columns (the <codeph class="+ topic/ph pr-d/codeph ">columns</codeph> property).
 
 <p class="- topic/p ">To obtain table schema information for a database, use the
 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method to load the schema information, making certain to
 use <codeph class="+ topic/ph pr-d/codeph ">null</codeph> or <codeph class="+ topic/ph pr-d/codeph ">SQLTableSchema</codeph> for the <codeph class="+ topic/ph pr-d/codeph ">type</codeph> argument's value.
 In the resulting SQLSchemaResult instance, the <codeph class="+ topic/ph pr-d/codeph ">tables</codeph> property contains an array
 of SQLTableSchema instances representing the tables in the database.</p>
 
 <p class="- topic/p ">Generally, developer code does not construct SQLTableSchema instances directly.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLColumnSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLTableSchema:SQLTableSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLTableSchema</apiName><shortdesc class="- topic/shortdesc ">
     Creates a SQLTableSchema instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the associated database.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The name of the table.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The SQL statement used to create the table.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">columns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Array of SQLColumnSchema instances describing this table's columns.
     
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a SQLTableSchema instance. Generally, developer code does not call the SQLTableSchema
     constructor directly. To obtain schema information for a database, call the
	 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> method.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.getSchemaResult()</linktext></link><link href="flash.data.xml#SQLSchemaResult/tables" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLSchemaResult.tables</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLTableSchema:columns:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">columns</apiName><shortdesc class="- topic/shortdesc ">
     An array of SQLColumnSchema instances containing schema information for this table's columns.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     An array of SQLColumnSchema instances containing schema information for this table's columns.
	 If the <codeph class="+ topic/ph pr-d/codeph ">SQlConnection.loadSchema()</codeph> call indicates that column information
     is excluded from the result, the <codeph class="+ topic/ph pr-d/codeph ">columns</codeph> property is an empty array
	 (an array whose <codeph class="+ topic/ph pr-d/codeph ">length</codeph> property is 0).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema</linktext></link><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLResult</apiName><shortdesc class="- topic/shortdesc ">
 The SQLResult class provides access to data returned in response to the execution of a
 SQL statement (a SQLStatement instance).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 The SQLResult class provides access to data returned in response to the execution of a
 SQL statement (a SQLStatement instance).
 
 <p class="- topic/p ">The SQLResult instance for a SQL statement is accessed by calling the
 <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.getResult()</codeph> method or
 as an argument passed to the result handler of a Responder instance specified in a call to
 <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.execute()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.next()</codeph>. Generally, developer
 code does not construct SQLResult instances directly.</p>
 
 <p class="- topic/p ">You use a SQLResult object to access the rows of data returned from a
 <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement (using the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property), to get
 row identifier information for an <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> statement (using the
 <codeph class="+ topic/ph pr-d/codeph ">lastInsertRowID</codeph> property), to determine the number of rows affected
 by an <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>, <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> statement
 (using the <codeph class="+ topic/ph pr-d/codeph ">rowsAffected</codeph> property), or to determine whether there are
 additional <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> result rows that haven't been retrieved (using the
 <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> property).</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.getResult()</linktext></link><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.next()</linktext></link></related-links><apiConstructor id="flash.data:SQLResult:SQLResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLResult</apiName><shortdesc class="- topic/shortdesc ">
     Creates a SQLResult instance.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">The array of rows returned from the execution of a statement. If
     the statement doesn't return any rows this value should be null.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rowsAffected</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates how many rows the executed statement affected.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">complete</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indicates whether there are additional rows that can
     be fetched or whether all data has been returned.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rowID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">If the statement was a SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> operation this is the new
     unique identifier for the row.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Creates a SQLResult instance. Generally, developer code does not call the SQLResult
     constructor directly. To retrieve a SQLResult instance associated with a particular SQLStatement
     instance, call the instance's <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> method. A SQLResult
	 instance is also passed as an argument to the result handler function when
	 a Responder instance is specified for an <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> or <codeph class="+ topic/ph pr-d/codeph ">next()</codeph>
	 method call.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLResult:complete:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
     Indicates whether all the resulting data from a statement execution has been returned.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates whether all the resulting data from a statement execution has been returned.
     
     <p class="- topic/p ">When a statement returns one or more rows this property indicates
     whether all of the rows have been returned. When a SQLStatement object's <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph>
     method is called with a <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> argument value, only the specified number of
     rows of the resulting
     data are returned in the SQLResult object's <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property. Subsequent calls
     to <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.next()</codeph> cause additional data to become available. This property
     is used to determine when the final results have been returned.</p>
     
     <p class="- topic/p ">Note that because the number of rows is unknown at execution time, the database cursor must move beyond
     the last row before a statement's execution is considered complete. When the
	 <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.execute()</codeph> method is called with a <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> argument, at least one
	 row more than the total number of rows in the result set must be requested before
	 the resulting SQLResult instance's <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> property is <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</p>
	 
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.next()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
     The data returned as a result of the statement execution, specifically when
     a SQL SELECT statement is executed.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The data returned as a result of the statement execution, specifically when
     a SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement is executed.
     
     <p class="- topic/p ">When a statement returns one or more rows this property is an array containing objects 
	 that represent the rows of result data. Each object in the array has 
     property names that correspond to the result data set's column names.</p>
	 
	 <p class="- topic/p ">For example, suppose you execute the following SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement:</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT lastName, firstName
	 FROM employees
	 </codeblock>
	 
	 <p class="- topic/p ">Assuming the <codeph class="+ topic/ph pr-d/codeph ">employees</codeph> table contains 10 rows, the 
	 <codeph class="+ topic/ph pr-d/codeph ">SQLResult.data</codeph> property is an Array with 10 elements. Each element 
	 is an object with two properties, <codeph class="+ topic/ph pr-d/codeph ">lastName</codeph> and <codeph class="+ topic/ph pr-d/codeph ">firstName</codeph>.</p>
	 
	 <p class="- topic/p ">The situation is more complex when you are using a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement
	 with a complex result column, such as an aggregate function. For example,
	 suppose you execute the following SQL:</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT departmentId, SUM(salary)
	 FROM employees
	 GROUP BY departmentId
	 </codeblock>
	 
	 <p class="- topic/p ">In the results from this statement, each object in the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> Array has 
	 two properties named <codeph class="+ topic/ph pr-d/codeph ">departmentId</codeph> and <codeph class="+ topic/ph pr-d/codeph ">SUM(salary)</codeph>. However, 
	 "SUM(salary)" is not a valid identifier. If you are using a computed column such as an 
	 aggregate or other function, specify an alias for the computed column in your SQL 
	 statement. The alias is used as the property name in the result data objects. For 
	 example, consider this alternative to the previous statement:</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT departmentId, SUM(salary) AS salarySubtotal
	 FROM employees
	 GROUP BY departmentId
	 </codeblock>
	 
	 <p class="- topic/p ">In this statement's <codeph class="+ topic/ph pr-d/codeph ">data</codeph> array, the result objects have two 
	 properties named <codeph class="+ topic/ph pr-d/codeph ">departmentId</codeph> and <codeph class="+ topic/ph pr-d/codeph ">salarySubtotal</codeph>.</p>
	 
	 <p class="- topic/p ">The <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property is always an Array regardless of how many rows
	 and columns are in the result set. For example, the following <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement
	 results in one row and one column, which is essentially a single value:</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT COUNT(~~) AS numEmployees
	 FROM employees
	 </codeblock>
	 
	 <p class="- topic/p ">After executing the query the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> property contains an Array object
	 with one element. That element is an object with a single property, 
	 <codeph class="+ topic/ph pr-d/codeph ">numEmployees</codeph>.</p>
	 
	 <p class="- topic/p ">If there are duplicate column names in the result data, for example if the 
	 <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement includes an two different <codeph class="+ topic/ph pr-d/codeph ">id</codeph> columns 
	 from two different tables, the duplicate names are given property names according 
	 to the value of the <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.columnNameStyle</codeph> property. By default, 
	 each column's name is used as the property name, but if there is are multiple columns 
	 in the result set with the same name, the long name format 
	 <codeph class="+ topic/ph pr-d/codeph ">[table-name]_[column-name]</codeph> is used for the identically named columns. 
	 This behavior can be changed by setting the <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.columnNameStyle</codeph> 
	 property.</p>
	 
	 <p class="- topic/p ">By default the objects in the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> Array are Object instances. 
	 However, by setting the value of the <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.itemClass</codeph> property 
	 to a class, the <codeph class="+ topic/ph pr-d/codeph ">data</codeph> Array elements are created as instances of 
	 that class instead. For every column in the result data set, the 
	 <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> class must have a property whose name exactly matches the 
	 column name.</p> 
	 
	 <p class="- topic/p ">If a statement does not return any data this property is <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. 
	 This is the case if the statement is not a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement, or if 
	 it is a <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement that returns 0 rows.</p>
     
	 </apiDesc><example conref="examples\SQLStatement.itemClass.1.as" class="- topic/example "> The following code demonstrates using the <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> property 
 to have the runtime create instances of a custom class from SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> statement
 results.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Employee class definition
package
{
    public class Employee
    {
        public var name:String;
        public var ssn:String;
        public var id:uint;
        public override function toString():String
        {
            return "id: "+ id.toString() + " name: " + name + " ssn: " + ssn;
        }
    }
}


// using the Employee class as SQLStatement.itemClass
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    dbStatement.itemClass = Employee;
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var emp:Employee;
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            emp = result.data[i];
            trace(emp.toString());
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">SQLConnection.columnNameStyle</linktext></link><link href="flash.data.xml#SQLStatement/itemClass" class="- topic/link "><linktext class="- topic/linktext ">SQLStatement.itemClass</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:lastInsertRowID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lastInsertRowID</apiName><shortdesc class="- topic/shortdesc ">
     The last generated row identifier generated by a SQL INSERT
	 statement.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     The last generated row identifier generated by a SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>
	 statement.
	 
     <p class="- topic/p ">The value is 0 if the executed statement was not an
	 <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> statement.</p>
	 
	 <p class="- topic/p ">A row identifier is used to uniquely identify a row in a table within
     the database. The value is frequently generated by the database.</p>
	 
	 <p class="- topic/p ">For more information about primary keys and generated row identifiers,
	 see the "CREATE TABLE" and
	 "Expressions" sections in the appendix
	 "<xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">SQL support in local databases</xref>."</p>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/lastInsertRowID" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.lastInsertRowID</linktext></link><link href="flash.events.xml#SQLUpdateEvent/rowID" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLUpdateEvent.rowID</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:rowsAffected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rowsAffected</apiName><shortdesc class="- topic/shortdesc ">
     Indicates how many rows were affected by the operation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indicates how many rows were affected by the operation.
     Only changes that are directly specified by an <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>,
     <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>, or <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> statement are counted.
     
     <p class="- topic/p ">Auxiliary changes caused by triggers are not counted.
     Use the <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.totalChanges</codeph> property to find the total
     number of changes including changes caused by triggers.</p>
	 
	 <p class="- topic/p ">Note that when the related SQL operation is a <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> statement
	 with no <codeph class="+ topic/ph pr-d/codeph ">WHERE</codeph> clause (that is, the statement deletes all the rows in the table),
	 the <codeph class="+ topic/ph pr-d/codeph ">rowsAffected</codeph> property is always 0, regardless of the number of rows
	 that were deleted. If you need to know the number of rows that are deleted, you can
	 include the <codeph class="+ topic/ph pr-d/codeph ">WHERE</codeph> clause <codeph class="+ topic/ph pr-d/codeph ">WHERE 1 = 1</codeph>, in which case all
	 the rows are deleted, and the <codeph class="+ topic/ph pr-d/codeph ">rowsAffected</codeph> property accurately
	 reflects the number of rows that were deleted. However, depending on the number of
	 rows being deleted, doing so may have a negative impact on the statement's performance.</p>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/totalChanges" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.totalChanges</linktext></link></related-links></apiValue></apiClassifier></apiPackage>